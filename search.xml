<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PE学习</title>
      <link href="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/05/30/PE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="0x1-基础概念"><a href="#0x1-基础概念" class="headerlink" title="0x1 基础概念:"></a>0x1 基础概念:</h2><table><thead><tr><th>EXE文件和DLL文件基本上只是语义上的区别, 唯一区别是有一个标识字段指出EXE或DLL, 常见的PE文件格式有:DLL，EXE，OCX，SYS, SCR, CPL, OBJ等</th></tr></thead><tbody><tr><td><strong>64位的PE文件格式, 做了简单的修饰, 叫PE32+/PE+, 32位字段扩展位64字段</strong></td></tr><tr><td><strong>PE格式的定义地方在 <code>winnt.h</code> 头文件中我们能在其中找到PE文件的定义</strong>  <strong><em>如下图VC的路径查找</em></strong>  <a id="more"></a></td></tr><tr><td><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200507103628502-1590826740464.png" alt="image-20200507103628502"></td></tr><tr><td><strong>VA是进程虚拟内存的绝对地址, RVA是相对虚拟地址      RVA+ImageBase = VA</strong></td></tr><tr><td><strong>32位的Windows OS中, 各进程都分配有4GB的虚拟内存, 所以VA范围: 00000000 ~ FFFFFFFF</strong></td></tr></tbody></table><p>PE文件总体框架.</p><p><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200520084527063-1590826622690.png" alt="image-20200520084527063"></p><p>PE文件执行顺序.</p><table><thead><tr><th>1.执行一个PE文件时, PE装载器首先会找DOS头签名(MZ),检查是否有效,  然后是DOS头里的找 e_lfanew(最后一个成员, 指示PE头的), 如果找到, 则直接跳转.</th></tr></thead><tbody><tr><td><strong>2.找到PE头, 开始检查PE头信息属性是否有效, 如果有效, 就跳转到PE头尾部.</strong></td></tr><tr><td><strong>3.紧跟PE头尾部的是节表, PE装载器开始读取节表中记录了每个属性的信息. 平且采用文件映射将这些节映射到内存.    <u>文件映射: 在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存,而是采用与内存映射的机制,也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系,只有真正执行到某个内存页中的指令或者访问某一页中的数据时,这个页面才会被从磁盘提交到物理内存,这种机制使文件装入的速度和文件大小没有太大的关系</u></strong></td></tr><tr><td><strong>4.PE文件映射入内存后, PE装载器继续处理一些逻辑结构, 如输入表的修正.</strong></td></tr></tbody></table><h2 id="0x2-MS-DOS头部及DOS存根"><a href="#0x2-MS-DOS头部及DOS存根" class="headerlink" title="0x2 MS-DOS头部及DOS存根"></a>0x2 MS-DOS头部及DOS存根</h2><table><thead><tr><th>DOS头的作用是兼容MS-DOS操作系统中的可执行文件, 该结构体大小为64字节(0x40)</th></tr></thead><tbody><tr><td><strong>2个重要成员 e_magic(DOS头第一个成员): DOS签名(4D5A -&gt; ASCII值 MZ)    e_lfanew(DOS头最后一个成员): 指示NT头的偏移, 从这里找到PE头(取决于DOS存根大小)</strong></td></tr><tr><td><strong>DOS存根是DOS头与PE文件头中间部分的内容, 为16位的汇编指令组成, 既有代码也有数据, 大小不固定</strong></td></tr><tr><td><strong>我们知道DOS存根的内容是当我们的程序在DOS环境中运行时执行的代码, 也就是给一个提示信息:<code>This is program cannot be run in DOS mode</code>, 那我们是可以随便将其内容修改为自己想填充的东西, 反正不会影响在window os中的运行,  但记住这个大小是不能修改的, 会影响后面指令索引地址跟着出错, 最后程序崩溃(刚开始学习时在一道逆向题中, 就犯了这个错)</strong>      <strong>如下图所示OD程序, 重要字段已标出(DOS存根从0x40 - 0x1FF)</strong></td></tr><tr><td><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200508155307169-1590826775538.png" alt="image-20200508155307169"></td></tr></tbody></table><h2 id="0x3-NT头"><a href="#0x3-NT头" class="headerlink" title="0x3 NT头"></a>0x3 NT头</h2><p><strong>分别介绍3个结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DOWORD Signature; <span class="comment">//PE头的标志 50450000 </span></span><br><span class="line">    IMAGE_FILE_HEADER FileHeader; <span class="comment">//文件头  size: 0xF8  记载文件的大部分属性</span></span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader; <span class="comment">//可选头  very important</span></span><br><span class="line">&#125;IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     WORD    Machine; <span class="comment">//指出该PE文件运行的平台,每个CPU都有唯一的标识码,一般0x14c(x86)</span></span><br><span class="line">     <span class="number">014</span>C</span><br><span class="line">         </span><br><span class="line">     WORD    NumberOfSections; <span class="comment">//指出文件中存在的节区数量 注:这里的定义一定要等于实际</span></span><br><span class="line">     <span class="number">0008</span><span class="comment">//大小, 不然程序会运行失败</span></span><br><span class="line">     </span><br><span class="line">     DWORD   TimeDateStamp;   <span class="comment">//PE文件的创建时间，一般有连接器填写 UTC（世界标准时间）进                    40B10868   //行存储 从1970年1月1日00:00:00算起的秒数值 我们可以用C              //语言的localtime()函数(时区也会转换)计算.</span></span><br><span class="line">     </span><br><span class="line">     DWORD   PointerToSymbolTable; <span class="comment">//指向符号表COFF的指针, 用于调试信息. 发现每次看都是0</span></span><br><span class="line">     <span class="number">00000000</span></span><br><span class="line">     </span><br><span class="line">     DWORD   NumberOfSymbols; <span class="comment">//符号表数量. 发现每次看都是0</span></span><br><span class="line">     <span class="number">00000000</span></span><br><span class="line">     </span><br><span class="line">     WORD    SizeOfOptionalHeader; <span class="comment">//指出PE的IMAGE_OPTIONAL_HEADER32结构体或者         00E0     //PE+格式文件的IMAGE_OPTIONAL_HEADER64结构体的长度      //这两个结构体尺寸是不相同的，所以需要SizeOfOptionalHeader                         //中指明大小32位通常位: E0  64位通常为: F0(不是绝对的)</span></span><br><span class="line">         <span class="comment">//它们只是最小值，可能有更大的值</span></span><br><span class="line">     </span><br><span class="line">     WORD    Characteristics;  <span class="comment">//标识文件的属性, 文件是否可运行, 是否为DLL文件等.</span></span><br><span class="line">     <span class="number">010</span>E        <span class="comment">//二进制中每一位代表不同属性, 以 bit oR形式结合起来</span></span><br><span class="line">         <span class="comment">//2个需要记住的值. 0002h:.exe文件  2000h: .dll文件 </span></span><br><span class="line"> &#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br><span class="line"> </span><br><span class="line"> 下图为OD程序的文件头. 在上面每个成员下面依次标出.</span><br></pre></td></tr></table></figure><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200507203805570-1590826622690.png" alt="image-20200507203805570"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DATA_DIRECTORY</span> //定义了<span class="title">DataDirectory</span>的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DOWORD VirtualAddress; <span class="comment">//该结构体的RVA</span></span><br><span class="line">    DOWORD Size;      <span class="comment">//该结构体的大小</span></span><br><span class="line">&#125;IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>   </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD    Magic; <span class="comment">//这个可选头的类型  PE: 10Bh   PE+: 20Bh  可以依次区分是32位还是64位</span></span><br><span class="line">    <span class="number">010B</span></span><br><span class="line">    </span><br><span class="line">    BYTE    MajorLinkerVersion; <span class="comment">//链接器的版本号(不重要)</span></span><br><span class="line">    <span class="number">05</span></span><br><span class="line">    </span><br><span class="line">    BYTE    MinorLinkerVersion; <span class="comment">//链接器的小版本号(不重要)</span></span><br><span class="line">    <span class="number">00</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfCode; <span class="comment">//代码段的长度</span></span><br><span class="line">    <span class="number">000</span>AF000</span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfInitializedData; <span class="comment">//初始化的数据长度</span></span><br><span class="line">    <span class="number">0008</span>EC00</span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfUninitializedData; <span class="comment">//未初始化的数据长度</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfEntryPoint; <span class="comment">//程序EP的RVA, 指出程序最先执行代码的起始地址 (很重要)</span></span><br><span class="line">    <span class="number">00000100</span></span><br><span class="line">    </span><br><span class="line">    DWORD   BaseOfCode;<span class="comment">//代码段起始地址的RVA</span></span><br><span class="line">    <span class="number">00000100</span></span><br><span class="line">    </span><br><span class="line">    DWORD   BaseOfData;<span class="comment">//数据段起始地址的RVA</span></span><br><span class="line">    <span class="number">000B</span>0000</span><br><span class="line">    </span><br><span class="line">    DWORD   ImageBase; <span class="comment">//VA: 0~FFFFFFFF(32位系统).PE文件加载到虚拟内存时, 指出文件优先装入地址</span></span><br><span class="line">    <span class="number">00400000</span>    <span class="comment">//EXE, DLL文件被装载到0~7FFFFFFF</span></span><br><span class="line">         <span class="comment">//SYS文件载入内核内存的 80000000~FFFFFFFF</span></span><br><span class="line">         <span class="comment">//执行PE文件时,PE装载器会把EIP设置为: ImageBase+AddressOfEntrypoint</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SectionAlignment; <span class="comment">//节在内存中的最小单位 (对齐单位) 一般为: 1000h</span></span><br><span class="line">    <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   FileAlignment; <span class="comment">//节在磁盘文件中的最小单位 (对齐单位) 一般为: 200h</span></span><br><span class="line">    <span class="number">00000200</span>     <span class="comment">//一般SectionAlignment &lt;= FileAlignment,节省储存空间.</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorOperatingSystemVersion; <span class="comment">//操作系统主版本号(不重要)</span></span><br><span class="line">    <span class="number">0004</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorOperatingSystemVersion; <span class="comment">//操作系统小版本号(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorImageVersion; <span class="comment">//映象文件主版本号, 这个是开发者自己指定的，由连接器填写(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorImageVersion; <span class="comment">//映象文件小版本号(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorSubsystemVersion; <span class="comment">//子系统版本号</span></span><br><span class="line">    <span class="number">0004</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorSubsystemVersion; <span class="comment">//子系统小版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Win32VersionValue; <span class="comment">//Win32版本值 目前看过的文件都是 0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfImage;<span class="comment">//指定PE image在虚拟内存中所占空间的大小 SectionAlignment的倍数</span></span><br><span class="line">    <span class="number">00180000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeaders; <span class="comment">//指出整个PE头的大小(FileAlignment整数倍)</span></span><br><span class="line">    <span class="number">00000600</span>   <span class="comment">//它也是从文件的开头到第一节的原始数据的偏移量, 可以找到第一节区</span></span><br><span class="line">    </span><br><span class="line">    DWORD   CheckSum; <span class="comment">//映象文件的校验和 目的是为了防止载入无论如何都会冲突的、已损坏的二进制文件</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    WORD    Subsystem; <span class="comment">//说明映像文件应运行于什么样的NT子系统之上</span></span><br><span class="line">    <span class="number">0002</span>   <span class="comment">//该值用来区分系统驱动文件(*.sys)与普通的可执行文件(*.exe, *.dll)</span></span><br><span class="line">       <span class="comment">//value: 1   含义: Driver文件  tips: 系统驱动(如: ntfs.sys)</span></span><br><span class="line">       <span class="comment">//value: 2   含义: GUI文件  tips: 窗口应用程序(如: notepad.exe)</span></span><br><span class="line">       <span class="comment">//value: 3   含义: CUI文件     tips: 控制台应用程序(如: cmd.exe)</span></span><br><span class="line">    </span><br><span class="line">    WORD    DllCharacteristics; <span class="comment">//DLL的文件属性 如果是DLL文件，何时调用DLL文件的入口点</span></span><br><span class="line">    <span class="number">0000</span>  <span class="comment">//一般的exe文件有以下2个属性:</span></span><br><span class="line">      <span class="comment">//IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE(表示支  //持终端服务器)8000h  IMAGE_DLLCHARACTERISTICS_NX_COMPAT</span></span><br><span class="line">      <span class="comment">//(表示程序采用了)/NXCOMPAT编译100h  (bit or 为 81000)</span></span><br><span class="line">                                <span class="comment">//但是开启了ASLR的程序会多一个</span></span><br><span class="line">      <span class="comment">//IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE(DLL can move)</span></span><br><span class="line">      <span class="comment">//40h的属性  (bit or 后为8140),那可以修改这里关闭ASLR</span></span><br><span class="line">   </span><br><span class="line">    DWORD   SizeOfStackReserve; <span class="comment">//保留栈的大小 默认是1MB</span></span><br><span class="line">    <span class="number">00100000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfStackCommit;  <span class="comment">//初始时指定栈大小 默认是4KB</span></span><br><span class="line">    <span class="number">00020000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeapReserve;  <span class="comment">//保留堆的大小 默认是1MB</span></span><br><span class="line">    <span class="number">01000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeapCommit;   <span class="comment">//指定堆大小 默认是4K</span></span><br><span class="line">    <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   LoaderFlags; <span class="comment">//看到的资料都是保留 value 为 0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfRvaAndSizes; <span class="comment">//数据目录的项数, 即指出了我们下面一个成员数组的个数</span></span><br><span class="line">    <span class="number">00000010</span>   <span class="comment">//虽然宏定义了#defineIMAGE_NUMBEROF_DIRECTORY_ENTRIES16 </span></span><br><span class="line">       <span class="comment">//但是PE装载器会通过此值来识别数组大小,说明数组大小也可能非16</span></span><br><span class="line">    </span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="comment">//很重要</span></span><br><span class="line">    <span class="comment">//数据目录, 重点:  EXPORT</span></span><br><span class="line">    <span class="comment">//IMPORT, RESOURCE, TLS Direction</span></span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200509154933553-1590826622691.png" alt="image-20200509154933553"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class="comment">// 输出表(导入表) (重要)</span></span></span><br><span class="line">RVA:<span class="number">0010F</span>000 Size:<span class="number">000012F</span>A </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class="comment">// 输入表 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class="comment">// 资源目录 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class="comment">// 异常目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class="comment">// 安全目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class="comment">// 基址重定位表 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class="comment">// 调试目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   <span class="comment">// 描述信息(版权信息之类)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    8   <span class="comment">// 架构特定数据</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       9   <span class="comment">// 机器值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS            10   <span class="comment">// 线程级局部存储目录(重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    11   <span class="comment">// 载入配置目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   12   <span class="comment">// 绑定输入目录 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            13   <span class="comment">// 输入地址表</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   14   <span class="comment">// 延迟加载导入描述符</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 15   <span class="comment">// COM运行时描述符</span></span></span><br></pre></td></tr></table></figure><blockquote><p>PE文件中的code(代码), data(数据), resource(资源)等按照属性分类储存在不同的节区, (1)这样分类便于统一和查看  (2)这样可以在一定程度上保护程序的安全性, 因为如果把所有的代码数据放在一起的话, 当我们向数据区写数据时, 若输入超过缓冲区的大小, 那么就有可能会将其下的code(指令)覆盖掉, 造成应用程序崩溃. PE文件就可以把相似属性的的数据保存在一个被称为”节区”的地方, 然后为每个节区设置不同的特性,访问权限等.                                                                              </p></blockquote><h2 id="0x4-节区头"><a href="#0x4-节区头" class="headerlink" title="0x4 节区头"></a>0x4 节区头</h2><p><strong>节区头是由IMAGE_SECTION_HEADER结构体组成的数组, 每个结构体对应一个节区</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME      8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BYTE NAME[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">//节区的名字 8个字节 </span></span><br><span class="line">    <span class="number">2E74657874000000</span><span class="comment">//如果所有的8字节都被用光，该字符串就没有0结束符</span></span><br><span class="line">       <span class="comment">//典型的名称.data .text .bss 形式 (.不是必须)</span></span><br><span class="line">    <span class="comment">//节区名称都和节中的内容不一定相关,节名称没有严格要求</span></span><br><span class="line"> <span class="comment">//前边带有“$”的相同名字的区块在载入时候将会被合并，在     //并，在合并之后的区块中，他们是按照“$”后边的字符的字                            //母顺序进行合并的。每个区块的名称都是唯一的，不能有同                    //名的两个区块</span></span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        DOWORD PhysicalAddress; </span><br><span class="line">        DOWORD VitualSize; <span class="comment">//内存中节区所占大小(实际初始了的数据大小, 未内存对齐)</span></span><br><span class="line">        <span class="number">000</span>AF000</span><br><span class="line">        </span><br><span class="line">    &#125;Misc;</span><br><span class="line">    DWORD VirtualAddress; <span class="comment">//内存中节区的起始地址(RVA). 开始没有值, 由SectionAlignment确定</span></span><br><span class="line"> <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD SizeofRawData; <span class="comment">//磁盘文件中节区所占大小(对齐后的大小)</span></span><br><span class="line">    <span class="number">000</span>AE800</span><br><span class="line">    </span><br><span class="line">    DWORD PointerToRawData; <span class="comment">//磁盘文件中节区的起始位置. 开始没有值, 由FileAlignment确定</span></span><br><span class="line">    <span class="number">00000600</span></span><br><span class="line">    </span><br><span class="line">    DWORD PointerToRelocations; <span class="comment">//重定位指针  下面四个都是用于目标文件的信息</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">        </span><br><span class="line">    DWORD PointerToLinenumbers; <span class="comment">//行数指针</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">        </span><br><span class="line">    WORD NumberOfRelocations; <span class="comment">//重定位数</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD NumberOfLinenumbers; <span class="comment">//行数</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD Characteristics; <span class="comment">//指定节的属性,权限. 由不同的值 bit or 而成 </span></span><br><span class="line">    <span class="number">60000020</span>   <span class="comment">//0x20: 包含代码.           0x40: 包含初始化数据的节</span></span><br><span class="line">       <span class="comment">//0x80: 包含未初始化数据的节  0x20000000: 可执行 (x)</span></span><br><span class="line">       <span class="comment">//0x40000000: 可读 (r)     0x80000000: 可写 (w)</span></span><br><span class="line">&#125;IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>  <strong>下图展示OD程序的各个节, 并将(.txt)节中的各成员值在上面依次标出</strong>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200509170302585-1590826622691.png" alt="image-20200509170302585"></p><blockquote><p>由于每个节区都有内存地址到文件偏移间的映射(RAW-RVA). 我们可以通过节区的VirtualAddress与PointerToRawData来从RVA-&gt;RAW. </p><p>注: 由于VirtualAddress是未对齐的大小,而SizeofRawData是对齐后的大小, 那么 VirtualAddress一般比SizeofRawData小.  但是也有例外, 就是当含有未初始化数据的节(如.bss), 在磁盘中未初始化数据是不占空间的, 但是到了内存, 未初始化的数据是要赋值占空间.</p></blockquote><hr><h2 id="0x5-IMAGE-EXPORT-DIRECTORY-输出表"><a href="#0x5-IMAGE-EXPORT-DIRECTORY-输出表" class="headerlink" title="0x5 IMAGE_EXPORT_DIRECTORY 输出表"></a>0x5 IMAGE_EXPORT_DIRECTORY 输出表</h2><p><strong>一般dll文件才有,DataDirectory[0]记录了RVA及Size.</strong></p><p><strong>用来描述模块（dll）中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中,从      库向其他PE文件提供服务</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics; <span class="comment">//通常为0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   TimeDateStamp; <span class="comment">//创建时间, 不是很有效的值</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorVersion; <span class="comment">//主版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorVersion; <span class="comment">//小版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Name; <span class="comment">//指向以0结尾的ASCII字符串(DLL名称)的RVA</span></span><br><span class="line">    <span class="number">0010F</span>780<span class="comment">//如(user32.dll, kernel32.dll)</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Base; <span class="comment">//基址, 一个输出项的序数就是函数地址数组中的索引值加base.</span></span><br><span class="line">    <span class="number">00000001</span><span class="comment">//base大多时候为1 , 说明第一个输出函数的序数为1</span></span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfFunctions; <span class="comment">//实际Export函数的个数</span></span><br><span class="line">    <span class="number">000000B</span>C</span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfNames; <span class="comment">//Export函数中具名的函数个数(以名称来输出函数的数量)</span></span><br><span class="line">    <span class="number">000000B</span>C</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">//Export函数地址数组(数组个数: NumberOfFunctions)</span></span><br><span class="line">    <span class="number">0010F</span>028</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">//Export函数名称地址数组(数组个数:NumberOfNames)</span></span><br><span class="line">    <span class="number">0010F</span>318</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">//指向函数名名称对应序数输出条目列表的RVA</span></span><br><span class="line">    <span class="number">0010F</span>608<span class="comment">//数组每个名称拥有一个相应的序数(数组个数:NumberOfNames)</span></span><br><span class="line">    </span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><blockquote><p><strong>从导出表中获得函数地址的API为: GetProcAddress()函数. 该API用来引用EAT来获取指定的API的地址.</strong></p><p><strong>注: (1) 导出函数也可能没有名称的, 这时只能通过序数导出 (2) 序数是指定某个输出函数的独一无二的16位数字(2个字节)</strong></p><p>两种导出函数的方法:</p><p><strong>一:按函数名字</strong></p><p>​      <strong>(1)通过AddressOfNames找到函数名称数组.  使用strcmp()函数, 在(RVA)指针数组从索引值0开            始依次与我们要找的函数名称对比,从而找到索引值 index_name</strong></p><p>​      <strong>(2)通过AddressOfNameOrdinals找到存放函数序号的数组, 使用步骤(1)获得的index_name为            索引值找到函数地址的序号(index_address)</strong></p><p>​      <strong>(3)通过AddressOfFunctions找到函数地址数组(EAT), 在EAT中使用步骤(2)获得的index_address            为索引值找到指定函数的RVA</strong></p><p><strong>二:按函数序号</strong></p><p>​      <strong>(1)使用我们函数的序号减去 _IMAGE_EXPORT_DIRECTORY.Base 的值得到函数地址索引值</strong>                                 <strong>index_address.</strong></p><p>​      <strong>(2)通过AddressOfFunctions找到函数地址数组(EAT), 在EAT中使用步骤(1)获得的index_address为</strong>               <strong>索引值找到指定函数的RVA</strong></p></blockquote><p>  <strong>下面依旧用OD程序来看导出表, 并将每个值标在上面每个成员下面,  通过上面IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]介绍,  已经标出导出表的RVA: 0010F000  Size: 000012FA</strong>. 再通过CFF Explorer 工具查看每个节的地址可以计算出输出表的 RAW :  <strong>00CE200</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510143001536-1590826622691.png" alt="image-20200510143001536"></p><p>  1.查看输出表名称(<strong>RVA : 0010F780 -&gt; RAW: 000CE980</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510151725862-1590826622691.png" alt="image-20200510151725862"></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510151945596-1590826622691.png" alt="image-20200510151945596"></p><p>  2.查找函数名称.</p><p>   (1)<strong>AddressOfNames</strong>. (<strong>RVA: 0010F318 -&gt; RAW: 000CE518</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510153257760-1590826622691.png" alt="image-20200510153257760"></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510154247725-1590826622691.png" alt="image-20200510154247725"></p><p>  由(<strong>RVA:0010F78C -&gt; RAW: 000CE98C</strong>):</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510154722496-1590826622691.png" alt="image-20200510154722496"></p><p>  现在已经找到了函数的名称, 下面模拟查看一个指定名称函数的RVA. 假设我们找的是<strong>Addsorteddata.</strong>(即第一个函数), (1)通过strcmp(). 得到它的索引值是0, 记为 index_name.  (2)通过AddressOfNameOrdinals使用index_name找到函数的序数, 通过下图得到序数0, 记为index_address.</p><p>  <strong>AddressOfNameOrdinals</strong>.  (<strong>RVA: 0010F608 -&gt; RAW: 000CE808</strong>):<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510160635396-1590826622691.png" alt="image-20200510160635396"></p><p>  (3)通过AddressOfFunctions函数地址数组(EAT), 使用index_address为索引值得到我们指定函数的RVA.</p><p>   AddressOfFunctions(<strong>RVA: 0010F028 -&gt; RAW: 000CE228</strong>):<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510161225077-1590826622691.png" alt="image-20200510161225077"></p><p>  到此, 得到我们指定输出函数<strong>Addsorteddata.</strong>的RVA: <strong>00054EFC</strong>. 最后通过 OD载入OD看一下.<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510161939914-1590826622691.png" alt="image-20200510161939914"></p><p>  <strong>从这里也说明了, .exe文件也是可能有输出表的</strong></p><hr><h2 id="0x6-IMAGE-IMPORT-DESCRIPTOP-输入表"><a href="#0x6-IMAGE-IMPORT-DESCRIPTOP-输入表" class="headerlink" title="0x6 IMAGE_IMPORT_DESCRIPTOP 输入表"></a>0x6 IMAGE_IMPORT_DESCRIPTOP 输入表</h2><p><strong>记录PE文件要导入那些库文件  DataDirectory[0]记录了RVA及Size.</strong></p><p><strong>首先, 执行一个程序会有很多的函数是公用的,在动态链接库里(动态链接库, .dll文件总是附加在一个要执行的程序中, .dll文件中有说明库EAT的输出表), 如下图, 一个程序加载的部分 .dll文件.</strong><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200518132004979-1590826622691.png" alt="image-20200518132004979"></p><p><strong>我们的输入表记录了需要用到的函数名称, 通过在加载的动态链接库中搜索该函数得到实际的RVA, 再记录到输入表中, 供程序使用.   另外执行一个普通的程序一般需要多个库, 那导入多少库, 就会有多少个输入表结构体. 这就构成了结构体数组且结构体数组最后以 NULL 结束 (即每个导入的 DLL 都会成为数组中的一项).</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD   Characteristics;            <span class="comment">// 由于是一个联合, 如果这是该结构体数组的最后一    // 项, 那使用 Characteristics成员,且值为 0                         //否则使用下面一个成员</span></span><br><span class="line">        </span><br><span class="line">        DWORD   OriginalFirstThunk;         <span class="comment">// INT(import name table)结构体数组的RVA</span></span><br><span class="line">        <span class="comment">// 数组每个成员记录了要使用函数名称与序号</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    </span><br><span class="line">    DWORD   TimeDateStamp;                  <span class="comment">// 映象绑定前，这个值是0，绑定后是导入模块的时间戳</span></span><br><span class="line">    <span class="comment">// 据说可以用来确定输入表是否绑定从而是否需要重定 // 位</span></span><br><span class="line"> </span><br><span class="line">    DWORD   ForwarderChain;                 <span class="comment">// 中转链, 输入函数列表中第一个中转的、32位的索引</span></span><br><span class="line">    <span class="comment">// 如果没有转发链, 值为 -1</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Name;<span class="comment">// DLL文件的名称（0结尾的ASCII码字符串）的32       // 位的RVA, 所以一个导入模块对应一个这样的数组</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    DWORD   FirstThunk;                     <span class="comment">//IAT(import address table)结构体数组的RVA</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的 OriginalFirstThunk(INT), FirstThunk(IAT) 成员在PE文件加载前一般是都同时指向相同地址的 IMAGE_THUNK_DATA 数组.下面是 IMAGE_THUNK_DATA32的定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">union</span> <span class="comment">//一个联合, 所以意味着每次只能使用一个成员</span></span><br><span class="line">    &#123;</span><br><span class="line">        DWORD ForwarderString;      <span class="comment">// 中转链,一个DLL文件能输出不定义在本DLL文件中却需从另一个  // DLL文件中的函数.</span></span><br><span class="line">        </span><br><span class="line">        DWORD Function;             <span class="comment">// 函数的地址</span></span><br><span class="line">        </span><br><span class="line">        DWORD Ordinal;<span class="comment">// 函数的序数. 由于所有成员都是同一个地址, 当最高位为1时表</span></span><br><span class="line">        <span class="comment">// 示列表中没有函数的名字信息, 只能通过本序数查找函数.</span></span><br><span class="line">        <span class="comment">// 用低16位表示的序数, 因为最高位作为标志了.</span></span><br><span class="line">        </span><br><span class="line">        DWORD AddressOfData;        <span class="comment">// 同上, 由于所有成员都是同一个地址, 当最高位为0时, 则使用  // 本成员,用低31为表示 _IMAGE_IMPORT_BY_NAME结构的RVA</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面介绍的 AddressOfData成员的低<span class="number">31</span>就记录指向下面所示的 _IMAGE_IMPORT_BY_NAME 结构体数组的地址(RVA), 数组中每个成员的前<span class="number">2</span>个字节是函数的序数, 后面跟着长度不定的函数名称的字符串.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD Hint;<span class="comment">// 函数的序数(即索引, 与输出表中讲的一样)</span></span><br><span class="line">    BYTE Name[<span class="number">1</span>];<span class="comment">// 函数名称数组,记录函数的名称. 数量未定义即长度不定.</span></span><br><span class="line">&#125;IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p><strong>注: 上面所讲的 OriginalFirstThunk 成员(指针数组)的值是不能改写的, 通过它寻找函数的名称.   而 FirstThunk 成员(指针数组)的值在PE文件在被PE装载器时, PE装载器会通过 OriginalFirstThunk 得到函数的名称或者序数, 然后通过函数名称在加载的.dll文件的输出表中找到函数的实际地址, 然后替换到FirstThunk的一个值.  装载完成后,  FirstThunk 数组就指向向了函数实际的地址.</strong>  另外上面的 <strong>TimeDateStamp</strong> 成员可以用来确定输入表是否绑定从而是否需要重定位, 如果它的值是0, 那么输入列表没有被绑定, 加载器总是要修复输入表.  否则输入被绑定, 但该时间戳的值必须和.dll文件头中 <strong>TimeDateStamp</strong> 的一样, 如果不一样, 仍会修正输入表, 就会进行下面的步骤.</p><blockquote><p>导入函数输入到 IAT 的顺序  </p><p>1.读取 _IMAGE_IMPORT_DESCRIPTOR中的name成员, 获取库名称字符串. 如(user32.dll)</p><p>2.装载相应的库. LoadLibrary(“user32.dll”)</p><p>3.读取_IMAGE_IMPORT_DESCRIPTOR中的 OriginalFirstThunk 成员, 得到 INT地址.</p><p>4.逐一读取 INT中数组的值, 获取相应的 IMAGE_IMPORT_BY_NAME地址(RVA)</p><p>5.使用 IMAGE_IMPORT_BY_NAME的Hint (ordinak/序数)或name项, 获取相应函数的起始地址. </p><p>GetProcAddress(“函数名称”)</p><p>6.读取 IAT 成员, 获得IAT地址.</p><p>7.将上面获得的函数地址输入相应的IAT数组值.</p></blockquote><blockquote><p>8.重复 步骤 4 -7, 直到INT结束.</p></blockquote><p>  <strong>图示一下, INT 与 IAT 关系 (技术太差了.png).</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519174651226-1590826622691.png" alt="image-20200519174651226"></p><p>  <strong>下面实例查看OD程序的输入表.</strong></p><p>  1.首先从PE文件可选头的 DataDirectory[1].VirtualAdress 得到输入表的RVA: <strong>10D000h</strong> 及size: <strong>1c87h</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519150821954-1590826622691.png" alt="image-20200519150821954"></p><p>  2.RVA: <strong>10D000h</strong> -&gt; RAW:  <strong>(10D000-10D000+CC400) = CC400h</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519151445783-1590826622692.png" alt="image-20200519151445783"></p><p>  3.找到输入表. 记录下对应成员的RVA.</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519153011688-1590826622692.png" alt="image-20200519153011688"></p><p>  4.查看该输入表名称: <strong>ADVAPI32,DLL</strong>, RVA: <strong>10D9C8</strong> -&gt; RAW: <strong>(10D9C8-10D000+CC400) = CCDC8</strong> </p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519153843705-1590826622692.png" alt="image-20200519153843705"></p><p>  5.查看 <strong>OriginalFirstThunk( INT )</strong>  RVA:<strong>10D0C8</strong> -&gt; RAW: <strong>(10D0C8-10D000+CC400) = CC4C8</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519155230578-1590826622692.png" alt="image-20200519155230578"></p><p>  6.可以看到第一成员的最高位是 0, 则该值是IMAGE_IMPORT_BY_NAME的RVA.(RVA: <strong>10DA33</strong> -&gt; RAW: <strong>CCE33</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519160556676-1590826622692.png" alt="image-20200519160556676"></p><p>  7.查看 FirstThunk( IAT ) RVA: <strong>10D0E4</strong> -&gt; RAW: <strong>(10D0E4-10D000+CC400) = CC4E4</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519163851829-1590826622692.png" alt="image-20200519163851829"></p><p>  8.从步骤7可以看到, PE装载器装载PE文件之前, INT与IAT各元素同时指向相同的地址.</p><p>  9.再看 TimeDateStamp 成员的值为 0, 那就是输入表被绑定, 如果与该对应 .dll PE文件的文件头的 TimeDateStamp的值相同,  那这个输入表是不需要修正的.</p><p>  10.从上面知道 IAT 的RVA: <strong>10D0E4</strong>.  库名称: <strong>ADVAPI32,DLL</strong>另外使用一个OD载入这个OD程序看看. 可以看到加载该.dll文件文件的RVA是从 <strong>FC0000</strong>开始的,  而查看未被PE装载器装载前的状态, IAT的RVA是 <strong>10D0E4</strong>,所以显然这是需要PE装载器装载时对输入表修正的, 那也可推出他们的 TimeDateStamp 的值是不同的</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519164915615-1590826622692.png" alt="image-20200519164915615"></p><blockquote><p>输入表与输出表联系还是比较大, 结合起来看看清楚很多.</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto</title>
      <link href="/2020/05/29/Crypto/"/>
      <url>/2020/05/29/Crypto/</url>
      
        <content type="html"><![CDATA[<h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><blockquote><p>仿射密码是是加法密码与乘法密码的结合。它一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。加密后字母的大小写不变的。</p></blockquote><ul><li>加密函数：<strong>E(x) = (ax + b) (mod m)</strong>，其中a与m互为质数，这也是能求a逆模的必要条件。</li><li>解密函数：<strong>D(x) = a^-1(x - b)(mod m)</strong>，其中 a^-1为a在Zm群的逆元。</li></ul><blockquote><p>当 a = 1时相当于凯撒密码， 其实整个密码就是凯撒密码那种意思，只是加强版吧。</p><p>对于求逆元可以直接使用python gmpy2库的 invert() 方法。<a id="more"></a></p></blockquote><p>以GKCTF2020中第一道 Crypto 作为练手。</p><p><img src="/2020/05/29/Crypto/image-20200529175847900.png" alt="image-20200529175847900"></p><ul><li><p>首先知道 a = 11，b = 6，m = 26。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"welcylk"</span>:</span><br><span class="line">    flag += chr(((ord(i)<span class="number">-97</span>)<span class="number">-6</span>)*gmpy2.invert(<span class="number">11</span>, <span class="number">26</span>)%<span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">flag = bytes(flag, encoding = <span class="string">"utf-8"</span>) <span class="comment">#将str转化为byte类型。</span></span><br><span class="line">flag = base64.b64encode(flag)<span class="comment">#这里只能使用byte类型。</span></span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure><blockquote><p>python中str与byte区别：</p><p>Python3严格区分文本（str）和二进制数据（Bytes），文本总是Unicode，用str类型，二进制数据则用Bytes类型表示。</p><p>str -&gt; byte：</p><p>s = bytes(s, encoding = “utf-8”)</p><p>s = s.endcode()</p><p>s = s.encode(encoding = “utf-8”)</p><p>byte -&gt; str：</p><p>s = str(s, encoding = “utf-8”)</p><p>s = bytes.decode(s)</p><p>s = s.decode()</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年DASCTF五月线上赛</title>
      <link href="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse:"></a>Reverse:</h2><h3 id="ViQinere"><a href="#ViQinere" class="headerlink" title="ViQinere"></a>ViQinere</h3><ul><li><p>64位elf文件, 载入ida后发现与以往的不同. 很多函数都没显示出来.</p></li><li><p>linux中运行一下, 显示对flag加密, 然后是一些乱码.  后来群里通知, 这个是有靶机的.</p></li><li><p>nc连接一下, 那题目的flag就是存放在本地的, 文件操作取出flag, 经过加密. <img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523203121150.png" alt="image-20200523203121150"></p><a id="more"></a></li><li><p>接着再在ida中看一下, 有几个字符很懵, 后面才发现就是改变输出字符串样式, 这也是为什么linux中运行的时候会有涂鸦与闪动, <img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523204020172.png" alt="image-20200523204020172"></p></li><li><p>然后是被涂鸦的那一段坑了, 显示 <strong>Flag was encrypted by <a href="http://cc.TaQini.space" target="_blank" rel="noopener">http://cc.TaQini.space</a></strong> , 一直以为加密和这个有关,  嗯…后来发现是题目作者给自己打的广告. </p></li><li><p>虽然很多函数不能显示出来, 但也是能猜出来作用. 看看汇编会更清楚. </p></li><li><p>最后找到加密函数 <strong>sub_1249((__int64)byte_4080);</strong>, 这下就好办了.   进去函数可以知道, 大写字母加密为大写字母, 小写字母加密为小写字母, 其他字符不变.<img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523204833774.png" alt="image-20200523204833774"></p></li><li><p>对于逆这个算法, 没有过多的想, 算是直接穷尽的吧(算法太菜).  因为大写字母变大写字母,小写字母变小写字母.</p></li><li><p>上exp: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1209</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt;= <span class="number">97</span> &amp;&amp; a &lt;= <span class="number">122</span>)</span><br><span class="line"><span class="keyword">return</span> a<span class="number">-97</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &gt;= <span class="number">65</span> &amp;&amp; a &lt;= <span class="number">90</span>)</span><br><span class="line"><span class="keyword">return</span> (a<span class="number">-65</span>)^<span class="number">0xFFFFFF80</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v4 = <span class="number">0</span>, j = <span class="number">0</span>, v2 = <span class="number">0</span>, v5 = <span class="number">0</span>, v1 = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">char</span> a[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"TaQini"</span>;</span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">"FQD&#123;GfjuJ5UbLrWjZjpvErXkiAZzlvO0xTa!cwnLLAsy3B0iEvEy&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">122</span>-i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((c[i] &gt;= <span class="number">97</span> &amp;&amp; c[i] &lt;= <span class="number">122</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">97</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v4 = sub_1209(j);</span><br><span class="line">v2 = sub_1209(b[v5 &amp; <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">if</span>(c[i] == a[((v2&amp;<span class="number">0x7F</span>) + v4)%<span class="number">26</span>])</span><br><span class="line">&#123;</span><br><span class="line">c[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">v5++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i] &gt;= <span class="number">65</span> &amp;&amp; c[i] &lt;= <span class="number">90</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">65</span>; j &lt;= <span class="number">90</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v4 = sub_1209(j);</span><br><span class="line">v1 = sub_1209(b[v5 &amp; <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">if</span>(c[i] == a[(v4+(v1 &amp; <span class="number">0x7F</span>) + <span class="number">128</span>)%<span class="number">26</span>] - <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">v5++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后补充一下对改变输出字符串的知识. 也是后面出题师傅 <strong>TaQini</strong> 发的.</p><table><thead><tr><th>\033[0m</th><th>关闭所有属性</th></tr></thead><tbody><tr><td><strong>\033[01m</strong></td><td><strong>设置高亮度</strong></td></tr><tr><td><strong>\033[04m</strong></td><td><strong>下划线</strong></td></tr><tr><td><strong>\033[05m</strong></td><td><strong>闪烁</strong></td></tr><tr><td><strong>\033[07m</strong></td><td><strong>反显</strong></td></tr><tr><td><strong>\033[08m</strong></td><td><strong>消隐</strong></td></tr><tr><td><strong>\033[30m – \033[37m</strong></td><td><strong>设置前景色</strong></td></tr><tr><td><strong>\033[40m – \033[47m</strong></td><td><strong>设置背景色</strong></td></tr><tr><td><strong>\033[nA</strong></td><td><strong>光标上移n行</strong></td></tr><tr><td><strong>\033[nB</strong></td><td><strong>光标下移n行</strong></td></tr><tr><td><strong>\033[nC</strong></td><td><strong>光标右移n行</strong></td></tr><tr><td><strong>\033[nD</strong></td><td><strong>光标左移n</strong></td></tr><tr><td><strong>\033[y;xH</strong></td><td><strong>设置光标位置</strong></td></tr><tr><td><strong>\033[2J</strong></td><td><strong>清屏</strong></td></tr><tr><td><strong>\033[K</strong></td><td><strong>清除从光标到行尾的内容</strong></td></tr><tr><td><strong>\033[s</strong></td><td><strong>保存光标位置</strong></td></tr><tr><td><strong>\033[u</strong></td><td><strong>恢复光标位置</strong></td></tr><tr><td><strong>\033[?25l</strong></td><td><strong>隐藏光标</strong></td></tr><tr><td><strong>\033[?25h</strong></td><td><strong>显示光标</strong></td></tr></tbody></table></li><li><p><strong>总结: 题本来很简单, 主要几次被带入坑. 也是没经验吧.</strong></p></li></ul><hr><h3 id="MiscVm"><a href="#MiscVm" class="headerlink" title="MiscVm"></a>MiscVm</h3><ul><li><p>下载下来, 64位的无壳elf文件和一个操作码文件.  操作码其实题中也有, 这里单独给了方便很多.</p></li><li><p>载入ida. C++逆向类的, 但还好都是很基本的语法. <img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075414831.png" alt="image-20200524075414831"></p></li><li><p>分别进去三个加密函数. 第一个: <strong>sub_19E2((int64)&amp;v13</strong>, (__int64)&amp;v14);很简单,   就是 2个数的值交换.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075631032.png" alt="image-20200524075631032"></p></li><li><p>第二个: <strong>sub_1551((int64)&amp;v14, (int64)&amp;v13);</strong>,  就是按照给定顺序进行简单的值交换.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075954652.png" alt="image-20200524075954652"></p></li><li><p>第三个: <strong>v8 = (unsigned int)sub_EEC(&amp;v14, &amp;v15, 0LL) != 0</strong>,   这个相对于要麻烦一些, 但分析一下, 思路理清, 逆回去就好了.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524083055817.png" alt="image-20200524083055817"></p></li><li><p>exp: C语言写的, 比较冗长. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_4</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line"></span><br><span class="line">j ^= <span class="number">10</span>;</span><br><span class="line">temp = (<span class="number">16</span>*j &gt;&gt; <span class="number">31</span>)&gt;&gt;<span class="number">28</span>;</span><br><span class="line"><span class="keyword">if</span>(a == j + (((temp + <span class="number">16</span>*(*(<span class="keyword">char</span> *)&amp;j))&amp;<span class="number">0xF</span>)-temp))</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">152</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">37</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">66</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">74</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">68</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">123</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">112</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">212</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">79</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">200</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">144</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">111</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">6</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">144</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">59</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">29</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">196</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">62</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">96</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">75</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">208</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">136</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">112</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">76</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">204</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">36</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, e[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">100</span>] = &#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">36</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">36</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">31</span>,<span class="number">25</span>,<span class="number">14</span>,<span class="number">23</span>,<span class="number">33</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">24</span>,<span class="number">6</span>,<span class="number">26</span>,<span class="number">34</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">21</span>,<span class="number">36</span>,<span class="number">20</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">30</span>,<span class="number">35</span>,<span class="number">37</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">7</span>,<span class="number">35</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">27</span>,<span class="number">18</span>,<span class="number">25</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">28</span>,<span class="number">26</span>,<span class="number">36</span>,<span class="number">33</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">6</span>,<span class="number">37</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">-87</span>)</span><br><span class="line"><span class="keyword">switch</span>(a1[<span class="number">87</span>+i])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">A.a[j] = (A.a[j] / <span class="number">16</span>)*<span class="number">2</span>;</span><br><span class="line">A.a[j] = A.a[j];</span><br><span class="line">A.a[j] /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">A.a[j] -= <span class="number">128</span>;</span><br><span class="line">A.a[j] = A.a[j]*j;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">A.a[++j] /= <span class="number">10</span>;</span><br><span class="line">--i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">A.a[j] = decode_4(A.a[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">A.a[j] = A.a[j];</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">A.a[j--] *= <span class="number">10</span>;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">A.a[j] -= <span class="number">128</span>;</span><br><span class="line">A.a[j] = ~A.a[j];</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">--i;</span><br><span class="line">--j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">A.a[j] /= <span class="number">4</span>;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d[c[i]<span class="number">-1</span>] = A.a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">e[b[i]<span class="number">-1</span>] = d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">4</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = e[i];</span><br><span class="line">e[i] = e[i+<span class="number">16</span>];</span><br><span class="line">e[i+<span class="number">16</span>] = temp;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, e[i]); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524083340342.png" alt="image-20200524083340342"></p></li><li><p><strong>总结: 被算法完胜</strong>.</p></li></ul><hr><h3 id="BScript"><a href="#BScript" class="headerlink" title="BScript"></a>BScript</h3><ul><li><p>感觉有点意思.  主要就是考对文件内容的提取, 还有就是找规律!!!</p></li><li><p>下载下来803个exe文件.  随便打开一个看见简单的输入对比, 再打开一个还是同样的.但没有发现与解题相关的东西.</p></li><li><p>也是后面想着再去看看这个题才发现 每个exe文件让我们输入的都是一个PE文件的一部分, 那 熟悉的 MZ(4D5A)啊.<img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524100310951.png" alt="image-20200524100310951"></p></li><li><p>接下来就是去文件内容了. 但是每个程序都是加了upx壳的, 嗯嗯..因为不会写脚本开始还想想着手动去搞, 被803个程序劝退.</p></li><li><p>然后用C语言写了一个一个.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">83</span>; i &lt; <span class="number">804</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(a, <span class="string">"upx -d %d.exe"</span>, i);</span><br><span class="line">system(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524102949962.png" alt="image-20200524102949962"></p></li><li><p>下面提取每个程序的 PE文件那部分的内容. 可是搞完, 保存为exe文件后, 打不开…ida都不行, 看看了PE文件内容发现区段都没有…….</p></li><li><p>那就提取的内容有问题, 多看了几个原来的exe文件, 发现果然不一样, 有的提取内容的位置不一样. 但803个exe让我怎么找…</p></li><li><p>开始找规律. 列举了很多还是没发现. 这也是本题花费时间最多的地方……..根据exe文件的字节大小来区分…改了一下提取内容的程序.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">779</span>, j = <span class="number">0</span>, lenth = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">4000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> filename[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(filename, <span class="string">"%d.exe"</span>, j++);</span><br><span class="line">fp = fopen(filename, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">lenth = ftell(fp);</span><br><span class="line"><span class="keyword">if</span>(lenth == <span class="number">0xBDF1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fseek(fp, <span class="number">0x1c20</span>, <span class="number">0</span>);</span><br><span class="line">fread(a, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fseek(fp, <span class="number">0x1C40</span>, <span class="number">0</span>);</span><br><span class="line">fread(a, <span class="number">1</span>, <span class="number">0x40</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>仍然打不开, 但是这次区段都是齐的, ida可以打开就好了. </p></li><li><p>载入ida, 发现有很多干扰项, 但可以在比较函数上面一个看出是 base64加密. 最后与密文比较.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524101529508.png" alt="image-20200524101529508"></p></li><li><p>找密文. 可以发现是程序运行才赋值的.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524101634787.png" alt="image-20200524101634787"></p></li><li><p>提取出来base解密一下, 再md5得到flag. <strong>e801bcbcc42d3120d910ccc46ae640dd</strong></p></li><li><p>总结: 算是熟悉了文件操作吧.哈</p></li></ul><hr><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="bbcrypto"><a href="#bbcrypto" class="headerlink" title="bbcrypto"></a>bbcrypto</h3><ul><li><p>由于python接触的很少，做了一个密码学的感觉像是在学python。不断查语法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> A,SALT</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, a, si)</span>:</span></span><br><span class="line"></span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line"></span><br><span class="line">        c+=hex(((ord(m[i])) * a + ord(next(si))) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>)  <span class="comment">#不足2位以0填充。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    m = <span class="string">'flag&#123;********************************&#125;'</span></span><br><span class="line"></span><br><span class="line">    a = A</span><br><span class="line"></span><br><span class="line">    salt = SALT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(len(salt)==<span class="number">3</span>) <span class="comment">#assert相当于一个判断表达式，若括号中表达式不成立则退出。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(salt.isalpha()) <span class="comment">#检查是否是字母</span></span><br><span class="line"></span><br><span class="line">    si = cycle(salt.lower()) <span class="comment">#cycle把字符串salt变成一个循环，相当于 si[i++%3];</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"明文内容为："</span>)</span><br><span class="line"></span><br><span class="line">    print(m)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"加密后的密文为："</span>)</span><br><span class="line"></span><br><span class="line">    c=encrypt(m, a, si)</span><br><span class="line"></span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#加密后的密文为：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d</span></span><br></pre></td></tr></table></figure></li><li><p>从题中可以看到，A与salt未知，但是salt给出了限制，必须字母且3位。</p></li><li><p>又知道flag的格式 <strong>flag{ }</strong>，那结合密文与加密表达式，直接列方程加爆破解出未知量即可。</p></li><li><p>记得当时解出 A  = 57. si = “ahh”. 开始解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, lenth = <span class="built_in">strlen</span>(a), sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>] = &#123;<span class="number">97</span>, <span class="number">104</span>, <span class="number">104</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">97</span> &amp;&amp; a[i] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">48</span>; </span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i+<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b[j++] = sum, sum = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">38</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">33</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i*<span class="number">57</span> + c[j%<span class="number">3</span>])%<span class="number">128</span> == b[j])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, i); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>flag: flag{ad7d973ffdd285b476a1a727b3a8fbc4}</strong></p></li></ul><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Questionaire"><a href="#Questionaire" class="headerlink" title="Questionaire"></a>Questionaire</h3><ul><li>开始网站始终打不开，因为没接触过web，始终认为是考web的知识。</li><li>后面想着挂vpn试试。打开了，很多刁难性问题，直接查看网页源代码，找到对应答案即可。</li></ul><h3 id="bin-cat-2"><a href="#bin-cat-2" class="headerlink" title="/bin/cat 2"></a>/bin/cat 2</h3><ul><li>得到一张 gif 图片， 还是老办法放在 stegesolve 工具中看看。</li><li>开始看了好几圈也没看出什么名堂，也是很久了，在red plane的页面发现很像一个二维码，带着试一试用工具截取了下来。</li><li>使用 PsQREdit 2.4.3 真的得到了 flag.  具体题没有保留下来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF线上 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界(4)</title>
      <link href="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/"/>
      <url>/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/</url>
      
        <content type="html"><![CDATA[<h2 id="asong"><a href="#asong" class="headerlink" title="asong"></a>asong</h2><blockquote><p>算是小白第一次接触逆向真正算法的题吧. 吃了算法的亏, 逆向这个算法想了半天😅</p></blockquote><h3 id="0x1分析"><a href="#0x1分析" class="headerlink" title="0x1分析"></a>0x1分析</h3><ul><li><p>下载下来三个文件, 但这不是我以前遇到的那种同一个题给不同的版本.</p></li><li><p>依次看了下, 一个64位elf文件无壳, 2个文本文件.  打开文本文件后,没有头绪.  将elf文件载入ida.</p></li><li><p>整个流程开始看不清楚做什么, 多看几次明白了. 先输入字符串, 打开一个that_girl文件读信息, 最后向out文件写信息. 但这怎么和flag联系起来呢.  其实那个out文件里的就是密文, 我们找到逆向算法, 通过密文求出明文(即我们的输入, 也是flag) <a id="more"></a></p></li><li><p>下面具体分析每个函数. 第一函数: <strong>sub_400B4C</strong> 由于很简单, 直接给出函数功能.</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515112040201.png" alt="image-20200515112040201"></p></li><li><p><strong>sub_400B4C</strong>: 先判断, 再取 { } 之间的内容.</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515112333168.png" alt="image-20200515112333168"></p></li><li><p>下面下一个函数, 也是我遇到的难点开始:  <strong>v4哪里来的及 ++*(_DWORD *)(4LL * v2 + v4);语句的作用</strong></p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515113837252.png" alt="image-20200515113837252"></p><p><strong>sub_400936(&amp;buf)</strong>:</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515170301682.png" alt="image-20200515170301682"></p></li><li><p>第一次遇到, 没有经验, 后来才想到通过汇编的查看, v4即是我们传了参数 a2(也就是主函数的v3), 这是通过寄存器传递. 64位与32位程序的区别吧. 但该语句功能还不是很清楚.<img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515114501031.png" alt="image-20200515114501031"></p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515114755333.png" alt="image-20200515114755333"></p></li><li><p>继续看下一个函数<strong>sub_400E54</strong>:  看到这里, 就很清晰了,  就是先通过统计<strong>that_girl</strong>文件中每个字符出现的次数, 然后按照一定的顺序输入字符, 把每个字符出现的次数按一定顺序给下面的 v5 数组赋值.<strong>那所以sub_400936转换字符函数我们是不用管的.</strong></p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515115440782.png" alt="image-20200515115440782"></p></li><li><p>下面是2个加密函数,  我算法太菜, 逆算法想半天😅, 首先<strong>sub_400D33((unsigned __int8 *)v5);</strong></p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515120938171.png" alt="image-20200515120938171"></p></li><li><p>然后 <strong>sub_400DB4(v5, v4);</strong> 解释起来有点抽象……注意是一个字节, 所以多出的位要舍弃<img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515125253662.png" alt="image-20200515125253662"></p></li><li><p>举个例子:<img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515134001272.png" alt="image-20200515134001272"></p></li><li><p>最后一个函数: <strong>sub_400CC0((__int64)v5, “out”, v4);</strong>将加密后的值写入 out文件. </p></li></ul><h3 id="0x2逆向解密"><a href="#0x2逆向解密" class="headerlink" title="0x2逆向解密"></a>0x2逆向解密</h3><ul><li><p>直接exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida[<span class="number">152</span>];</span><br><span class="line"><span class="keyword">int</span> change[<span class="number">38</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">22</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">24</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">21</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">17</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">23</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">14</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">19</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">11</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">25</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">36</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">33</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>, lenth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, c[<span class="number">2000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count[<span class="number">127</span>] = &#123;<span class="number">0</span>&#125;, change_[<span class="number">38</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"out"</span>, <span class="string">"rb"</span>);<span class="comment">//先从文件读取密文</span></span><br><span class="line">lenth = fread(b, <span class="number">1</span>, <span class="number">100</span>, fp);<span class="comment">//返回读取成功个数, 确定字符个数</span></span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第一层解密</span></span><br><span class="line">temp = b[lenth<span class="number">-1</span>]&amp;<span class="number">7</span>;    <span class="comment">//&amp;7  取后三位数据.</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">&#123;<span class="comment">//从整体来看就是将整个数据右移动3位</span></span><br><span class="line">a[i] = (b[i] &gt;&gt; <span class="number">3</span>) | (temp &lt;&lt; <span class="number">5</span>);</span><br><span class="line">temp = b[i]&amp;<span class="number">7</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"that_girl"</span>, <span class="string">"rb"</span>); <span class="comment">//打开that_girl, 统计字符数.</span></span><br><span class="line">fread(c, <span class="number">1</span>, <span class="number">1742</span>, fp);</span><br><span class="line">fclose(fp); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i] &gt;= <span class="number">65</span> &amp;&amp; c[i] &lt;= <span class="number">90</span>)  </span><br><span class="line">c[i] += <span class="number">32</span>;<span class="comment">//因为不区分大小写, 都转换为小写</span></span><br><span class="line"></span><br><span class="line">count[c[i]]++; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(A.change[i]) </span><br><span class="line">&#123;</span><br><span class="line">change_[j++] = A.change[i];  <span class="comment">//统计每个字符出现次数</span></span><br><span class="line">i = A.change[i];  </span><br><span class="line">&#125;</span><br><span class="line">j -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">temp = a[<span class="number">0</span>], a[<span class="number">0</span>] = a[change_[j]];   <span class="comment">//第二层解密</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth<span class="number">-2</span>; i++) <span class="comment">//按照给定赋值找到一个未变的值, 倒序赋值回去即可</span></span><br><span class="line">&#123;</span><br><span class="line">a[change_[j]] = a[change_[--j]];</span><br><span class="line">&#125;</span><br><span class="line">a[change_[j]] = temp; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++) <span class="comment">//第三层解密, 比对每个字符出现的次数的顺序,进而确定输入顺序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == count[j])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"QCTF&#123;%s&#125;"</span>, flag);   <span class="comment">//得到flag.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515135919513.png" alt="image-20200515135919513"></p></li><li><p><strong>总结: (1)算法还是太重要. 算法稍微好点的话, 这道题就轻松很多.  (2)注意64位程序的传递参数的方式</strong></p><p>​          <strong>(3)要习惯看汇编代码</strong></p></li></ul><hr><h2 id="easyre-153"><a href="#easyre-153" class="headerlink" title="easyre-153"></a>easyre-153</h2><blockquote><p>题其实很简单,  但差点做到自闭… 其实能猜到flag怎么算出来, 但对程序的执行想不明白.</p></blockquote><ul><li><p>32位elf文件加了upx壳, 没有修改过的, 直接upx -d脱壳成功.<img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515184107394.png" alt="image-20200515184107394"></p></li><li><p>ida打开, 找到主函数. 一开始就认为直接动跳控制函数的走向, 到最后一个 <strong>lol</strong> 函数得到flag. 但是动态总是在read函数卡住, 走不了, 但这里我们并不能直接跳,因为这个函数是向<strong>buf</strong>写内容, 我们最后的flag是要使用buf的内容. 然后又转 GDB 调试, 同然的结果.    纳闷这题了, 它到底是要做什么. 其实猜也是把上面 write的那部分数据作为 buf 的内容, 然后在lol函数得到 flag.  但问题是 程序到底在搞什么…..</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515185409497.png" alt="image-20200515185409497"></p></li><li><p>真的做到自闭, 后来才发现我忽略上面的 pipe()函数与fork()函数. 第一次见到, 百度了下, 明白了…….</p><blockquote><p>首先是管道: 1.其本质是一个伪文件(实为内核缓冲区)</p><p>​                     2.由两个文件描述符引用，一个表示读端，一个表示写端。</p><p>​                     3.规定数据从管道的写端流入管道，从读端流出</p><p>pipe()函数用于创建管道: 1.int pipe(int pipefd[2]); 成功：0；失败：-1，设置errno</p><p>​                                           2.函数调用成功返回r/w两个文件描述符。无需open，但需手动close</p><p>​                                           3.规定：fd[0] → r； fd[1] → w，就像0对应标准输入，1对应标准输出一样。</p><p>​                                           4.向管道文件读写数据其实是在读写内核缓冲区</p><p><strong>这里就是通过pipedes[1]写进内容,  从pipedes[0]写出.</strong>                    </p></blockquote><blockquote><p>然后fork()函数. 1.fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，</p><p>​                            也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程                            也可以做不同的事</p><p>​                           2.一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空                           间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程值                           不同。相当于克隆了一个自己</p><p>​                           3.调用fork函数一次, 返回2次值, 若返回0则是子进程, 若是一个数则是父进程的进程号.</p><p><strong>所以这里就是先创建一个子进程,返回值v5 == 0, 进入子进程完成写入数据后结束进程, fork()返回新的值父进程进程号,然后执行后面的操作.</strong>        </p></blockquote></li><li><p>这里动态调试这种创建进程的程序是不通畅的. 那就通过修改程序 EIP, 按照本来要执行的顺序执行一遍得到flag.(注意这样可能会有一个问题: 栈不平衡, 因为函数没有正常返回, 那会影响一些函数, 比如scanf()函数执行到了, 不会让我们输入, 而是直接跳过, 这就是堆栈有值它就直接读取了)</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200515193103677.png" alt="image-20200515193103677"></p></li><li><p><strong>总结:(1)对于盲区的知识, 搞起来还是麻烦, 积累. (2)熟悉了修改 EIP.</strong> </p></li></ul><hr><h2 id="76号公路"><a href="#76号公路" class="headerlink" title="76号公路"></a>76号公路</h2><ul><li>题目看似很难的样子, 但自己确实被题目的信息误导了.</li><li>下载后, 2个文本一个32位无壳elf文件, 并且题目信息就给了 <strong>我们认为有份确切的文档记录了每个区域的功能，请协助找出</strong> 这个提示, 所以自己做题时始终想到怎么和文本联系起来, 找线索. 但其实不然</li><li>载入ida后, 搜索了下字符串, 找到了主函数, 但是不能转化为伪代码,  因为之前了解过点花指令,其中  <strong>E0</strong> 总是干扰代码的. 改为 <strong>90</strong> nop掉就可以了. </li><li>这里同样. 改完后, 开始读汇编代码, 逻辑很简单, 就是提示, 让我们输入字符, 进去一个函数判断.<img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200521123259003.png" alt="image-20200521123259003"></li><li>进去判断函数, 可以查看伪代码的. 分析一下就知道是跟着一条线按照顺序检索我们输入的字符串. 但是怎么找顺序呢, 因为文本文件还没用, 我就始终认为在文本文件找, 找了半天…….无果</li><li>最后回到程序发现, 可以找到入口点, 顺藤摸瓜的就可以找到了啊. 可以知道从索引 <strong>v2</strong> 从0开始, 直接从这里出发就好了. 直到正确退出循环.<img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200521123808376.png" alt="image-20200521123808376"></li><li>最后得到flag: <strong>flag{09vdf7wefijbk}</strong>.</li><li><strong>总结: (1)不要让题目把自己的思路带偏了, 思维要发散一些.</strong>  </li></ul><hr><h2 id="reverse-box"><a href="#reverse-box" class="headerlink" title="reverse-box"></a>reverse-box</h2><ul><li><p>题目下载下来，弄半天始终觉得有问题。百度发现题目少给了输出字符串。</p></li><li><p>开始再次看题，被自己坑惨了。。。因为生成数据表的函数中自己只看到了生成的随机数赋值了给了数据表的第一次元素，那整个题就有点奇怪了。看了又看，才发先最后用到了随机数生成数据的，只是屏幕容不下了。。。</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200528115958609.png" alt="image-20200528115958609"></p></li><li><p>另外就是先将每次生成索引值 v7 用C语言写出来后打印看看， 但大多数是负数，很大的数。这显然不对的，因为我们运行程序时输入的参数都是可打印字符 （ASCII: 32-127），伪代码不靠谱，果断去看看了汇编。</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200528121109201.png" alt="image-20200528121109201"></p></li><li><p>另外就是 伪代码中的 __ROR__了，看了汇编知道了 ror 指令，将数据想右位移动指定的位数。以为只是简单的  &gt;&gt; ，就这样写了整个题的爆破代码。但是始终不对，花了很时间，不甘心，就ida中动调，C语言中调试，每个步骤对比结果，才找到是 ror 这里错了。。。 原来 ror 是右移动位后会把多余的位移动到最左边，即一个圆圈转。</p></li><li><p>exp: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v7 = <span class="number">1</span>, v2 = <span class="number">0</span>, v3 = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v4 = <span class="number">0</span>, v5 = <span class="number">0</span>, v8 = <span class="number">1</span>, v9 = <span class="number">0</span>;</span><br><span class="line">result[<span class="number">0</span>] = a;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v2 = v7 ^ <span class="number">2</span> * v7;</span><br><span class="line"><span class="keyword">if</span>((v7 &amp; <span class="number">0x80</span>) == <span class="number">0</span>)</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v3 = <span class="number">27</span>;</span><br><span class="line">v7 = v2 ^ v3;</span><br><span class="line">v7 = v7 &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">    v4 = (<span class="number">4</span> * (<span class="number">2</span> * v8 ^ v8) ^ <span class="number">2</span> * v8 ^ v8)&amp;<span class="number">0xff</span>;</span><br><span class="line">v9 = ((<span class="number">16</span> * v4 ^ v4)&amp;<span class="number">0xff</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v9 &gt;= <span class="number">0</span> &amp;&amp; v9 &lt;= <span class="number">127</span> )</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v5 = <span class="number">9</span>;</span><br><span class="line">    v8 = (v9 ^ v5);</span><br><span class="line"><span class="keyword">if</span>(v7 &lt; <span class="number">127</span>)</span><br><span class="line">    result[v7] = (((v8 &gt;&gt; <span class="number">4</span>) | ((v8 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">4</span>)) ^ ((v8 &gt;&gt; <span class="number">5</span>) | ((v8&amp;<span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>)) ^ ((v8 &gt;&gt; <span class="number">6</span>) |    ((v8&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">2</span>) ) ^ ((v8 &gt;&gt; <span class="number">7</span>) | ((v8&amp;<span class="number">0xFF</span>)&lt;&lt;<span class="number">1</span>) ) ^ (v8 ^ a))&amp;<span class="number">0xff</span>;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(v7 != <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *result = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">127</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, value = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"95eeaf95ef94234999582f722f492f72b19a7aaf72e6e776b57aee722fe77ab5ad9aaeb156729676ae7a236d99b1df4a"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">generate(i, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result[<span class="number">84</span>] == <span class="number">0x95</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">48</span> &amp;&amp; a[i] &lt;= <span class="number">57</span>)</span><br><span class="line">a[i] -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">48</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">57</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"></span><br><span class="line">value = a[i+<span class="number">1</span>] | a[i]*<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(result[j] == value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200528122051072.png" alt></p></li><li><p>做完去看了看网上的 writeup， 发现都是用gdb写脚本搞的，然后去学习了下。</p></li><li><p>使用 gdb的 define 命令可以定义一系列的gdb指令。首先找到要下断点地址，这个在ida中很容易。</p><p>这里有2中方法，指向gdb脚本，一：直接输入defien命令，输入指令，最后执行。二：单独写成一个脚本文件使用 source 来执行。</p></li><li><p>这里直接写的脚本文件使用 source执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>($i&lt;$total)</span><br><span class="line">  b *<span class="number">0x80485b4</span></span><br><span class="line">  b *<span class="number">0x8048707</span></span><br><span class="line">  run T</span><br><span class="line">  set $i=$i+<span class="number">1</span></span><br><span class="line">  set *(char*)($ebp<span class="number">-0xc</span>)=$i</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">if</span> ($eax==<span class="number">0x95</span>)</span><br><span class="line">    <span class="keyword">print</span> $i</span><br><span class="line">    x/<span class="number">127</span>xb $esp+<span class="number">0x1c</span>  <span class="comment">#这里有一个知识点,最后总结。</span></span><br><span class="line">    set $i=<span class="number">256</span></span><br><span class="line">  stop</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200528163112618.png" alt="image-20200528163112618"></p></li><li><p>因为可打印字符的ASCII：32-127，所以我们打印出前128个数据即可。最后解密。python确实方便，各种方法直接调用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list =  [<span class="number">0xd6</span>,<span class="number">0xc9</span>,<span class="number">0xc2</span>,<span class="number">0xce</span>,<span class="number">0x47</span>,<span class="number">0xde</span>,<span class="number">0xda</span>,<span class="number">0x70</span></span><br><span class="line">,<span class="number">0x85</span>,<span class="number">0xb4</span>,<span class="number">0xd2</span>,<span class="number">0x9e</span>,<span class="number">0x4b</span>,<span class="number">0x62</span>,<span class="number">0x1e</span>,<span class="number">0xc3</span></span><br><span class="line">,<span class="number">0x7f</span>,<span class="number">0x37</span>,<span class="number">0x7c</span>,<span class="number">0xc8</span>,<span class="number">0x4f</span>,<span class="number">0xec</span>,<span class="number">0xf2</span>,<span class="number">0x45</span></span><br><span class="line">,<span class="number">0x18</span>,<span class="number">0x61</span>,<span class="number">0x17</span>,<span class="number">0x1a</span>,<span class="number">0x29</span>,<span class="number">0x11</span>,<span class="number">0xc7</span>,<span class="number">0x75</span></span><br><span class="line">,<span class="number">0x02</span>,<span class="number">0x48</span>,<span class="number">0x26</span>,<span class="number">0x93</span>,<span class="number">0x83</span>,<span class="number">0x8a</span>,<span class="number">0x42</span>,<span class="number">0x79</span></span><br><span class="line">,<span class="number">0x81</span>,<span class="number">0x10</span>,<span class="number">0x50</span>,<span class="number">0x44</span>,<span class="number">0xc4</span>,<span class="number">0x6d</span>,<span class="number">0x84</span>,<span class="number">0xa0</span></span><br><span class="line">,<span class="number">0xb1</span>,<span class="number">0x72</span>,<span class="number">0x96</span>,<span class="number">0x76</span>,<span class="number">0xad</span>,<span class="number">0x23</span>,<span class="number">0xb0</span>,<span class="number">0x2f</span></span><br><span class="line">,<span class="number">0xb2</span>,<span class="number">0xa7</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0x5e</span>,<span class="number">0x92</span>,<span class="number">0x07</span>,<span class="number">0xc0</span></span><br><span class="line">,<span class="number">0xbc</span>,<span class="number">0x36</span>,<span class="number">0x99</span>,<span class="number">0xaf</span>,<span class="number">0xae</span>,<span class="number">0xdb</span>,<span class="number">0xef</span>,<span class="number">0x15</span></span><br><span class="line">,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x63</span>,<span class="number">0x06</span>,<span class="number">0x9c</span>,<span class="number">0x56</span>,<span class="number">0x9a</span>,<span class="number">0x31</span></span><br><span class="line">,<span class="number">0xe6</span>,<span class="number">0x64</span>,<span class="number">0xb5</span>,<span class="number">0x58</span>,<span class="number">0x95</span>,<span class="number">0x49</span>,<span class="number">0x04</span>,<span class="number">0xee</span></span><br><span class="line">,<span class="number">0xdf</span>,<span class="number">0x7e</span>,<span class="number">0x0b</span>,<span class="number">0x8c</span>,<span class="number">0xff</span>,<span class="number">0xf9</span>,<span class="number">0xed</span>,<span class="number">0x7a</span></span><br><span class="line">,<span class="number">0x65</span>,<span class="number">0x5a</span>,<span class="number">0x1f</span>,<span class="number">0x4e</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0x86</span>,<span class="number">0x30</span></span><br><span class="line">,<span class="number">0xf0</span>,<span class="number">0x4c</span>,<span class="number">0xb7</span>,<span class="number">0xca</span>,<span class="number">0xe5</span>,<span class="number">0x89</span>,<span class="number">0x2a</span>,<span class="number">0x1d</span></span><br><span class="line">,<span class="number">0xe4</span>,<span class="number">0x16</span>,<span class="number">0xf5</span>,<span class="number">0x3a</span>,<span class="number">0x27</span>,<span class="number">0x28</span>,<span class="number">0x8d</span>,<span class="number">0x40</span></span><br><span class="line">,<span class="number">0x09</span>,<span class="number">0x03</span>,<span class="number">0x6f</span>,<span class="number">0x94</span>,<span class="number">0xa5</span>,<span class="number">0x4a</span>,<span class="number">0x46</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">s = <span class="string">"95eeaf95ef94234999582f722f492f72b19a7aaf72e6e776b57aee722fe77ab5ad9aaeb156729676ae7a236d99b1df4a"</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>):</span><br><span class="line">    s1 = int(s[i:i+<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">    flag += chr(list.index(s1))</span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure></li><li><p><strong>总结：这道题收获还是很大。1：对ida中汇编语言的解读更熟悉了些，注意各种 al 取最低字节数据。 2：ror指令的了解，及对他的C语言用法：如 <code>ror a，3</code> 那C语言为：<code>((a&gt;&gt;3）| ((a&amp;7) &lt;&lt; 5))</code>。 3：使用gdb写脚本。</strong></p><blockquote><p><strong>gdb脚本中的 查看内存内容的方法：x/&lt;n/f/u&gt; <addr>     n、f、u是可选的参数。</addr></strong></p><p><strong>n：显示的内存单元的个数，f：表示显示的格式，其中：s：字符串显示，x：按十六进制格式显示，d：按十进制格式显示变量</strong></p><p><strong>u：按十六进制格式显示无符号整型，t：按二进制格式显示， o：按八进制格式显示，c：按字符格式显示变量。</strong></p><p><strong>最后的u表示每个单元的大小，其中：b表示单字节，h表示双字节，w表示四字 节，g表示八字节。</strong></p><p><strong>那上面脚本写的 x/127xb  表示将 127个的单字节单元的数据按16进制格式显示出来。</strong></p></blockquote></li></ul><hr><h2 id="What-does-this-button-do"><a href="#What-does-this-button-do" class="headerlink" title="What-does-this-button-do"></a>What-does-this-button-do</h2><blockquote><p>很简单的一道安卓逆向，为什么分数那么高。。。</p></blockquote><ul><li><p>下载解压后得到一堆文件，对安卓逆向没深入了解过，直接找到 .dex文件，使用强大的 ApkToolkit 工具转 .dex文件为 .jar文件。</p></li><li><p>接着就是使用 jd-gui 打开，看反编译的java代码。</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200530123951599.png" alt="image-20200530123951599"></p></li><li><p>看 FlagActivity.class，就是直接取出flag。</p><p><img src="/2020/05/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(4)/image-20200530124201413.png" alt="image-20200530124201413"></p></li><li><p>打印出来就好了。flag: <strong>flag{w4nn4_j4r_my_d3x}</strong></p></li><li><p><strong>总结：安卓逆向也是遇到一道，然后做来试试看，但也只能做很简单的，暂时熟悉工具吧。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>论剑场</title>
      <link href="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/"/>
      <url>/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Refresh-it"><a href="#Refresh-it" class="headerlink" title="Refresh it"></a>Refresh it</h2><ul><li><p>题目下载下来是一个.pcapng文件. 先用010editor看了看会不会只是简单的将文件格式改了, 因为是reverse题, 看了一圈, 的却是流量包.</p></li><li><p>在wireshark中尝试搜索了题目关键字refresh, 没有得到有用信息. 又接着尝试了搜索了很多, 都无果. </p></li><li><p>转到foremost和binwalk看看没有什么隐藏文件.  确实看到了2张图片, 提取出来但打不开, 考虑exe文件隐藏在图片文件中, 查看了图片文件信息, PE文件的影子都没有🤣.  没办法了, 题目先放一段时间. <a id="more"></a></p></li><li><p>这又是过了几天来看这个题目, 感觉自己找不到目标, 在盲目的找…很多办法都试了下. 唯一得到的就是图片.</p></li><li><p>看了看图片信息, 发现F5 refrehsh. 又从题目的信息, 你看到刷新按钮了嘛. 突然想到之前做过一个杂项题是F5-steganography隐写. 后面那个的refresh猜测是密码. 连忙去试了下, 错误…. 但是这个确实很像是考隐写.<img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512194627578.png" alt="image-20200512194627578"></p></li><li><p>考虑是binwalk提取图片有损坏或者不全的原因, 因为图片是打不开的.  又跑去wireshark. 因为这次明确是找图片, 直接搜索了 jpg, 果然出现了个图片<img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512200418460.png" alt="image-20200512200418460"></p></li><li><p>追踪tcp流把图片的二进制代码复制下来, winhex重建一个文件粘贴保存.注意文件头FF D8 文件尾 FF D9<img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512200649037.png" alt="image-20200512200649037"></p></li><li><p>这次图片可以打开了, 是个刷新按钮, 再次去用F5隐写来解密. 终于成功了….</p><p><img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512200849581.png" alt="image-20200512200849581"></p></li><li><p><strong>总结: 感觉花了很多时间, 简直就是杂项题啊. 另外题的提示信息太少. 熟悉了一些工具的使用吧</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ASLR</title>
      <link href="/2020/05/12/ASLR/"/>
      <url>/2020/05/12/ASLR/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>开始是一道CTF题加了UPX壳,  利用堆栈平衡脱壳,import rec进行IAT修复后,程序不能正常打开了.  后来才知道是开启了ASLR, 关闭后即可打开.  但有一个问题想了很久.  为什么开启了ASLR的程序在有壳时可以打开, 脱壳后就打不开了呢? 目前觉得是 加壳会对PE文件的重定位表进行压缩,在OD直接dump出的程序是丢失重定位表的, 而程序又是开启了ASLR,那程序自然会访问到无效的地址而打不开</strong></p></blockquote><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>ASLR(地址空间布局随机化), 一种针对缓冲区溢出的安全保护技术. 从Windows Vsita(内核版本<strong>6.0</strong>)开始采用, 而Windows XP的内核版本是<strong>5.1</strong>, 所以我们在Windows XP下脱开启了ASLR 的壳是不会有这个问题的.</p></li><li><p>ASLR就是使我们的PE文件在每次载入内存时起始地址都会变得随机化, 增加恶意用户编写漏洞利用代码的难度(<strong>在之前我们知道只有dll文件在理想地址空间被占用了才会进行重定位</strong>)</p></li><li><p>对于ASLR功能我们系统(win10)是默认关闭的, 我们可以在设置的安全中心打开.<img src="/2020/05/12/ASLR/image-20200511184233641-1589256958059.png" alt="image-20200511184233641"></p><p>另外就是可执行文件的ASLR, 我们在我们的编译器上也可以选择是否引用该功能.<img src="/2020/05/12/ASLR/image-20200511185012962-1589256958060.png" alt="image-20200511185012962"></p></li></ul><h2 id="分析ASLR"><a href="#分析ASLR" class="headerlink" title="分析ASLR"></a>分析ASLR</h2><ul><li><p>以VS编译器写一个程序, 分别生成开启了随机基址与未开启的的版本来分析. (<strong>一共有三个地方不同</strong>)</p><p><strong>(1)</strong>未开启ASLR的程序的<strong>文件头的Characteristics</strong>会多一个 <strong>IMAGE_FILE_RELOCS_STRIPPED   0X0001</strong> 的属性, 经过查看官方文档可以看得到属性解释, 所以我们开启ASLRd的程序不会有这个属性<img src="/2020/05/12/ASLR/image-20200511200244008-1589256958060.png" alt="image-20200511200244008"></p><p>​    下面看程序对比:</p><p><img src="/2020/05/12/ASLR/image-20200511201513817-1589256958060.png" alt="image-20200511201513817"></p></li></ul><p>  <strong>(2)</strong>开启了ASLR的程序的<strong>可选头的DllCharacteristics</strong>多了<strong>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE</strong></p><p>  <strong>0X0040</strong>的属性. 同样查看官方文档. 即重定位时需要的属性.<img src="/2020/05/12/ASLR/image-20200511201801401-1589256958060.png" alt="image-20200511201801401"></p><p>  程序对比:<img src="/2020/05/12/ASLR/image-20200511202308748-1589204427416-1589204437657-1589256958060.png" alt="image-20200511202308748"></p><p>  <strong>(3)</strong>开启了ASLR的程序会多一个 <strong>.reloc</strong> 节(一般普通的exe文件是不需要该节的, 用于开启ASLR的程序进行重定位, 当然我们关闭了ASLR也可以把这个节删了)<img src="/2020/05/12/ASLR/image-20200511202858464-1589256958060.png" alt="image-20200511202858464"></p><h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><ul><li><p>由上面的分析知道有3处不同, 其中上面的<strong>(1)</strong>中是开启了ASLR的程序少了 <strong>IMAGE_FILE_RELOCS_STRIPPED   0X0001</strong>属性, 我们增加上这个属性即可关闭ASLR(即 <strong>0102 -&gt; 0103</strong> / <strong>对应属性打上勾即可</strong>).    另外<strong>(2)</strong>中是多了<strong>DLL can move</strong>的属性,删除这个属性,同样可以关闭ASLR(即 <strong>8140 -&gt; 8100</strong> / <strong>对应属性取消打勾即可</strong> )</p><p>下面示例在010编译器中修改数值来关闭ASLR.<img src="/2020/05/12/ASLR/image-20200511204613644-1589256958060.png" alt="image-20200511204613644"></p></li></ul><blockquote><p><strong>以上是关于ASLR的分析即关闭, 如果开启了ASLR, 我们在脱壳之前还是先关闭它最好,也方便调试时IDA与OD中地址的对应(如果只是想地址对应, 也可以在IDA中启动时把Manual load勾上, 手动输入加载的基地址即可),  既然关闭了ASLR, 那多出的.reloc节也就没用了, 下面手动删除该节区(虽然有很多工具可以直接实现, 还是手动熟悉下PE结构)</strong></p></blockquote><h2 id="删除-reloc节区"><a href="#删除-reloc节区" class="headerlink" title="删除.reloc节区"></a>删除.reloc节区</h2><ul><li><p>首先每个节都对应一个节区头的, 那先从节区头开始. 使用010editor可以轻松在最后一节区头找到.  我们将其全部用0覆盖填充即可.(注: 不能直接删除了, 不然PE文件的很多属性会对应不上)<img src="/2020/05/12/ASLR/image-20200511205903649-1589256958060.png" alt="image-20200511205903649"></p></li><li><p>下面删除.reloc整个节区(一般这个节区都是新加的,所以在最后, 我们只要找到偏移地址直接删除到最后即可), 如图, 直接删除到最后即可. (这里的Size: 600h, 下面有用)<img src="/2020/05/12/ASLR/image-20200511210742225-1589256958060.png" alt="image-20200511210742225"></p></li><li><p>删除完后, 我们知道PE文件头的<strong>_IMAGE_FILE_HEADER</strong>的<strong>NumberOfSections</strong>的值一定要严格的与实际节区对应, 所以去修改 <strong>_IMAGE_FILE_HEADER</strong>的<strong>NumberOfSections</strong>使其减一.<img src="/2020/05/12/ASLR/image-20200511210943674-1589256958060.png" alt="image-20200511210943674">)<img src="/2020/05/12/ASLR/image-20200511211434269-1589256958060.png" alt="image-20200511211434269"></p></li><li><p>最后还有修改一个属性, 就是PE文件头 <strong>_IMAGE_OPTIONAL_HEADER</strong></p><p>的<strong>SizeOfImage</strong>, 修改为减去 .reloc节区后的大小  从上面我们知道.reloc大小是600h, 而该PE文件<strong>SectionAlignment(节在内存中的最小单位 (对齐单位) 一般为: 1000h)为1000h</strong>, 1000h &gt; 600h. 以1000h对齐, 所以我们直接将<strong>SizeOfImage</strong>减去1000h即可.<img src="/2020/05/12/ASLR/image-20200511211537176-1589256958060.png" alt="image-20200511211537176">)<img src="/2020/05/12/ASLR/image-20200511212159056-1589256958060.png" alt="image-20200511212159056"></p><blockquote><p>如果想增加一个节区, 也可以使用同样的方法</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> PE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 (3)</title>
      <link href="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/"/>
      <url>/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/</url>
      
        <content type="html"><![CDATA[<h2 id="easy-Maze"><a href="#easy-Maze" class="headerlink" title="easy_Maze"></a>easy_Maze</h2><ul><li><p>这道题还是挺好玩的. </p></li><li><p>由题目我们能知道是关于迷宫的题. 下载下来是elf文件, 查壳后无壳, 在linux下运行看看大概流程. </p></li><li><p>载入IDA, 先分析了接受我们输入的字符的函数.  知道在外面一层的主函数是先生成一个每行7个元素的数组. 然后通过我们输入的字符按控制在矩阵迷宫中走向, 最后按照规定的到达一个目的地.<a id="more"></a><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200504133456542.png" alt="image-20200504133456542"></p></li><li><p>接下来返回外侧的主函数, 就是生成矩阵的了. 通过上面的49个元素知道且下面函数的参数7, 知道规模 7*7. <img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200504133948097.png" alt="image-20200504133948097"></p></li><li><p>进入<strong>Step_0</strong> 看看. 就是简单的把上面49个元素赋值给 v7 数组, 也印证了数组是7*7<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506194728611.png" alt="image-20200506194728611"></p></li><li><p>接下来 <strong>Step_1</strong>, 看起来是很简洁, 但里面的 <strong>getA</strong>与 <strong>getAstart</strong> 函数 算法太冗长了.<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506195403856.png" alt="image-20200506195403856"></p></li><li><p>这个时候, 开始我就把生成矩阵的所有函数及数据都复制到<strong>VC</strong> 编译器中, 再根据栈的特点改下数据的顺序(<strong>数据存放是从下往上, 那么我们取数据时地址每次减1而不是加一</strong>), 然后运行打印出矩阵. 问题是运行后什么也没有打印, 调试发现一个函数中的内存空间和另外一个冲突, 相互覆盖值. 这个函数太多,关联性大, 改起来也麻烦.</p></li><li><p>然后转向GDB调试, 但是不熟练. 又转向ida动态调试. 首先<strong>在 IDA 的安装目录/dbgsrc/找到 linux_server 和 linux_server64 拷贝到 linux</strong> ,在linux中运行 <strong>linux_server64</strong>, 然后在Debugger的 process options 如下图格式配置. 然后F9开始.</p><p><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506202545180.png" alt="image-20200506202545180"></p></li><li><p>先下断点, 找到储存矩阵的空间的地址, 把这个地址转到数据窗口跟随, 然后运行到生成矩阵的下面一个函数(也就是(<strong>Step_1</strong>下面). 在数据窗口出现我们的数据(int型), 由于是49个元素, 49*4/16 = 12 …4  ,那就是12行加4个数据, <strong>shift+E</strong>提取出C语言格式的数据.<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200504135411101.png" alt="image-20200504135411101"></p></li><li><p>数据得到后, 用C语言打印出来好观察, 注意每个数据4个字节(小端). </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span> <span class="comment">//每个数据4个字节, 且小端. 用联合</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">196</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">49</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">7</span>] = (<span class="keyword">int</span> (*)[<span class="number">7</span>])A.a;  <span class="comment">// 强制转化为数组指针, 方便后面打印</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, p[i][j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506201841271.png" alt="image-20200506201841271"></p></li><li><p>根据我们打游戏的熟悉 aswd ,朝着1走到最后.  <strong>ssddwdwdddsssaasasaaassddddwdds</strong> 最后在linux下输入.</p><p><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200504140433640.png" alt="image-20200504140433640"></p></li><li><p><strong>总结: 更加熟悉了linux动态调试的运用,  加深了数组指针的理解.</strong></p></li></ul><hr><h2 id="simple-check-100"><a href="#simple-check-100" class="headerlink" title="simple-check-100"></a>simple-check-100</h2><ul><li><p>题目本来很简单, 但是有坑啊…</p></li><li><p>首先, 题目下载下来, 有三个版本. 下意识的选择了熟悉的.exe来分析. </p></li><li><p>查壳无壳, 用ida打开. 第一直觉就是这个最后的flag与我们输入字符没关系, 直接OD动态调试跳过判断条件就好了.</p></li><li><p>还是先细看一下栈空间, 虽然还是和我们输入的字符没有关系. 但是有问题啊,要用的地址交叉了.  想着万一题就是这样呢, 先取OD试一下. 不出所料, 乱码😢 </p></li><li><p>开始仔细分析下这个题的栈空间, 在OD反复调试, 发现我们输入字符的空间只有19个字节啊, 为什么我们输入的字符栈空间在OD中调试有19+32 = 51字节空间.</p><p><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506144401943.png" alt="image-20200506144401943"></p></li><li><p>看了半天不知道为什么, 后面才看见程序下面有  <strong>v3 = alloca(32);</strong> 百度了一下, 这个是再栈上申请空间的函数. 正好是多出来的32. </p></li><li><p>经过反复调试, 这个题怎么也和我们输入的字符没关系啊, 程序每次过了判断条件, 算的都一样. 真的奇怪了.</p></li><li><p>最后没办法了,想不通.  就最后再把文件中这个程序的linux版本载入ida看看,  嗯….这个版本的栈空间就没有交叉. v7一直到v34, 没有像PE文件那个版本在中间多一个指针.<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506145151730.png" alt="image-20200506145151730"></p></li><li><p>在linux下动态调试.<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200506145627945.png" alt="image-20200506145627945"></p></li><li><p>😂什么鬼题. PE文件版本居然是有问题的!!!</p></li><li><p><strong>总结: 文件有多个版本的时候, 注意!!! 张见识了. 虽然多花了时间在PE上耗, 但是对栈更清楚了.</strong></p></li></ul><hr><h2 id="zorropub"><a href="#zorropub" class="headerlink" title="zorropub"></a>zorropub</h2><ul><li><p>查壳查位数后载入ida, 整体思路如下.<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200508104152981.png" alt="image-20200508104152981"></p></li><li><p>那其实我们是不用管这个 MD5 加密的 , 也不会这个解密.  直接爆破找到 <strong>i</strong> 值从而得到随机数种子.</p></li><li><p>那问题来了, 爆破找了一个 <strong>i</strong> 值是1023, 就在linux写了exp(<strong>不能在window下, 因为生成随机数不同</strong>). 但得到的数据都是乱码的, 我还是一直以为问题出现在 <strong>LOBYTE(取最低字节位)</strong> 因为第一次接触. </p></li><li><p>最后才想起那个 <strong>i</strong> 的值, 它可能不是唯一的. 开始写exp, 取大范围的数据爆破, 果然对了……</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>, f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">srand(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">29</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                b = rand()%<span class="number">1000</span>;</span><br><span class="line">                flag[i] = b^c[<span class="number">4</span>*i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag[i] &gt; <span class="number">126</span> || flag[i] &lt; <span class="number">32</span>)</span><br><span class="line">f = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!f)</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, b = <span class="number">0</span>, j = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>] = &#123;</span><br><span class="line">  <span class="number">200</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">50</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">206</span>,   <span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">  <span class="number">184</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">126</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">136</span>,   <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">73</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">94</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">52</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">84</span>,   <span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">163</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">150</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">64</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">40</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">252</span>,   <span class="number">2</span>,</span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">142</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">   <span class="number">38</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">42</span>,   <span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">245</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">95</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,</span><br><span class="line">  <span class="number">104</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">235</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">121</span>,   <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">29</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">78</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line"><span class="keyword">while</span>(j)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">j &amp;= j<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">10</span>)</span><br><span class="line">func(i,  a);</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200508105155224.png" alt="image-20200508105155224"></p></li><li><p>然后做完, 还是去看看大佬的writeup. 想看看那个md5怎解密, 但是没有.  却发现好多都是用的pwntools工具来爆破的, 自己也去试了下, 确实简单很多.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">a = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>, <span class="number">0xffff</span>):</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    j = i</span><br><span class="line">    <span class="keyword">while</span>(j):</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        j &amp;= j<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">10</span>:</span><br><span class="line">        a.append(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    p = process(<span class="string">"./11"</span>)</span><br><span class="line">    p.recv()</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.sendline(str(i))</span><br><span class="line">    ans = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"NULL"</span> <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">print</span> (text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    p.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>总结: (1)既然是爆破就要注意有多种情况 (2) LOBYTE 是ida的宏定义, 取最低字节位. (3)更加熟悉pwntools工具的使用.</strong></p></li></ul><hr><h2 id="BABYRE"><a href="#BABYRE" class="headerlink" title="BABYRE"></a>BABYRE</h2><ul><li><p>题目不难, 但是第一次遇到这样的题.</p></li><li><p>64位elf文件, ida打开后, 和以往的文件不一样, 开始有一段循环计算赋值的操作,但是又是看不到到底是赋值给了谁.<img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200512134025680.png" alt="image-20200512134025680"></p></li><li><p>那就动态调试跟来看看, 到了判断条件的时候. 明白了就是类似加壳的程序打开会先进行解压生成代码. 这里开始那一段循环作用, 就改变我们代码的.</p></li><li><p>跟进判断函数, 算法很简单,直接读汇编,  就是一个异或操作然后对比. </p><p><img src="/2020/05/03/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(3)/image-20200512133918795.png" alt="image-20200512133918795"></p></li><li><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0x66</span>, <span class="number">0x6D</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x7F</span>, <span class="number">0x6B</span>, <span class="number">0x37</span>, <span class="number">0x64</span>,  <span class="number">0x3B</span>, <span class="number">0x56</span>, <span class="number">0x60</span>, <span class="number">0x3B</span>, <span class="number">0x6E</span>, <span class="number">0x70</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = a[i] ^ i; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结: 算是长见识吧.</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 (2)</title>
      <link href="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/"/>
      <url>/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-Reverse2"><a href="#Windows-Reverse2" class="headerlink" title="Windows_Reverse2"></a>Windows_Reverse2</h2><ul><li><p>首先,因为是个.exe文件, 先打开看一下程序是做什么的, 出现 <strong>input code:</strong> 也就是让我们输入一个密码验证.</p></li><li><p>用ida打开, 还是先 shift + 12 搜索一下字符串, 然而并没有发现我们打开程序看到的 *<em>input code: *</em>,并且程序函数也很少, 那就是加壳了的. 开始也忘了用软件查一下壳.</p></li><li><p>那么用OD打开, 使用堆栈平衡的方法, 找到程序的 OEP, 然后dump, 但是注意改一下加载的初始地址和入口点,   这个程序并不是 0x400000开始, 每次加载都是不一样的地址,应该是 ASLR保护技术吧, 之前有了解过一些.通过内存窗口, 知道了是 0x1F0000.<a id="more"></a></p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200429150859645.png" alt="image-20200429150859645"></p></li><li><p>dump出后,但是打不开, 之前学习脱壳时了解过,但是没有实践. 就去下载<strong>import rec</strong>,但打开找不到桌面的文件,  试了好几个也不行, 百度也无果. 也不想用脱壳软件,主要想操作一下. 其实对于去ida反编译已经足够了,因为那个只是会影响动态链接的函数.</p></li><li><p>ida再次打开后, 找到主函数, 转换为伪代码, 逻辑很简单, 就是把我们输入的字符先进行判断,然后进行加密,与编码的字符对比. 先看判断函数.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200429152407648-1590489723012.png" alt="image-20200429152407648"></p></li><li><p>然后看关键的加密函数, 发现最下面还有一个函数 sub_A71000.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200429162141561-1590490034442.png" alt="image-20200429162141561"></p></li><li><p>sub_A7100, 刚开始看这个函数觉得很麻烦, 但是从以前做的题来看, 并且这个函数有 &gt;&gt; 运算符. 可以往base编码考虑, 那就先看看有没有base编码的标志.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200429155217177-1590489885930.png" alt="image-20200429155217177"></p></li><li><p>到了这里 , 可以知道, 程序只是标准码换了一下. 我们就用程序编码的数据和 0x76 异或运算得到 得到这里的base64 的码. 然后这个码去解码后面用来做比较的字符,得到第一次转换后的结果. 但是异或运算后, 我们发现这个码就是base64标准码.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200429160021209-1590489939494.png" alt="image-20200429160021209"></p></li><li><p>最后, 知道开始是把我们输入的字符进行数值转换的, 那么最后解码后我们也要还原一下. 懒得C语言自己写了, 用 python 的 hex(). 最后 flag就是  <strong>ADEBDEAEC7BE</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s =  base64.b64decode(<span class="string">'reverse+'</span>)</span><br><span class="line"><span class="keyword">print</span> (type(s)) / 刚学python,查看一下是什么类型,因为用hex(), 发现 list, tuple都没有 hex().</span><br><span class="line"><span class="keyword">print</span> (s.hex().upper())</span><br></pre></td></tr></table></figure><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200501113755270-1590490003811.png" alt="image-20200501113755270"></p></li><li><p><strong>总结: 1.题目有时候看起来代码很冗长, 但逻辑不难的, 细心分析一下.  要注意base家族的编码与解码.   2.正在学习python中, 每次写python脚本都有收获.</strong></p></li></ul><table><thead><tr><th>字符串前添加r , 表示后续的字符串原样输出, 不进行转义. 如 \\ 转义后为 \</th></tr></thead><tbody><tr><td><strong>字符串前添加b, 后面字符串是bytes 类型</strong></td></tr><tr><td><strong>在 Python3 中，bytes 和 str 的互相转换方式是:str.encode(‘utf-8’)   bytes.decode(‘utf-8’)</strong></td></tr></tbody></table><hr><h2 id="Windows-Reverse1"><a href="#Windows-Reverse1" class="headerlink" title="Windows_Reverse1"></a>Windows_Reverse1</h2><ul><li><p>首先这道题与上面的一道是一起的, 做了上面的一道题, 觉得应该还是有壳的, 查一下是 upx.</p></li><li><p>载入OD还是使用堆栈平衡的原理脱壳, 发现同样是每次载入的地址不一样, 脱壳后还是不能运行, 还是要修复输入表, 但import rec又找不到我电脑的文件…….就先把题做了再来研究.</p></li><li><p>ida载入后十分简洁. 一个加密函数后进行判断. 看加密函数.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200430190548596-1590490212309.png" alt="image-20200430190548596"></p></li><li><p>因为上面的 Reverse1 也是又同样的问题(<strong>不同的变量如何联系在一起的</strong>), 变量地址是相同的. 就先看看上面 <strong>v1的地址, 发现是 ecx 传来的</strong>, 那再看看上一层函数的 ecx . 发现在调用这个加密函数之前有一个ecx赋值. <strong>而要用来最后比较的 v4变量, 它的地址和传给ecx是一样的</strong>.  <strong><em>那这里就是通过寄存器传递的参数.</em></strong></p></li><li><p>上面的代码觉得奇怪, 怀疑是ida的原因, 把原程序到 OD 动态调试看一下加密函数.  清晰很多.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200430192452991-1590490227510.png" alt="image-20200430192452991"></p><p>所以这个函数就是通过我们输入的ASCII为索引值来依次取出编码字符的数据, 最后<strong>DDCTF{reverseME}</strong>进行比较.</p></li><li><p>可以看到是从 0x402FF8 为首地址开始索引, 但是从ida中可以知道 可打印字符是从0x403018开始的.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200430200350749-1590490244163.png" alt="image-20200430200350749"></p></li><li><p>最后,我遇到的很大的坑…..🤣, 字符串复制下来后, 我没有处理其中的  \  的字符, 那么就被默认为转义字符了, 导致2个字符变成一个, 最后结果肯定错.  花了好多时间找这个错误, 还是没有在细节上注意😢.   <strong>exp:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(',27h,'&amp;%$#\"! "</span>; </span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"DDCTF&#123;reverseME&#125;"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(b); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(a); j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] == b[i])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j + <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>做完后,开始去了解 <strong>ASLR</strong>, 知道了开启ASLR的PE文件会多了一个.reloc节区, 且IMAGE_OPTIONAL_HEADER32结构中的DllCharacteristics多了一个属性. 如果一个程序开启了ASLR保护, 我们可以将这个DllCharacteristics的值从<strong>8140</strong>改为<strong>8100</strong>从而关闭ASLR.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200430204438115-1590490290134.png" alt="image-20200430204438115"></p></li><li><p><strong>总结: (1)一个程序中的参数可能会以寄存器的来传递 (2)字符串中注意 \ 字符, 要用 \\来表示 \ 字符. (3)程序的ASLR的开启标志及关闭方法.</strong> </p></li></ul><hr><h2 id="gametime"><a href="#gametime" class="headerlink" title="gametime"></a>gametime</h2><ul><li><p>首先查壳, 发现无壳. 打开程序看一下.   果然是一个游戏, 简单的看了一下, 是让我们在规定时间输入屏幕上显示的字符. </p></li><li><p>ida打开, 看伪代码, 很冗长,  向下浏览一下可以看见好几个判断函数. 且都是一个函数, 程序肯定不应该是退出. 我们的目的就是让它的返回值为 <strong>非0</strong></p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200501104557726-1590490317124.png" alt="image-20200501104557726"></p></li><li><p>进入 sub_401507 看看. 发现还有个判断的地方, <strong>我们的目的: 让它返回1</strong> 记录下地址. <strong>0x00401563</strong>. <img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200501105251204-1590490324745.png" alt="image-20200501105251204"></p></li><li><p>此时程序下面还有类似的判断函数, 那么相同的方法, 先找到地址, 记录下来.</p></li><li><p>最后发现, 程序的核心判断函数就只有2个.  地址分别为:  <strong>0x00401563</strong> ,  <strong>0x004014DB</strong> </p></li><li><p>把程序载入OD. 跳到我们找到的地址, 发现地址对不上, 那程序是开启了 ASLR 的, 但是 RVA 是一样的, 简单的算一下就可以了.   另外一个地址, 相同的操作.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200501110440340-1590490372567.png" alt="image-20200501110440340"></p></li><li><p>最后F9运行, 游戏进行一段时间, 出现flag. <img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200501110942866.png" alt="image-20200501110942866"></p></li><li><p><strong>总结: 简单的动态调试的应用, 注意地址是不是 image base.</strong></p></li></ul><hr><h2 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h2><ul><li><p>首先查壳, 发现是 upx. 载入OD, 准备脱壳, 但是发现 <strong>VA</strong> 不是默认加载的0x400000, 应该是开启了 ASLR.  转到010editor,找到 <strong>struct DLL_CHARACTERISTICS DllCharacteristics</strong>, 将8140改为8100.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200502082437777-1590490407479.png" alt="image-20200502082437777"></p></li><li><p>接下来, 重新载入OD,使用堆栈平衡找到程序 EOP, 然后 dump.</p></li><li><p>脱壳后载入IDA, 程序逻辑简单, 首先限制长度 &lt;= 37, 然后一个判断函数, 我们进入: 算法也不难.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200502083116266-1590490428595.png" alt="image-20200502083116266"></p></li><li><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = &#123;</span><br><span class="line">   <span class="number">50</span>,  <span class="number">97</span>,  <span class="number">52</span>,  <span class="number">57</span>, <span class="number">102</span>,  <span class="number">54</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">51</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">51</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">102</span>,  <span class="number">52</span>, <span class="number">101</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">50</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">56</span>,  <span class="number">52</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">52</span>,  <span class="number">56</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>,  <span class="number">49</span>, <span class="number">100</span>,  <span class="number">53</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">101</span>,  <span class="number">54</span>, </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> b[] = &#123;</span><br><span class="line">   <span class="number">97</span>,  <span class="number">52</span>,  <span class="number">57</span>, <span class="number">102</span>,  <span class="number">54</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">51</span>,  <span class="number">56</span>, </span><br><span class="line">   <span class="number">51</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">100</span>, <span class="number">101</span>,  <span class="number">57</span>,  <span class="number">54</span>, <span class="number">100</span>,  <span class="number">54</span>, <span class="number">102</span>,  <span class="number">52</span>, <span class="number">101</span>,  <span class="number">48</span>, </span><br><span class="line">   <span class="number">50</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">56</span>,  <span class="number">52</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>, <span class="number">100</span>,  <span class="number">54</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">57</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">52</span>,  <span class="number">56</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">54</span>,  <span class="number">55</span>,  <span class="number">55</span>,  <span class="number">56</span>,  <span class="number">54</span>, </span><br><span class="line">  <span class="number">101</span>,  <span class="number">50</span>,  <span class="number">49</span>, <span class="number">100</span>,  <span class="number">53</span>,  <span class="number">97</span>, <span class="number">100</span>,  <span class="number">97</span>, <span class="number">101</span>,  <span class="number">54</span>, </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c[] = &#123;</span><br><span class="line">   <span class="number">99</span>, <span class="number">124</span>, <span class="number">119</span>, <span class="number">123</span>, <span class="number">242</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">197</span>,  <span class="number">48</span>,   <span class="number">1</span>, </span><br><span class="line">  <span class="number">103</span>,  <span class="number">43</span>, <span class="number">254</span>, <span class="number">215</span>, <span class="number">171</span>, <span class="number">118</span>, <span class="number">202</span>, <span class="number">130</span>, <span class="number">201</span>, <span class="number">125</span>, </span><br><span class="line">  <span class="number">250</span>,  <span class="number">89</span>,  <span class="number">71</span>, <span class="number">240</span>, <span class="number">173</span>, <span class="number">212</span>, <span class="number">162</span>, <span class="number">175</span>, <span class="number">156</span>, <span class="number">164</span>, </span><br><span class="line">  <span class="number">114</span>, <span class="number">192</span>, <span class="number">183</span>, <span class="number">253</span>, <span class="number">147</span>,  <span class="number">38</span>,  <span class="number">54</span>,  <span class="number">63</span>, <span class="number">247</span>, <span class="number">204</span>, </span><br><span class="line">   <span class="number">52</span>, <span class="number">165</span>, <span class="number">229</span>, <span class="number">241</span>, <span class="number">113</span>, <span class="number">216</span>,  <span class="number">49</span>,  <span class="number">21</span>,   <span class="number">4</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">35</span>, <span class="number">195</span>,  <span class="number">24</span>, <span class="number">150</span>,   <span class="number">5</span>, <span class="number">154</span>,   <span class="number">7</span>,  <span class="number">18</span>, <span class="number">128</span>, <span class="number">226</span>, </span><br><span class="line">  <span class="number">235</span>,  <span class="number">39</span>, <span class="number">178</span>, <span class="number">117</span>,   <span class="number">9</span>, <span class="number">131</span>,  <span class="number">44</span>,  <span class="number">26</span>,  <span class="number">27</span>, <span class="number">110</span>, </span><br><span class="line">   <span class="number">90</span>, <span class="number">160</span>,  <span class="number">82</span>,  <span class="number">59</span>, <span class="number">214</span>, <span class="number">179</span>,  <span class="number">41</span>, <span class="number">227</span>,  <span class="number">47</span>, <span class="number">132</span>, </span><br><span class="line">   <span class="number">83</span>, <span class="number">209</span>,   <span class="number">0</span>, <span class="number">237</span>,  <span class="number">32</span>, <span class="number">252</span>, <span class="number">177</span>,  <span class="number">91</span>, <span class="number">106</span>, <span class="number">203</span>, </span><br><span class="line">  <span class="number">190</span>,  <span class="number">57</span>,  <span class="number">74</span>,  <span class="number">76</span>,  <span class="number">88</span>, <span class="number">207</span>, <span class="number">208</span>, <span class="number">239</span>, <span class="number">170</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">67</span>,  <span class="number">77</span>,  <span class="number">51</span>, <span class="number">133</span>,  <span class="number">69</span>, <span class="number">249</span>,   <span class="number">2</span>, <span class="number">127</span>,  <span class="number">80</span>,  <span class="number">60</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">168</span>,  <span class="number">81</span>, <span class="number">163</span>,  <span class="number">64</span>, <span class="number">143</span>, <span class="number">146</span>, <span class="number">157</span>,  <span class="number">56</span>, <span class="number">245</span>, </span><br><span class="line">  <span class="number">188</span>, <span class="number">182</span>, <span class="number">218</span>,  <span class="number">33</span>,  <span class="number">16</span>, <span class="number">255</span>, <span class="number">243</span>, <span class="number">210</span>, <span class="number">205</span>,  <span class="number">12</span>, </span><br><span class="line">   <span class="number">19</span>, <span class="number">236</span>,  <span class="number">95</span>, <span class="number">151</span>,  <span class="number">68</span>,  <span class="number">23</span>, <span class="number">196</span>, <span class="number">167</span>, <span class="number">126</span>,  <span class="number">61</span>, </span><br><span class="line">  <span class="number">100</span>,  <span class="number">93</span>,  <span class="number">25</span>, <span class="number">115</span>,  <span class="number">96</span>, <span class="number">129</span>,  <span class="number">79</span>, <span class="number">220</span>,  <span class="number">34</span>,  <span class="number">42</span>, </span><br><span class="line">  <span class="number">144</span>, <span class="number">136</span>,  <span class="number">70</span>, <span class="number">238</span>, <span class="number">184</span>,  <span class="number">20</span>, <span class="number">222</span>,  <span class="number">94</span>,  <span class="number">11</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">224</span>,  <span class="number">50</span>,  <span class="number">58</span>,  <span class="number">10</span>,  <span class="number">73</span>,   <span class="number">6</span>,  <span class="number">36</span>,  <span class="number">92</span>, <span class="number">194</span>, <span class="number">211</span>, </span><br><span class="line">  <span class="number">172</span>,  <span class="number">98</span>, <span class="number">145</span>, <span class="number">149</span>, <span class="number">228</span>, <span class="number">121</span>, <span class="number">231</span>, <span class="number">200</span>,  <span class="number">55</span>, <span class="number">109</span>, </span><br><span class="line">  <span class="number">141</span>, <span class="number">213</span>,  <span class="number">78</span>, <span class="number">169</span>, <span class="number">108</span>,  <span class="number">86</span>, <span class="number">244</span>, <span class="number">234</span>, <span class="number">101</span>, <span class="number">122</span>, </span><br><span class="line">  <span class="number">174</span>,   <span class="number">8</span>, <span class="number">186</span>, <span class="number">120</span>,  <span class="number">37</span>,  <span class="number">46</span>,  <span class="number">28</span>, <span class="number">166</span>, <span class="number">180</span>, <span class="number">198</span>, </span><br><span class="line">  <span class="number">232</span>, <span class="number">221</span>, <span class="number">116</span>,  <span class="number">31</span>,  <span class="number">75</span>, <span class="number">189</span>, <span class="number">139</span>, <span class="number">138</span>, <span class="number">112</span>,  <span class="number">62</span>, </span><br><span class="line">  <span class="number">181</span>, <span class="number">102</span>,  <span class="number">72</span>,   <span class="number">3</span>, <span class="number">246</span>,  <span class="number">14</span>,  <span class="number">97</span>,  <span class="number">53</span>,  <span class="number">87</span>, <span class="number">185</span>, </span><br><span class="line">  <span class="number">134</span>, <span class="number">193</span>,  <span class="number">29</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">248</span>, <span class="number">152</span>,  <span class="number">17</span>, <span class="number">105</span>, <span class="number">217</span>, </span><br><span class="line">  <span class="number">142</span>, <span class="number">148</span>, <span class="number">155</span>,  <span class="number">30</span>, <span class="number">135</span>, <span class="number">233</span>, <span class="number">206</span>,  <span class="number">85</span>,  <span class="number">40</span>, <span class="number">223</span>, </span><br><span class="line">  <span class="number">140</span>, <span class="number">161</span>, <span class="number">137</span>,  <span class="number">13</span>, <span class="number">191</span>, <span class="number">230</span>,  <span class="number">66</span>, <span class="number">104</span>,  <span class="number">65</span>, <span class="number">153</span>, </span><br><span class="line">   <span class="number">45</span>,  <span class="number">15</span>, <span class="number">176</span>,  <span class="number">84</span>, <span class="number">187</span>,  <span class="number">22</span>,  <span class="number">72</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>, temp1 = <span class="number">0</span>, q = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"> temp = (j &gt;&gt; <span class="number">4</span>) % <span class="number">16</span>; </span><br><span class="line"> temp1 = (<span class="number">16</span>*j &gt;&gt; <span class="number">4</span>) % <span class="number">16</span>;</span><br><span class="line"> q = a[<span class="number">2</span>*i];</span><br><span class="line"> <span class="keyword">if</span>(q &lt; <span class="number">48</span> || q &gt; <span class="number">57</span>)</span><br><span class="line"> q = q<span class="number">-87</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">q = q<span class="number">-48</span>;</span><br><span class="line">q = q*<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">w = b[<span class="number">2</span>*i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(w &lt; <span class="number">48</span> || w &gt; <span class="number">57</span>)</span><br><span class="line">w = w<span class="number">-87</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">w = w<span class="number">-48</span>; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span>(c[<span class="number">16</span>*temp + temp1] == ((w+q) ^ <span class="number">0x19</span>))</span><br><span class="line"> &#123;</span><br><span class="line"> flag[i] = j;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200502083319440-1590490435324.png" alt="image-20200502083319440"></p></li><li><p><strong>总结: &gt;&gt; 运算符移动n位就相当于除以2^n. 且 % 的优先级大于 &gt;&gt;</strong></p></li></ul><hr><h2 id="notsequence"><a href="#notsequence" class="headerlink" title="notsequence"></a>notsequence</h2><ul><li><p>自己算法太菜了, 这道题的2个函数始终没看懂… 看了writeup, 杨辉三角形!</p></li><li><p>看了writeup, 自己慢慢的分析了下. 首先, check1函数.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200502131757195-1590490442991.png" alt="image-20200502131757195"></p></li><li><p>然后是check2.</p><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200502133008194-1590490446814.png" alt="image-20200502133008194"></p></li><li><p>经过这2个函数判断, 就能知道是否是杨辉三角形了. 把前20行的数据经过md5加密就是flag.</p></li><li><p>最后, 题自己虽然每做出来, 倒是通过这个题重新认识了杨辉三角形. 写了C语言和python的版本. 也是想打印出来看看, 且自己刚接触python, 代码乱而长.</p><p><strong>python3:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createL</span><span class="params">(l)</span>:</span></span><br><span class="line">    L = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, len(l)):</span><br><span class="line">        L.append(l[x] + l[x<span class="number">-1</span>])</span><br><span class="line">    L.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printL</span><span class="params">(L, W)</span>:</span></span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        s += str(x) + <span class="string">" "</span></span><br><span class="line">    print(s.center(W))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_</span><span class="params">(s, L)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        s += str(x)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">L = [<span class="number">1</span>]</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line">row = int(input(<span class="string">"请输入行数: "</span>))</span><br><span class="line">width =row* <span class="number">6</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(row):</span><br><span class="line">    printL(L, width)</span><br><span class="line">    s = str_(s, L)</span><br><span class="line">    L = createL(L)</span><br><span class="line">print(s)</span><br><span class="line">m = hashlib.md5(s.encode()).hexdigest()</span><br><span class="line">print(<span class="string">"md5加密后:%s"</span> % m)</span><br></pre></td></tr></table></figure><p><strong>C:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">creat</span><span class="params">(<span class="keyword">int</span> *L, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(lenth+<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; lenth; i++)</span><br><span class="line">p[i] = L[i<span class="number">-1</span>] + L[i];</span><br><span class="line"></span><br><span class="line">p[lenth] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *L, <span class="keyword">int</span> blank_l, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; blank_l; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%4d"</span>, L[i]); </span><br><span class="line"></span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">translate</span><span class="params">(<span class="keyword">int</span> *L, <span class="keyword">int</span> lenth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">100</span>), temp[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">"%d"</span>, L[i]);</span><br><span class="line"><span class="built_in">strcat</span>(p, temp); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入行数: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = creat(p, i);</span><br><span class="line"><span class="built_in">print</span>(p, n-i, i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcat</span>(a, (<span class="keyword">char</span> *)translate(p, i+<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n所有数值组成的字符串为: %s"</span>, a); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结: 在看不懂代码的时候, 应该把能写出来的值都列举出来, 观察一下规律.</strong></p></li></ul><hr><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><ul><li><p>这道题更像是是crypto的题, 初次了解了下Rsa.</p></li><li><p>程序下载下来, 有一系列不认识的函数, 大概知道用法, 还是先取查了查.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503094008020-1590490467616.png" alt="image-20200503094008020"></p></li><li><p>GMP(The GNU Multiple Precision Arithmetic Library)又叫GNU多精度算术库，是一个提供了很多操作高精度的大整数，浮点数的运算的算术库，几乎没有什么精度方面的限制，功能丰富. 几个常用的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">添加头文件：<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;gmp.h&gt; </span></span></span><br><span class="line"></span><br><span class="line">　　cmd编译命令：gcc myprogram.c -lgmp -lm -o myprogram</span><br><span class="line"></span><br><span class="line">　　声明一个gmp的整数rop ：<span class="keyword">mpz_t</span> rop;</span><br><span class="line"></span><br><span class="line">　　把字符串初始化为gmp大整数：<span class="function"><span class="keyword">int</span> <span class="title">mpz_init_set_str</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">char</span>*str, <span class="keyword">int</span> base)</span></span>; </span><br><span class="line"></span><br><span class="line">　　释放空间：<span class="function"><span class="keyword">void</span>  <span class="title">mpz_clear</span><span class="params">(<span class="keyword">mpz_t</span> rop)</span></span>;<span class="comment">//声明了一个变量，在程序的最后一定要释放，不然会报错</span></span><br><span class="line"></span><br><span class="line">　　加法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_add</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op1, <span class="keyword">mpz_t</span> op2)</span></span>;  <span class="comment">//rop = op1 + op2</span></span><br><span class="line"></span><br><span class="line">　　减法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_sub</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op1, <span class="keyword">mpz_t</span> op2)</span></span>;  <span class="comment">//rop = op1 - op2</span></span><br><span class="line"></span><br><span class="line">　　乘法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_mul</span><span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op1, <span class="keyword">mpz_t</span> op2)</span></span>; <span class="comment">//rop = op1 * op2</span></span><br><span class="line"></span><br><span class="line">　　除法：<span class="function"><span class="keyword">void</span> <span class="title">mpz_cdiv_q</span> <span class="params">(<span class="keyword">mpz_t</span> q, <span class="keyword">mpz_t</span> n, <span class="keyword">mpz_t</span> d)</span></span>;  <span class="comment">//q = n/d,这个有很多种类型，具体的看使用手册</span></span><br><span class="line"></span><br><span class="line">　　幂运算：<span class="function"><span class="keyword">void</span> <span class="title">mpz_pow_ui</span> <span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> base, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="built_in">exp</span>)</span></span>;  <span class="comment">//rop = base^exp</span></span><br><span class="line">  void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)  作用: Set rop to base^exp mod mod. 这是这道题中用到的. 也是rsa加密解密常用的.</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">　　开方：<span class="function"><span class="keyword">void</span> <span class="title">mpz_sqrt</span> <span class="params">(<span class="keyword">mpz_t</span> rop, <span class="keyword">mpz_t</span> op)</span></span>; <span class="comment">//rop = op开方的向下取整</span></span><br></pre></td></tr></table></figure></li><li><p>整个流程, 显然是rsa加密.  </p><table><thead><tr><th align="center">步骤</th><th>说明</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td align="center">1</td><td>找出质数</td><td>P 、Q</td><td>-</td></tr><tr><td align="center">2</td><td>计算公共模数</td><td>N = P * Q</td><td>-</td></tr><tr><td align="center">3</td><td>欧拉函数</td><td>φ(N) = (P-1)(Q-1)</td><td>-</td></tr><tr><td align="center">4</td><td>计算公钥E</td><td>1 &lt; E &lt; φ(N)</td><td>E的取值必须是整数  E 和 φ(N) 必须是互质数</td></tr><tr><td align="center">5</td><td>计算私钥D</td><td>E * D % φ(N) = 1</td><td>-</td></tr><tr><td align="center">6</td><td>加密</td><td>C ＝ M ^E mod N</td><td>C：密文  M：明文</td></tr><tr><td align="center">7</td><td>解密</td><td>M ＝C ^D mod N</td><td>C：密文  M：明文</td></tr></tbody></table></li><li><p>但是之前有一个sub_96A函数.(最上面的箭头所示), 现在进入这个函数看看. 这里是从字符的ASCII转化为16进制, <strong>(最上面的 Windows_Reverse2有从 16进制转化为字符的算法, 都挺简洁的)</strong><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503094306385-1590490481485.png" alt="image-20200503094306385"></p></li><li><p>整个程序就是将我们输入的字符, 先转化为16进制数值字符, 再变成一个大数作为明文. 经过  <strong>C ＝ M ^E mod N</strong>, 加密后和编码的密文进行对比. 首先这里的 E = v5 = 65537. M是明文. N = v4 = 103461035900816914121390101299049044413950405173712170434161686539878160984549. 根据解密过程, 我们先把 N 分解成 p q , 可以去在线分解.<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503095605681-1590490490248.png" alt="image-20200503095605681"></p></li><li><p>然后使用 python的gmpy2库先求逆元得到<strong>D</strong>. 最后用  <strong>M ＝C ^D mod N</strong>  解密并从16进制转化为字符. 这个gmpy2的库的安装还费了些时间..🤣 <strong>exp:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">282164587459512124844245113950593348271</span></span><br><span class="line">q = <span class="number">366669102002966856876605669837014229419</span></span><br><span class="line">N = <span class="number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span></span><br><span class="line">c = <span class="number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line">m = gmpy2.powmod(c, d, p*q)</span><br><span class="line"></span><br><span class="line">print(bytes.fromhex(hex(m)[<span class="number">2</span>:])</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503101307822-1590490496701.png" alt="image-20200503101307822"></p><ul><li><strong>总结: (1)对rsa有了初步的了解, 学会了简单的加密解密方法. (2)GMP算数库的认识. (3)字符的ASCII转16进制的简洁算法.</strong></li></ul><hr><h2 id="BabyXor"><a href="#BabyXor" class="headerlink" title="BabyXor"></a>BabyXor</h2><ul><li><p>首先, 明明可以直接OD动态调试, 很快得到flag.  但是我用ida把题做完, 才一下子想起.🤣</p></li><li><p>发现有壳, 载入OD使用堆栈平衡脱壳. 载入ida, 发现main函数里有很多函数, 上下分析了下, 发现都是干扰的函数. <img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503173759296-1590490519677.png" alt="image-20200503173759296"></p><p>确定目标, 就是通过这几个函数从编码的数据中取出字符经过一些简单的异或运算, 存放再一个内存空间. 但是与我们输入数据没有关系. (这时候, 就可以直接取OD动态调试直接得到flag的, 唉, 我算出来才想起)</p></li><li><p>一个疑问的地方<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503174247305-1590490527077.png" alt="image-20200503174247305"></p></li><li><p>然后看了看汇编代码. 还是不清楚.  <img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503174332262-1590490532558.png" alt="image-20200503174332262"></p></li><li><p>进去OD调试看看.发现代码又是一个样. 不过这下就清楚了. 先取地址的值. <strong>记住这点</strong><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503174534451-1590490539636.png" alt="image-20200503174534451"></p></li><li><p><strong>exp:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">56</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">  <span class="number">102</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">109</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">99</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">100</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">127</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">53</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">107</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">58</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">59</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida[<span class="number">56</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>];</span><br><span class="line">&#125; B = &#123;</span><br><span class="line">   <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">111</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">56</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">98</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">54</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">124</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">52</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">118</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">98</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">100</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">122</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[<span class="number">56</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">14</span>];</span><br><span class="line">&#125;C = &#123;</span><br><span class="line">   <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">81</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">17</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">84</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">86</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">85</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">93</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">char</span> f1[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, f2[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, f3[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, ftemp[<span class="number">14</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">f1[i] = A.a[i] ^ i; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f2[<span class="number">0</span>] = B.a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">14</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">f2[i] = A.a[i] ^ B.a[i] ^ A.a[i<span class="number">-1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = C.a[i+<span class="number">1</span>] ^ f2[i]; </span><br><span class="line">ftemp[i] = temp ^ i;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f3[<span class="number">0</span>] = <span class="number">0x2D</span>;</span><br><span class="line"><span class="built_in">strcat</span>(f3, ftemp);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(flag, f1);</span><br><span class="line"><span class="built_in">strcat</span>(flag, f2);</span><br><span class="line"><span class="built_in">strcat</span>(flag, f3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag); </span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503174824411-1590490553835.png" alt="image-20200503174824411"></p><ul><li>下面说一步到位.找到最后一个函数最后赋值代码的地址. 复制下来<img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503175027583-1590490558591.png" alt="image-20200503175027583"></li><li>进去OD, 跳到这个地址下断点, 运行起来. 看数据窗口. <img src="/2020/04/29/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(2)/image-20200503175154926-1590490566331.png" alt="image-20200503175154926"></li><li><strong>总结: (1)注意这种flag和输入字符无关的的题. (2)这里 ida中的内存取值与OD中的差异.</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>.cpp 逆向</title>
      <link href="/2020/04/27/cpp-%E9%80%86%E5%90%91/"/>
      <url>/2020/04/27/cpp-%E9%80%86%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="百越杯2018-crazy"><a href="#百越杯2018-crazy" class="headerlink" title="百越杯2018: crazy"></a>百越杯2018: crazy</h2><ul><li><p>首先, 这道题的算法很简单, 就是考引用C++的字符串类的函数. 但是自己也挖掘了一些感觉有用的东西, 主要是通过这道题总结 c++字符串类.</p></li><li><p>拖入ExeinfoPe, 题目是64为elf文件, 用64为ida打开.</p></li><li><p>找到主函数,  查看伪代码, 发现很冗长, 但大多数都是那些字符串类函数和无用的信息. 我们可以先通过点击最后比较要用到的字符串的名称, 这时会把所有相同名称都高亮显示出来, 就可以通过逻辑判断出那些是关键函数和变量.<a id="more"></a></p></li><li><p>第一个关键函数  <strong>HighTemplar::HighTemplar((DarkTemplar *)&amp;v23, (__int64)&amp;input);</strong> </p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200427213407581.png" alt="image-20200427213407581"></p></li><li><p>第二个关键函数 <strong>HighTemplar::calculate((HighTemplar *)&amp;v23);</strong></p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200427213610870.png" alt="image-20200427213610870"></p></li><li><p>第三个关键函数 <strong>HighTemplar::getSerial((HighTemplar *)&amp;v23)</strong></p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200427213959893.png" alt="image-20200427213959893"></p></li><li><p>最后wp: 但是要引起注意的是这个flag真的奇怪, 开始以为算错了,检查几遍, 最后就是这个 <strong>tMx<del>qdstOs</del>crvtwb~aOba}qddtbrtcd</strong>  再加上flag{}.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"327a6c4304ad5938eaf0efb6cc3e53dc"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (a[i] - <span class="number">11</span>) ^ <span class="number">0x13</span>;</span><br><span class="line">a[i] = (a[i] - <span class="number">23</span>) ^ <span class="number">0x50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结:</strong></p></li><li><p>先说一下做这个题想过的一个问题.  我们知道 <strong>rodata</strong> 段是只读的, 存放常量等, 但是这里却有字符串地址的赋值, 他把 <strong>0x401EA0</strong> 地址的值改变了, 但为什么可以这样呢, 查了资料, 也想了很久, 最后认为应该是存放的指针,而且我们可以看到这一段都是8字节的增加, 都是一个指针 8字节的大小.</p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200427215217839.png" alt="image-20200427215217839"></p><p>这里也通过查资料, 知道了以前学习指针的疑问.</p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200427215908475.png" alt="image-20200427215908475"></p><p><strong>因为我们初始化一个数组时,数组的初始值放在rodata段里面.数组对应开辟的空间上的数值存放在栈上,编译器会去访问rodata段上的初始值然后取来初始化局部变量，因此数组的值才能修改. 而指针指向的是rodata段，是不能被修改的</strong>.</p></li><li><p>第二个就是通过c++官方手册的查询对各种c++引用的各种字符串的总结. 下面的 a b 为字符数组.</p><table><thead><tr><th align="left">std::__cxx11::basic_string&lt;char,std::char_traits<char>,std::allocator<char>&gt;::operator[](a, i)</char></char></th></tr></thead><tbody><tr><td align="left">即 <strong>a[i]</strong> 的意思, 如果operator后面没有 <strong>[]</strong>, 那就是  <strong>a+i</strong></td></tr><tr><td align="left">std::__cxx11::basic_string&lt;char,std::char_traits<char>,std::allocator<char>&gt;::basic_string(a, b, lenth)</char></char></td></tr><tr><td align="left">即  <strong>strncpy(a, b, lenth)</strong>  第三个参数可选</td></tr><tr><td align="left">std::allocator<char>::~allocator(a)  <strong>发现只要前面有个 ~ 的都是释放</strong>.</char></td></tr><tr><td align="left">即 <strong>free(a)</strong></td></tr><tr><td align="left">std::__cxx11::basic_string&lt;char,std::char_traits<char>,std::allocator<char>&gt;::length(a)</char></char></td></tr><tr><td align="left">即 <strong>strlen(a)</strong></td></tr><tr><td align="left">std::operator&lt;&lt;&lt;std::char_traits<char>&gt;(&amp;std::cout, “hello”) 后面总跟着下面一句. <strong>关键是count</strong></char></td></tr><tr><td align="left">std::ostream::operator&lt;&lt;(v1, (__int64)&amp;std::endl&lt;char,std::char_traits<char>&gt;)                                                                     即  <strong>printf(“hello”)</strong></char></td></tr><tr><td align="left">std::operator&gt;&gt;&lt;char,std::char_traits<char>,std::allocator<char>&gt;(&amp;std::cin, &amp;a) <strong>关键是in</strong></char></char></td></tr><tr><td align="left">即 <strong>gets(a)</strong></td></tr></tbody></table><hr></li></ul><h2 id="easyCpp"><a href="#easyCpp" class="headerlink" title="easyCpp"></a>easyCpp</h2><blockquote><p>C++逆向的题, 刚开始接触很多代码看不懂,感觉可读性低.  但是看多了, 还是会好很多. 是一个慢慢熟悉stl的过程吧.</p></blockquote><ul><li><p>经过了一些CPP逆向题的折磨, 这个题大多数函数连懵带猜的看起来还好, 但是遇到了一个不仔细的错误, 想了很久…..</p></li><li><p>64位elf文件, 载入ida, 函数的大部分还是看懂了. 2个关键函数.  <strong>transform  accumulate</strong></p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200510182506239.png" alt="image-20200510182506239"></p></li><li><p>先进入 transform. 算法也是很简单, 就是函数读起来更麻烦.</p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200510182650313.png" alt="image-20200510182650313"></p></li><li><p>下面 accumulate. 这个看起来就不是那么容易了, 有很多地址传过来传过去就很混淆. 那就ida动态调试看看这个函数是做什么.(也是这里自己想了很久的错误, 虽然很简单的, 可能是stl把自己搞昏了吧).</p><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200510183307210.png" alt="image-20200510183307210"></p></li><li><p>发现错误, 重新调试后得到经过 accumulate 函数后的结果. 把结果都记录下来后. 发现只是把 transform函数后的结果进行了逆序.<img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200510183543551.png" alt="image-20200510183543551"></p></li><li><p>开始写 exp:  得到 <strong>987 -377 -610 -754 -843 -898 -932 -953 -966 -974 -979 -982 -984 -985 -986 -986</strong>. 最后在linux下运行程序输入.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!a || a == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fib(a<span class="number">-1</span>) + fib(a<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = fib(i); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">15</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, flag[i] = (i &lt; <span class="number">15</span> ? flag[i] - flag[<span class="number">15</span>]:flag[i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/27/cpp-%E9%80%86%E5%90%91/image-20200510184751024.png" alt="image-20200510184751024"></p></li><li><p><strong>总结: (1)注意传递的参数是指针还是值. (2)cpp逆向太多数都有一个模板一样, 动态调试注意地址的寻找.</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年DASCTF四月线上赛</title>
      <link href="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="Bluetooth"><a href="#Bluetooth" class="headerlink" title="Bluetooth"></a>Bluetooth</h2><p>下载下来是一个流量包, 题目也没有提示, 就先用binwalk看能不能提取出什么. 直接 <strong>binwalk -e</strong>, 什么也没有, </p><p>但是我们往下看一下, 是有个压缩包. 那就手动提取吧. <strong>dd if=3.pcapng bs=1 skip=24437 of=3.zip</strong> </p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425202118617-1590546897888.png" alt="image-20200425202118617"></p><p>这次, 文件所在目录出现了一个压缩包, 尝试打开但是有密码, 但是我们可以看到它提示信息: </p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425202435440-1590546907450.png" alt="image-20200425202435440"></p><a id="more"></a><p>说密码蓝牙的pin, 我也是刚刚接触这个wireshare这个软件, 百度了一下, 就是我们连接蓝牙时的那个数字.  但是我是不知道怎么找这个东西,就百度怎么用wireshark抓蓝牙的包, 但没有的得到有用消息, 有的还要什么蓝牙驱动. 就自己去搜索bluetooth, 找了一圈也没有得到那个pin.  我就又跑去打暴力破解的打算, 但又没有7z压缩包暴力破解密码的工具, 又去各大论坛找, 找到了但没用😂. 暂时放下了这个题, 去做reverse, reverse的2个题做的还比较顺利.  回来继续看这个题, 这次干脆直接搜 pin 试试, 出现 PIN请求, PIN请求回应, PIN请求回应完成, </p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425203534918-1590546913901.png" alt="image-20200425203534918"></p><p>那么这PIN请求回应的可能性就最大了, 点进去:可以看到 PIN Code : 141854.  </p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425203900340-1590546919828.png" alt="image-20200425203900340"></p><p>最后输入压缩包得到flag.</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200425204118569-1590546940841.png" alt="image-20200425204118569"></p><hr><h2 id="reverse第二题"><a href="#reverse第二题" class="headerlink" title="reverse第二题"></a>reverse第二题</h2><p>题目下载后, 用ida打开, 找到主函数, 逻辑上很清晰, 说是将flag与我们输入的数字混合在了一起. 程序就做了将我们输入的数字与已经编码了的一些数据进行异或运算然后输出的操作.</p><p><img src="/2020/04/25/2020%E5%B9%B4DASCTF%E5%9B%9B%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200426191831676-1590546936568.png" alt="image-20200426191831676"></p><p>开始想的是会不会直接就是已经编码的数据, 看了看ASCII,不可能是.  </p><p>那有可能就是将我们输入的数据与编码的数据进行或运算后输出的是flag. 那么按照flag的格式, 根据题目说 最后的flag输入的是 flag{}/DACTF{}中的数据, 那么这里的flag也就是这2种格式了. </p><p>这样就好办了, 他们末尾都是 <strong>}</strong> 我们把编码数据的最后一位 61 , 找到一个数字与它异或运算位的值为 <strong>}</strong> 的ASCII 125, 就行了. 得到64, 最后把编码的所有数据与<strong>64</strong>进行一个异或运算就得到flag. </p><p><strong>但是提取数字时,我们可以直接把代码复制到编译中, 但是注意, 这不是数组, 根据栈的特点, 要倒着遍历.</strong></p>]]></content>
      
      
      <categories>
          
          <category> CTF线上 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF</title>
      <link href="/2020/04/23/BUUCTF/"/>
      <url>/2020/04/23/BUUCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="CrackRTF1"><a href="#CrackRTF1" class="headerlink" title="CrackRTF1"></a>CrackRTF1</h2><p>从刚开始接触 BUUCTF , 做到逆向的这道题, 看了writeup 也觉得难, 就停滞了一段时间. 到论剑场和攻防世界做了20多天(期间也开始了pwn), 今天突然想到这道题(一直放在桌面顶部).</p><p>开始打开ida分析时, 发现逻辑是多么的清晰, 但是当进入第一个关键函数时, 想起了上次的难点. (1)对hash很陌生, 不知道为什么hash不可逆, 必须要爆破. (2)当时一点python都没接触过, 对于要写python脚本爆破, 就觉得很烦(当然经过不断的学习, 这20多天, 接触并开始学习些python). (3)这里第二次输入, 因为没有限制条件, 还不能爆破, 后面又是一些从没听说过的操作.(但其实这次再来看, 其实就是要用<strong>Resource Hacker</strong>这个工具查看.exe文件里的资源文件, 经过一些逻辑上的操作)<a id="more"></a></p><p>首先, 知道是系统调用的函数, 当时就每个都百度了下, 也是很麻烦的(但是逆向的路就是这样, 要知道的很多很多, 只有自己慢慢的积累).记得整个函数作用就是 调用一个hash加密函数. 具体是那个hash, 可以查看官方的介绍, 从这里的编号 : <strong>0x8004</strong> 去找对应的加密, 经过查询是 sha1.</p><p><img src="/2020/04/23/BUUCTF/image-20200423194434469.png" alt="image-20200423194434469"></p><p>因为hash不可逆, 但是这里有字符串长度是 6 位, 且转化为整数后 &gt;= 100000, 那么范围就确定了: 100000 - 999999, 下面爆破脚本: 得到 <strong>123321@DBApp</strong>, 那么我们输入就是 ; <strong>123321</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">flag = <span class="string">"@DBApp"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>, <span class="number">999999</span>):</span><br><span class="line">    s = str(i) + flag</span><br><span class="line">    x = hashlib.sha1(s.encode())</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span>.lower() == x.hexdigest():</span><br><span class="line">        <span class="keyword">print</span> (str(i) + flag)</span><br></pre></td></tr></table></figure><p> 接下来, 输入第二个字符串, 但是要加上上面的<strong>123321@DBApp</strong> 然后hash加密操作.但是这次的编号改变了 <strong>0x8003 : mad5</strong>, 这次没有限制条件, 爆破不行了.</p><p>经过看大神们的操作, 知道了可以通过下面一个函数.这个函数和我们的fopen那些文件操作不同. </p><p>这个 FindResourceA是打开这个.exe文件中资源文件的文件.(这点第一次知道, 还有这种操作!!!, 经过百度, 发现可以将自己的资源文件加入.exe文件中), 打开AAA后, 将里面的内容与我们输入的字符进行异或操作, 最后将内容写入新创建一个 dbapp.rtf 文件. 这里大神的说法都是, 因为是写进.rtf 文件那么开始写入的必然是文件头, 我们就可以随便创建一个.rtf文件, 查看文件头内容. 可以看到是 <strong>{\rtf1</strong>, 正好是6位,我们最后输入的也是6位, 那么把他和AAA文件中的前6位异或一下, 就得到我们输入的了. </p><h3 id><a href="#" class="headerlink" title></a><img src="/2020/04/23/BUUCTF/image-20200423200957999.png" alt="image-20200423200957999"></h3><p><img src="/2020/04/23/BUUCTF/image-20200423202735198.png" alt="image-20200423202735198"></p><p><img src="/2020/04/23/BUUCTF/image-20200423202025893.png" alt="image-20200423202025893"></p><p>下面脚本: 最后得到 <strong>~!3a@0</strong>, 输入程序后, 会创建一个 dbapp.rtf 文件, 打开即是flag.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">0x05</span>, <span class="number">0x7D</span>, <span class="number">0x41</span>, <span class="number">0x15</span>, <span class="number">0x26</span>, <span class="number">0x01</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">rtf = <span class="string">"&#123;\\rtf1"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(rtf)):</span><br><span class="line">    x = ord(rtf[i]) ^ a[i]</span><br><span class="line">    flag += chr(x)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>但对于最后的 <strong>因为是写进.rtf 文件那么开始写入的必然是文件头</strong> 我是感觉奇怪的, 他创建了一个dbapp.rtf 文件, 写入的不就是文件的内容吗, 为什么文件头都要我们来写入. 噢, 因为以前学习文件操作的时候都是往.txt文件里写内容, 那个没有文件头这一说, 所以可以一开始写进内容. 写入的实质还是填充二进制的01. 所以这里我们要先写 .rtf文件头. </p><p><img src="/2020/04/23/BUUCTF/image-20200423204326824.png" alt="image-20200423204326824"></p><p>最后, .rtf文件与 docx dox 类似, <strong><em>\</em>富文本格式\</strong>（*<em>Rich Text Format*</em>）即*<em>RTF格式*</em>，又称*<em>多文本格式*</em>，是由<a href="https://baike.baidu.com/item/微软" target="_blank" rel="noopener">微软</a>公司开发的跨平台<a href="https://baike.baidu.com/item/文档" target="_blank" rel="noopener">文档</a>格式。大多数的<a href="https://baike.baidu.com/item/文字处理" target="_blank" rel="noopener">文字处理</a>软件都能读取和保存RTF文档。**</p><p>mac先创建的文本文件, 默认都是 .rtf.</p><p>心得: 如果做到感觉很吃力的题可以先放一放, 等学习一段时间, 知识积累的更多了再来看, 不要死磕!</p><p>当一条路不同时, 注意其他函数的功能, 想它的存在为什么. </p>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界 (1)</title>
      <link href="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/"/>
      <url>/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="misc"><a href="#misc" class="headerlink" title="misc:"></a>misc:</h2><p>菜狗截获了一份报文如下</p><p>从报文中可以联想到是md5加密, 但试了一下, 发现不对. 再看报文中字母只是 a-f , 所以可能是十六进制数, 又一般都是一个字节一个字符, 而一个字节存放二个十六进制数. 我们就2个一组转换成十进制, 但是大于了127, 可打印字符ASCII范围在<strong>0-127</strong>,  那我们知道 <code>}</code>字符的ASCII十六进制为 <strong>0X7D</strong>,  再看报文最后2个字符组成的十六进制数 <strong>0xf2</strong>, 一般我们可以有这个思路,求差值 但也有最后没有用 <strong>}</strong>结尾的, 这里就不是.😂. 但其实想到要把字符打印出来, 而字符ASCII<strong>0-127</strong>, 那就直接试一试减128, 一下子就对了, 哈哈😁.<a id="more"></a></p><p>下面是C语言写的, 2个一组转换成十进制数, 最后变成可打印字符:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, lenth  = <span class="built_in">strlen</span>(a), sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">97</span> &amp;&amp; a[i] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">48</span>; </span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i+<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(sum &gt; <span class="number">127</span>)</span><br><span class="line">sum -= <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">b[j++] = sum, sum = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1:"></a>reverse1:</h2><p>首先拿到题, 还是拖进<strong>Exeinfope</strong>查看一下是否有壳:</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200409121215784-1590549058520.png" alt="image-20200409121215784"></p><p>嗯没有.</p><p>拖进ida, 找到主函数, 浏览一下程序功能, 一个游戏, 好像是通过点亮所有灯获得flag. 那么必定有一个判断条件, 往下看主函数, 显而易见:</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200409121557118-1590549064830.png" alt="image-20200409121557118"></p><p>那么下面一个函数就是关键函数了, 进去发现就是将flag计算出来, 56位长度, 还是懒得自己写程序来算.</p><p>我们可以在ida中找到 <strong>判断条件</strong>那里的的地址,: 0045F5D1</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200409122019635-1590549068676.png" alt="image-20200409122019635"></p><p>再通过OD,看加载的 VA(虚拟内存地址) :</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200409203440087-1590549086887.png" alt="image-20200409203440087"></p><p>那么由于 动态和静态的VA可能不同，但是它们的RVA还是一样的。我们使用在ida中的找到VA - imagebase = RVA. 再加上OD中的VA, 即得到在OD中的地址: 0091F5D1. 这样我们直接在OD中找到这个地址: 如下图, 看到很多 jnz. 所以我们的目的是让它都不跳转, 可以每个地方都 nop了, 但我们可以往下看, 直接找到它最后应该去到的函数地址(记为A), 通过打补丁把jnz xxxx, (图中0091F5D8) 改为 jmp A.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200409204018803-1590549093480.png" alt="image-20200409204018803"></p><p>最后一按 F9  运行, 出现  flag  .</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200409204652301-1590549096561.png" alt="image-20200409204652301"></p><hr><h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2:"></a>reverse2:</h2><p>拿到题是C源码, 直接分析就好了, 找到主函数看一下. 明确目标, 输入字符串, 也就是flag, 进行一系列操作和指定字符串比较. 找到比较的地方很容易推出:这里result  == 0;</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415170640341-1590549110220.png" alt="image-20200415170640341"></p><p>那么我们就可以知道下面函数的异或运算结果为0, 那么即发生异或运算的2个数相等.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415170736593-1590549112522.png" alt="image-20200415170736593"></p><p>最后就是随机数的选取了, 我们知道它是 &lt;= 64的, 那么写一个C程序, 把所有结果打印出来, 找到符合的即可.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415171038960-1590549115097.png" alt="image-20200415171038960"></p><p>最后从这道题, 知道了, 1.<code>pthread_t</code>是<code>unsigned long</code>宏定义的, 8个字节整型数据.2.<code>rand()%m</code>也是<code>random(m)</code>宏定义的.  </p><hr><h2 id="secret-galaxy-300"><a href="#secret-galaxy-300" class="headerlink" title="secret-galaxy-300"></a>secret-galaxy-300</h2><p>首先题下载下来, 发现准备了3个不同的版本, 就分析常见的PE文件.  想先打开.exe文件, 但是闪一下就退出了, 根本看不到程序是做什么的.</p><p>首先查壳, 发现无壳.😁 先用ida打开, 找到main函数.发现是从已经编码的字符串取出来, 在打印在屏幕上. 载入OD, 下断点, 看到底打印了什么:  列出几个银河; 是否是有生物存在; 它们距离地球的距离. 但这个和flag有什么关系呢.😢. 想不到联系, 回到ida中再看看. </p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415192448626-1590549120154.png" alt="image-20200415192448626"></p><p>发现已经编码的字符有一个没被打印出来. 就 ctrl + x, 看哪里调用了它, 跟进去.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415193002493-1590549136439.png" alt="image-20200415193002493"></p><p>发现都是赋值操作, 且最后一个赋值0, 很可能是 flag 的字符串.记录开始和结束的地址, 去 OD 中动态调试.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415194242898-1590549138934.png" alt="image-20200415194242898"></p><p>OD中在2个地址, 下断点, 并在开始记录下赋值存放数据的地址, 把它在数据窗口中跟随. F9执行出现字符串.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200415193726368-1590549141490.png" alt="image-20200415193726368"></p><p>心得: 注意文件中编码了但是没有使用的字符串. </p><hr><h2 id="Newbie-calculations"><a href="#Newbie-calculations" class="headerlink" title="Newbie_calculations:"></a>Newbie_calculations:</h2><p>首先从题目看出, 是新手计算, 想到应该和计算有关的. </p><p>题目下载下来, 打开后, 只是打印  <strong>Your flag is:</strong> ,就卡住了, 也没有让输入信息. 在自己写C程序也遇到过这种问题, 应该是程序有什么死循环, 或者大量耗时间的算法.</p><p>载入ida, 找到main函数, 果然有很多函数, 跟进其中一个后发现 v4 = -1, 后面又用来循环, 因为自己补码不是很清楚, 开始只是想到这不是死循环嘛, 且和自己之前的想的一样. 然后天真的认为, 它可能没用, 跳过它, 直接执行后面的或许可以找到答案, 就真的去OD, 打补丁, 程序直接奔溃. </p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200417124955377-1590549145811.png" alt="image-20200417124955377"></p><p> 这个时候发现有很多函数, 都是一样的, 好像只有3个函数在哪里调用. 但想到麻烦,发现计算和补码相关, 然后自己写简单的程序程序复习了下补码,  <strong>-1-128 = 127, 127+1 = -128;</strong>, 再结合之前看到的补码和时钟原理很像, 自己总结了下, 可以把这个计算想成是一个圆圈, 以一个字节8位来看, 我们知道范围是  <strong>-128 - 127</strong> </p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200417131746746-1590549170275.png" alt="image-20200417131746746"></p><p>知道一个周期的大小是 <strong>256</strong>.  那么有 <strong>-1+1= 0</strong> 也可以写成 <strong>-1 - 255 = 0</strong>, 相当于 -1 逆时针转了 一圈少1的距离, 那么就是0的位置, 因为如果转了一圈的话, 回到原位置,. 顺时针加法也是一样的原理, <strong>0 + 256 = 0</strong>;</p><p>知道了这一点, 那么这道题就很容易了.要使 v4 == 0, 那么相当于 v4逆时针旋转一圈少a2的距离, 相当于 v4 += a2,</p><p>那么同样的道理, –*a 经过循环后, 相当于逆时针旋转一圈少a2的距离, 就是 *a1 += a2; 补码真的神奇.😁</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200417133116275-1590549174848.png" alt="image-20200417133116275"></p><p>后面的2个函数同理分析.  将该三个函数分别改写成对应的乘, 减, 加:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sub_401100</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = (*a) * b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>  a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sub_401220</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = (*a) - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">sub_401000</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = (*a) + b; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v4;</span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v6; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v8; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v10; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v12; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v13; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v14; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v16; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v17; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v18; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v19; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v21; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v22; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v23; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v24; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v26; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v27; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v28; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v29; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v30; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v31; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v32; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v33; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v34; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v35; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v36; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v37; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v38; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v39; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v40; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v41; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v42; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v43; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v44; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v45; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v46; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v47; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v48; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v49; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v50; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v51; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v52; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v53; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v54; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v55; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v56; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v57; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v58; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v59; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v60; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v61; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v62; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v63; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v64; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v65; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v66; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v67; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v68; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v69; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v70; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v71; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v72; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v73; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v74; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v75; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v76; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v77; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v78; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v79; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v80; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v81; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v82; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v83; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v84; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v85; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v86; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v87; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v88; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v89; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v90; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v91; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v92; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v93; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v94; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v95; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v96; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v97; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v98; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v99; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v100; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v101; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v102; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v103; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v104; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v105; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v106; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v107; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v108; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v109; <span class="comment">// ST1C_4</span></span><br><span class="line">  <span class="keyword">int</span> *v110; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v111; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v112; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> *v113; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> *v114; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v115; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">int</span> *v116; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+8h] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v120[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v121; <span class="comment">// [esp+8Ch] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i )</span><br><span class="line">    v120[i] = <span class="number">1</span>;</span><br><span class="line">  v121 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Your flag is:"</span>);</span><br><span class="line">  v3 = sub_401100(v120, <span class="number">1000000000</span>);</span><br><span class="line">  v4 = sub_401220(v3, <span class="number">999999950</span>);</span><br><span class="line">  sub_401100(v4, <span class="number">2</span>);</span><br><span class="line">  v5 = sub_401000(&amp;v120[<span class="number">1</span>], <span class="number">5000000</span>);</span><br><span class="line">  v6 = sub_401220(v5, <span class="number">6666666</span>);</span><br><span class="line">  v7 = sub_401000(v6, <span class="number">1666666</span>);</span><br><span class="line">  v8 = sub_401000(v7, <span class="number">45</span>);</span><br><span class="line">  v9 = sub_401100(v8, <span class="number">2</span>);</span><br><span class="line">  sub_401000(v9, <span class="number">5</span>);</span><br><span class="line">  v10 = sub_401100(&amp;v120[<span class="number">2</span>], <span class="number">1000000000</span>);</span><br><span class="line">  v11 = sub_401220(v10, <span class="number">999999950</span>);</span><br><span class="line">  v12 = sub_401100(v11, <span class="number">2</span>);</span><br><span class="line">  sub_401000(v12, <span class="number">2</span>);</span><br><span class="line">  v13 = sub_401000(&amp;v120[<span class="number">3</span>], <span class="number">55</span>);</span><br><span class="line">  v14 = sub_401220(v13, <span class="number">3</span>);</span><br><span class="line">  v15 = sub_401000(v14, <span class="number">4</span>);</span><br><span class="line">  sub_401220(v15, <span class="number">1</span>);</span><br><span class="line">  v16 = sub_401100(&amp;v120[<span class="number">4</span>], <span class="number">100000000</span>);</span><br><span class="line">  v17 = sub_401220(v16, <span class="number">99999950</span>);</span><br><span class="line">  v18 = sub_401100(v17, <span class="number">2</span>);</span><br><span class="line">  sub_401000(v18, <span class="number">2</span>);</span><br><span class="line">  v19 = sub_401220(&amp;v120[<span class="number">5</span>], <span class="number">1</span>);</span><br><span class="line">  v20 = sub_401100(v19, <span class="number">1000000000</span>);</span><br><span class="line">  v21 = sub_401000(v20, <span class="number">55</span>);</span><br><span class="line">  sub_401220(v21, <span class="number">3</span>);</span><br><span class="line">  v22 = sub_401100(&amp;v120[<span class="number">6</span>], <span class="number">1000000</span>);</span><br><span class="line">  v23 = sub_401220(v22, <span class="number">999975</span>);</span><br><span class="line">  sub_401100(v23, <span class="number">4</span>);</span><br><span class="line">  v24 = sub_401000(&amp;v120[<span class="number">7</span>], <span class="number">55</span>);</span><br><span class="line">  v25 = sub_401220(v24, <span class="number">33</span>);</span><br><span class="line">  v26 = sub_401000(v25, <span class="number">44</span>);</span><br><span class="line">  sub_401220(v26, <span class="number">11</span>);</span><br><span class="line">  v27 = sub_401100(&amp;v120[<span class="number">8</span>], <span class="number">10</span>);</span><br><span class="line">  v28 = sub_401220(v27, <span class="number">5</span>);</span><br><span class="line">  v29 = sub_401100(v28, <span class="number">8</span>);</span><br><span class="line">  sub_401000(v29, <span class="number">9</span>);</span><br><span class="line">  v30 = sub_401000(&amp;v120[<span class="number">9</span>], <span class="number">0</span>);</span><br><span class="line">  v31 = sub_401220(v30, <span class="number">0</span>);</span><br><span class="line">  v32 = sub_401000(v31, <span class="number">11</span>);</span><br><span class="line">  v33 = sub_401220(v32, <span class="number">11</span>);</span><br><span class="line">  sub_401000(v33, <span class="number">53</span>);</span><br><span class="line">  v34 = sub_401000(&amp;v120[<span class="number">10</span>], <span class="number">49</span>);</span><br><span class="line">  v35 = sub_401220(v34, <span class="number">2</span>);</span><br><span class="line">  v36 = sub_401000(v35, <span class="number">4</span>);</span><br><span class="line">  sub_401220(v36, <span class="number">2</span>);</span><br><span class="line">  v37 = sub_401100(&amp;v120[<span class="number">11</span>], <span class="number">1000000</span>);</span><br><span class="line">  v38 = sub_401220(v37, <span class="number">999999</span>);</span><br><span class="line">  v39 = sub_401100(v38, <span class="number">4</span>);</span><br><span class="line">  sub_401000(v39, <span class="number">50</span>);</span><br><span class="line">  v40 = sub_401000(&amp;v120[<span class="number">12</span>], <span class="number">1</span>);</span><br><span class="line">  v41 = sub_401000(v40, <span class="number">1</span>);</span><br><span class="line">  v42 = sub_401000(v41, <span class="number">1</span>);</span><br><span class="line">  v43 = sub_401000(v42, <span class="number">1</span>);</span><br><span class="line">  v44 = sub_401000(v43, <span class="number">1</span>);</span><br><span class="line">  v45 = sub_401000(v44, <span class="number">1</span>);</span><br><span class="line">  v46 = sub_401000(v45, <span class="number">10</span>);</span><br><span class="line">  sub_401000(v46, <span class="number">32</span>);</span><br><span class="line">  v47 = sub_401100(&amp;v120[<span class="number">13</span>], <span class="number">10</span>);</span><br><span class="line">  v48 = sub_401220(v47, <span class="number">5</span>);</span><br><span class="line">  v49 = sub_401100(v48, <span class="number">8</span>);</span><br><span class="line">  v50 = sub_401000(v49, <span class="number">9</span>);</span><br><span class="line">  sub_401000(v50, <span class="number">48</span>);</span><br><span class="line">  v51 = sub_401220(&amp;v120[<span class="number">14</span>], <span class="number">1</span>);</span><br><span class="line">  v52 = sub_401100(v51, <span class="number">-294967296</span>);</span><br><span class="line">  v53 = sub_401000(v52, <span class="number">55</span>);</span><br><span class="line">  sub_401220(v53, <span class="number">3</span>);</span><br><span class="line">  v54 = sub_401000(&amp;v120[<span class="number">15</span>], <span class="number">1</span>);</span><br><span class="line">  v55 = sub_401000(v54, <span class="number">2</span>);</span><br><span class="line">  v56 = sub_401000(v55, <span class="number">3</span>);</span><br><span class="line">  v57 = sub_401000(v56, <span class="number">4</span>);</span><br><span class="line">  v58 = sub_401000(v57, <span class="number">5</span>);</span><br><span class="line">  v59 = sub_401000(v58, <span class="number">6</span>);</span><br><span class="line">  v60 = sub_401000(v59, <span class="number">7</span>);</span><br><span class="line">  sub_401000(v60, <span class="number">20</span>);</span><br><span class="line">  v61 = sub_401100(&amp;v120[<span class="number">16</span>], <span class="number">10</span>);</span><br><span class="line">  v62 = sub_401220(v61, <span class="number">5</span>);</span><br><span class="line">  v63 = sub_401100(v62, <span class="number">8</span>);</span><br><span class="line">  v64 = sub_401000(v63, <span class="number">9</span>);</span><br><span class="line">  sub_401000(v64, <span class="number">48</span>);</span><br><span class="line">  v65 = sub_401000(&amp;v120[<span class="number">17</span>], <span class="number">7</span>);</span><br><span class="line">  v66 = sub_401000(v65, <span class="number">6</span>);</span><br><span class="line">  v67 = sub_401000(v66, <span class="number">5</span>);</span><br><span class="line">  v68 = sub_401000(v67, <span class="number">4</span>);</span><br><span class="line">  v69 = sub_401000(v68, <span class="number">3</span>);</span><br><span class="line">  v70 = sub_401000(v69, <span class="number">2</span>);</span><br><span class="line">  v71 = sub_401000(v70, <span class="number">1</span>);</span><br><span class="line">  sub_401000(v71, <span class="number">20</span>);</span><br><span class="line">  v72 = sub_401000(&amp;v120[<span class="number">18</span>], <span class="number">7</span>);</span><br><span class="line">  v73 = sub_401000(v72, <span class="number">2</span>);</span><br><span class="line">  v74 = sub_401000(v73, <span class="number">4</span>);</span><br><span class="line">  v75 = sub_401000(v74, <span class="number">3</span>);</span><br><span class="line">  v76 = sub_401000(v75, <span class="number">6</span>);</span><br><span class="line">  v77 = sub_401000(v76, <span class="number">5</span>);</span><br><span class="line">  v78 = sub_401000(v77, <span class="number">1</span>);</span><br><span class="line">  sub_401000(v78, <span class="number">20</span>);</span><br><span class="line">  v79 = sub_401100(&amp;v120[<span class="number">19</span>], <span class="number">1000000</span>);</span><br><span class="line">  v80 = sub_401220(v79, <span class="number">999999</span>);</span><br><span class="line">  v81 = sub_401100(v80, <span class="number">4</span>);</span><br><span class="line">  v82 = sub_401000(v81, <span class="number">50</span>);</span><br><span class="line">  sub_401220(v82, <span class="number">1</span>);</span><br><span class="line">  v83 = sub_401220(&amp;v120[<span class="number">20</span>], <span class="number">1</span>);</span><br><span class="line">  v84 = sub_401100(v83, <span class="number">-294967296</span>);</span><br><span class="line">  v85 = sub_401000(v84, <span class="number">49</span>);</span><br><span class="line">  sub_401220(v85, <span class="number">1</span>);</span><br><span class="line">  v86 = sub_401220(&amp;v120[<span class="number">21</span>], <span class="number">1</span>);</span><br><span class="line">  v87 = sub_401100(v86, <span class="number">1000000000</span>);</span><br><span class="line">  v88 = sub_401000(v87, <span class="number">54</span>);</span><br><span class="line">  v89 = sub_401220(v88, <span class="number">1</span>);</span><br><span class="line">  v90 = sub_401000(v89, <span class="number">1000000000</span>);</span><br><span class="line">  sub_401220(v90, <span class="number">1000000000</span>);</span><br><span class="line">  v91 = sub_401000(&amp;v120[<span class="number">22</span>], <span class="number">49</span>);</span><br><span class="line">  v92 = sub_401220(v91, <span class="number">1</span>);</span><br><span class="line">  v93 = sub_401000(v92, <span class="number">2</span>);</span><br><span class="line">  sub_401220(v93, <span class="number">1</span>);</span><br><span class="line">  v94 = sub_401100(&amp;v120[<span class="number">23</span>], <span class="number">10</span>);</span><br><span class="line">  v95 = sub_401220(v94, <span class="number">5</span>);</span><br><span class="line">  v96 = sub_401100(v95, <span class="number">8</span>);</span><br><span class="line">  v97 = sub_401000(v96, <span class="number">9</span>);</span><br><span class="line">  sub_401000(v97, <span class="number">48</span>);</span><br><span class="line">  v98 = sub_401000(&amp;v120[<span class="number">24</span>], <span class="number">1</span>);</span><br><span class="line">  v99 = sub_401000(v98, <span class="number">3</span>);</span><br><span class="line">  v100 = sub_401000(v99, <span class="number">3</span>);</span><br><span class="line">  v101 = sub_401000(v100, <span class="number">3</span>);</span><br><span class="line">  v102 = sub_401000(v101, <span class="number">6</span>);</span><br><span class="line">  v103 = sub_401000(v102, <span class="number">6</span>);</span><br><span class="line">  v104 = sub_401000(v103, <span class="number">6</span>);</span><br><span class="line">  sub_401000(v104, <span class="number">20</span>);</span><br><span class="line">  v105 = sub_401000(&amp;v120[<span class="number">25</span>], <span class="number">55</span>);</span><br><span class="line">  v106 = sub_401220(v105, <span class="number">33</span>);</span><br><span class="line">  v107 = sub_401000(v106, <span class="number">44</span>);</span><br><span class="line">  v108 = sub_401220(v107, <span class="number">11</span>);</span><br><span class="line">  sub_401000(v108, <span class="number">42</span>);</span><br><span class="line">  sub_401000(&amp;v120[<span class="number">26</span>], v120[<span class="number">25</span>]);</span><br><span class="line">  sub_401000(&amp;v120[<span class="number">27</span>], v120[<span class="number">12</span>]);</span><br><span class="line">  v109 = v120[<span class="number">27</span>];</span><br><span class="line">  v110 = sub_401220(&amp;v120[<span class="number">28</span>], <span class="number">1</span>);</span><br><span class="line">  v111 = sub_401000(v110, v109);</span><br><span class="line">  sub_401220(v111, <span class="number">1</span>);</span><br><span class="line">  v112 = v120[<span class="number">23</span>];</span><br><span class="line">  v113 = sub_401220(&amp;v120[<span class="number">29</span>], <span class="number">1</span>);</span><br><span class="line">  v114 = sub_401100(v113, <span class="number">1000000</span>);</span><br><span class="line">  sub_401000(v114, v112);</span><br><span class="line">  v115 = v120[<span class="number">27</span>];</span><br><span class="line">  v116 = sub_401000(&amp;v120[<span class="number">30</span>], <span class="number">1</span>);</span><br><span class="line">  sub_401100(v116, v115);</span><br><span class="line">  sub_401000(&amp;v120[<span class="number">31</span>], v120[<span class="number">30</span>]);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CTF&#123;"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">32</span>; ++j )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, (v120[j]));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="reverse-for-the-holy-grail-350"><a href="#reverse-for-the-holy-grail-350" class="headerlink" title="reverse-for-the-holy-grail-350"></a>reverse-for-the-holy-grail-350</h2><p>又是C++的题, 对于初学, 我看这个有些还是很吃力的, 有些函数功能连蒙带猜. 其实静下心来分析, 逻辑还是很简单.</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200421172942651-1590549186380.png" alt="image-20200421172942651"></p><p>找到关键函数进去后, 看起来很多, 但逻辑也是不难的. </p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200421173112461-1590549193146.png" alt="image-20200421173112461"></p><p>这是程序的算法, 我挨个记录了下来……..我在到这步的时候, 就是在纠结那个取余多解的问题, 想到算起来很烦, 但由于是可输入的字符, 我们用遍历即可 (0-127)</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200421173211318-1590549201703.png" alt="image-20200421173211318"></p><p>最后附上,  代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> first[] = &#123;<span class="number">0x41</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x45</span>, <span class="number">0x6f</span>, <span class="number">0x61</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> second[] = &#123;<span class="number">0x2ef</span>, <span class="number">0x2c4</span>, <span class="number">0x2dc</span>, <span class="number">0x2c7</span>, <span class="number">0x2de</span>, <span class="number">0x2fc</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> third[] = &#123;<span class="number">0x1d7</span>, <span class="number">0xc</span>, <span class="number">0x244</span>, <span class="number">0x25e</span>, <span class="number">0x93</span>, <span class="number">0x6c</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> mod[<span class="number">18</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">666</span>, j = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mod[i] = n;</span><br><span class="line">n += n%<span class="number">5</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = first[j];</span><br><span class="line"></span><br><span class="line">flag[i+<span class="number">2</span>] = second[j] ^ mod[i+<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(z = <span class="number">0</span>; z &lt; <span class="number">127</span>; z++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((flag[i] ^ mod[i])*(z^mod[i+<span class="number">1</span>]) % second[j] == third[j])</span><br><span class="line">&#123;</span><br><span class="line">flag[i+<span class="number">1</span>] = z;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">j++;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, flag[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结: 程序中注意看清传入参数时,是一个字节, 还是一个int类型(4个字节); 取余运算, 逆向时, 一般遍历即可.</p><hr><h2 id="elrond32"><a href="#elrond32" class="headerlink" title="elrond32"></a>elrond32</h2><p>首先, 下载下来, 用ida打开, 发现没有输入的地方. 或许是隐藏起来了. 就在linux中运行一下来看, 果然没有输入, 只是输出验证失败.</p><p>回到ida, 逻辑也很清楚, 就是一个函数的返回值 非0 即可, 进入关键函数: 也很简单, 就是一个递归调用. 从0开始, 每次 (a1) 都符合相应的值且最要最后的跳出递归即可.通过这个我们就知道了 a1数组的值.  算了一下 a2的值为: 0 7 1 3 6 5 9 4 2, 而2没有就跳出. 按照这个顺序取 (a1) .</p><p><img src="/2020/04/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C(1)/image-20200421190646720-1590549218465.png" alt="image-20200421190646720"></p><p>其实浏览程序的时候, 已经看过 验证通过下面的一个函数, 就是让33个已经编码了的字符与我们得到的 (a1)异或运算, 再打印出flag. 下面C代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="number">105</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;<span class="keyword">char</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> n[<span class="number">33</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">66</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">68</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">45</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">55</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">89</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">54</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">85</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">65</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(A.n[i] ^ a[i % <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode</title>
      <link href="/2020/03/14/leetcode/"/>
      <url>/2020/03/14/leetcode/</url>
      
        <content type="html"><![CDATA[<h2 id="摩尔投票"><a href="#摩尔投票" class="headerlink" title="摩尔投票"></a>摩尔投票</h2><p>个人总结:</p><p>在一群以小队为组的战争中, 2个遇到若不是同队的就双方阵亡, 若2个人是同队的就结合起来.这样一直下去, 最后留下来的人, 将是这场战争中最多的人的小队的.该算法可以解决 计算一个数组中出现次数最多的元素. ( 从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个 )<a id="more"></a></p><p><img src="/2020/03/14/leetcode/image-20200314141207184-1590548390775.png" alt="image-20200314141207184"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">  &#123;</span><br><span class="line">​    <span class="keyword">if</span>(nums[ans] == nums[i])</span><br><span class="line">​      count++;</span><br><span class="line">​    <span class="keyword">else</span></span><br><span class="line">​      count--;</span><br><span class="line">      </span><br><span class="line">​    <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">​      ans = i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(count &gt; numsSize/<span class="number">2</span>)</span><br><span class="line">​      <span class="keyword">break</span>; </span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> nums[ans];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>将一个问题, 分成若干个的子问题解决 </p><pre><code>dp[i]表示nums[0]到nums[i]，含nums[i]的最长上升子序列；如果nums[j] &lt; nums[i],就dp[i]=max(dp[i],dp[j]+1)每次保存最大长度res=max(res,dp[i]) ////因为最后一个元素nums[n],不一定在最长子序列中如[10,9,2,5,3,7,101,6][10,9,2,5,3,7,101,6],dp[0]=1[10,9,2,5,3,7,101,6],dp[1]=1[10,9,2,5,3,7,101,6],dp[2]=1[10,9,2,5,3,7,101,6],dp[3]=dp[2]+1 //res=2[10,9,2,5,3,7,101,6],dp[4]=dp[2]+1 //res=2[10,9,2,5,3,7,101,6],dp[5]=dp[3]+1 //res=3[10,9,2,5,3,7,101,6],dp[6]=dp[5]+1 //res=4[10,9,2,5,3,7,101,6],dp[7]=dp[4]+1 //res=4</code></pre><p><img src="/2020/03/14/leetcode/image-20200314142330565-1590548403309.png" alt="image-20200314142330565"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(numsSize == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> dp[numsSize];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">  &#123;</span><br><span class="line">​    dp[i] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">​    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) </span><br><span class="line">​    <span class="keyword">if</span>(nums[i] &gt; nums[j])</span><br><span class="line">​    dp[i] = dp[i] &gt; dp[j]+<span class="number">1</span> ? dp[i]:dp[j]+<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">​    <span class="keyword">if</span>(dp[i] &gt; <span class="built_in">max</span>)</span><br><span class="line">​    <span class="built_in">max</span> = dp[i];</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><p>对于矩阵中每一行都旋转90°, 在不占用额外空间情况下. 可以先把整个矩阵转置一下, 再左右的2的数交换一下位置即实现.</p><p><img src="/2020/03/14/leetcode/image-20200425195006467-1590548409622.png" alt="image-20200425195006467"></p><p>题解:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixSize, <span class="keyword">int</span>* matrixColSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; *matrixColSize; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">matrix[i][j] = matrix[j][i];</span><br><span class="line">matrix[j][i] = temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = matrixSize &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrixSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mid; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">matrix[i][j] = matrix[i][matrixSize-j<span class="number">-1</span>];</span><br><span class="line">matrix[i][matrixSize-j<span class="number">-1</span>] = temp;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><p><strong>一道题不难的题, 但是觉得思想应该记一下.</strong></p><p><img src="/2020/03/14/leetcode/image-20200426184623169-1590548415836.png" alt="image-20200426184623169"></p><p>第一个思路是: 只管左边, 统计左边0和1出现的次数, 只要从左到右循环, 0出现的次数与1出现的次数之差比第一个比开始大, 那么我们的确定分割的位置就可以往后移.循环一遍, 找到了位置, 再分别相加.</p><p><strong>第二个思路:</strong> 先把所有的 1 都统计出来, 再左往右循环, 只要是字符0就加1, 字符1就减1.  附上第二个思路代码: C语言</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxScore</span><span class="params">(<span class="keyword">char</span> * s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">count += (s[i] == <span class="number">49</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">&#123;</span><br><span class="line">count += (s[i] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">ans = (ans &gt; count ? ans : count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxScore</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        count = s.count(<span class="string">'1'</span>)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s[:<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">'0'</span>:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">            ans = max(ans, count)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>最后, 同然的算法, python虽然方便,但是python在时间和空间复杂度上, 比C语言大好多.</p><hr><h2 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h2><blockquote><p><strong>异或运算的运用, 对逆向分析有帮助.</strong></p></blockquote><ul><li><p>首先异或运算的性质有.</p><table><thead><tr><th>交换律</th><th>a ^ b  = b ^ a</th></tr></thead><tbody><tr><td><strong>结合律</strong></td><td><strong>(a ^ b) ^ c = a ^ (b ^ c)</strong></td></tr><tr><td><strong>对于任何数a</strong></td><td><strong>x ^ x = 0,  x ^ 0 = x</strong></td></tr><tr><td><strong>自反性</strong></td><td><strong>a ^ b = c  -&gt;  c ^ b = a</strong></td></tr></tbody></table></li><li><p>第一种题型: (要求是 空间复杂度 0(1), 时间复杂度 0(n))</p><p>在一个数组 <code>nums</code> 中除一个数字只出现一次之外, 其他数字都出现了2次. 请找出那个只出现一次的数字.</p><p><strong>思路一: 用数学的方法,  首先让让数组中非重复的数字都相加后等2<code>(sum(set(nums)))*2</code>, 然后让s该数组求和<code>(sum(nums))</code>, 2者只差得到答案.</strong></p><p><strong>思路二: 由异或运算的性质, 我们让所有的元素异或运算, 结果就是答案</strong></p></li><li><p>第二种题型, 是第一种的延伸.</p><p><img src="/2020/03/14/leetcode/image-20200428123916375-1590548423589.png" alt="image-20200428123916375"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">singleNumbers</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *ans = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">sum ^= nums[i];    /有第一个题型, 我们知道最后结果是不相同两个数的异或结果.</span><br><span class="line"></span><br><span class="line">flag = (-sum)&amp;sum;  /取sum的所有位中第一个为<span class="number">1</span>的位.</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag &amp; nums[i])   /将不相同的两个数进行分组, 依据上面计算的flag.</span><br><span class="line">ans[<span class="number">0</span>] ^= nums[i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans[<span class="number">1</span>] ^= nums[i]; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    *returnSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编学习</title>
      <link href="/2020/02/19/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/02/19/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h2><p>由于现在的计算机是64位, 而debug是当年在16位的计算机上搞的, 在32位计算机中, 微软还在系统同增加了debug这个工具, 但是到了64位, 却没有加, 所以我们要自己去下载一个 dosbox 开源的dos模拟器, 然后将debug在dosbox中运行.当然这些都是没问题的.问题是: <a id="more"></a></p><p>在下载masm后, 由于第一次接触, 编写好源程序后, 用指令 masm   xxx.asm .但是一直报 A2044的错误, 就百度, 知乎, 都说输入的格式错误, 或者有非法字符。但是确定了没有之后还是报错，就这样痛苦了一晚上, 第二天起来, 还是不知道为什么, 就抱着试一试(奔溃了),换了个masm版本, 这次成功了. 但是在编写一个新的源程序, 又是这个错误, 再次崩,()/(ㄒoㄒ)/~~,.</p><p>突然我想到, 会不会是编码格式的错误呢, 就换了UTF-8试一下，果然。。。</p><p>既然网上都说了格式或者非法字符, 那怎么没想到编码问题呢。</p><h2 id="一些指令记录"><a href="#一些指令记录" class="headerlink" title="一些指令记录"></a>一些指令记录</h2><ul><li><p>and指令：OR是按位“或”操作。但是可以用来表示inc操作，比如 <code>0 and 3 = 0, 1 and 3 = 1, 2 and 3 = 2, 3 and 3 = 3, 4 and 3 = 0, 5 and 3 = 1</code>，以此做 0-3 的循环。</p></li><li><p>sal指令：将数据向左移位, 移了的位用0填充。移动一位相当于乘2。</p></li><li><p>sar指令：将数据向右移位, 移了的位用0填充。移动一位相当于除2，不用考虑余数。 比如 eax = 3 (11) ， sar eax, 1 后 eax = (01) = 1，相当于 3/2 = 1。</p></li><li><p>ror指令：<strong>循环右移</strong>，把所有位都向右移，最低位复制到进位标志位和最高位。指令用C语言来实现：如 <code>ror a, 3</code> 对应 <code>((a&gt;&gt;3）| ((a&amp;7) &lt;&lt; 5))</code>。</p><p><img src="/2020/02/19/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/image-20200529164348298.png" alt="image-20200529164348298"></p></li><li><p>rol指令：<strong>循环左移</strong>，与ror类似。</p></li></ul><h2 id="小端问题"><a href="#小端问题" class="headerlink" title="小端问题"></a>小端问题</h2><ul><li><p>在程序密码算法时, 可能会将计算后的数据存放在4个内存单元, 然后将其传给一个通用寄存器(EAX), 但是一般英特尔的cpu, 数据存放形式都是小端, 所以会将该4个内存单元的数据, 以它小端存储方式读取, 比如, 4个连续内存单元的数据依次为 0x12  0x34  0x56  0x78, 传给寄存器后, 由于小端,所以为, 0x78563412. 那么我们再写注册机的时候就可以, 先定义一个联合:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> EAX</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> eax;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次, 将4个数据存放在char[0 - 3] , 而eax就是我们要得值了. (不过这里要注意使用<code>unsigned char</code> , 因为一个字节的最大数据为 2 ^8 - 1 (FF),  有符号<code>char</code> 是 -2^7 ~ 2^7-1 , 用有符号<code>char</code> 很容易溢出)。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PTA</title>
      <link href="/2019/11/17/PTA/"/>
      <url>/2019/11/17/PTA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>PTA上C语言学习,细节方面有收获的地方.</p></blockquote><a id="more"></a><h2 id="PTA上没有一下子想到方法的题"><a href="#PTA上没有一下子想到方法的题" class="headerlink" title="PTA上没有一下子想到方法的题."></a>PTA上没有一下子想到方法的题.</h2><p><img src="/2019/11/17/PTA/image-20200407130405852.png" alt="image-20200407130405852"></p><p>下面附上代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>, hours = <span class="number">0</span>, minute = <span class="number">0</span>, end_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;n);</span><br><span class="line"></span><br><span class="line">hours = m/<span class="number">100</span>, minute = m%<span class="number">100</span>;  <span class="comment">//需要学习的地方.</span></span><br><span class="line"></span><br><span class="line">hours += n/<span class="number">60</span>, minute += n-(n/<span class="number">60</span>)*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(minute &gt;= <span class="number">60</span>) </span><br><span class="line">hours += <span class="number">1</span>, minute -= <span class="number">60</span>; <span class="comment">//需要注意的地方.</span></span><br><span class="line"><span class="keyword">if</span>(minute &lt; <span class="number">0</span>)</span><br><span class="line">hours -=<span class="number">1</span>, minute += <span class="number">60</span>; <span class="comment">//需要注意的地方.</span></span><br><span class="line"></span><br><span class="line">end_time = hours*<span class="number">100</span> + minute; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, end_time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PTA中做一道题-注意细节心得"><a href="#PTA中做一道题-注意细节心得" class="headerlink" title="PTA中做一道题, 注意细节心得."></a>PTA中做一道题, 注意细节心得.</h2><p><img src="/2019/11/17/PTA/image-20200413132934160.png" alt="image-20200413132934160"></p><p>下面附上代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">c = a%b;  <span class="comment">//求最大公约数中, 这里是  %  不要误写 /  ;</span></span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, temp = <span class="number">0</span>, g = <span class="number">0</span>, temp_N = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">0</span>, sum_a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">temp_N = N;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; N; N--)     <span class="comment">//开始输入的是N个数, 但是这里循环后变成了0, 所以后面就不能直接用N了, </span></span><br><span class="line">&#123;<span class="comment">//但是写程序时总是忽略了这点, 后面直接用N, 导致了出错还找半天.</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d/%d"</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">min</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="built_in">min</span>; </span><br><span class="line"><span class="built_in">min</span> = (<span class="built_in">min</span>*b)/gcd(<span class="built_in">min</span>, b);</span><br><span class="line">sum_a *= (<span class="built_in">min</span>/temp), sum_a += (<span class="built_in">min</span>/b)*a; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">min</span> = b, sum_a += a;</span><br><span class="line"></span><br><span class="line">g = gcd(sum_a, <span class="built_in">min</span>);</span><br><span class="line">sum_a /= g, <span class="built_in">min</span> /= g;</span><br><span class="line">&#125; </span><br><span class="line">N = temp_N;</span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span> *= N;</span><br><span class="line">g = gcd(sum_a, <span class="built_in">min</span>);</span><br><span class="line">sum_a /= g, <span class="built_in">min</span> /= g;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">min</span> &gt; <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d/%d"</span>, sum_a, <span class="built_in">min</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, sum_a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除子字符串的一道好题-方法可以掌握"><a href="#删除子字符串的一道好题-方法可以掌握" class="headerlink" title="删除子字符串的一道好题.  (方法可以掌握)"></a>删除子字符串的一道好题.  (方法可以掌握)</h2><p><img src="/2019/11/17/PTA/image-20200414093531965.png" alt="image-20200414093531965"></p><p>下面题解:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">81</span>] = &#123;<span class="number">0</span>&#125;, t[<span class="number">80</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">gets(s), gets(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p = <span class="built_in">strstr</span>(s, t)) <span class="comment">//首先找到子字符串的位置.</span></span><br><span class="line">&#123;</span><br><span class="line">*p = <span class="string">'\0'</span>;  <span class="comment">//将其字符串分开.</span></span><br><span class="line"><span class="built_in">strcat</span>(s, p+<span class="built_in">strlen</span>(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一道题因为没有注意-阶乘并不是-a-a-2-花了很多时间找错"><a href="#一道题因为没有注意-阶乘并不是-a-a-2-花了很多时间找错" class="headerlink" title="一道题因为没有注意, 阶乘并不是  a *= a+2, 花了很多时间找错."></a>一道题因为没有注意, 阶乘并不是  a *= a+2, 花了很多时间找错.</h2><p><img src="/2019/11/17/PTA/image-20200415160332020.png" alt="image-20200415160332020"></p><p>下面代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">2</span>, x = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( ; <span class="number">2</span>*a/b &gt;= x; a *= i, b *= (<span class="number">2</span>*(i++) + <span class="number">1</span>))  <span class="comment">// 这里一定要注意不是 a *= a+1, b *= b+2</span></span><br><span class="line">sum += <span class="number">2</span>*a/b;</span><br><span class="line"></span><br><span class="line">sum += <span class="number">2</span>*a/b</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.6lf"</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平面向量加法"><a href="#平面向量加法" class="headerlink" title="平面向量加法"></a>平面向量加法</h2><p><img src="/2019/11/17/PTA/image-20200526092314780.png" alt="image-20200526092314780"></p><ul><li><p>可以看到题目就是简单的加法, 但是这里考了个知识点, 正是我不知道的. 所以改了好几次才通过.</p></li><li><p>因为在C语言整数都是不管四舍五入的, 直接舍弃小数部分. 到了浮点数我默认以为保留几位小数时,也是直接舍弃多余小数部分, 但其实是四舍五入.</p></li></ul><p>下面题解.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf %lf %lf %lf"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">m = a+c, n = b+d; </span><br><span class="line"><span class="keyword">if</span>(m &gt; <span class="number">-0.05</span> &amp;&amp; m &lt; <span class="number">0</span>)</span><br><span class="line">m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">-0.05</span> &amp;&amp; n &lt; <span class="number">0</span>)</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"(%.1lf, %.1lf)"</span>, m, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找书籍"><a href="#查找书籍" class="headerlink" title="查找书籍"></a>查找书籍</h2><ul><li><p>学了这么久的C语言还在犯这种错误。。。因为没有处理缓冲区还去调试半天。。。</p><p><img src="/2019/11/17/PTA/image-20200528113931032.png" alt="image-20200528113931032"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">31</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125; A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">0</span>, <span class="built_in">min</span> = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();<span class="comment">//下面有字符输入， 这里必须吃掉回车。</span></span><br><span class="line">A *p = (A *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A)*n);</span><br><span class="line">    <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(A)*n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">gets(p[i].name);<span class="comment">//gets()后不产生回车。只是把最后输入的回车转化为 '\0' 。</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i].price);</span><br><span class="line">getchar();<span class="comment">//因为是循环，后面输入字符，要先吃掉回车。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p[<span class="built_in">max</span>].price &lt; p[i].price)</span><br><span class="line"><span class="built_in">max</span> = i;</span><br><span class="line"><span class="keyword">if</span>(p[<span class="built_in">min</span>].price &gt; p[i].price)</span><br><span class="line"><span class="built_in">min</span> = i;</span><br><span class="line">i++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf, %s\n"</span>, p[<span class="built_in">max</span>].price, p[<span class="built_in">max</span>].name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf, %s\n"</span>, p[<span class="built_in">min</span>].price, p[<span class="built_in">min</span>].name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>gets()后不产生回车。只是把最后输入的回车转化为 ‘\0’ 。</p></blockquote><h2 id="PAT-520-钻石争霸赛"><a href="#PAT-520-钻石争霸赛" class="headerlink" title="PAT 520 钻石争霸赛"></a>PAT 520 钻石争霸赛</h2><blockquote><p>其中2道很简单的题，但做的时候都有一个测试点怎么也过不了。。。当时真崩溃了，比赛结束后来看了很久还是没发现错误，很知道到测试点是什么，但这是不可能的。。。后面一度认为题目对C语言的问题。。。今天找到了，2个题还犯了同一种错误，必须记录下来做警示。。。</p></blockquote><ul><li><p>首先是简单的求平均成绩，问题就出现在如果成一个人的成绩是0的话，总成绩为0，但人数增加了一个啊。而我们一直使用的分数来确定是否有人存在。。。。。。。找这个错误真不容易。</p><p><img src="/2019/11/17/PTA/image-20200601095453045.png" alt="image-20200601095453045"></p></li><li><p>代码警示错误。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = <span class="number">0</span>, sum_0 = <span class="number">0</span>, sum_1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, score = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count_1 = <span class="number">0</span>, count_2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">while</span>(N--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;score);</span><br><span class="line"><span class="keyword">if</span>(n)</span><br><span class="line">sum_1 += score, count_1++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum_0 += score, count_2++; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1lf"</span>, (<span class="keyword">double</span>)(sum_1+sum_0)/(count_1+count_2));</span><br><span class="line"><span class="keyword">if</span>(count_1)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %.1lf"</span>, (<span class="keyword">double</span>)sum_1/count_1);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" X"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(count_2) <span class="comment">//这里！！！开始一直使用的总分数是否为0来衡量人数是否为0！但人会有0分的情况啊。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %.1lf"</span>, (<span class="keyword">double</span>)sum_0/count_2);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" X"</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>下面这个题犯了差不多的错。可以看到，就是倒序输出数字，可以很多方法。我使用的将每位数字先分离出来存入一个数组，在倒序输出。 但这里有一个0的情况，如果数字为0，那分离数字的结果就是什么也没有即什么也不输出。。。。。。</p><p><img src="/2019/11/17/PTA/image-20200601100305684.png" alt="image-20200601100305684"></p></li><li><p>这里其实直接转化为字符串输出就好了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">13</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">sprintf</span>(ch, <span class="string">"%d"</span>, a += b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; ch[i]; <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, ch[i++]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结：2个题遇到同种类型的错误，折磨了我很久，但对自己进行补漏了。注意0的情况很重要。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言一些总结</title>
      <link href="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="关于memset赋初值"><a href="#关于memset赋初值" class="headerlink" title="关于memset赋初值"></a>关于memset赋初值</h2><ul><li><p>一般我们使用memset都是赋值0作为初始化值，但不能赋值非0嘛？其实是可以的，但仅限于对像字符数组那样的单字节数据。</p></li><li><p>因为memset是以字节为单位进行一个字节一个字节进行填充的。<a id="more"></a></p></li></ul><h2 id="一个优先级问题"><a href="#一个优先级问题" class="headerlink" title="一个优先级问题"></a>一个优先级问题</h2><ul><li><p>在刚学指针时写了 <code>while(c = *(p++)  != &#39;\0&#39;)</code>，但是一直得不到自己想要的结果。</p></li><li><p>原因在于这里 <code>!=</code> 的优先级大于 <code>=</code>， 所以先执行了 <code>*(p++)  != &#39;\0&#39;</code>，而这个的结果是以一个boolean值，只有2种结果 0 或 1。</p></li><li><p>故c = 1 或 0 了。</p></li></ul><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>一：什么是缓冲区？</p><ul><li>缓冲区又称为缓存，它是内存空间的一部分。也就是说，在内存空间中预留了一定的存储空间，这些存储空间用来缓冲输入或输出的数据，这部分预留的空间就叫做缓冲区。</li><li>缓冲区根据其对应的是输入设备还是输出设备，分为输入缓冲区和输出缓冲区。</li></ul><p>二：为什么要引入缓冲区？</p><ul><li>比如我们从磁盘里取信息，我们先把读出的数据放在缓冲区，计算机再直接从缓冲区中取数据，等缓冲区的数据取完后再去磁盘中读取，这样就可以减少磁盘的读写次数，再加上计算机对缓冲区的操作大大快于对磁盘的操作，故应用缓冲区可大大提高计算机的运行速度。</li><li>又比如，我们使用打印机打印文档，由于打印机的打印速度相对较慢，我们先把文档输出到打印机相应的缓冲区，打印机再自行逐步打印，这时我们的CPU可以处理别的事情。</li><li>缓冲区就是一块内存区，它用在输入输出设备和CPU之间，用来缓存数据。它使得低速的输入输出设备和高速的CPU能够协调工作，避免低速的输入输出设备占用CPU，解放出CPU，使其能够高效率工作。</li></ul><p>三：缓冲区的类型。</p><p>区分为三种类型：全缓冲、行缓冲和不带缓冲。</p><ul><li><p>全缓冲</p><p>在这种情况下，当填满标准I/O缓存后才进行实际I/O操作。全缓冲的典型代表是对磁盘文件的读写。</p></li><li><p>行缓冲</p><p>在这种情况下，当在输入和输出中遇到换行符时，执行真正的I/O操作。这时，我们输入的字符先存放在缓冲区，等按下回车键换行时才进行实际的I/O操作。典型代表是键盘输入数据。</p></li><li><p>不带缓冲</p><p>也就是不进行缓冲，标准出错情况stderr是典型代表，这使得出错信息可以直接尽快地显示出来。</p></li></ul><p>四：刷新缓冲区</p><ul><li>在我们C语言文件操作中使用 <code>fclose()</code>函数就有那种作用。</li></ul><h2 id="关于联合位域，小端"><a href="#关于联合位域，小端" class="headerlink" title="关于联合位域，小端"></a>关于联合位域，小端</h2><ul><li><p>在一般的我们平常使用的计算机, 数据存储方式都是小端, 但是C语言编译器都会经过处理, 所以总是按一个类型, 倒序显示。</p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200426080918889-1590480458990-1590662951683.png" alt="image-20200426080918889-1590480458990"></p><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200426080956374-1590480458991-1590662970168.png" alt="image-20200426080956374-1590480458991"></p></li><li><p>从以上两个图片可以看出, 当结构体中位域定义时. 是从左往右一个字节一个字节进行定义, 在一个字节中也是从低位bit0 开始算起的(注意不是从高位开始对应)。</p></li><li><p>如上图中 test.year = 0x655, year有12位. 但是在多出的4位中, 06在该字节的低位, test.month = 0x4在该字节的高位。</p></li><li><p>当相邻成员的类型相同时，如果它们的位宽之和小于类型的 sizeof 大小，那么后面的成员紧邻前一个成员存储，直到不能容纳为止；如果它们的位宽之和大于类型的 sizeof 大小，那么后面的成员将从新的存储单元开始，其偏移量为类型大小的整数倍。 若不是同类型, 则不会, 注意(int 与 short int)也是不同类型.。</p></li></ul><h2 id="二维数组形参问题"><a href="#二维数组形参问题" class="headerlink" title="二维数组形参问题"></a>二维数组形参问题</h2><ul><li>当二维数组作为参数传递给函数时，函数的形参不能简单地写双重指针。</li><li>因为编译器实际寻址如下：对于数组 int p[m][n];如果要取p[i][j]的值，编译器是这样寻址的：p + i*n + j; 如果我们省略了第二维或者更高维的大小，编译器将不知道如何正确的寻址。因此如果我们在编写程序的时候需要用到各个维数都不固定的二维数组作为参数，虽然这个时候编译器还是不能识别。</li><li>我们可以把二维数组当做普通的指针，将它的大小用两个参数指明，然后我们为二维数组手工寻址，这样就可以将二维数组作为函数的参数传递了，我们可以把维数固定的参数变为维数随即的参数。</li></ul><h2 id="需要用getchar-吃掉回车的情况"><a href="#需要用getchar-吃掉回车的情况" class="headerlink" title="需要用getchar()吃掉回车的情况"></a>需要用getchar()吃掉回车的情况</h2><ol><li>接受字符或字符串的前面有<code>scanf()</code>语句。</li><li>连续使用2个<code>getchar()</code>接受字符时，中间要使用一个<code>getchar()</code>吃掉回车。</li></ol><p><strong>注意：<code>gets()</code>后面是不需要吃掉回车的，因为它把回车转化为了字符串最后的 ‘\0’ 。</strong></p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><p>对于文件写入方式主要还是与使用的函数有关，与打开方式关系不大。</p></li><li><p>文本形式写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = fopen(<span class="string">"lines"</span>, <span class="string">"w"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//fwrite(&amp;a, 1, 4, fp);</span></span><br><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d"</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200528192200300.png" alt="image-20200528192200300"></p></li><li><p>二进制形式写入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line">fp = fopen(<span class="string">"lines"</span>, <span class="string">"wb"</span>); </span><br><span class="line"></span><br><span class="line">fwrite(&amp;a, <span class="number">1</span>, <span class="number">4</span>, fp);</span><br><span class="line"><span class="comment">//fprintf(fp, "%d", a);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/17/C%E8%AF%AD%E8%A8%80%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/image-20200528192308515.png" alt="image-20200528192308515"></p></li><li><p>从以上可以很清楚他们的区别。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言学习 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
