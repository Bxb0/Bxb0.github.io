<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bxb0&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bxb0.github.io/"/>
  <updated>2022-03-08T04:02:20.659Z</updated>
  <id>https://bxb0.github.io/</id>
  
  <author>
    <name>ooo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pragyan-ctf-2022</title>
    <link href="https://bxb0.github.io/2022/03/08/pragyan-ctf-2022/"/>
    <id>https://bxb0.github.io/2022/03/08/pragyan-ctf-2022/</id>
    <published>2022-03-08T03:46:21.000Z</published>
    <updated>2022-03-08T04:02:20.659Z</updated>
    
    <content type="html"><![CDATA[<p>玩一玩 <a id="more"></a></p><p>涉及到的题目链接：链接：<a href="https://pan.baidu.com/s/1ll1bWhd845tj6JDFkx3i6Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1ll1bWhd845tj6JDFkx3i6Q</a><br>提取码：fsrp</p><h3 id="Web-Awesome"><a href="#Web-Awesome" class="headerlink" title="Web Awesome"></a>Web Awesome</h3><p>打开网页，看到提交按钮的事件</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307223734453.png" alt="image-20220307223734453"></p><p>从源代码中定位到这个onclick</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307223841070.png" alt="image-20220307223841070"></p><p>这是一个考察wasm的题，将网站中的index.wasm下载下来，进行.wasm-&gt;.o的转换，ida中看到转化后的目标文件，运算只有一个异或9</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224040013.png" alt="image-20220307224040013"></p><p>再看到init_memory中的数据，异或一下9即是flag</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224232136.png" alt="image-20220307224232136"></p><h3 id="Oak"><a href="#Oak" class="headerlink" title="Oak"></a>Oak</h3><p>给的一个class文件，使用jar命令将这个class文件打包成一个jar包，然后用jd-gui查看jar包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf Oak.jar Oak.class</span><br></pre></td></tr></table></figure><p>jar包内容如下，剩下就是简单的java代码审计逆向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oak</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">long</span>[] data = &#123; <span class="number">28767L</span>, <span class="number">24418L</span>, <span class="number">25470L</span>, <span class="number">29771L</span>, <span class="number">26355L</span>, <span class="number">31349L</span>, <span class="number">13032L</span>, <span class="number">30456L</span>, <span class="number">14663L</span>, <span class="number">27592L</span>, <span class="number">8916L</span>, <span class="number">29409L</span>, <span class="number">7348L</span>, <span class="number">17474L</span>, <span class="number">5124L</span>, <span class="number">3345L</span>, <span class="number">49357L</span>, <span class="number">61058L</span>, <span class="number">65159L</span>, <span class="number">53773L</span>, <span class="number">67886L</span>, <span class="number">72426L</span>, <span class="number">103728L</span>, <span class="number">158125L</span>, <span class="number">179542L</span>, <span class="number">166504L</span>, <span class="number">212101L</span>, <span class="number">282674L</span>, <span class="number">320873L</span>, <span class="number">329272L</span>, <span class="number">400021L</span>, <span class="number">479881L</span>, <span class="number">535081L</span>, <span class="number">599886L</span>, <span class="number">662294L</span>, <span class="number">731441L</span>, <span class="number">831284L</span>, <span class="number">947032L</span>, <span class="number">1021482L</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">t_helper</span><span class="params">(<span class="keyword">int</span> paramInt, <span class="keyword">int</span>[] paramArrayOfInt)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paramArrayOfInt[paramInt] != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[paramInt];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (paramInt == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      paramArrayOfInt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (paramInt == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      paramArrayOfInt[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (paramInt == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      paramArrayOfInt[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">return</span> paramArrayOfInt[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    paramArrayOfInt[paramInt] = (<span class="number">3</span> * t_helper(paramInt - <span class="number">1</span>, paramArrayOfInt) - <span class="number">3</span> * t_helper(paramInt - <span class="number">2</span>, paramArrayOfInt) + t_helper(paramInt - <span class="number">3</span>, paramArrayOfInt));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> paramArrayOfInt[paramInt];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">t</span><span class="params">(<span class="keyword">int</span> paramInt)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arrayOfInt = <span class="keyword">new</span> <span class="keyword">int</span>[paramInt + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayOfInt.length; i++) &#123;</span><br><span class="line">      arrayOfInt[i] = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t_helper(paramInt, arrayOfInt);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] paramArrayOfString)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paramArrayOfString.length != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: [flag]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check(paramArrayOfString[<span class="number">0</span>])) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Correct!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"Incorrect"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span>[] conv(String paramString)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">long</span>[] arrayOfLong = <span class="keyword">new</span> <span class="keyword">long</span>[paramString.length()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramString.length(); i++) &#123;</span><br><span class="line">      arrayOfLong[i] = ((paramString.charAt(i) &lt;&lt; <span class="string">'\b'</span>) + paramString.charAt((i + <span class="number">1</span>) % paramString.length()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrayOfLong;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String paramString)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">long</span>[] arrayOfLong = conv(paramString);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayOfLong.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data[i] != (arrayOfLong[i] ^ t(i * i))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Secure-lock"><a href="#Secure-lock" class="headerlink" title="Secure-lock"></a>Secure-lock</h3><p>开始就是五个逻辑很明显的check</p><p>1、check1</p><p>限定了这个数是45位，且给了这个数的后15位与前9位，而check_num2就是验证这个数是否是阿姆斯特朗数。<br><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224439985.png" alt="image-20220307224439985"></p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307224445820.png" alt="image-20220307224445820"></p><p>因此这个checK就是让我们求一个45位，且限定了前9位与后15位的阿姆斯特朗数，我们爆破中间21位即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">check = <span class="keyword">lambda</span> N:sum(map(<span class="keyword">lambda</span> x: int(x)**len(str(N)), str(N))) == N</span><br><span class="line"></span><br><span class="line">x = <span class="string">'01'</span></span><br><span class="line">a = <span class="string">'110011001'</span></span><br><span class="line">c = <span class="string">'100011001011111'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>**<span class="number">21</span>):</span><br><span class="line">    b = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">        b += x[(i &gt;&gt; j)&amp;<span class="number">1</span>]</span><br><span class="line">    ans = int(a+b+c, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> check(ans):</span><br><span class="line">        print(ans)</span><br></pre></td></tr></table></figure><p>2、check2</p><p>一个6字节伪随机数，与shuffle算法，这里要注意一下的就是通过输入8字节数据通过shuffle函数后要变为6字节与伪随机数相等。</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307225304002.png" alt="image-20220307225304002"></p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307225316911.png" alt="image-20220307225316911"></p><p>解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7 = [<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">0</span>] = <span class="number">67</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">1</span>] = <span class="number">131</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">2</span>] = <span class="number">37</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">3</span>] = <span class="number">59</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">4</span>] = <span class="number">193</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">5</span>] = <span class="number">71</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">6</span>] = <span class="number">107</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7[<span class="number">7</span>] = <span class="number">233</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v7</span><br><span class="line">[<span class="number">67</span>, <span class="number">131</span>, <span class="number">37</span>, <span class="number">59</span>, <span class="number">193</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">233</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line"><span class="meta">... </span>    tmp = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> i != j:</span><br><span class="line"><span class="meta">... </span>                    tmp ^= v7[j]</span><br><span class="line"><span class="meta">... </span>    ans.append(tmp)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">153</span>, <span class="number">89</span>, <span class="number">255</span>, <span class="number">225</span>, <span class="number">27</span>, <span class="number">157</span>, <span class="number">177</span>, <span class="number">51</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc2 = <span class="number">0x0E08A6F2D5B19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc2 = enc2.to_bytes(<span class="number">6</span>, <span class="string">'big'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc2</span><br><span class="line"><span class="string">b'\xe0\x8ao-[\x19'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">8</span>):</span><br><span class="line"><span class="meta">... </span>    ans[i] ^= enc2[i<span class="number">-2</span>]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">153</span>, <span class="number">89</span>, <span class="number">31</span>, <span class="number">107</span>, <span class="number">116</span>, <span class="number">176</span>, <span class="number">234</span>, <span class="number">42</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = bytes(ans)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int.from_bytes(ans, <span class="string">'little'</span>)</span><br><span class="line"><span class="number">3092478108203178393</span></span><br></pre></td></tr></table></figure><p>3、check3</p><p>一个base64</p><p>4、check4</p><p>多个方程：<br><img src="/2022/03/08/pragyan-ctf-2022/image-20220307225841720.png" alt="image-20220307225841720"></p><p>因为这个check的有一个条件 &amp;&amp; ，反过来就是 || 这样就导致了多解，这使得这个程序本地有多个可以反馈正确的输入。</p><p>z3解即可。</p><p>5、check5</p><p>就是一些异或和移位算法：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307230148992.png" alt="image-20220307230148992"></p><p>解密：</p><p>先跑出get()函数返回的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v7[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_num_1</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (a1 &amp; <span class="number">1</span>) == <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> a1 == <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">3L</span>L; a1 &gt;= i * i; i += <span class="number">2L</span>L )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !(a1 % i) )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">-1L</span>L;</span><br><span class="line">  v3 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( v2 != a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( check_num_1(++v3) )</span><br><span class="line">      ++v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v7[<span class="number">0</span>] = <span class="number">103</span>;</span><br><span class="line">v7[<span class="number">1</span>] = <span class="number">127</span>;</span><br><span class="line">v7[<span class="number">2</span>] = <span class="number">157</span>;</span><br><span class="line">v7[<span class="number">3</span>] = <span class="number">11</span>;</span><br><span class="line">v7[<span class="number">4</span>] = <span class="number">29</span>;</span><br><span class="line">v7[<span class="number">5</span>] = <span class="number">211</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#x, "</span>, <span class="built_in">get</span>(v7[i])&amp;<span class="number">0xff</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0x39, 0xcf, 0xa1, 0x25, 0x71, 0x15</span></span><br></pre></td></tr></table></figure><p>异或和移位解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">0x39</span>, <span class="number">0xcf</span>, <span class="number">0xa1</span>, <span class="number">0x25</span>, <span class="number">0x71</span>, <span class="number">0x15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = <span class="number">0xA8F24130A1EFL</span>L</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = enc3.to_bytes(<span class="number">6</span>, <span class="string">'little'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3</span><br><span class="line"><span class="string">b'\xef\xa10A\xf2\xa8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int.from_bytes(enc3, <span class="string">'little'</span>)</span><br><span class="line"><span class="number">185758429258223</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = list(enc3)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3 = [<span class="number">16</span> * (i &amp; <span class="number">0xF</span>) + (i &gt;&gt; <span class="number">4</span>) <span class="keyword">for</span> i <span class="keyword">in</span> enc3]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc3</span><br><span class="line">[<span class="number">254</span>, <span class="number">26</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">47</span>, <span class="number">138</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">254</span>)</span><br><span class="line"><span class="string">'0xfe'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">26</span>)</span><br><span class="line"><span class="string">'0x1a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [enc3[i]^x[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">199</span>, <span class="number">213</span>, <span class="number">162</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">159</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = bytes(ans)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line"><span class="string">b'\xc7\xd5\xa21^\x9f'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res3 = int.from_bytes(ans, <span class="string">'little'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res3</span><br><span class="line"><span class="number">175226908497351</span></span><br></pre></td></tr></table></figure><p>过了5个check后来看到最后的check_flag，就是将前5个check输入的数据作为key和flag进行一些异或运算</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220307231112324.png" alt="image-20220307231112324"></p><p>总结一下，得到前5个check的输入和最后的密文如下：<br><img src="/2022/03/08/pragyan-ctf-2022/image-20220307231152805.png" alt="image-20220307231152805"></p><p>解密：</p><p>以下涉及到一个python中将一个多元列表转化为一元列表的简单写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [j <span class="keyword">for</span> i <span class="keyword">in</span> aa <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">0</span>] = <span class="number">0xB688C7A7BE252CFB</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">1</span>] = <span class="number">0x3B31753308242432</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">2</span>] = <span class="number">0x23B66D9AC612B9D4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v19[<span class="number">3</span>] = <span class="number">0xC732FCCF85C78B27</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [i.to_bytes(<span class="number">8</span>, <span class="string">'little'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> v19]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="string">b'\xfb,%\xbe\xa7\xc7\x88\xb6'</span>, <span class="string">b'2$$\x083u1;'</span>, <span class="string">b'\xd4\xb9\x12\xc6\x9am\xb6#'</span>, <span class="string">b"'\x8b\xc7\x85\xcf\xfc2\xc7"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = <span class="string">b''</span>.join(enc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line"><span class="string">b"\xfb,%\xbe\xa7\xc7\x88\xb62$$\x083u1;\xd4\xb9\x12\xc6\x9am\xb6#'\x8b\xc7\x85\xcf\xfc2\xc7"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = list(enc)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">251</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">190</span>, <span class="number">167</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">117</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">18</span>, <span class="number">198</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">39</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">133</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">199</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = <span class="number">28116440335967</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2 = <span class="number">3092478108203178393</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p3 = <span class="string">'Mc5LyF7YvIxLxeTX'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p4 = <span class="string">'SIZHCAKC3LxftSDT'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p5 = <span class="number">175226908497351</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p3 = list(p3.encode())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p4 = list(p4.encode())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p3 = [<span class="number">16</span> * (i &amp; <span class="number">0xF</span>) + (i &gt;&gt; <span class="number">4</span>) <span class="keyword">for</span> i <span class="keyword">in</span> p3]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p4 = [<span class="number">16</span> * (i &amp; <span class="number">0xF</span>) + (i &gt;&gt; <span class="number">4</span>) <span class="keyword">for</span> i <span class="keyword">in</span> p4]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p1 = p1.to_bytes(<span class="number">8</span>, <span class="string">"little"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p2 = p2.to_bytes(<span class="number">8</span>, <span class="string">"little"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p5 = p5.to_bytes(<span class="number">8</span>, <span class="string">"little"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xx = p1+p2+p5</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>xx</span><br><span class="line"><span class="string">b'_Fp^\x92\x19\x00\x00\x99Y\x1fkt\xb0\xea*\xc7\xd5\xa21^\x9f\x00\x00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">251</span>, <span class="number">44</span>, <span class="number">37</span>, <span class="number">190</span>, <span class="number">167</span>, <span class="number">199</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">36</span>, <span class="number">8</span>, <span class="number">51</span>, <span class="number">117</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">212</span>, <span class="number">185</span>, <span class="number">18</span>, <span class="number">198</span>, <span class="number">154</span>, <span class="number">109</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">39</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">133</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">199</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span><span class="number">-8</span>):</span><br><span class="line"><span class="meta">... </span>    enc[i] ^= xx[i]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">39</span>, <span class="number">139</span>, <span class="number">199</span>, <span class="number">133</span>, <span class="number">207</span>, <span class="number">252</span>, <span class="number">50</span>, <span class="number">199</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span><span class="number">-8</span>, <span class="number">32</span>):</span><br><span class="line"><span class="meta">... </span>    enc[i] = ~enc[i]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">-40</span>, <span class="number">-140</span>, <span class="number">-200</span>, <span class="number">-134</span>, <span class="number">-208</span>, <span class="number">-253</span>, <span class="number">-51</span>, <span class="number">-200</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [i&amp;<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> enc]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = zip(p3, p4)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp = [j <span class="keyword">for</span> i <span class="keyword">in</span> pp <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pp</span><br><span class="line">[<span class="number">212</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">148</span>, <span class="number">83</span>, <span class="number">165</span>, <span class="number">196</span>, <span class="number">132</span>, <span class="number">151</span>, <span class="number">52</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">115</span>, <span class="number">180</span>, <span class="number">149</span>, <span class="number">52</span>, <span class="number">103</span>, <span class="number">51</span>, <span class="number">148</span>, <span class="number">196</span>, <span class="number">135</span>, <span class="number">135</span>, <span class="number">196</span>, <span class="number">102</span>, <span class="number">135</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">53</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">133</span>, <span class="number">69</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc</span><br><span class="line">[<span class="number">164</span>, <span class="number">106</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">53</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">182</span>, <span class="number">171</span>, <span class="number">125</span>, <span class="number">59</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">219</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">108</span>, <span class="number">176</span>, <span class="number">247</span>, <span class="number">196</span>, <span class="number">242</span>, <span class="number">182</span>, <span class="number">35</span>, <span class="number">216</span>, <span class="number">116</span>, <span class="number">56</span>, <span class="number">122</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">205</span>, <span class="number">56</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [enc[i]^pp[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line">[<span class="number">112</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">123</span>, <span class="number">76</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">73</span>, <span class="number">95</span>, <span class="number">119</span>, <span class="number">52</span>, <span class="number">113</span>, <span class="number">78</span>, <span class="number">37</span>, <span class="number">116</span>, <span class="number">95</span>, <span class="number">36</span>, <span class="number">51</span>, <span class="number">67</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">79</span>, <span class="number">117</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'p_ctf&#123;L2&lt;I_w4qN%t_$3CurE_3nOuGH&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>p_ctf{L2&lt;I_w4qN%t_$3CurE_3nOuGH}</strong></p><h3 id="Classic"><a href="#Classic" class="headerlink" title="Classic"></a>Classic</h3><p>ida中打开所给elf文件，很明显这不是一个常规的elf文件，从字符串我们能知道这是一个python文件打包成的elf文件。</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308110107864.png" alt="image-20220308110107864"></p><p>使用archive_viewer.py对该elf文件进行解包</p><blockquote><p>archive_viewer.py就在我们安装pyinstaller包的子目录下，如下面截图中的路径</p><p>pyinstaller的安装：pip3 install pyinstaller</p></blockquote><p>找到archive_viewer.py的位置后将其复制到当前要解包elf文件所在的目录：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308111145374.png" alt="image-20220308111145374"></p><p>解包：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308111508386.png" alt="image-20220308111508386"></p><p>使用 x 命令提取出enc与struct文件：</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308111540002.png" alt="image-20220308111540002"></p><p>接着就是常规的修复pyc头，然后使用uncompyl6对修复后的pyc文件进行反编译即可。</p><p>看到得到的py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.7.4</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.5 (default, Jan 27 2021, 15:41:15) </span></span><br><span class="line"><span class="comment"># [GCC 9.3.0]</span></span><br><span class="line"><span class="comment"># Embedded file name: enc.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 257 bytes</span></span><br><span class="line">a = <span class="string">'ABCDEFGHIJ'</span></span><br><span class="line">a1 = <span class="string">'abcd'</span></span><br><span class="line">enc_a = <span class="string">'ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJAB'</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alg</span><span class="params">(a, k, lst, enc)</span>:</span></span><br><span class="line">    l = len(k)</span><br><span class="line">    r = [a[i::l] <span class="keyword">for</span> i <span class="keyword">in</span> range(l)]</span><br><span class="line">    k1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">        k1 += str(ord(i))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</span><br><span class="line">            i1 = <span class="number">0</span></span><br><span class="line">            e = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> r[i]:</span><br><span class="line">                i1 = ord(c) ^ ord(k[i]) ^ i1 &gt;&gt; <span class="number">2</span></span><br><span class="line">                e += chr(i1)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                r[i] = e</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k2 = (k1 * <span class="number">6</span>)[<span class="number">-3</span>::<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(k2)):</span><br><span class="line">                v2 = k2[i]</span><br><span class="line">                <span class="keyword">if</span> <span class="number">48</span> &lt;= ord(v2) &lt;= <span class="number">51</span>:</span><br><span class="line">                    lst.append((ord(enc[i]) ^ <span class="number">14</span>) - <span class="number">47</span> ^ <span class="number">9</span>)</span><br><span class="line">                <span class="keyword">elif</span> <span class="number">52</span> &lt;= ord(v2) &lt;= <span class="number">54</span>:</span><br><span class="line">                    lst.append((ord(enc[i]) ^ <span class="number">15</span>) + <span class="number">28</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">55</span> &lt;= ord(v2) &lt;= <span class="number">57</span>:</span><br><span class="line">                        lst.append((ord(enc[i]) ^ <span class="number">13</span>) - <span class="number">62</span>)</span><br><span class="line">            lr = list(zip(*r))</span><br><span class="line">            eflg = <span class="string">''</span>.join((hex(<span class="number">256</span> + ord(i))[<span class="number">3</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">''</span>.join((<span class="string">''</span>.join(j) <span class="keyword">for</span> j <span class="keyword">in</span> lr))))</span><br><span class="line">            <span class="keyword">if</span> lst == x:</span><br><span class="line">                <span class="keyword">if</span> len(lst) != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'Good Job'</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Try again'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(alg(a, a1, lst, enc_a))</span><br><span class="line"><span class="comment"># okay decompiling enc.pyc</span></span><br></pre></td></tr></table></figure><p>然后我们看到题目所给的另外一个.enc密文文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> <span class="number">46</span> <span class="number">-3</span> <span class="number">73</span> <span class="number">4</span> <span class="number">86</span> <span class="number">5</span> <span class="number">52</span> <span class="number">-2</span> <span class="number">86</span> <span class="number">6</span> <span class="number">48</span> <span class="number">3</span> <span class="number">88</span> <span class="number">91</span> <span class="number">2</span> <span class="number">25</span> <span class="number">53</span> <span class="number">-2</span> <span class="number">55</span> <span class="number">-2</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">53</span> <span class="number">87</span> <span class="number">0</span> <span class="number">6</span> <span class="number">-2</span> <span class="number">85</span> <span class="number">52</span> <span class="number">0</span> <span class="number">2</span> <span class="number">88</span> <span class="number">89</span> <span class="number">5</span> <span class="number">73</span> <span class="number">3</span> <span class="number">-3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">-6</span> <span class="number">25</span> <span class="number">4</span> <span class="number">83</span> <span class="number">0</span> <span class="number">48</span> <span class="number">0</span> <span class="number">89</span> <span class="number">4</span> <span class="number">48</span> <span class="number">25</span> <span class="number">88</span> <span class="number">89</span> <span class="number">4</span> <span class="number">6</span> <span class="number">55</span> <span class="number">-1</span> <span class="number">7</span> <span class="number">1</span> <span class="number">1</span> <span class="number">25</span> <span class="number">1</span> <span class="number">85</span> <span class="number">53</span> <span class="number">6</span> <span class="number">1</span> <span class="number">87</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">86</span> <span class="number">136</span> <span class="number">6</span> <span class="number">3</span> <span class="number">2</span> <span class="number">42</span> <span class="number">4</span> <span class="number">42</span> <span class="number">-1</span> <span class="number">50</span> <span class="number">7</span> <span class="number">86</span> <span class="number">2</span> <span class="number">25</span> <span class="number">-4</span> <span class="number">138</span> <span class="number">3</span> <span class="number">48</span> <span class="number">25</span> <span class="number">136</span> <span class="number">90</span> <span class="number">6</span> <span class="number">25</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">-9</span> <span class="number">25</span> <span class="number">6</span> <span class="number">89</span> <span class="number">55</span> <span class="number">2</span> <span class="number">-6</span> <span class="number">87</span> <span class="number">4</span> <span class="number">0</span> <span class="number">50</span> <span class="number">84</span> <span class="number">137</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">encrypted key - <span class="number">0791151174073560118079115117407356011807911511740735601180791151174073560118079115117407356011807911511740735601</span></span><br></pre></td></tr></table></figure><p>看到所给的.enc密文文件会感觉莫名奇妙，也不清楚他们到底对应原py代码中的那个变量，这也是本题很谜语的地方，还有就是根本不知道原py代码中那个变量是我们要逆的flag。</p><p>经过梳理分析，得到正确的考点和逻辑如下：</p><p>1.密文文件中所给的数组为py代码中的 x 数组</p><p>2.密文文件中的encrypted key为py代码中的 k2</p><p>3.py代码中的eflg变量与enc变量是相同的含义（再py代码中根本没体现出来，故意的吗，，，</p><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308112509250.png" alt="image-20220308112509250"></p><p>4.知道以上三点后，可以知道本题目的加密算法是：a变量是flag，经过a1密钥加密最后得到eflg，而eflg也是对应enc，而x变量是enc加密的值。</p><p>因此本题就是要我们通过加密flag的加密值和加密的密钥值来先求出加密的flag和密钥，最后通过密钥解密出加密的flag。</p><p>解密：</p><p>1.利用加密的密钥解密出加密的flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(k2)):</span><br><span class="line">        v2 = k2[i]</span><br><span class="line">        <span class="keyword">if</span> <span class="number">48</span> &lt;= ord(v2) &lt;= <span class="number">51</span>:</span><br><span class="line">            x[i] = ((x[i]^<span class="number">9</span>)+<span class="number">47</span>)^<span class="number">14</span></span><br><span class="line">            <span class="comment">#lst.append((ord(enc[i]) ^ 14) - 47 ^ 9)</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="number">52</span> &lt;= ord(v2) &lt;= <span class="number">54</span>:</span><br><span class="line">            x[i] = (x[i]<span class="number">-28</span>)^<span class="number">15</span>  </span><br><span class="line">            <span class="comment">#lst.append((ord(enc[i]) ^ 15) + 28)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">55</span> &lt;= ord(v2) &lt;= <span class="number">57</span>:</span><br><span class="line">                x[i] = (x[i]+<span class="number">62</span>)^<span class="number">13</span></span><br><span class="line">                <span class="comment">#lst.append((ord(enc[i]) ^ 13) - 62)</span></span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">x = [<span class="number">25</span>, <span class="number">46</span>, <span class="number">-3</span>, <span class="number">73</span>, <span class="number">4</span>, <span class="number">86</span>, <span class="number">5</span>, <span class="number">52</span>, <span class="number">-2</span>, <span class="number">86</span>, <span class="number">6</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">88</span>, <span class="number">91</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">53</span>, <span class="number">-2</span>, <span class="number">55</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">53</span>, <span class="number">87</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">-2</span>, <span class="number">85</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">5</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">-3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-6</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">83</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">48</span>, <span class="number">25</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">55</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">85</span>, <span class="number">53</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">87</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">86</span>, <span class="number">136</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">4</span>, <span class="number">42</span>, <span class="number">-1</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">86</span>, <span class="number">2</span>, <span class="number">25</span>, <span class="number">-4</span>, <span class="number">138</span>, <span class="number">3</span>, <span class="number">48</span>, <span class="number">25</span>, <span class="number">136</span>, <span class="number">90</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">-9</span>, <span class="number">25</span>, <span class="number">6</span>, <span class="number">89</span>, <span class="number">55</span>, <span class="number">2</span>, <span class="number">-6</span>, <span class="number">87</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">84</span>, <span class="number">137</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">k2 = <span class="string">'0791151174073560118079115117407356011807911511740735601180791151174073560118079115117407356011807911511740735601'</span></span><br><span class="line"></span><br><span class="line">d1()</span><br><span class="line">print(bytes(x))</span><br></pre></td></tr></table></figure><p>2.根据flag的格式 p_ctf{ 与加密的密钥还原出正确的密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'p_ctf&#123;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(<span class="string">b'p_ctf&#123;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">112</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">102</span>, <span class="number">123</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key = [a[i]^c_flag[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key</span><br><span class="line">[<span class="number">106</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">119</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(key)</span><br><span class="line"><span class="string">b'j5F/sw'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k2 = <span class="string">'0791151174073560118079115117407356011807911511740735601180791151174073560118079115117407356011807911511740735601'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k2 = k2[::<span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>k2</span><br><span class="line"><span class="string">'1065370471151197081106537047115119708110653704711511970811065370471151197081106537047115119708110653704711511970'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key</span><br><span class="line">[<span class="number">106</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">119</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key += [<span class="number">70</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(key)</span><br><span class="line"><span class="string">b'j5F/swFQ'</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308113337100.png" alt="image-20220308113337100"></p><p>3.使用密钥解密还原出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">key = list(<span class="string">b'j5F/swFQ'</span>)</span><br><span class="line">c_flag = <span class="string">"1a6a255b150c73041e1c106e46016b34325a764251286f322c13220c0322196e0243375c074e2e0d35417a7c1c10122738102c45423d7b25"</span></span><br><span class="line">c_flag = list(bytes.fromhex(c_flag))</span><br><span class="line">tmp = [c_flag[i::len(key)] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(key)):</span><br><span class="line">    n = len(c_flag)//len(key)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> j != n<span class="number">-1</span>:</span><br><span class="line">            tmp[i][n<span class="number">-1</span>-j] ^= (tmp[i][n<span class="number">-2</span>-j] &gt;&gt; <span class="number">2</span>)^key[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp[i][n<span class="number">-1</span>-j] ^= key[i]</span><br><span class="line"></span><br><span class="line">tmp = list(zip(*tmp))</span><br><span class="line">tmp = [j <span class="keyword">for</span> i <span class="keyword">in</span> tmp <span class="keyword">for</span> j <span class="keyword">in</span> i]</span><br><span class="line">print(bytes(tmp).decode())</span><br><span class="line"><span class="comment">#p_ctf&#123;5Ur3_W0u1d_h4v3_3nJ0y3d_D3crypt1nG_d1Dnt_u_5tu6N9&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/03/08/pragyan-ctf-2022/image-20220308113635828-16467120845281.png" alt="image-20220308113635828"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩一玩&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>hgame2022-hardasm</title>
    <link href="https://bxb0.github.io/2022/02/19/hgame2022-hardasm/"/>
    <id>https://bxb0.github.io/2022/02/19/hgame2022-hardasm/</id>
    <published>2022-02-19T03:49:26.000Z</published>
    <updated>2022-02-20T03:52:48.339Z</updated>
    
    <content type="html"><![CDATA[<p>在比赛要结束的时候去看了看题，把最后一个题做了一下。<a id="more"></a></p><h3 id="hardasm"><a href="#hardasm" class="headerlink" title="hardasm"></a>hardasm</h3><p>整体上程序就是使用6000多行的某种汇编指令集对输入进行运算后和硬编码的密文进行比较。</p><p>首先将输入将输入赋值给了ymm0（一种256bit的数据类型，32字节），然后ymm1-ymm7都是程序中的硬编码用于加密运算的数据，后面就是加密运算，主要涉及vpermd，vpxor，vpaddb，vpsubb，vpshufb这5个指令。</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216190712200.png" alt="image-20220216190712200"></p><p>找其中的几个指令搜索一下可以知道这是AVX2指令集。</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216182940223.png" alt="image-20220216182940223"></p><p>对相关汇编指令的介绍：<a href="https://zhuanlan.zhihu.com/p/424475308" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/424475308</a></p><p>x86 and amd64 instruction reference：<a href="https://www.felixcloutier.com/x86/index.html" target="_blank" rel="noopener">https://www.felixcloutier.com/x86/index.html</a></p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216185755561.png" alt="image-20220216185755561"></p><p>然后通过查<strong>x86 and amd64 instruction reference</strong>来弄清楚程序中涉及加密运算的指令的含义：</p><p>vpermd  ymm4, ymm7, ymm4：使用ymm7的数据作为index来置换ymm4中的数据。</p><p>注意一下它是以4个字节为一组进行的，最后d表示doublewords</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216185834156.png" alt="image-20220216185834156"></p><p>vpxor   ymm4, ymm4, ymm5：就是普通的异或</p><p>vpaddb  ymm0, ymm0, ymm2：加法，注意它是1个字节为单位进行的，最后b表示byte</p><p>vpsubb  ymm0, ymm0, ymm4：减法，注意它是1个字节为单位进行的，最后b表示byte</p><p>vpshufb ymm3, ymm3, ymm6：使用ymm6的数据来打乱ymm3</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216190131361.png" alt="image-20220216190131361"></p><p>打乱规则：</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216190407192.png" alt="image-20220216190407192"></p><p>将这个打乱的规则转化为python代码：<br><img src="/2022/02/19/hgame2022-hardasm/image-20220216190520454.png" alt="image-20220216190520454"></p><p>弄清楚程序的运算逻辑后没想到啥好的逆向技巧，这里是通过把所有的运算复制到文本中，接着使用python来将每条指令转化为一个函数调用且保存到一个py文件，再将每个运算指令都单独写处一个函数，最后使用z3约束求解。</p><p>提取脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'1.txt'</span>, <span class="string">"r"</span>)</span><br><span class="line">data = f.read().split(<span class="string">'\n'</span>)</span><br><span class="line">f.close()</span><br><span class="line">f1 = open(<span class="string">'ans.py'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    tmp = i.split(<span class="string">' '</span>)</span><br><span class="line">    f1.write(tmp[<span class="number">0</span>]+<span class="string">'('</span>+tmp[<span class="number">2</span>].strip(<span class="string">','</span>)+<span class="string">', '</span>+tmp[<span class="number">3</span>]+<span class="string">')\n'</span>)</span><br><span class="line">f1.close()</span><br></pre></td></tr></table></figure><p>部分z3脚本（省去了中间的部分运算指令）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">ymm0 = [BitVec(<span class="string">'x%d'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">ymm7 = [<span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">ymm1 = [<span class="number">0xF0</span>, <span class="number">0xFF</span>, <span class="number">0x64</span>, <span class="number">0x26</span>, <span class="number">0xF2</span>, <span class="number">0x8F</span>, <span class="number">0x40</span>, <span class="number">0xEE</span>, <span class="number">0xEE</span>, <span class="number">0x27</span>, <span class="number">0x07</span>, <span class="number">0xEF</span>, <span class="number">0x88</span>, <span class="number">0x0A</span>, <span class="number">0x21</span>, <span class="number">0x14</span>, <span class="number">0xC3</span>, <span class="number">0xFC</span>, <span class="number">0x70</span>, <span class="number">0xE5</span>, <span class="number">0xA8</span>, <span class="number">0xF3</span>, <span class="number">0xF5</span>, <span class="number">0x1A</span>, <span class="number">0xD4</span>, <span class="number">0x3C</span>, <span class="number">0xB1</span>, <span class="number">0x0C</span>, <span class="number">0xE5</span>, <span class="number">0xBC</span>, <span class="number">0xB9</span>, <span class="number">0x1B</span>]</span><br><span class="line">ymm2 = [<span class="number">0x0D</span>, <span class="number">0xC0</span>, <span class="number">0x84</span>, <span class="number">0xC5</span>, <span class="number">0x0E</span>, <span class="number">0x80</span>, <span class="number">0x50</span>, <span class="number">0xFF</span>, <span class="number">0x28</span>, <span class="number">0x1A</span>, <span class="number">0x80</span>, <span class="number">0x48</span>, <span class="number">0x1D</span>, <span class="number">0xC1</span>, <span class="number">0xE3</span>, <span class="number">0x1D</span>, <span class="number">0x34</span>, <span class="number">0x51</span>, <span class="number">0x9B</span>, <span class="number">0x35</span>, <span class="number">0xBC</span>, <span class="number">0xD5</span>, <span class="number">0xF4</span>, <span class="number">0xC3</span>, <span class="number">0xC4</span>, <span class="number">0x40</span>, <span class="number">0x90</span>, <span class="number">0x07</span>, <span class="number">0x2A</span>, <span class="number">0xC0</span>, <span class="number">0x2D</span>, <span class="number">0x90</span>]</span><br><span class="line">ymm3 = [<span class="number">0x89</span>, <span class="number">0xA1</span>, <span class="number">0x3E</span>, <span class="number">0xC0</span>, <span class="number">0xE5</span>, <span class="number">0x14</span>, <span class="number">0x5F</span>, <span class="number">0xC5</span>, <span class="number">0x5F</span>, <span class="number">0x14</span>, <span class="number">0xB0</span>, <span class="number">0xD0</span>, <span class="number">0x25</span>, <span class="number">0x1F</span>, <span class="number">0xE8</span>, <span class="number">0xF5</span>, <span class="number">0xB0</span>, <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0xC2</span>, <span class="number">0xC7</span>, <span class="number">0xA0</span>, <span class="number">0xB2</span>, <span class="number">0x3C</span>, <span class="number">0x5E</span>, <span class="number">0x7E</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x98</span>, <span class="number">0xE8</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>]</span><br><span class="line">ymm4 = [<span class="number">0x33</span>, <span class="number">0x5F</span>, <span class="number">0x62</span>, <span class="number">0x68</span>, <span class="number">0x0D</span>, <span class="number">0x64</span>, <span class="number">0xA8</span>, <span class="number">0xFF</span>, <span class="number">0x8F</span>, <span class="number">0x99</span>, <span class="number">0xA7</span>, <span class="number">0x94</span>, <span class="number">0x9E</span>, <span class="number">0x9A</span>, <span class="number">0x29</span>, <span class="number">0x34</span>, <span class="number">0x27</span>, <span class="number">0x36</span>, <span class="number">0xD6</span>, <span class="number">0x82</span>, <span class="number">0xC2</span>, <span class="number">0x6D</span>, <span class="number">0xE8</span>, <span class="number">0xAA</span>, <span class="number">0x96</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0xC0</span>, <span class="number">0x0C</span>, <span class="number">0x37</span>, <span class="number">0x19</span>, <span class="number">0xC9</span>]</span><br><span class="line">ymm5 = [<span class="number">0x8F</span>, <span class="number">0x21</span>, <span class="number">0xA8</span>, <span class="number">0x37</span>, <span class="number">0x43</span>, <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x33</span>, <span class="number">0xA6</span>, <span class="number">0x87</span>, <span class="number">0x4C</span>, <span class="number">0x4A</span>, <span class="number">0xA1</span>, <span class="number">0x74</span>, <span class="number">0x4B</span>, <span class="number">0xE6</span>, <span class="number">0x55</span>, <span class="number">0x13</span>, <span class="number">0x5B</span>, <span class="number">0x3F</span>, <span class="number">0x1C</span>, <span class="number">0xD7</span>, <span class="number">0xB9</span>, <span class="number">0x9E</span>, <span class="number">0x39</span>, <span class="number">0x60</span>, <span class="number">0x1D</span>, <span class="number">0xC6</span>, <span class="number">0x91</span>, <span class="number">0x8A</span>, <span class="number">0x36</span>, <span class="number">0x8B</span>]</span><br><span class="line">ymm6 = [<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">0x93</span>, <span class="number">0xCB</span>, <span class="number">0xE7</span>, <span class="number">0x93</span>, <span class="number">0xA9</span>, <span class="number">0x81</span>, <span class="number">0x0D</span>, <span class="number">0xB6</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x9C</span>, <span class="number">0x7F</span>, <span class="number">0xC0</span>, <span class="number">0x4D</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0x9F</span>, <span class="number">0x22</span>, <span class="number">0x89</span>, <span class="number">0xEF</span>, <span class="number">0x54</span>, <span class="number">0x5D</span>, <span class="number">0xEF</span>, <span class="number">0x00</span>, <span class="number">0x8D</span>, <span class="number">0xFE</span>, <span class="number">0x5E</span>, <span class="number">0x4C</span>, <span class="number">0xD0</span>, <span class="number">0xEC</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpermd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    tmp = b[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        b[<span class="number">4</span>*i:<span class="number">4</span>*i+<span class="number">4</span>] = tmp[<span class="number">4</span>*a[i*<span class="number">4</span>]:<span class="number">4</span>*a[i*<span class="number">4</span>]+<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpxor</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a[i] ^= b[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpaddb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a[i] += b[i]</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpsubb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        a[i] -= b[i]</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vpshufb</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    tmp = a[:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">if</span> b[i]&amp;<span class="number">0x80</span>:</span><br><span class="line">            a[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a[i] = tmp[b[i]&amp;<span class="number">0xf</span>]</span><br><span class="line">        <span class="keyword">if</span> b[i+<span class="number">16</span>]&amp;<span class="number">0x80</span>:</span><br><span class="line">            a[i+<span class="number">16</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a[i+<span class="number">16</span>] = tmp[<span class="number">16</span>+(b[i+<span class="number">16</span>]&amp;<span class="number">0xf</span>)]</span><br><span class="line">    </span><br><span class="line">vpermd(ymm7, ymm4)</span><br><span class="line">vpxor(ymm4, ymm5)</span><br><span class="line">vpxor(ymm0, ymm2)</span><br><span class="line">vpaddb(ymm0, ymm2)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">vpxor(ymm4, ymm1)</span><br><span class="line">vpaddb(ymm2, ymm5)</span><br><span class="line">vpxor(ymm0, ymm1)</span><br><span class="line">vpaddb(ymm0, ymm5)</span><br><span class="line">vpermd(ymm7, ymm5)</span><br><span class="line">vpaddb(ymm0, ymm4)</span><br><span class="line">vpshufb(ymm5, ymm6)</span><br><span class="line">vpsubb(ymm3, ymm1)</span><br><span class="line">vpaddb(ymm5, ymm1)</span><br><span class="line">vpermd(ymm7, ymm1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    s.add(ymm0[i] == enc[i])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    ymm0 = [BitVec(<span class="string">'x%d'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</span><br><span class="line">    flag = [m[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> ymm0]</span><br><span class="line">    print(bytes(flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Not Found!"</span>)</span><br></pre></td></tr></table></figure><p>开始一直没找到正确的解，检查到错误是没有注意python中运算符优先级的问题。</p><p>这里，开始一直以为 + 的优先级低于 &amp; ，所以就没打括号，其实 + 比 &amp; 的优先级高。</p><p><img src="/2022/02/19/hgame2022-hardasm/image-20220216192053182.png" alt="image-20220216192053182"></p><p>运行解题脚本得到flag：</p><p><strong>hgame{right_your_asm_is_good!!}</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在比赛要结束的时候去看了看题，把最后一个题做了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021WMCTF</title>
    <link href="https://bxb0.github.io/2021/09/01/2021WMCTF/"/>
    <id>https://bxb0.github.io/2021/09/01/2021WMCTF/</id>
    <published>2021-09-01T02:42:00.000Z</published>
    <updated>2021-09-01T03:24:05.483Z</updated>
    
    <content type="html"><![CDATA[<p>2021WMCTF中的Re1&amp;Re2<a id="more"></a></p><p><img src="https://i.loli.net/2021/09/01/wZVrS5mPcqgOIBf.png" alt="image-20210901104413498"></p><h3 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h3><p>首先ida反编译main函数会报错，这个一般是程序中有花指令导致的。</p><p><img src="https://i.loli.net/2021/09/01/UySsFAqPHh9vrlg.png" alt="image-20210829170116423"></p><p>因为main函数比较大，用提示成功字符串定位到最后的汇编代码，向上翻翻便看见出问题的代码。</p><p><img src="https://i.loli.net/2021/09/01/i83BrAKLlRDZt6F.png" alt="image-20210829170943477"></p><p>双击该地址，可以发现ida将这段数据解析成了代码且最上面有一个设置的条件绝对跳转跳过了执行下面的错误带代码，这里可以直接把jnb改成jmp，并把下面垃圾代码nop掉。</p><p><img src="https://i.loli.net/2021/09/01/O7oRGYaErsZPN6p.png" alt="image-20210829171215050"></p><p>继续向上翻又可以看见如下的花指令：不断跳转到下一条指令，统统nop掉即可。</p><p><img src="https://i.loli.net/2021/09/01/8fCxu3cEKjw5pDi.png" alt="image-20210829171732791"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">addr = <span class="number">0x140002DEC</span></span><br><span class="line"><span class="keyword">while</span> addr &lt;= <span class="number">0x140002DFF</span>:</span><br><span class="line">    patch_byte(addr, <span class="number">0x90</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>然后我们就可以反编译了。</p><p>先看到对输入的处理：</p><p>开始判断了flag长度范围[12, 45]，然后判断格式是否是WMCTF{}</p><p><img src="https://i.loli.net/2021/09/01/wCkvUQcpjbKXltx.png" alt="image-20210829172248646"></p><p>接着申请了576字节大小的空间block，并把输入的除去格式（WMCTF{}外）的前4个字节以如下方式填入block</p><p><img src="https://i.loli.net/2021/09/01/mMqW2y8pCfrTDeU.png" alt="image-20210829172605480"></p><p>再把输入的除去格式（WMCTF{}外）的4-20字节填入block+530开始的位置。</p><p><img src="https://i.loli.net/2021/09/01/x5Vl4gT7pdfGnKo.png" alt="image-20210829172802321"></p><p>最后就是将剩下的输入以<strong>_@#?!&amp;-$+</strong>为区分，分别进行不同的处理。其中输入是hex形式，先把每4个hex转化两字节数据后，再用第一字节作为index，第二字节作为数据对block进行操作。</p><p><img src="https://i.loli.net/2021/09/01/ycgMrSDpYtGohUf.png" alt="image-20210829173407068"></p><p>下面再看加密部分：</p><p>首先sub_7FF79BD33960()函数也是加了上面所说的花指令，去除后看到伪代码，用CRC算法生成256个4字节数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_7FF79BD33960</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = i;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (v3 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        v3 = (v3 &gt;&gt; <span class="number">1</span>) ^ <span class="number">0x8320EDB8</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v3 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dword_7FF79BD57A70[i] = v3;</span><br><span class="line">    result = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对前4字节填充的block，用CRC生成的256个4字节数据，经过移位，异或运算生成4个4字节数据后与硬编码的数据比较：</p><p><img src="https://i.loli.net/2021/09/01/HDFh2Ylg8VEes59.png" alt="image-20210829174325762"></p><p><img src="https://i.loli.net/2021/09/01/LuSIUtCTyFOZ1qm.png" alt="image-20210829174351699"></p><p>最后使用最开始在block填充的<strong>0xDEAD</strong>改变<strong>vars88，vaes84, vaes80, v58</strong>后作为密钥对除去WMCTF{}格式外输入的4-20字节进行2个xtea加密。    </p><p><img src="https://i.loli.net/2021/09/01/4slm7KUnSZgWqM9.png" alt="image-20210829175035556"></p><p>下面开始解密：</p><p>首先用z3将vars88，vaes84, vaes80, v58四个值就求出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">key = [BitVec(<span class="string">'x%d'</span>%i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">s.add((key[<span class="number">0</span>]+key[<span class="number">1</span>]) == <span class="number">0x11AB7A7A</span>)</span><br><span class="line">s.add(key[<span class="number">1</span>]-key[<span class="number">2</span>] == <span class="number">0x1CD4F222</span>)</span><br><span class="line">s.add(key[<span class="number">2</span>]+key[<span class="number">3</span>] == <span class="number">0xC940F021</span>)</span><br><span class="line">s.add(key[<span class="number">0</span>]+key[<span class="number">2</span>]-key[<span class="number">3</span>] == <span class="number">0x7C7D68D1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    m = [m[key[i]].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    print(m)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    print(<span class="string">'Not Found!'</span>)</span><br><span class="line"><span class="comment">#[2750330814, 1841087164, 1357369498, 2019106695]</span></span><br></pre></td></tr></table></figure><p>再用上面4个数据依次爆破出对应的4字节明文数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> box[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">char</span> res[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> number[] = &#123;<span class="number">0x100</span>, <span class="number">0x100</span>, <span class="number">0xf</span>, <span class="number">0x1c</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> enc[] = &#123;<span class="number">2750330814</span>, <span class="number">1841087164</span>, <span class="number">1357369498</span>, <span class="number">2019106695</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_box</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = i;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (v3 &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        v3 = (v3 &gt;&gt; <span class="number">1</span>) ^ <span class="number">0x8320EDB8</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v3 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    box[i] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">char</span> a2[<span class="number">256</span>], <span class="keyword">unsigned</span> <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">v5 = <span class="number">0</span>;</span><br><span class="line">v4 = a1;</span><br><span class="line"><span class="keyword">while</span> ( v5 &lt; a3 )</span><br><span class="line">v4 = (v4 &gt;&gt; <span class="number">8</span>) ^ box[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a2[v5++] ^ v4)];</span><br><span class="line"><span class="keyword">return</span> a1 ^ v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">bp</span><span class="params">(<span class="keyword">int</span> up, <span class="keyword">int</span> number, <span class="keyword">unsigned</span> <span class="keyword">int</span> pre, <span class="keyword">unsigned</span> <span class="keyword">int</span> next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> block[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; number; j++)</span><br><span class="line">&#123;</span><br><span class="line">block[j] = i+j+up;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fun1(pre, block, number) == next)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">gen_box();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">res[i] = bp(i, number[i], <span class="number">-2</span>, enc[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res[i] = bp(i, number[i], enc[i<span class="number">-1</span>], enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Hah4</span></span><br></pre></td></tr></table></figure><p>用满足前4字节的测试输入<strong>WMCTF{Hah41111111111111111}</strong>输入程序，然后在xtea加密前取出密钥：</p><p><img src="https://i.loli.net/2021/09/01/lWCZjIF1rBvfhKG.png" alt="image-20210829182648792"></p><p>但用这个密钥解密密文怎么都不正确。。还测试了自己的xtea解密好几遍，这里卡了好一会。</p><p>后面确定肯定是密钥的问题，但输入的前4字节是满足要求的，密钥是通过前4字节明文算出来的。但注意这里的密钥还用开始在block填充的<strong>0xDEAD</strong>的经过了变换的。这让我想到我忽略了输入的（WMCTF{}格式外）20字节后处理，开始闲麻烦懒得看直接跳过了。</p><p>所以问题现在应该就出在了有两个字节数据对密钥的影响。</p><p>爆破这2个字节，从解密结果中看像是flag的片段的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_delat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>, delat = <span class="number">0x667E5433</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">ans -= delat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt1</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num_rounds, <span class="keyword">uint32_t</span> v[<span class="number">2</span>], <span class="keyword">uint32_t</span> <span class="keyword">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;  </span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x667E5433</span>, sum = get_delat();</span><br><span class="line"><span class="comment">//printf("%x", sum);  </span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; num_rounds; i++)</span><br><span class="line">    &#123;  </span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[<span class="number">0</span>]=v0, v[<span class="number">1</span>]=v1;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">unsigned</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((<span class="keyword">char</span> *)&amp;a)[i] &lt; <span class="number">32</span> || ((<span class="keyword">char</span> *)&amp;a)[i] &gt; <span class="number">127</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//['a3eeb7be', '6dbcc2bc', '50e7d09a', '78591f87']</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint32_t</span> k[<span class="number">4</span>]=&#123;<span class="number">0x78591FAD</span>, <span class="number">0x6DBCC2BC</span>, <span class="number">0xA3EEB7BE</span>, <span class="number">0x50E7DE9A</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">0xff</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">0x1989FB2B</span>, <span class="number">0x83F5A243</span>&#125;;</span><br><span class="line">    k[<span class="number">3</span>] &amp;= <span class="number">0xFFFF00FF</span>;</span><br><span class="line">    k[<span class="number">3</span>] |= i &lt;&lt; <span class="number">8</span>;</span><br><span class="line">    k[<span class="number">0</span>] &amp;= <span class="number">0xFFFFFF00</span>;</span><br><span class="line">    k[<span class="number">0</span>] |= j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> r=<span class="number">32</span>;</span><br><span class="line">    decrypt1(r, v, k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check(v[<span class="number">0</span>]) &amp;&amp; check(v[<span class="number">1</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, ((<span class="keyword">char</span> *)v)[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %x %x"</span>, i, j);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">pWRTPO&#123;&gt; 13 9f</span></span><br><span class="line"><span class="comment">&lt;&lt;R|CJA&lt; 24 c7</span></span><br><span class="line"><span class="comment">\o&#123;2%lSf 28 7f</span></span><br><span class="line"><span class="comment">t&lt;o.:RMY 2d 69</span></span><br><span class="line"><span class="comment">b%AGkVTt 36 2d</span></span><br><span class="line"><span class="comment">e.xQVP!| 53 0</span></span><br><span class="line"><span class="comment">0bOMoJI8 54 b1</span></span><br><span class="line"><span class="comment">"pWU3*@+ 73 d2</span></span><br><span class="line"><span class="comment">&gt;]zSE&gt;?d 81 d7</span></span><br><span class="line"><span class="comment">(sqF m# 8a 6b</span></span><br><span class="line"><span class="comment">Z,wRg8T_ 92 76</span></span><br><span class="line"><span class="comment">yOu_L1kE b7 ad</span></span><br><span class="line"><span class="comment">!vta&amp;K]M ba d3</span></span><br><span class="line"><span class="comment">K?Gl@~Rw bf b5</span></span><br><span class="line"><span class="comment">1C ="`~p c3 71</span></span><br><span class="line"><span class="comment">?&amp;bqWg]_ cd b1</span></span><br><span class="line"><span class="comment">SX|6u|v f4 43</span></span><br><span class="line"><span class="comment">+zWv6`!C fb a2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以看到<strong>yOu_L1kE</strong>，满足要求的两个字节是<strong>0xb7 0xad</strong></p><p>然后解密2段密文再按一定顺序拼接一下得到：<strong>_D0_yOu_L1kE_It!</strong></p><p>现在就是去求<strong>_@#?!&amp;-$+</strong>对应的处理函数怎么才能将<strong>*((_WORD *)Block + 273)</strong>的0xDEAD的改为<strong>0xB7AD</strong>。</p><p>输入为hex，4字节为一组转化为2个byte，第一个byte是index，第二个byte是data</p><p>根据要求推算出这样一个顺序是满足b要求的：</p><p>首先<strong>@</strong>对应的处理函数将block[256] = 0xFE。注意下面是char a2，所以传入0xFF就是-1了，因此满足输入为：<strong>@FFFE</strong>    </p><p><img src="https://i.loli.net/2021/09/01/m2RqHBcrTwPhI8Q.png" alt="image-20210829184654158"></p><p>然后<strong>#</strong>对应的处理函数将block[528] = 0x20，因此满足输入：<strong>#0F20</strong></p><p><img src="https://i.loli.net/2021/09/01/aT1OC7P96SeRlNo.png" alt="image-20210829185055634"></p><p>最后<strong>-</strong>对应的处理函数将block[527] = 0xB7，也是我们最后的终点。因此满足输入：<strong>-11B7</strong></p><p><img src="https://i.loli.net/2021/09/01/PzsK7JmUxGaF5tX.png" alt="image-20210829185410469"></p><p>可以看到上面要能执行最后的<strong>*(_BYTE *)(a1 + 530 + a2) = a3;</strong>要求是(*(unsigned __int16 *)(a1 + 528) % 16) == 0，(unsigned int)(*(unsigned __int16 *)(a1 + 528) / 16) &lt; 3</p><p>用这2个限制爆破得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xff</span>) <span class="keyword">if</span> i%<span class="number">16</span> == <span class="number">0</span> <span class="keyword">and</span> i/<span class="number">16</span> &lt; <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">16</span>, <span class="number">32</span>]</span><br></pre></td></tr></table></figure><p>而我们的index为17且<strong>index&lt;*(unsigned __int16 *)(a1 + 528)</strong>，所以满足要求的就只有最后的32了，故上面<strong>#</strong>对应的处理函数要将block[528] = 0x20。</p><p>最后将我们的所有输入拼接起来得到flag：</p><p><strong>WMCTF{Hah4_D0_yOu_L1kE_It!@FFFE#0F20-11B7}</strong></p><h3 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a>Re2</h3><p>jadx打开app，可以看到关键在native层。</p><p><img src="https://i.loli.net/2021/09/01/6iuHhIPyFMdlsUv.png" alt="image-20210830093652342"></p><p>到so文件找到<strong>JNI_Onload</strong></p><p><img src="https://i.loli.net/2021/09/01/kQNo85bOAezrqKy.png" alt="image-20210830093939955"></p><p>其中，上面的JNI_Onload根据sub_7079FF9BBC函数的返回值注册不同的函数。</p><p>看到sub_7079FF9BBC：它通过查看<strong>/data/local/su</strong>是否存在，也就是判断我们的运行环境中有没有root</p><p><img src="https://i.loli.net/2021/09/01/rX5yIGZRMNAvmuB.png" alt="image-20210830094108535"></p><p>所以JNI_Onload是根据运行环境是否root注册不同的函数来执行。</p><p>接着我把程序在root与非root手机运行来看一下，root下运行随便输入后显示：<strong>fake branch</strong>，而在非root的手机上运行随便输入后显示：<strong>failed,please try again!!!</strong>，以此可以得出，我们要分析的非root才注册的函数。</p><p>然后也去看了一下root下注册的假流程：经过上面一些加密后最终都是返回同一个字符串。</p><p><img src="https://i.loli.net/2021/09/01/EyKpMnfreXzmAiT.png" alt="image-20210830094927683"></p><p>查看返回的字符串，发现并不是字符串数据，从交叉引用发现.init_array中一些初始化函数对其进行了解密。</p><p><img src="https://i.loli.net/2021/09/01/Xf1RIjZmrEdPyag.png" alt="image-20210830095445346"></p><p>并且.init_array中初始化函数动态解密了程序中很多数据：</p><p><img src="https://i.loli.net/2021/09/01/RKC9vtMTyBU7L1q.png" alt="image-20210830095630836"></p><p>对上面假流程返回的字符串异或0x6d解密后得到：fake branch</p><p><img src="https://i.loli.net/2021/09/01/PfgNijUFCT9zAOS.png" alt="image-20210830095730148"></p><p>再看到正确分支流程：先异或解密一些数据后注册了如下的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">jstring __<span class="function">fastcall <span class="title">sub_7079FF9134</span><span class="params">(JNIEnv *a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// x21</span></span><br><span class="line">  _BYTE *v6; <span class="comment">// x20</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// x21</span></span><br><span class="line">  __int64 v8; <span class="comment">// x0</span></span><br><span class="line">  <span class="keyword">char</span> *v9; <span class="comment">// x1</span></span><br><span class="line">  __int64 v10; <span class="comment">// x8</span></span><br><span class="line">  <span class="keyword">size_t</span> v11; <span class="comment">// w0</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v12; <span class="comment">// x1</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v13; <span class="comment">// x1</span></span><br><span class="line">  jstring v14; <span class="comment">// x19</span></span><br><span class="line">  _BYTE v16[<span class="number">56</span>]; <span class="comment">// [xsp-30h] [xbp-170h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v17[<span class="number">2</span>]; <span class="comment">// [xsp+8h] [xbp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v18; <span class="comment">// [xsp+18h] [xbp-128h]</span></span><br><span class="line">  __int128 v19; <span class="comment">// [xsp+20h] [xbp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v20[<span class="number">2</span>]; <span class="comment">// [xsp+38h] [xbp-108h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v21; <span class="comment">// [xsp+48h] [xbp-F8h]</span></span><br><span class="line">  __int64 v22; <span class="comment">// [xsp+F8h] [xbp-48h]</span></span><br><span class="line"></span><br><span class="line">  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(<span class="number">3</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">2</span>)) + <span class="number">40</span>);</span><br><span class="line">  strcpy_0(v17, (<span class="keyword">char</span> *)&amp;xmmword_707A02F0A0);</span><br><span class="line">  v5 = (*a1)-&gt;GetStringUTFChars(a1, a3, <span class="number">0L</span>L);</span><br><span class="line">  <span class="keyword">if</span> ( (*a1)-&gt;GetStringLength(a1, (jstring)a3) == <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = (_BYTE *)<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">0x21</span>uLL);</span><br><span class="line">    __strcpy_chk(v6, v5, <span class="number">33L</span>L);</span><br><span class="line">    v7 = (<span class="keyword">char</span> *)<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="number">0x1E</span>uLL);</span><br><span class="line">    sub_7079FF9E80();</span><br><span class="line">    v8 = __strlen_chk(v7, <span class="number">0x1E</span>u);</span><br><span class="line">    v7[(<span class="keyword">int</span>)v8] = <span class="number">102</span>;</span><br><span class="line">    v7[((v8 &lt;&lt; <span class="number">32</span>) + <span class="number">0x100000000</span>LL) &gt;&gt; <span class="number">32</span>] = <span class="number">108</span>;</span><br><span class="line">    v7[((v8 &lt;&lt; <span class="number">32</span>) + <span class="number">0x200000000</span>LL) &gt;&gt; <span class="number">32</span>] = <span class="number">103</span>;</span><br><span class="line">    v7[((v8 &lt;&lt; <span class="number">32</span>) + <span class="number">0x300000000</span>LL) &gt;&gt; <span class="number">32</span>] = <span class="number">0</span>;</span><br><span class="line">    v19 = xmmword_707A01E5D0;</span><br><span class="line">    sub_7079FFA934((__int64)v20, v7, (<span class="keyword">long</span> <span class="keyword">double</span> *)&amp;v19);</span><br><span class="line">    sub_7079FFAE6C(v20, v6, <span class="number">0x20</span>uLL);</span><br><span class="line">    strcpy_0(v20, (<span class="keyword">char</span> *)&amp;qword_707A02F058);</span><br><span class="line">    <span class="keyword">if</span> ( (v20[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v9 = v21;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v9 = (<span class="keyword">char</span> *)v20 + <span class="number">1</span>;</span><br><span class="line">    sub_7079FFA624((<span class="keyword">int</span>)&amp;v19, v9);</span><br><span class="line">    v10 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span> ( v16[v10] == stru_707A02F000[<span class="number">0</span>].n128_u8[v10] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( ++v10 == <span class="number">32</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;aQpyl);</span><br><span class="line">        sub_7079FF9670((<span class="keyword">int</span>)v17, &amp;aQpyl, v11);</span><br><span class="line">        <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">          v12 = v18;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          v12 = (<span class="keyword">char</span> *)v17 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v12 = v18;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v12 = (<span class="keyword">char</span> *)v17 + <span class="number">1</span>;</span><br><span class="line">LABEL_18:</span><br><span class="line">    v14 = (*a1)-&gt;NewStringUTF(a1, v12);</span><br><span class="line">    <span class="keyword">if</span> ( (v20[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v21)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">      v13 = v18;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v13 = (<span class="keyword">char</span> *)v17 + <span class="number">1</span>;</span><br><span class="line">    v14 = (*a1)-&gt;NewStringUTF(a1, v13);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (v17[<span class="number">0</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(v18)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先简单静态分析一下，开始是判断输入的长度是否为32。</p><p>然后sub_7B4933FE80函数读取某个文件内容经过对比后返回一串字符串：</p><p><img src="https://i.loli.net/2021/09/01/rzbtR2GvBUmy3Mj.png" alt="image-20210831211743715"></p><p>后面接着对上面获取到的字符串进行如下赋值：</p><p><img src="https://i.loli.net/2021/09/01/25lEOhyKdwnDYjA.png" alt="image-20210901101308736"></p><p>其实就是在其末尾加上<strong>flg</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="built_in">strlen</span>(init_key);</span><br><span class="line">init_key[len] = <span class="string">'f'</span>;</span><br><span class="line">init_key[len+<span class="number">1</span>] = <span class="string">'l'</span>;</span><br><span class="line">init_key[len+<span class="number">2</span>] = <span class="string">'g'</span>;</span><br><span class="line">init_key[len+3] = '\x0';</span><br></pre></td></tr></table></figure><p>接着sub_7B49340934函数传入两个参数，其中的sub_7B49340820函数用了传入的一个参数串进行aes的密钥扩展：字节替换（但是这里的sbox是替换过的），移位，轮常数异或。44/4 = 11，这也说明了是aes_128，因为密钥11组。</p><p><img src="https://i.loli.net/2021/09/01/51NxLIjvF3lfT8X.png" alt="image-20210831212018020"></p><p>再是将另外一个参数存放在扩展密钥的尾部：</p><p><img src="https://i.loli.net/2021/09/01/Aoj8Q4YzOI5EPfX.png" alt="image-20210831212902803"></p><p>接着的sub_7B49340E6C函数也是很明显的aes_128_cbc加密，sub_7B4934097C中清晰的初始轮（轮密钥加），重复轮（字节替换，行移位，列混合，轮密钥加），最终轮（字节替换，行移位，轮密钥加）结构：</p><p><img src="https://i.loli.net/2021/09/01/MvGDm9iFVQZ1bBr.png" alt="image-20210831213127999"></p><p>最后sub_7B49340624函数rc4加密，但多异或了0x50：</p><p><img src="https://i.loli.net/2021/09/01/mc8Uue5BGsC7Mpl.png" alt="image-20210831213507809"></p><p>所以整体上本题的加密就是aes_128_cbc与rc4，麻烦的是数据部分，如aes的密钥，iv，rc4密钥与密文等。因为开始说了在.init_array中进行了很多数据的解密，我在静态分析看到的大多数数据都是没有解密的。那我们现在要么对分析到的数据找到引用修改的.init_array中的函数按照相同的运算逻辑手动patch修改；要么就是把程序调试起来，分析起来会简单很多。</p><p>这里我选择了动态调试。</p><p>首先将AndroidMannifest.xml中的<strong>android:extractNativeLibs=”false“</strong>改为true或者删掉，默认为true。因为这个如果为false会让我们在调试时找不到so</p><p><img src="https://i.loli.net/2021/09/01/Em4jeAbICkqVFuY.png" alt="image-20210831214326864"></p><p>然后因为我们调试的断点要断在<strong>JNI_OnLoad</strong>中（方便把注册的函数修改为正确的分支），那我们必须在程序还没执行<strong>System.loadLibrary(“native-lib”);</strong>之前就断下来，所以要程序要以调试模式启动。</p><p>首先我尝试了ida+jdb的组合：</p><blockquote><p>运行环境中root模式启动好相应的服务程序，转发端口到本地。(停止转发端口：<strong>adb forward –remove tcp:端口号<code>或</code>adb forward –remove-all</strong>)</p><p>使用am命令以调试启动app：adb shell am start -D -n come.wmctf.crackme111/.MainActivity</p><p>ida在JNI_OnLoad中下好断点，然后找到app对应的进程后附加，接着F9运行</p><p>打开ddms，用附加让app运行起来：jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700</p></blockquote><p>但是这样做在jdb附加app就报如下的错误。这好像是我手机的原因？</p><p><img src="https://i.loli.net/2021/09/01/AapBzxRw2Uv8Y9u.png" alt="image-20210831215551116"></p><p>我使用jeb来附加app同样也是报错，这都是在我先用IDA附加了进程的情况下，接着我尝试发现先jdb或jeb附加再IDA附加是可以的，但这样程序已经运行过<strong>System.loadLibrary(“native-lib”);</strong>了。</p><p>而还有一个方法，我们可以使用jeb附加调试断在<strong>System.loadLibrary(“native-lib”);</strong>之前再用IDA去附加进程呀。</p><p><img src="https://i.loli.net/2021/09/01/nshTY1NwpkPWFSr.png" alt="image-20210901095150285"></p><p>然后成功断在JNI_OnLoad中，在正确分支下好断点，修改检测环境是否root的返回值为false，但是这个在native层运行完JNI_OnLoad函数回到java层的时候app又崩溃了。</p><p>最后干脆直接改so得了，就是把根据检测运行环境是否有su的返回值后的条件跳转改一下。</p><p><img src="https://i.loli.net/2021/09/01/zOmXTFrq483bZoM.png" alt="image-20210831234611072"></p><p>上面修改完后，把app重编译一下，然后普通的附加调试就好了。这也是调试本程序最简单的方法，上面绕了一大圈😂。</p><p>现在再看一下内存中解密后的数据，一目了然：<br><img src="https://i.loli.net/2021/09/01/AnKeum1spg8UWMC.png" alt="image-20210901000802876"></p><p>看到上面静态分析说的sub_7B4933FE80函数用fopen()打开了一个系统文件，现在调试过去发现原来是进程的状态信息：</p><p><img src="https://i.loli.net/2021/09/01/VdKjhXruy57g24C.png" alt="image-20210901002119587"></p><p>再看到后面要匹配的内容。</p><p><img src="https://i.loli.net/2021/09/01/ZI4FVAJx73hXOsT.png" alt="image-20210901002413399"></p><p>自己手动查看一下：</p><p><img src="https://i.loli.net/2021/09/01/2mdSZn8XcskBUFN.png" alt="image-20210901002729639"></p><p>接着直接调试到最后看获取的结果，就是要获取<strong>TracerPid:</strong>字段那一行的内容加上flg，而app正常不调试运行这个TracerPid是0的，所以这里获取的正确值为：<strong>TracerPid:\x090\x0Aflg</strong></p><p><img src="https://i.loli.net/2021/09/01/ZgiXE5c3qsU7u8D.png" alt="image-20210901003148346"></p><p>接着看到下面与上面的静态分析结合可以知道：程序中aes_128的key：<strong>TracerPid:\x090\x0Aflg</strong> iv：<strong>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF</strong></p><p><img src="https://i.loli.net/2021/09/01/OFP17jzvpDQymXi.png" alt="image-20210901004032836"></p><p>再就是这个aes加密的sbox果然是替换了的，正常的sbox开头为：<strong>0x63, 0x7c, 0x77, 0x7b</strong></p><p><img src="https://i.loli.net/2021/09/01/J3vIc89jB15GXWh.png" alt="image-20210901004538811"></p><p>最后看到剩下的rc4加密，从传入参数看到密钥是<strong>Hello from C++</strong></p><p>下面开始解密。</p><p>首先rc4解密：</p><p>直接把输入的aes加密结果与最终经过rc4结果都提取出来异或一下得到异或序列，再将其与真正的密文异或一下得到真正的aes加密结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">0xA4</span>, <span class="number">0xCD</span>, <span class="number">0xDA</span>, <span class="number">0x34</span>, <span class="number">0xA9</span>, <span class="number">0xE8</span>, <span class="number">0xFF</span>, <span class="number">0x48</span>, <span class="number">0xD6</span>, <span class="number">0x74</span>, <span class="number">0xE7</span>, <span class="number">0x0F</span>, <span class="number">0x71</span>, <span class="number">0xF7</span>, <span class="number">0xED</span>, <span class="number">0xB7</span>, <span class="number">0xC2</span>, <span class="number">0xA8</span>, <span class="number">0xE1</span>, <span class="number">0xE1</span>, <span class="number">0x0E</span>, <span class="number">0x2D</span>, <span class="number">0xD0</span>, <span class="number">0x8D</span>, <span class="number">0xF8</span>, <span class="number">0x20</span>, <span class="number">0x0E</span>, <span class="number">0x85</span>, <span class="number">0x1D</span>, <span class="number">0xBC</span>, <span class="number">0xC1</span>, <span class="number">0x61</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">0x6C</span>, <span class="number">0xDB</span>, <span class="number">0xC6</span>, <span class="number">0x75</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0xAA</span>, <span class="number">0xBD</span>, <span class="number">0xF5</span>, <span class="number">0x92</span>, <span class="number">0xCF</span>, <span class="number">0xB6</span>, <span class="number">0x4E</span>, <span class="number">0x0B</span>, <span class="number">0x38</span>, <span class="number">0x5B</span>, <span class="number">0x2E</span>, <span class="number">0x4F</span>, <span class="number">0x48</span>, <span class="number">0xFD</span>, <span class="number">0xE2</span>, <span class="number">0x7B</span>, <span class="number">0xE3</span>, <span class="number">0xFE</span>, <span class="number">0x64</span>, <span class="number">0x7E</span>, <span class="number">0xEA</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0x8D</span>, <span class="number">0x96</span>, <span class="number">0xF5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [s[i]^t[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">200</span>, <span class="number">22</span>, <span class="number">28</span>, <span class="number">65</span>, <span class="number">227</span>, <span class="number">124</span>, <span class="number">85</span>, <span class="number">245</span>, <span class="number">35</span>, <span class="number">230</span>, <span class="number">40</span>, <span class="number">185</span>, <span class="number">63</span>, <span class="number">252</span>, <span class="number">213</span>, <span class="number">236</span>, <span class="number">236</span>, <span class="number">231</span>, <span class="number">169</span>, <span class="number">28</span>, <span class="number">236</span>, <span class="number">86</span>, <span class="number">51</span>, <span class="number">115</span>, <span class="number">156</span>, <span class="number">94</span>, <span class="number">228</span>, <span class="number">34</span>, <span class="number">168</span>, <span class="number">49</span>, <span class="number">87</span>, <span class="number">148</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>enc = [<span class="number">0x18</span>, <span class="number">0x76</span>, <span class="number">0xEB</span>, <span class="number">0x87</span>, <span class="number">0x76</span>, <span class="number">0x3E</span>, <span class="number">0x77</span>, <span class="number">0x08</span>, <span class="number">0xC0</span>, <span class="number">0x8D</span>, <span class="number">0x56</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x35</span>, <span class="number">0x0D</span>, <span class="number">0x16</span>, <span class="number">0x23</span>, <span class="number">0x65</span>, <span class="number">0x61</span>, <span class="number">0x6A</span>, <span class="number">0x14</span>, <span class="number">0x9D</span>, <span class="number">0x4F</span>, <span class="number">0x1C</span>, <span class="number">0x64</span>, <span class="number">0x21</span>, <span class="number">0x7D</span>, <span class="number">0x78</span>, <span class="number">0xBA</span>, <span class="number">0x53</span>, <span class="number">0x91</span>, <span class="number">0x22</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = [ans[i]^enc[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc))]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">[<span class="number">208</span>, <span class="number">96</span>, <span class="number">247</span>, <span class="number">198</span>, <span class="number">149</span>, <span class="number">66</span>, <span class="number">34</span>, <span class="number">253</span>, <span class="number">227</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">161</span>, <span class="number">201</span>, <span class="number">216</span>, <span class="number">250</span>, <span class="number">207</span>, <span class="number">130</span>, <span class="number">200</span>, <span class="number">118</span>, <span class="number">248</span>, <span class="number">203</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">248</span>, <span class="number">127</span>, <span class="number">153</span>, <span class="number">90</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">198</span>, <span class="number">182</span>]</span><br></pre></td></tr></table></figure><p>然后aes解密：</p><p>将之前自己写过的aes_cbc加解密中的sbox替换为程序中的，rsbox简单对sbox求一下逆，最后解密即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//aes.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> AES_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Nk 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Nr 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Nb 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getSBoxValue(num) (sbox[(num)])</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">aes</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ctx_</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> RoundKey[<span class="number">11</span>*<span class="number">16</span>];</span><br><span class="line">    &#125;ctx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    aes(<span class="keyword">char</span> *Key);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">xor_iv</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">char</span> *b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">KeyExpansion</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey, <span class="keyword">char</span> *Key)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SubBytes</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShiftRows</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">gfmultby</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> a, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getData</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data)[<span class="number">4</span>], <span class="keyword">char</span> *enc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">encryption_cbc</span><span class="params">(<span class="keyword">char</span> *plaint, <span class="keyword">char</span> *enc)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvSubBytes</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvShiftRows</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InvMixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decryption_cbc</span><span class="params">(<span class="keyword">char</span> *plaint, <span class="keyword">char</span> *enc)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// AES_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"aes.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> sbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="comment">//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F</span></span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0xF2</span>, <span class="number">0x63</span>, <span class="number">0x7B</span>, <span class="number">0x77</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>, <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>, <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>, <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>, <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>, <span class="number">0x0C</span>, <span class="number">0xCD</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>, <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>, <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0x08</span>, <span class="number">0xAE</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>, <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>, <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> rsbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Rcon[<span class="number">11</span>] = &#123;</span><br><span class="line">  <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> MixValue[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>&#125;,</span><br><span class="line">                                      &#123;<span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>&#125;,</span><br><span class="line">                                      &#123;<span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>&#125;,</span><br><span class="line">                                      &#123;<span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> InvMixValue[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x9</span>&#125;,</span><br><span class="line">                                         &#123;<span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xb</span>, <span class="number">0xd</span>&#125;,</span><br><span class="line">                                         &#123;<span class="number">0xd</span>, <span class="number">0x9</span>, <span class="number">0xe</span>, <span class="number">0xb</span>&#125;,</span><br><span class="line">                                         &#123;<span class="number">0xb</span>, <span class="number">0xd</span>, <span class="number">0x9</span>, <span class="number">0xe</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">aes::aes(<span class="keyword">char</span> *key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;KeyExpansion(ctx.RoundKey, key);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    rsbox[sbox[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::xor_iv(<span class="keyword">char</span> *data, <span class="keyword">char</span> *iv)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        data[i] ^= iv[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::KeyExpansion(<span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey, <span class="keyword">char</span> *Key)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, k;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tempa[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Nk; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">0</span>] = Key[(i * <span class="number">4</span>) + <span class="number">0</span>];</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">1</span>] = Key[(i * <span class="number">4</span>) + <span class="number">1</span>];</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">2</span>] = Key[(i * <span class="number">4</span>) + <span class="number">2</span>];</span><br><span class="line">        RoundKey[(i * <span class="number">4</span>) + <span class="number">3</span>] = Key[(i * <span class="number">4</span>) + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = Nk; i &lt; Nb * (Nr + <span class="number">1</span>); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        k = (i - <span class="number">1</span>) * <span class="number">4</span>;</span><br><span class="line">        tempa[<span class="number">0</span>]=RoundKey[k + <span class="number">0</span>];</span><br><span class="line">        tempa[<span class="number">1</span>]=RoundKey[k + <span class="number">1</span>];</span><br><span class="line">        tempa[<span class="number">2</span>]=RoundKey[k + <span class="number">2</span>];</span><br><span class="line">        tempa[<span class="number">3</span>]=RoundKey[k + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % Nk == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8tmp = tempa[<span class="number">0</span>];</span><br><span class="line">            tempa[<span class="number">0</span>] = tempa[<span class="number">1</span>];</span><br><span class="line">            tempa[<span class="number">1</span>] = tempa[<span class="number">2</span>];</span><br><span class="line">            tempa[<span class="number">2</span>] = tempa[<span class="number">3</span>];</span><br><span class="line">            tempa[<span class="number">3</span>] = u8tmp;</span><br><span class="line"></span><br><span class="line">            tempa[<span class="number">0</span>] = getSBoxValue(tempa[<span class="number">0</span>]);</span><br><span class="line">            tempa[<span class="number">1</span>] = getSBoxValue(tempa[<span class="number">1</span>]);</span><br><span class="line">            tempa[<span class="number">2</span>] = getSBoxValue(tempa[<span class="number">2</span>]);</span><br><span class="line">            tempa[<span class="number">3</span>] = getSBoxValue(tempa[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            tempa[<span class="number">0</span>] = tempa[<span class="number">0</span>] ^ Rcon[i/Nk];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        j = i * <span class="number">4</span>; k=(i - Nk) * <span class="number">4</span>;</span><br><span class="line">        RoundKey[j + <span class="number">0</span>] = RoundKey[k + <span class="number">0</span>] ^ tempa[<span class="number">0</span>];</span><br><span class="line">        RoundKey[j + <span class="number">1</span>] = RoundKey[k + <span class="number">1</span>] ^ tempa[<span class="number">1</span>];</span><br><span class="line">        RoundKey[j + <span class="number">2</span>] = RoundKey[k + <span class="number">2</span>] ^ tempa[<span class="number">2</span>];</span><br><span class="line">        RoundKey[j + <span class="number">3</span>] = RoundKey[k + <span class="number">3</span>] ^ tempa[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::AddRoundKey(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> *RoundKey)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span> ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            state[i][j] ^=  RoundKey[j*<span class="number">4</span>+i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::InvSubBytes(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            state[i][j] = rsbox[state[i][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::InvShiftRows(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, cnt, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt++ &lt; i)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = state[i][<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">3</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                state[i][j] = state[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            state[i][j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> aes::gfmultby(<span class="keyword">unsigned</span> <span class="keyword">char</span> a, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = a &gt;= <span class="number">0x80</span> ? (<span class="keyword">unsigned</span> <span class="keyword">char</span>)((a&lt;&lt;<span class="number">1</span>)^<span class="number">0x1b</span>):(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> tmp^a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(tmp, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">9</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^tmp;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">11</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^tmp^a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^gfmultby(tmp, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^gfmultby(tmp, <span class="number">2</span>)^a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> gfmultby(gfmultby(tmp, <span class="number">2</span>), <span class="number">2</span>)^gfmultby(tmp, <span class="number">2</span>)^tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::InvMixColumns(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state)[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> output[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                output[i][j] ^= gfmultby(state[k][j], InvMixValue[i][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            state[i][j] = output[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::getData(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data)[<span class="number">4</span>], <span class="keyword">char</span> *plaint)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            data[j][i] = plaint[<span class="number">4</span>*i+j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> aes::decryption_cbc(<span class="keyword">char</span> *enc, <span class="keyword">char</span> *plain)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">0</span>&#125;&#125;, output[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    aes::getData(state, enc);</span><br><span class="line"></span><br><span class="line">    aes::AddRoundKey(state, ctx.RoundKey+i*<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span>(i--; ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        aes::InvShiftRows(state);</span><br><span class="line">        aes::InvSubBytes(state);</span><br><span class="line">        aes::AddRoundKey(state, ctx.RoundKey+i*<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        aes::InvMixColumns(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            output[i][j] = state[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        plain[i] = ((<span class="keyword">char</span> *)output)[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> key[] = &#123;<span class="number">84</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">80</span>, <span class="number">105</span>, <span class="number">100</span>, <span class="number">58</span>, <span class="number">9</span>, <span class="number">48</span>, <span class="number">10</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">103</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> iv[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0xA</span>, <span class="number">0xB</span>, <span class="number">0xC</span>, <span class="number">0xD</span>, <span class="number">0xE</span>, <span class="number">0xF</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> plain[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">208</span>, <span class="number">96</span>, <span class="number">247</span>, <span class="number">198</span>, <span class="number">149</span>, <span class="number">66</span>, <span class="number">34</span>, <span class="number">253</span>, <span class="number">227</span>, <span class="number">107</span>, <span class="number">126</span>, <span class="number">156</span>, <span class="number">161</span>, <span class="number">201</span>, <span class="number">216</span>, <span class="number">250</span>, <span class="number">207</span>, <span class="number">130</span>, <span class="number">200</span>, <span class="number">118</span>, <span class="number">248</span>, <span class="number">203</span>, <span class="number">124</span>, <span class="number">111</span>, <span class="number">248</span>, <span class="number">127</span>, <span class="number">153</span>, <span class="number">90</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">198</span>, <span class="number">182</span>&#125;;</span><br><span class="line"></span><br><span class="line">aes *cry = <span class="keyword">new</span> aes(key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">cry-&gt;decryption_cbc(enc+i, plain+i);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">cry-&gt;xor_iv(plain+i, iv);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cry-&gt;xor_iv(plain+i, enc+(i<span class="number">-16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(plain);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后解密得到：<strong>wmctf{e78ce1a3ac4be37a96e27e98c}</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2021WMCTF中的Re1&amp;amp;Re2&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021蓝帽总决赛</title>
    <link href="https://bxb0.github.io/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/"/>
    <id>https://bxb0.github.io/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/</id>
    <published>2021-08-26T03:48:49.000Z</published>
    <updated>2022-01-20T08:26:17.319Z</updated>
    
    <content type="html"><![CDATA[<p>因为疫情原因，本来的北京国际会议中心的总决赛改成了线上，模式也从原来的awdplus改成了CTF解题赛，每个方向2个题。</p><p>这里来记录两道逆向题解，其中第二题因为在题目中嵌入了一个rsa密码学问题，比赛时一直卡着。<a id="more"></a></p><h3 id="abc"><a href="#abc" class="headerlink" title="abc"></a>abc</h3><p>题目中加了下面这种混淆，就是把要用的字符串或数据运算解密出来：</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827115605895.png" alt="image-20210827115605895"></p><p>然后很多的同一类型花指令，简单用idapython去除一下就好，主要看看函数大体就可以了，调试就很快。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x400640</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> addr &lt;= <span class="number">0x401592</span>:</span><br><span class="line">    <span class="keyword">if</span> get_byte(addr) == <span class="number">0xe8</span> <span class="keyword">and</span> get_byte(addr+<span class="number">1</span>) == <span class="number">0x0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]:</span><br><span class="line">                patch_byte(addr+i, <span class="number">0x90</span>)</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">10</span>:</span><br><span class="line">                patch_byte(addr+i, <span class="number">0xe8</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(<span class="string">'*'</span>*<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>对输入下内存断点，断到处理输入的核心函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">sub_401308</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">char</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) &gt;= v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(v3 - <span class="number">128</span>) = __ROR4__(__ROL4__(<span class="number">-1109410466</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">    *(_BYTE *)(v3 - <span class="number">127</span>) = __ROR4__(__ROL4__(<span class="number">-1109410466</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">    *(_BYTE *)(v3 - <span class="number">126</span>) = __ROR4__(__ROL4__(<span class="number">-2048934564</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> ( *(_DWORD *)(v3 - <span class="number">16</span>) = __ROR4__(__ROL4__(<span class="number">2111815003</span>, <span class="number">15</span>) ^ <span class="number">0xDEADBEEF</span>, <span class="number">10</span>);</span><br><span class="line">          (<span class="keyword">unsigned</span> __int64)*(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) &lt; <span class="number">3</span>;</span><br><span class="line">          *(_DWORD *)(v3 - <span class="number">16</span>) = *(_DWORD *)(v3 - <span class="number">16</span>) - <span class="number">118</span> + <span class="number">119</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_4014B2();</span><br><span class="line">      *(_BYTE *)(*(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) + v3 - <span class="number">128</span>) = ~*(_BYTE *)(*(<span class="keyword">int</span> *)(v3 - <span class="number">16</span>) + v3 - <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_401718();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    ++*(_DWORD *)(v3 - <span class="number">16</span>);</span><br><span class="line">    sub_40133C();</span><br><span class="line">    v5 = *v4;</span><br><span class="line">    <span class="keyword">switch</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">        sub_400A65();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'$'</span>:</span><br><span class="line">        sub_40085B(a1, a2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'%'</span>:</span><br><span class="line">        sub_400B6D();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'@'</span>:</span><br><span class="line">        sub_40095D(a1, a2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        sub_4013EE();</span><br><span class="line">        sub_400C6F(a1, a2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试可以知道，我们的输入要对应case语句的4个参数。</p><p>看到第一个case对应的处理函数：就是对box进行数据换位置。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/dnZxkKX4hrNo9QI.png" alt="image-20210824170542878"></p><p>再看最后的判断条件:</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/d1xvJuFYPj6hUTm.png" alt="image-20210824171449397"></p><p>从上可以抽象出来是一个4*4的华容道游戏。</p><p>开始我是写的一个dfs来搜索，因为限定条件比较少，很花时间，算法太菜了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">1</span>, <span class="number">0x0A</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0x0D</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">-1</span>, <span class="number">7</span>, <span class="number">0x0B</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x0C</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> d[] = <span class="string">"#$%@"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>  </span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index+<span class="number">1</span>];</span><br><span class="line">a[index+<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index<span class="number">-4</span>];</span><br><span class="line">a[index<span class="number">-4</span>] = tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun3</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index<span class="number">-1</span>];</span><br><span class="line">a[index<span class="number">-1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun4</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> tmp = a[index];</span><br><span class="line">a[index] = a[index+<span class="number">4</span>];</span><br><span class="line">a[index+<span class="number">4</span>] = tmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_index</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">index = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] != i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span> *a, <span class="keyword">int</span> <span class="built_in">step</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(check(a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"found: %s"</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">step</span> &gt; <span class="number">16</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *tmp = (<span class="keyword">char</span> *)alloca(<span class="number">16</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(tmp, enc, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">int</span> index = find_index(enc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i == <span class="number">0</span> &amp;&amp; (index%<span class="number">4</span>) &gt;= <span class="number">3</span>) || (i == <span class="number">1</span> &amp;&amp; (index/<span class="number">4</span>) &lt;= <span class="number">0</span>) || (i == <span class="number">2</span> &amp;&amp; (index%<span class="number">4</span>) &lt;= <span class="number">0</span>) || (i == <span class="number">3</span> &amp;&amp; (index/<span class="number">4</span>) &gt;= <span class="number">3</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun1(enc, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun2(enc, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun3(enc, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[<span class="built_in">step</span>] = d[i];</span><br><span class="line">fun4(enc, index);</span><br><span class="line">&#125;</span><br><span class="line">dfs(enc, <span class="built_in">step</span>+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(enc, tmp, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, "</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for(int i = 0; i &lt; 4; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for(int j = 0; j &lt; 4; j++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%02d ", enc[4*i+j]);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">putchar(10);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dfs(enc, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后找到github上一个解华容道的项目<a href="https://github.com/Dpxx/Klotski-15puzzles" target="_blank" rel="noopener">https://github.com/Dpxx/Klotski-15puzzles</a></p><p>快的离谱：</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/f73BUQgtNKLo6Tb.png" alt="image-20210824171658704"></p><p>最后转化一下：<strong>$$##$$%%@@##$$%%@@</strong></p><h3 id="en"><a href="#en" class="headerlink" title="en"></a>en</h3><p>这个题目最后也只有2解。我比赛时一直卡在rsa算法上，没想到逆向题还真就嵌入一个rsa的题。</p><p>通过这个题学习基本的pyc文件，对对抗混淆做好基础。</p><p>看题目的给的密文，加上看pyc文件中的字符串可以猜测是rsa加密。</p><p>尝试使用uncompyle6对该pyc文件反编译，报错。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827120432079.png" alt="image-20210827120432079"></p><p>这个问题了解过的原因基本上就是对字节码加了混淆，如下面举例这个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|   <span class="number">1</span>           <span class="number">0</span> JUMP_ABSOLUTE        [<span class="number">71</span> <span class="number">06</span> <span class="number">00</span>]     <span class="number">6</span> </span><br><span class="line">|               <span class="number">3</span> LOAD_CONST           [<span class="number">64</span> FF FF] <span class="number">65535</span> (FAKE!)</span><br><span class="line">|         &gt;&gt;    <span class="number">6</span> LOAD_CONST           [<span class="number">64</span> <span class="number">00</span> <span class="number">00</span>]     <span class="number">0</span> (Hello World)</span><br><span class="line">|               <span class="number">9</span> PRINT_ITEM           [<span class="number">47</span> -- --]</span><br><span class="line">|              <span class="number">10</span> PRINT_NEWLINE        [<span class="number">48</span> -- --]</span><br><span class="line">|              <span class="number">11</span> LOAD_CONST           [<span class="number">64</span> <span class="number">01</span> <span class="number">00</span>]     <span class="number">1</span> (<span class="literal">None</span>)</span><br><span class="line">|              <span class="number">14</span> RETURN_VALUE         [<span class="number">53</span> -- --]</span><br></pre></td></tr></table></figure><p>我们看到第二条指令<strong>3 LOAD_CONST           [64 FF FF] 65535</strong>，对于如何解析这个指令我们可以看到这两篇官方文档：<a href="https://docs.python.org/2/library/dis.html" target="_blank" rel="noopener">https://docs.python.org/2/library/dis.html</a>    <a href="https://github.com/Python/cpython/blob/2.7/Include/opcode.h" target="_blank" rel="noopener">https://github.com/Python/cpython/blob/2.7/Include/opcode.h</a></p><p><strong>64 FF FF</strong>是实际在pyc文件中存放的字节码，也是这一条指令的组成，其中64是表示操作指令，FF FF表示所带参数。（在字节码对象的co_code中分为无参数指令（1字节）和有参数指令（3字节））。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827133938306.png" alt="image-20210827133938306"></p><p>所以第二条指令的意思就是加载代码对象的常量表的第65535项到栈顶，常量表是存储了一个PyCodeObject中的常量的数组。而这里的index是65535，显然是超过了这个数组的大小。报的错也是数组越界。</p><p>但是第一条指令是一个绝对跳转，它跳到了编号为6的位置（也就是用&gt;&gt;符号标明了的）进而跳过他后面一条错误指令（3 LOAD_CONST）的执行。</p><p>所以实际执行的指令其实是这样：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|               <span class="number">6</span> LOAD_CONST           [<span class="number">64</span> <span class="number">00</span> <span class="number">00</span>]     <span class="number">0</span> (Hello World)</span><br><span class="line">|               <span class="number">9</span> PRINT_ITEM           [<span class="number">47</span> -- --]</span><br><span class="line">|              <span class="number">10</span> PRINT_NEWLINE        [<span class="number">48</span> -- --]</span><br><span class="line">|              <span class="number">11</span> LOAD_CONST           [<span class="number">64</span> <span class="number">01</span> <span class="number">00</span>]     <span class="number">1</span> (None)</span><br><span class="line">|              <span class="number">14</span> RETURN_VALUE         [<span class="number">53</span> -- --]</span><br></pre></td></tr></table></figure><p>我们实验一下如何看一个PyCodeObject中常量的个数，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">p</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    a = <span class="number">12</span></span><br><span class="line"><span class="meta">... </span>    b = <span class="number">13</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.__code__</span><br><span class="line">&lt;code object p at <span class="number">0x000002509037CEA0</span>, file <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = p.__code__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.co_consts</span><br><span class="line">(<span class="literal">None</span>, <span class="number">12</span>, <span class="number">13</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>这里提到了PyCodeObject，那什么是PyCodeObject呢。</p><p>从code.h头文件中找到它的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bytecode object */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    <span class="keyword">int</span> co_argcount;        <span class="comment">/* #arguments, except *args */</span></span><br><span class="line">    <span class="keyword">int</span> co_nlocals;     <span class="comment">/* #local variables */</span></span><br><span class="line">    <span class="keyword">int</span> co_stacksize;       <span class="comment">/* #entries needed for evaluation stack */</span></span><br><span class="line">    <span class="keyword">int</span> co_flags;       <span class="comment">/* CO_..., see below */</span></span><br><span class="line">    PyObject *co_code;      <span class="comment">/* instruction opcodes */</span></span><br><span class="line">    PyObject *co_consts;    <span class="comment">/* list (constants used) */</span></span><br><span class="line">    PyObject *co_names;     <span class="comment">/* list of strings (names used) */</span></span><br><span class="line">    PyObject *co_varnames;  <span class="comment">/* tuple of strings (local variable names) */</span></span><br><span class="line">    PyObject *co_freevars;  <span class="comment">/* tuple of strings (free variable names) */</span></span><br><span class="line">    PyObject *co_cellvars;      <span class="comment">/* tuple of strings (cell variable names) */</span></span><br><span class="line">    <span class="comment">/* The rest doesn't count for hash/cmp */</span></span><br><span class="line">    PyObject *co_filename;  <span class="comment">/* string (where it was loaded from) */</span></span><br><span class="line">    PyObject *co_name;      <span class="comment">/* string (name, for reference) */</span></span><br><span class="line">    <span class="keyword">int</span> co_firstlineno;     <span class="comment">/* first source line number */</span></span><br><span class="line">    PyObject *co_lnotab;    <span class="comment">/* string (encoding addr&lt;-&gt;lineno mapping) See</span></span><br><span class="line"><span class="comment">                   Objects/lnotab_notes.txt for details. */</span></span><br><span class="line">    <span class="keyword">void</span> *co_zombieframe;     <span class="comment">/* for optimization only (see frameobject.c) */</span></span><br><span class="line">    PyObject *co_weakreflist;   <span class="comment">/* to support weakrefs to code objects */</span></span><br><span class="line">&#125; PyCodeObject;</span><br></pre></td></tr></table></figure><p>在我们写好python代码，执行的时候它是先编译成pyc字节码，再通过解释执行pyc字节码。pyc文件PyCodeObject对象的持久化保存方式。 它按照python代码中代码的作用域来划分成PyCodeObject的。</p><p>写了如下简单的py代码来实验：</p><p>它就应该是有3个PyCodeObject的，一个整体的module，和funa，q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funa</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">q</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funb</span><span class="params">(self)</span>:</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">funa()</span><br><span class="line">q().funb()</span><br></pre></td></tr></table></figure><p>编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 -m py_compile 1.py</span><br></pre></td></tr></table></figure><p>载入生成的1.pyc文件到010editor使用模板查看：一个大的module对象的object consts包括了funa，q的PyCodeObject对象。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827150600761.png" alt="image-20210827150600761"></p><p>整体上来说这个pyc文件格式是很简单的，很多结构都是：<strong>类型+长度+内容</strong> 的格式。</p><p>回到做题的时候来。上面是用绝对跳转跳过错误代码的混淆字节码方式，其它还有虚假分支，重叠之类等，他们的原理其实都是差不多的，和x86平台下加的一般花指令极其类似。</p><p>然后回到这个题目上来，因为使用uncomple6没有反编译成功，我去尝试了使用<strong>marshal</strong>来反序列化pyc文件中的PyCodeObject，再使用diss模块进行反汇编。</p><blockquote><p>注意：</p><p>pyc文件由三部分组成<strong>magic number + 源代码文件信息 + PyCodeObject</strong></p><p>不同版本的python编译的pyc文件的<strong>magic number + 源代码文件信息</strong>都是不同的。</p><p>python2.7中除了4字节的<strong>magic number</strong>还有4字节的时间戳，所以<strong>PyCodeObject</strong>在第8个字节后面。</p><p>python3.5与python3.6在python2.7的基础上还多了4字节的源文件大小，所以<strong>PyCodeObject</strong>在12字节后面。</p><p>python3.7以上还增加了校验hash值，当4-8字节为全0时表示没有启用hash校验，其后的8-16字节表示时间戳与源文件大小；但当4-8字节为0100 0000或者0300 0000时，8-16字节表示文件的hash值。所以<strong>PyCodeObject</strong>在16字节后面。</p></blockquote><p>我们来看一下这个pyc文件头部信息：<strong>420D0D0A</strong>表示python版本为3.7，它的4-8字节全0表明后面的8-16字节为时间戳与源文件大小。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210831121607930.png" alt="image-20210831121607930"></p><p>从上可以知道这个文件的PyCodeObject在16字节后面，因此下面的代码中使用的<strong>f.seek(16)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> marshal, dis</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'en.pyc'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.seek(<span class="number">16</span>)</span><br><span class="line">code = marshal.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(dis.dis(code))</span><br></pre></td></tr></table></figure><p>可是在使用marshal进行反序列化时就出现了问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line 4, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    code = marshal.load(f)</span><br><span class="line">ValueError: bad marshal data (unknown <span class="built_in">type</span> code)</span><br></pre></td></tr></table></figure><p>这是python版本不匹配出现的问题，该pyc文件是python3.7编译的，而我的环境是python3.8。</p><p>最后使用<strong>pycdas</strong>成功反汇编了一部分，看到没有反汇编成功的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error disassembling en.pyc: vector::_M_range_check: __n (<span class="built_in">which</span> is 63) &gt;= this-&gt;size() (<span class="built_in">which</span> is 14)</span><br></pre></td></tr></table></figure><p>根据提示把对应的数字改小就可以了。</p><p>最后得到全部的反汇编结果：可能部分指令是不正确的，因为我上面对pyc文件的修改也是大概来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><span class="line">en.pyc (Python <span class="number">3.7</span>)</span><br><span class="line">[Code]</span><br><span class="line">    File Name: /somewhere/encrypt.py</span><br><span class="line">    Object Name: &lt;module&gt;</span><br><span class="line">    Arg Count: <span class="number">0</span></span><br><span class="line">    KW Only Arg Count: <span class="number">0</span></span><br><span class="line">    Locals: <span class="number">0</span></span><br><span class="line">    Stack Size: <span class="number">3</span></span><br><span class="line">    Flags: <span class="number">0x00000040</span> (CO_NOFREE)</span><br><span class="line">    [Names]</span><br><span class="line">        <span class="string">'gmpy2'</span></span><br><span class="line">        <span class="string">'g'</span></span><br><span class="line">        <span class="string">'Crypto.Util.number'</span></span><br><span class="line">        <span class="string">'long_to_bytes'</span></span><br><span class="line">        <span class="string">'bytes_to_long'</span></span><br><span class="line">        <span class="string">'random'</span></span><br><span class="line">        <span class="string">'gen_num'</span></span><br><span class="line">        <span class="string">'gen_prime'</span></span><br><span class="line">        <span class="string">'po'</span></span><br><span class="line">        <span class="string">'e2'</span></span><br><span class="line">        <span class="string">'__name__'</span></span><br><span class="line">        <span class="string">'sys'</span></span><br><span class="line">        <span class="string">'len'</span></span><br><span class="line">        <span class="string">'argv'</span></span><br><span class="line">        <span class="string">'encode'</span></span><br><span class="line">        <span class="string">'base64'</span></span><br><span class="line">        <span class="string">'B'</span></span><br><span class="line">        <span class="string">'b64decode'</span></span><br><span class="line">        <span class="string">'flag'</span></span><br><span class="line">    [Var Names]</span><br><span class="line">    [Free Vars]</span><br><span class="line">    [Cell Vars]</span><br><span class="line">    [Constants]</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">        (</span><br><span class="line">            <span class="string">'long_to_bytes'</span></span><br><span class="line">            <span class="string">'bytes_to_long'</span></span><br><span class="line">        )</span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: gen_num</span><br><span class="line">            Arg Count: <span class="number">1</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">3</span></span><br><span class="line">            Stack Size: <span class="number">6</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                <span class="string">'range'</span></span><br><span class="line">                <span class="string">'random'</span></span><br><span class="line">                <span class="string">'choice'</span></span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'n_bits'</span></span><br><span class="line">                <span class="string">'res'</span></span><br><span class="line">                <span class="string">'i'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_CONST              <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">2</span>       STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">4</span>       SETUP_LOOP              <span class="number">50</span> (to <span class="number">56</span>)</span><br><span class="line">                <span class="number">6</span>       LOAD_GLOBAL             <span class="number">0</span>: range</span><br><span class="line">                <span class="number">8</span>       LOAD_FAST               <span class="number">0</span>: n_bits</span><br><span class="line">                <span class="number">10</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">12</span>      GET_ITER                </span><br><span class="line">                <span class="number">14</span>      FOR_ITER                <span class="number">38</span> (to <span class="number">54</span>)</span><br><span class="line">                <span class="number">16</span>      STORE_FAST              <span class="number">2</span>: i</span><br><span class="line">                <span class="number">18</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">22</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">                <span class="number">24</span>      POP_JUMP_IF_FALSE       <span class="number">34</span></span><br><span class="line">                <span class="number">26</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">28</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">30</span>      INPLACE_LSHIFT          </span><br><span class="line">                <span class="number">32</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">34</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">36</span>      LOAD_GLOBAL             <span class="number">1</span>: random</span><br><span class="line">                <span class="number">38</span>      LOAD_METHOD             <span class="number">2</span>: choice</span><br><span class="line">                <span class="number">40</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">42</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">44</span>      BUILD_LIST              <span class="number">2</span></span><br><span class="line">                <span class="number">46</span>      CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">48</span>      UNARY_POSITIVE          </span><br><span class="line">                <span class="number">50</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">52</span>      JUMP_ABSOLUTE           <span class="number">14</span></span><br><span class="line">                <span class="number">54</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">56</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">58</span>      RETURN_VALUE            </span><br><span class="line">        <span class="string">'gen_num'</span></span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: gen_prime</span><br><span class="line">            Arg Count: <span class="number">1</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">3</span></span><br><span class="line">            Stack Size: <span class="number">3</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                <span class="string">'gen_num'</span></span><br><span class="line">                <span class="string">'g'</span></span><br><span class="line">                <span class="string">'is_prime'</span></span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'n_bits'</span></span><br><span class="line">                <span class="string">'res'</span></span><br><span class="line">                <span class="string">'b'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_GLOBAL             <span class="number">0</span>: gen_num</span><br><span class="line">                <span class="number">2</span>       LOAD_FAST               <span class="number">0</span>: n_bits</span><br><span class="line">                <span class="number">4</span>       CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">6</span>       STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">8</span>       SETUP_LOOP              <span class="number">54</span> (to <span class="number">64</span>)</span><br><span class="line">                <span class="number">10</span>      LOAD_GLOBAL             <span class="number">1</span>: g</span><br><span class="line">                <span class="number">12</span>      LOAD_METHOD             <span class="number">2</span>: is_prime</span><br><span class="line">                <span class="number">14</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">16</span>      CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">18</span>      POP_JUMP_IF_TRUE        <span class="number">62</span></span><br><span class="line">                <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">22</span>      STORE_FAST              <span class="number">2</span>: b</span><br><span class="line">                <span class="number">24</span>      SETUP_LOOP              <span class="number">34</span> (to <span class="number">60</span>)</span><br><span class="line">                <span class="number">26</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">                <span class="number">28</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">30</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">                <span class="number">32</span>      POP_JUMP_IF_FALSE       <span class="number">58</span></span><br><span class="line">                <span class="number">34</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">36</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">                <span class="number">38</span>      BINARY_XOR              </span><br><span class="line">                <span class="number">40</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">42</span>      LOAD_FAST               <span class="number">2</span>: b</span><br><span class="line">                <span class="number">44</span>      BINARY_AND              </span><br><span class="line">                <span class="number">46</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">48</span>      BINARY_LSHIFT           </span><br><span class="line">                <span class="number">50</span>      ROT_TWO                 </span><br><span class="line">                <span class="number">52</span>      STORE_FAST              <span class="number">1</span>: res</span><br><span class="line">                <span class="number">54</span>      STORE_FAST              <span class="number">2</span>: b</span><br><span class="line">                <span class="number">56</span>      JUMP_ABSOLUTE           <span class="number">26</span></span><br><span class="line">                <span class="number">58</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">60</span>      JUMP_ABSOLUTE           <span class="number">10</span></span><br><span class="line">                <span class="number">62</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">64</span>      LOAD_FAST               <span class="number">1</span>: res</span><br><span class="line">                <span class="number">66</span>      RETURN_VALUE            </span><br><span class="line">        <span class="string">'gen_prime'</span></span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: po</span><br><span class="line">            Arg Count: <span class="number">3</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">5</span></span><br><span class="line">            Stack Size: <span class="number">2</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'a'</span></span><br><span class="line">                <span class="string">'b'</span></span><br><span class="line">                <span class="string">'n'</span></span><br><span class="line">                <span class="string">'res'</span></span><br><span class="line">                <span class="string">'aa'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">1</span></span><br><span class="line">                <span class="number">0</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">2</span>       STORE_FAST              <span class="number">3</span>: res</span><br><span class="line">                <span class="number">4</span>       LOAD_FAST               <span class="number">0</span>: a</span><br><span class="line">                <span class="number">6</span>       STORE_FAST              <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">8</span>       SETUP_LOOP              <span class="number">52</span> (to <span class="number">62</span>)</span><br><span class="line">                <span class="number">10</span>      LOAD_FAST               <span class="number">1</span>: b</span><br><span class="line">                <span class="number">12</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">0</span></span><br><span class="line">                <span class="number">14</span>      COMPARE_OP              <span class="number">3</span> (!=)</span><br><span class="line">                <span class="number">16</span>      POP_JUMP_IF_FALSE       <span class="number">60</span></span><br><span class="line">                <span class="number">18</span>      LOAD_FAST               <span class="number">1</span>: b</span><br><span class="line">                <span class="number">20</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">22</span>      BINARY_AND              </span><br><span class="line">                <span class="number">24</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">26</span>      COMPARE_OP              <span class="number">2</span> (==)</span><br><span class="line">                <span class="number">28</span>      POP_JUMP_IF_FALSE       <span class="number">42</span></span><br><span class="line">                <span class="number">30</span>      LOAD_FAST               <span class="number">3</span>: res</span><br><span class="line">                <span class="number">32</span>      LOAD_FAST               <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">34</span>      BINARY_MULTIPLY         </span><br><span class="line">                <span class="number">36</span>      LOAD_FAST               <span class="number">2</span>: n</span><br><span class="line">                <span class="number">38</span>      BINARY_MODULO           </span><br><span class="line">                <span class="number">40</span>      STORE_FAST              <span class="number">3</span>: res</span><br><span class="line">                <span class="number">42</span>      LOAD_FAST               <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">44</span>      LOAD_FAST               <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">46</span>      INPLACE_MULTIPLY        </span><br><span class="line">                <span class="number">48</span>      STORE_FAST              <span class="number">4</span>: aa</span><br><span class="line">                <span class="number">50</span>      LOAD_FAST               <span class="number">1</span>: b</span><br><span class="line">                <span class="number">52</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">                <span class="number">54</span>      INPLACE_RSHIFT          </span><br><span class="line">                <span class="number">56</span>      STORE_FAST              <span class="number">1</span>: b</span><br><span class="line">                <span class="number">58</span>      JUMP_ABSOLUTE           <span class="number">10</span></span><br><span class="line">                <span class="number">60</span>      POP_BLOCK               </span><br><span class="line">                <span class="number">62</span>      LOAD_FAST               <span class="number">3</span>: res</span><br><span class="line">                <span class="number">64</span>      LOAD_FAST               <span class="number">2</span>: n</span><br><span class="line">                <span class="number">66</span>      BINARY_MODULO           </span><br><span class="line">                <span class="number">68</span>      RETURN_VALUE            </span><br><span class="line">        <span class="string">'po'</span></span><br><span class="line">        [Code]</span><br><span class="line">            File Name: /somewhere/encrypt.py</span><br><span class="line">            Object Name: e2</span><br><span class="line">            Arg Count: <span class="number">1</span></span><br><span class="line">            KW Only Arg Count: <span class="number">0</span></span><br><span class="line">            Locals: <span class="number">14</span></span><br><span class="line">            Stack Size: <span class="number">5</span></span><br><span class="line">            Flags: <span class="number">0x00000043</span> (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)</span><br><span class="line">            [Names]</span><br><span class="line">                <span class="string">'type'</span></span><br><span class="line">                <span class="string">'bytes'</span></span><br><span class="line">                <span class="string">'AssertionError'</span></span><br><span class="line">                <span class="string">'len'</span></span><br><span class="line">                <span class="string">'bytes_to_long'</span></span><br><span class="line">                <span class="string">'gen_prime'</span></span><br><span class="line">                <span class="string">'g'</span></span><br><span class="line">                <span class="string">'next_prime'</span></span><br><span class="line">                <span class="string">'long_to_bytes'</span></span><br><span class="line">                <span class="string">'pow'</span></span><br><span class="line">                <span class="string">'print'</span></span><br><span class="line">                <span class="string">'str'</span></span><br><span class="line">                <span class="string">'digits'</span></span><br><span class="line">                <span class="string">'hex'</span></span><br><span class="line">            [Var Names]</span><br><span class="line">                <span class="string">'m'</span></span><br><span class="line">                <span class="string">'l'</span></span><br><span class="line">                <span class="string">'m1'</span></span><br><span class="line">                <span class="string">'m2'</span></span><br><span class="line">                <span class="string">'p'</span></span><br><span class="line">                <span class="string">'q'</span></span><br><span class="line">                <span class="string">'pp'</span></span><br><span class="line">                <span class="string">'qq'</span></span><br><span class="line">                <span class="string">'e'</span></span><br><span class="line">                <span class="string">'ee'</span></span><br><span class="line">                <span class="string">'n'</span></span><br><span class="line">                <span class="string">'nn'</span></span><br><span class="line">                <span class="string">'c1'</span></span><br><span class="line">                <span class="string">'c2'</span></span><br><span class="line">            [Free Vars]</span><br><span class="line">            [Cell Vars]</span><br><span class="line">            [Constants]</span><br><span class="line">                <span class="literal">None</span></span><br><span class="line">                <span class="number">512</span></span><br><span class="line">                <span class="number">2</span></span><br><span class="line">                <span class="number">1024</span></span><br><span class="line">                <span class="number">2333</span></span><br><span class="line">                <span class="number">65535</span></span><br><span class="line">            [Disassembly]</span><br><span class="line">                <span class="number">0</span>       LOAD_GLOBAL             <span class="number">0</span>: type</span><br><span class="line">                <span class="number">2</span>       LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">4</span>       CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">6</span>       LOAD_GLOBAL             <span class="number">1</span>: bytes</span><br><span class="line">                <span class="number">8</span>       COMPARE_OP              <span class="number">2</span> (==)</span><br><span class="line">                <span class="number">10</span>      POP_JUMP_IF_TRUE        <span class="number">32</span></span><br><span class="line">                <span class="number">12</span>      LOAD_GLOBAL             <span class="number">2</span>: AssertionError</span><br><span class="line">                <span class="number">14</span>      RAISE_VARARGS           <span class="number">1</span></span><br><span class="line">                <span class="number">16</span>      LOAD_GLOBAL             <span class="number">11</span>: str</span><br><span class="line">                <span class="number">18</span>      LOAD_FAST               <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">20</span>      CALL_FUNCTION           <span class="number">31</span></span><br><span class="line">                <span class="number">22</span>      LOAD_CONST              <span class="number">1</span>: <span class="number">512</span></span><br><span class="line">                <span class="number">24</span>      COMPARE_OP              <span class="number">0</span> (&lt;)</span><br><span class="line">                <span class="number">26</span>      POP_JUMP_IF_TRUE        <span class="number">47</span></span><br><span class="line">                <span class="number">28</span>      LOAD_GLOBAL             <span class="number">2</span>: AssertionError</span><br><span class="line">                <span class="number">30</span>      RAISE_VARARGS           <span class="number">1</span></span><br><span class="line">                <span class="number">32</span>      LOAD_GLOBAL             <span class="number">3</span>: len</span><br><span class="line">                <span class="number">34</span>      LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">36</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">38</span>      LOAD_CONST              <span class="number">2</span>: <span class="number">2</span></span><br><span class="line">                <span class="number">40</span>      BINARY_FLOOR_DIVIDE     </span><br><span class="line">                <span class="number">42</span>      STORE_FAST              <span class="number">1</span>: l</span><br><span class="line">                <span class="number">44</span>      LOAD_GLOBAL             <span class="number">4</span>: bytes_to_long</span><br><span class="line">                <span class="number">46</span>      LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">48</span>      LOAD_CONST              <span class="number">0</span>: <span class="literal">None</span></span><br><span class="line">                <span class="number">50</span>      LOAD_FAST               <span class="number">1</span>: l</span><br><span class="line">                <span class="number">52</span>      BUILD_SLICE             <span class="number">2</span></span><br><span class="line">                <span class="number">54</span>      BINARY_SUBSCR           </span><br><span class="line">                <span class="number">56</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">58</span>      STORE_FAST              <span class="number">2</span>: m1</span><br><span class="line">                <span class="number">60</span>      LOAD_GLOBAL             <span class="number">4</span>: bytes_to_long</span><br><span class="line">                <span class="number">62</span>      LOAD_FAST               <span class="number">0</span>: m</span><br><span class="line">                <span class="number">64</span>      LOAD_FAST               <span class="number">1</span>: l</span><br><span class="line">                <span class="number">66</span>      LOAD_CONST              <span class="number">0</span>: <span class="literal">None</span></span><br><span class="line">                <span class="number">68</span>      BUILD_SLICE             <span class="number">2</span></span><br><span class="line">                <span class="number">70</span>      BINARY_SUBSCR           </span><br><span class="line">                <span class="number">72</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">74</span>      STORE_FAST              <span class="number">3</span>: m2</span><br><span class="line">                <span class="number">76</span>      LOAD_GLOBAL             <span class="number">5</span>: gen_prime</span><br><span class="line">                <span class="number">78</span>      LOAD_CONST              <span class="number">3</span>: <span class="number">1024</span></span><br><span class="line">                <span class="number">80</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">82</span>      STORE_FAST              <span class="number">4</span>: p</span><br><span class="line">                <span class="number">84</span>      LOAD_GLOBAL             <span class="number">5</span>: gen_prime</span><br><span class="line">                <span class="number">86</span>      LOAD_CONST              <span class="number">3</span>: <span class="number">1024</span></span><br><span class="line">                <span class="number">88</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">90</span>      STORE_FAST              <span class="number">5</span>: q</span><br><span class="line">                <span class="number">92</span>      LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">94</span>      LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">96</span>      LOAD_FAST               <span class="number">4</span>: p</span><br><span class="line">                <span class="number">98</span>      LOAD_CONST              <span class="number">4</span>: <span class="number">2333</span></span><br><span class="line">                <span class="number">100</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">102</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">104</span>     STORE_FAST              <span class="number">6</span>: pp</span><br><span class="line">                <span class="number">106</span>     LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">108</span>     LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">110</span>     LOAD_FAST               <span class="number">5</span>: q</span><br><span class="line">                <span class="number">112</span>     LOAD_CONST              <span class="number">4</span>: <span class="number">2333</span></span><br><span class="line">                <span class="number">114</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">116</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">118</span>     STORE_FAST              <span class="number">7</span>: qq</span><br><span class="line">                <span class="number">120</span>     LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">122</span>     LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">124</span>     LOAD_CONST              <span class="number">5</span>: <span class="number">65535</span></span><br><span class="line">                <span class="number">126</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">128</span>     STORE_FAST              <span class="number">8</span>: e</span><br><span class="line">                <span class="number">130</span>     LOAD_GLOBAL             <span class="number">6</span>: g</span><br><span class="line">                <span class="number">132</span>     LOAD_METHOD             <span class="number">7</span>: next_prime</span><br><span class="line">                <span class="number">134</span>     LOAD_FAST               <span class="number">8</span>: e</span><br><span class="line">                <span class="number">136</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">                <span class="number">138</span>     STORE_FAST              <span class="number">9</span>: ee</span><br><span class="line">                <span class="number">140</span>     LOAD_FAST               <span class="number">4</span>: p</span><br><span class="line">                <span class="number">142</span>     LOAD_FAST               <span class="number">5</span>: q</span><br><span class="line">                <span class="number">144</span>     BINARY_MULTIPLY         </span><br><span class="line">                <span class="number">146</span>     STORE_FAST              <span class="number">10</span>: n</span><br><span class="line">                <span class="number">148</span>     LOAD_FAST               <span class="number">6</span>: pp</span><br><span class="line">                <span class="number">150</span>     LOAD_FAST               <span class="number">7</span>: qq</span><br><span class="line">                <span class="number">152</span>     BINARY_MULTIPLY         </span><br><span class="line">                <span class="number">154</span>     STORE_FAST              <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">156</span>     LOAD_GLOBAL             <span class="number">8</span>: long_to_bytes</span><br><span class="line">                <span class="number">158</span>     LOAD_GLOBAL             <span class="number">9</span>: pow</span><br><span class="line">                <span class="number">160</span>     LOAD_FAST               <span class="number">2</span>: m1</span><br><span class="line">                <span class="number">162</span>     LOAD_FAST               <span class="number">8</span>: e</span><br><span class="line">                <span class="number">164</span>     LOAD_FAST               <span class="number">10</span>: n</span><br><span class="line">                <span class="number">166</span>     CALL_FUNCTION           <span class="number">3</span></span><br><span class="line">                <span class="number">168</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">170</span>     STORE_FAST              <span class="number">12</span>: c1</span><br><span class="line">                <span class="number">172</span>     LOAD_GLOBAL             <span class="number">8</span>: long_to_bytes</span><br><span class="line">                <span class="number">174</span>     LOAD_GLOBAL             <span class="number">9</span>: pow</span><br><span class="line">                <span class="number">176</span>     LOAD_FAST               <span class="number">3</span>: m2</span><br><span class="line">                <span class="number">178</span>     LOAD_FAST               <span class="number">9</span>: ee</span><br><span class="line">                <span class="number">180</span>     LOAD_FAST               <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">182</span>     CALL_FUNCTION           <span class="number">3</span></span><br><span class="line">                <span class="number">184</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">186</span>     STORE_FAST              <span class="number">13</span>: c2</span><br><span class="line">                <span class="number">188</span>     LOAD_GLOBAL             <span class="number">10</span>: <span class="keyword">print</span></span><br><span class="line">                <span class="number">190</span>     LOAD_GLOBAL             <span class="number">11</span>: str</span><br><span class="line">                <span class="number">192</span>     LOAD_FAST               <span class="number">10</span>: n</span><br><span class="line">                <span class="number">194</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">                <span class="number">196</span>     LOAD_FAST               <span class="number">11</span>: nn</span><br><span class="line">                <span class="number">198</span>     LOAD_METHOD             <span class="number">12</span>: digits</span><br><span class="line">                <span class="number">200</span>     CALL_METHOD             <span class="number">0</span></span><br><span class="line">                <span class="number">202</span>     LOAD_FAST               <span class="number">12</span>: c1</span><br><span class="line">                <span class="number">204</span>     LOAD_FAST               <span class="number">13</span>: c2</span><br><span class="line">                <span class="number">206</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">208</span>     LOAD_METHOD             <span class="number">13</span>: hex</span><br><span class="line">                <span class="number">210</span>     CALL_METHOD             <span class="number">0</span></span><br><span class="line">                <span class="number">212</span>     CALL_FUNCTION           <span class="number">3</span></span><br><span class="line">                <span class="number">214</span>     POP_TOP                 </span><br><span class="line">                <span class="number">216</span>     LOAD_FAST               <span class="number">12</span>: c1</span><br><span class="line">                <span class="number">218</span>     LOAD_FAST               <span class="number">13</span>: c2</span><br><span class="line">                <span class="number">220</span>     BINARY_ADD              </span><br><span class="line">                <span class="number">222</span>     RETURN_VALUE            </span><br><span class="line">        <span class="string">'e2'</span></span><br><span class="line">        <span class="string">'__main__'</span></span><br><span class="line">        <span class="number">2</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="string">b'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0='</span></span><br><span class="line">    [Disassembly]</span><br><span class="line">        <span class="number">0</span>       JUMP_ABSOLUTE           <span class="number">4</span></span><br><span class="line">        <span class="number">2</span>       LOAD_CONST              <span class="number">11</span>: <span class="string">'__main__'</span></span><br><span class="line">        <span class="number">4</span>       LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">6</span>       LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">8</span>       IMPORT_NAME             <span class="number">0</span>: gmpy2</span><br><span class="line">        <span class="number">10</span>      STORE_NAME              <span class="number">1</span>: g</span><br><span class="line">        <span class="number">12</span>      LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">14</span>      LOAD_CONST              <span class="number">2</span>: (<span class="string">'long_to_bytes'</span>, <span class="string">'bytes_to_long'</span>)</span><br><span class="line">        <span class="number">16</span>      IMPORT_NAME             <span class="number">2</span>: Crypto.Util.number</span><br><span class="line">        <span class="number">18</span>      IMPORT_FROM             <span class="number">3</span>: long_to_bytes</span><br><span class="line">        <span class="number">20</span>      STORE_NAME              <span class="number">3</span>: long_to_bytes</span><br><span class="line">        <span class="number">22</span>      IMPORT_FROM             <span class="number">4</span>: bytes_to_long</span><br><span class="line">        <span class="number">24</span>      STORE_NAME              <span class="number">4</span>: bytes_to_long</span><br><span class="line">        <span class="number">26</span>      POP_TOP                 </span><br><span class="line">        <span class="number">28</span>      LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">30</span>      LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">32</span>      IMPORT_NAME             <span class="number">5</span>: random</span><br><span class="line">        <span class="number">34</span>      STORE_NAME              <span class="number">5</span>: random</span><br><span class="line">        <span class="number">36</span>      LOAD_CONST              <span class="number">3</span>: &lt;CODE&gt; gen_num</span><br><span class="line">        <span class="number">38</span>      LOAD_CONST              <span class="number">4</span>: <span class="string">'gen_num'</span></span><br><span class="line">        <span class="number">40</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">42</span>      STORE_NAME              <span class="number">6</span>: gen_num</span><br><span class="line">        <span class="number">44</span>      LOAD_CONST              <span class="number">5</span>: &lt;CODE&gt; gen_prime</span><br><span class="line">        <span class="number">46</span>      LOAD_CONST              <span class="number">6</span>: <span class="string">'gen_prime'</span></span><br><span class="line">        <span class="number">48</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">50</span>      STORE_NAME              <span class="number">7</span>: gen_prime</span><br><span class="line">        <span class="number">52</span>      LOAD_CONST              <span class="number">7</span>: &lt;CODE&gt; po</span><br><span class="line">        <span class="number">54</span>      LOAD_CONST              <span class="number">8</span>: <span class="string">'po'</span></span><br><span class="line">        <span class="number">56</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">58</span>      STORE_NAME              <span class="number">8</span>: po</span><br><span class="line">        <span class="number">60</span>      LOAD_CONST              <span class="number">9</span>: &lt;CODE&gt; e2</span><br><span class="line">        <span class="number">62</span>      LOAD_CONST              <span class="number">10</span>: <span class="string">'e2'</span></span><br><span class="line">        <span class="number">64</span>      MAKE_FUNCTION           <span class="number">0</span></span><br><span class="line">        <span class="number">66</span>      STORE_NAME              <span class="number">9</span>: e2</span><br><span class="line">        <span class="number">68</span>      LOAD_NAME               <span class="number">10</span>: __name__</span><br><span class="line">        <span class="number">70</span>      LOAD_CONST              <span class="number">11</span>: <span class="string">'__main__'</span></span><br><span class="line">        <span class="number">72</span>      COMPARE_OP              <span class="number">2</span> (==)</span><br><span class="line">        <span class="number">74</span>      POP_JUMP_IF_FALSE       <span class="number">144</span></span><br><span class="line">        <span class="number">76</span>      LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">78</span>      LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">80</span>      IMPORT_NAME             <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">82</span>      STORE_NAME              <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">84</span>      LOAD_NAME               <span class="number">12</span>: len</span><br><span class="line">        <span class="number">86</span>      LOAD_NAME               <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">88</span>      LOAD_ATTR               <span class="number">13</span>: argv</span><br><span class="line">        <span class="number">90</span>      CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">92</span>      LOAD_CONST              <span class="number">12</span>: <span class="number">2</span></span><br><span class="line">        <span class="number">94</span>      COMPARE_OP              <span class="number">5</span> (&gt;=)</span><br><span class="line">        <span class="number">96</span>      POP_JUMP_IF_FALSE       <span class="number">118</span></span><br><span class="line">        <span class="number">98</span>      LOAD_NAME               <span class="number">9</span>: e2</span><br><span class="line">        <span class="number">100</span>     LOAD_NAME               <span class="number">11</span>: sys</span><br><span class="line">        <span class="number">102</span>     LOAD_ATTR               <span class="number">13</span>: argv</span><br><span class="line">        <span class="number">104</span>     LOAD_CONST              <span class="number">13</span>: <span class="number">1</span></span><br><span class="line">        <span class="number">106</span>     BINARY_SUBSCR           </span><br><span class="line">        <span class="number">108</span>     LOAD_METHOD             <span class="number">14</span>: encode</span><br><span class="line">        <span class="number">110</span>     CALL_METHOD             <span class="number">0</span></span><br><span class="line">        <span class="number">112</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">114</span>     POP_TOP                 </span><br><span class="line">        <span class="number">116</span>     JUMP_FORWARD            <span class="number">26</span> (to <span class="number">144</span>)</span><br><span class="line">        <span class="number">118</span>     LOAD_CONST              <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">        <span class="number">120</span>     LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">122</span>     IMPORT_NAME             <span class="number">15</span>: base64</span><br><span class="line">        <span class="number">124</span>     STORE_NAME              <span class="number">16</span>: B</span><br><span class="line">        <span class="number">126</span>     LOAD_NAME               <span class="number">16</span>: B</span><br><span class="line">        <span class="number">128</span>     LOAD_METHOD             <span class="number">17</span>: b64decode</span><br><span class="line">        <span class="number">130</span>     LOAD_CONST              <span class="number">14</span>: <span class="string">b'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0='</span></span><br><span class="line">        <span class="number">132</span>     CALL_METHOD             <span class="number">1</span></span><br><span class="line">        <span class="number">134</span>     STORE_NAME              <span class="number">18</span>: flag</span><br><span class="line">        <span class="number">136</span>     LOAD_NAME               <span class="number">9</span>: e2</span><br><span class="line">        <span class="number">138</span>     LOAD_NAME               <span class="number">18</span>: flag</span><br><span class="line">        <span class="number">140</span>     CALL_FUNCTION           <span class="number">1</span></span><br><span class="line">        <span class="number">142</span>     POP_TOP                 </span><br><span class="line">        <span class="number">144</span>     LOAD_CONST              <span class="number">1</span>: <span class="literal">None</span></span><br><span class="line">        <span class="number">146</span>     RETURN_VALUE</span><br></pre></td></tr></table></figure><p>都是很简单的代码，稍微熟悉下指令结构就能很快知道代码的功能。</p><p>开始是一个gen_numer的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_num</span><span class="params">(n_bits)</span>:</span></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n_bits):</span><br><span class="line"><span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">res &lt;&lt;= <span class="number">1</span></span><br><span class="line">res |= random.choice([<span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>然后gem_prime的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_prime</span><span class="params">(n_bits)</span>:</span></span><br><span class="line">res = gen_num(n_bits)</span><br><span class="line"><span class="keyword">while</span> !gmpy2.is_prime(res):</span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">res, b = res^b, (res&amp;b) &lt;&lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>接着是一个powmod运算：这个它是用模重复平方实现的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">po</span><span class="params">(a, b, n)</span>:</span></span><br><span class="line">res = <span class="number">1</span></span><br><span class="line">aa = a</span><br><span class="line"><span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> b&amp;<span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">res = res*aa%n</span><br><span class="line">aa *= aa</span><br><span class="line">b &gt;&gt; <span class="number">1</span></span><br><span class="line">res = res%n</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>再就是本题的关键加密函数e2，从反汇编结果来看这里也是对代码加了混淆的，因为我们的参数是bytes形式的，所以肯定跳过那个异常执行，但是反汇编或反编译器工具就没有那么智能了。</p><p><img src="/2021/08/26/2021%E8%93%9D%E5%B8%BD%E6%80%BB%E5%86%B3%E8%B5%9B/image-20210827161449207.png" alt="image-20210827161449207"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e2</span><span class="params">(m)</span>:</span></span><br><span class="line"><span class="keyword">if</span> type(m) == bytes:</span><br><span class="line">l = len(m)//<span class="number">2</span></span><br><span class="line">m1 = bytes_to_long(m[:l])</span><br><span class="line">m2 = bytes_to_long(m[l:])</span><br><span class="line">p = gen_prime(<span class="number">1024</span>)</span><br><span class="line">q = gen_prime(<span class="number">1024</span>)</span><br><span class="line">pp = gmpy2.next_prime(p+<span class="number">2333</span>)</span><br><span class="line">qq = gmpy2.next_prime(q+<span class="number">2333</span>)</span><br><span class="line">e = gmpy2.next_prime(<span class="number">65535</span>)</span><br><span class="line">ee = gmpy2.next_prime(e)</span><br><span class="line">n = p*q</span><br><span class="line">nn = pp*qq</span><br><span class="line">c1 = long_to_bytes(pow(m1, e, n))</span><br><span class="line">c2 = long_to_bytes(pow(m2, ee, nn))</span><br><span class="line">print(n)</span><br><span class="line">print(nn)</span><br><span class="line">print((c1+c2).hex())</span><br></pre></td></tr></table></figure><p>最后就是main函数的地方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt;= <span class="number">2</span>:</span><br><span class="line">e2(sys.argv[<span class="number">1</span>].encode())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag = base64.b64decode(<span class="string">'ZmxhZ3t0aGlzaXNhZmFrZWZsYWdhZ2Fhc2FzaGRhc2hkc2hkaH0='</span>)</span><br><span class="line">e2(flag)</span><br></pre></td></tr></table></figure><p>至此我将整个pyc文件手动的读代码恢复到了原始的py文件。</p><p>比赛时我也只是关心了那个加密函数e2，生成素数算法就是随机生成素数而已。</p><p>加密就是用2对rsa公钥加密对我们明文分为2组加密，然后密文给了2组公钥的n与nn：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">pp = gmpy2.next_prime(p+2333)</span><br><span class="line">qq = gmpy2.next_prime(q+2333)</span><br><span class="line">n = p*q</span><br><span class="line">nn = pp*qq</span><br><span class="line"></span><br><span class="line">n与nn已知</span><br></pre></td></tr></table></figure><p>开始还以为可以直接用factor把n分解出来，并不行，比赛时也是卡在了怎么根据以上的条件求解出p，q，pp，qq</p><p>以前在逆向中遇到的rsa都是n可以直接分解的，这次还真就在逆向中放一个要利用信安数学相关知识来分解n的题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10300808326934539089496666241808264289631957459372648156286399524715435483257526083909012656240599916663153630994400397551123967736269088895097145175999170121832669199408651009372742448196961434772052680714475103278704994244915332148949308972258132346198706995878511207707020032852291909422169657384059305615332901933166314692127020030962059133945677194815714731744932280037687773557589292839426111679593131496468880818820566335362063945141576571029271455695757725169819071536590541808603312689890186432713168331831945391117398124164372551511615664022982639779869597584768094658974144703654232643726744397158318139843</span> <span class="number">10300808326934539089496666241808264289631957459372648156286399524715435483257526083909012656240599916663153630994400397551123967736269088895097145175999170121832669199408651009372742448196961434772052680714475103278704994244915332148949308972258132346198706995878511207707020032852291909422169657384059306119730985949350246133999803589372738154347587848281413687500584822677442973180875153089761224816081452749380588888095064009160267372694200256546854314017937003988172151851703041691419537865664897608475932582537945754540823276273979713144072687287826518630644255675609067675836382036436064703619178779628644141463</span> <span class="number">22</span>cca5150ca0bb2132f68302dc7441e52b91ae7252e44cc13ed83e58253a9aaaa55e095ba36748dff7ea21fff553f8c4656e77a508b64da054f1381b7e2d0600bcec6ed9e1cc8d14c2362aaef7a972a714f88e5afb2d39e2d77d0c22a449ca2cfb0802c138f20e0ecbd3c174151cdb8e8ca6d89aa3c503615ebfbc851af5ac51dcfa8b5869b775b57a27b9e4346979180d89b303cae2c5d9e6cabb3c9947837bd8f92333532d4b54dd72ea354000600066328f6f4329147df195ec78a7ab9d39973ce0fd6511e7a0de54737bee64476ba531604f0375b08adf7d768c41ba9e2ba88468d126561a134de79dc0217c1c56d219ca6747103618e46f35281feb9e6050c93e32e26e21ee2c3d495f60db2fad9f9a5c570c9f97aee698024ebff6163ef26e32958872db7c593d7f41f90981b8db45aa01085be1e61f7603ecf3d5c032dd90dea791cd9825299548c0cbe7dadabc157048a7fd5cd4bcb1cfeaf0bd2d679f66ceb0b1c33ec04bd20317f872c85d500a3475833f983fdee59b3f61a731e2a8b9a60bd7d840f46e97f06dd4fd8ad1cb4d13a82da01938801c33835ceaf34e1cf62ebdde7ac68b17c2a236b64ffacd2a0e7258571ce570871aea9ff309df63c0a3abcfa0c05d159a82f9fa3f3ad73944e4ae33c3432c8b65c0d6fe9b560220b14abe5886188fc1e6afa4bb4395669618387224422acf20b519af902225e270</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为疫情原因，本来的北京国际会议中心的总决赛改成了线上，模式也从原来的awdplus改成了CTF解题赛，每个方向2个题。&lt;/p&gt;
&lt;p&gt;这里来记录两道逆向题解，其中第二题因为在题目中嵌入了一个rsa密码学问题，比赛时一直卡着。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>InCTF-2021</title>
    <link href="https://bxb0.github.io/2021/08/16/InCTF-2021/"/>
    <id>https://bxb0.github.io/2021/08/16/InCTF-2021/</id>
    <published>2021-08-16T04:06:32.000Z</published>
    <updated>2022-01-09T09:16:48.658Z</updated>
    
    <content type="html"><![CDATA[<p>Reverse~（本来说后面来把做当时做了题的wp更新下，拖太久了，那就算了，暂且就这两个题😂<a id="more"></a></p><h3 id="find-plut0"><a href="#find-plut0" class="headerlink" title="find_plut0"></a>find_plut0</h3><p>开始我使用z3来解，掉进坑里了。</p><p>这里手动把程序中的连续的数据定义为数组，然后转换一下类型，方便直接复制到z3中使用。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816122348022.png" alt="image-20210816122348022"></p><p>但是跑不出结果，，。</p><p>接着使用了最基本的angr模板来跑一下，结果秒出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, claripy, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'\nYeey you found him !!!!'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_false</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'Lol , he won'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">'./chall'</span>) </span><br><span class="line">init_state = proj.factory.entry_state() </span><br><span class="line">sim = proj.factory.simgr(init_state) </span><br><span class="line">sim.explore(find = is_success, avoid = is_false) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">print(sim.found[<span class="number">0</span>].posix.dumps(i))</span><br></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WARNING | 2021-08-16 12:12:05,063 | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.</span><br><span class="line">b'`<span class="symbol">\\</span>ET0a<span class="symbol">\x</span>fd<span class="symbol">\x</span>8e<span class="symbol">\x</span>8b3<span class="symbol">\x</span>01<span class="symbol">\x</span>02!7<span class="symbol">\x</span>03<span class="symbol">\x</span>02<span class="symbol">\x</span>c9<span class="symbol">\x</span>e3<span class="symbol">\x</span>01<span class="symbol">\x</span>02<span class="symbol">\x</span>12<span class="symbol">\x</span>1ftr<span class="symbol">\x</span>027<span class="symbol">\x</span>ff<span class="symbol">\x</span>d1<span class="symbol">\x</span>02<span class="symbol">\x</span>e1<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>02<span class="symbol">\x</span>8a<span class="symbol">\x</span>89<span class="symbol">\x</span>02'</span><br><span class="line">b"Hello there , i lost my dog pluto :(<span class="symbol">\n</span>Help me call him out please !!<span class="symbol">\n</span><span class="symbol">\n</span> ................<span class="symbol">\n</span> |w00ff w00ff!! |<span class="symbol">\n</span>  '''''V'''''''' <span class="symbol">\n</span> <span class="symbol">\n</span>     .~````~. <span class="symbol">\n</span>  .,/        <span class="symbol">\\</span>,. <span class="symbol">\n</span> (  | (0  0) |  )<span class="symbol">\n</span> (  |  ____  |  )<span class="symbol">\n</span> (_/|  <span class="symbol">\\</span>__/  |<span class="symbol">\\</span>_)<span class="symbol">\n</span>     <span class="symbol">\\</span>__/<span class="symbol">\\</span>__/<span class="symbol">\n</span>      '-..-'  <span class="symbol">\n</span><span class="symbol">\n</span><span class="symbol">\n</span>Yeey you found him !!!!<span class="symbol">\n</span> Grab your reward from nc!<span class="symbol">\n</span>"</span><br><span class="line">b''</span><br></pre></td></tr></table></figure><p>这个有很多不可通过键盘输入的字符，所以使用pwntools来远程sendline一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = remote('34.94.181.140', 4205)</span></span><br><span class="line">p = process(<span class="string">'./chall'</span>)</span><br><span class="line">ans = <span class="string">b'`\\ET0a\xfd\x8e\x8b3\x01\x02!7\x03\x02\xc9\xe3\x01\x02\x12\x1ftr\x027\xff\xd1\x02\xe1'</span></span><br><span class="line">p.recvuntil(<span class="string">'him out please !!'</span>)</span><br><span class="line">p.sendline(ans)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>然后是找使用z3得不到正确结果的原因。</p><p>看了一下运算过程，首先发现了一个<strong>/运算</strong>：它在python3和C语言中有点区别，python3中会保留运算小数，C中直接取整。这里改为<strong>&gt;&gt;1</strong>就保持一致了。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816122710296.png" alt="image-20210816122710296"></p><p>再次跑了一下，得到仍然不是正确结果。</p><p>调试看运算过程，从汇编层面发现了问题所在，是因为计算的数据类型不当。</p><p>程序定义的输入为char类型数组，然后计算的时候也都是以char数组数类型来算的，，ida就把我从汇编层面看到的很多的当运算的数要大于127才会对计算有影响的运算在伪代码中都直接省去了（也可以说这里是ida优化太好了</p><p>但对于本题，正确的输入恰好不全是可打印字符，范围可以是（1~255），这也是程序要给nc来连接远程的原因，方便我们输入数据。</p><p>正是由于正确输入范围在1~255，所以运算过程直接看伪代码就肯定不对了，z3也得不到正确结果。</p><p>下面举几个汇编层面看到的要数据大于127才会对计算结果有影响的汇编指令：</p><p>eg1：</p><p>伪代码：</p><p><img src="/2021/08/16/InCTF-2021/image-20210816124859158.png" alt="image-20210816124859158"></p><p>汇编代码：<strong>红框部分在伪代码中并没有体现，因为当计算的数为char范围的话，这个对最终结果也确实没有影响的。</strong></p><p><img src="/2021/08/16/InCTF-2021/image-20210816124658017.png" alt="image-20210816124658017"></p><p>eg2：</p><p>伪代码：</p><p><img src="/2021/08/16/InCTF-2021/image-20210816134137679.png" alt="image-20210816134137679"></p><p>汇编代码：这可以看到伪代码中没有展示出来这里只取最低字节来移位。然后这里比较奇怪，我测试这里<strong>sar edx，cl</strong>移动的都是1位，但cl的值也不为1呀。而且按照正常cl值来移动的话又显然不对，这个地方还是比较迷糊。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816134223056.png" alt="image-20210816134223056"></p><p>eg3：</p><p>伪代码：</p><p><img src="/2021/08/16/InCTF-2021/image-20210816124907598.png" alt="image-20210816124907598"></p><p>汇编代码：这里注意这个<strong>movsx</strong>指令（带符号扩展传送指令），它先会用al的符号位来填充eax的高24位。也就是说当我们要计算的数是大于127的话，这里结果经过传送指令后就变成了对应的负数。<strong>这个其实在运算后用&amp;0xff取低字节后对结果不会有影响，因为一个数转化为对应的负数后他们的二进制位是没有变的。如-1*6与255*6他们计算后的低字节都是相同的。</strong>虽然这个例子不影响最后的结果，但值得注意一下。</p><p><img src="/2021/08/16/InCTF-2021/image-20210816125219175.png" alt="image-20210816125219175"></p><p>最后，感觉本题的出题人的本意也是为了对我上面所提到的考察一下，本意上是要我们用angr要解。</p><h3 id="main-replica"><a href="#main-replica" class="headerlink" title="main_replica"></a>main_replica</h3><p>rust语言逆向，他和go一样都是无虚拟机的高级语言。</p><p>首先可以从标志字符串main.rs识别出来这是rust程序，字符串窗口也能看到很多标志字符串：</p><p><img src="/2021/08/16/InCTF-2021/image-20210818144457208.png" alt="image-20210818144457208"></p><p>在做了这个题写wp的时候，乘着这是一个个rust题，我去搭建了一下rust的开发环境。一是为了方便自己编写玩一下rust程序；二是为了使用rust-reversing-helper这个项目来恢复rust程序中的符号。<a href="https://github.com/cha5126568/rust-reversing-helper" target="_blank" rel="noopener">rust-reversing-helper</a></p><p>搭建整个环境到最后符号签名的应用遇到坑肯定还是有的，这个以后来专门开一个文章记录下。</p><p>本想wp中提一下用了这个恢复签名的效果，，结果很不理想。</p><p>然后回到我做这个题的时候。</p><p>根据elf文件的特征，找到main函数，因为程序代码量还是有点大，这就要着重去找关键代码。</p><p>很快定位到关键比较：</p><p><img src="/2021/08/16/InCTF-2021/image-20210818195211548.png" alt="image-20210818195211548"></p><p>其实加密就是打乱输入的顺序，然后与密文比较。</p><p>调试一遍，得到映射关系就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">base = <span class="string">'0123456789abcdefghijklmno'</span></span><br><span class="line">enc = <span class="string">'0kedtZ6fYO3aX4lPNMSgQbRwh'</span></span><br><span class="line">tmp = <span class="string">'onlh98g76kfe54mjdc32iba10'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> base:</span><br><span class="line">flag += enc[tmp.index(i)]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reverse~（本来说后面来把做当时做了题的wp更新下，拖太久了，那就算了，暂且就这两个题😂&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>闲记</title>
    <link href="https://bxb0.github.io/2021/08/08/%E9%97%B2%E8%AE%B0/"/>
    <id>https://bxb0.github.io/2021/08/08/%E9%97%B2%E8%AE%B0/</id>
    <published>2021-08-08T05:06:59.000Z</published>
    <updated>2022-01-20T08:44:27.362Z</updated>
    
    <content type="html"><![CDATA[<p>记录某一时间的学习、心得及想法。<a id="more"></a></p><h2 id="2021-8-8"><a href="#2021-8-8" class="headerlink" title="2021.8.8"></a>2021.8.8</h2><p>今天想着整理一下之前博客的文章，收纳了一下。所以我对博客的改动，删除的东西比较多，但是在最后布署的时候，使用的通过对站点使用的静态资源进行压缩来优化网站的访问速度的<strong>gulp</strong>出问题了。。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210808131835607.png" alt="image-20210808131835607"></p><p>搜索了一番，网上并没有解决办法。是不是删除了什么东西呢，然后把之前删了的东西从回收站还原，问题依旧在。</p><p>仔细看了一下错误，我的猜测是不是那篇文章中出现了什么\x07字符导致压缩出现问题。但是我修改了这么多，不可能一篇一篇去找。。</p><p>然而我可以按照修改时间，把今天与最近修改过的文章都移出去，再次布署，成功了，那就是文章中出现了什么字符导致的问题了。</p><p>很快我定位到了出错的文章，并不是我今天修改的，而是前几天写的2021的巅峰极客的wp。。最后从文章中定位出问题字符：这里的红点就是一些不可打印字符，可能其中某个字符导致了gulp出错。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210808132805886.png" alt="image-20210808132805886"></p><p>解决办法：删除即可，hh</p><h2 id="2021-8-11"><a href="#2021-8-11" class="headerlink" title="2021.8.11"></a>2021.8.11</h2><p>来对今天才知道的一个python知识点进进行记录了。😅</p><p>先说说起因：</p><p>本来我想去看看0x2d对应的ascii字符是什么，就在python解释器窗口输入了chr(0x2d)，反馈了<strong>‘-‘</strong>，但是这个在cmd窗口中没看出来是<strong>-</strong>还是<strong>_</strong>，所以我又输入ord(_)，反馈了45，嗯那就是下划线字符了。等等！我输入这个_没带引号呀，然后又试了ord(a)，果然报错<strong>name ‘a’ is not defined</strong>，那那个ord(_)是怎么回事。。</p><p>搜索一番，这个_在python中的用法还不少。</p><p>首先是在python交互解释器中，<strong>_符号是指交互解释器中最后一次执行语句的返回结果</strong>。这也就是我上面遇到的情况了。</p><p>然后<strong>_还用作被丢弃的名称</strong>，如下面举例的代码：就是我们在只要计数功能，但并不关心计数值的时候可以使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="number">42</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len):</span><br><span class="line">do()</span><br></pre></td></tr></table></figure><p>最后<strong>_还可以用作函数名</strong>。</p><p>综上，所以说，那个0x2d所对应的字符不是下划线，是<strong>-</strong></p><h2 id="2021-8-16"><a href="#2021-8-16" class="headerlink" title="2021.8.16"></a>2021.8.16</h2><p>又是安装记录，hh。</p><p>安装gmpy2库，本来在linux是安装了的，但突然就是想在windows下安装下，感觉方便点。</p><p>但一开始就报错了：大概看了下应该是编译的时候出了问题，电脑中缺少了什么。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210816003647937.png" alt="image-20210816003647937"></p><p>但是我可以直接去下载.whl，然后通过wheel来安装嗯。</p><p>首先：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>然后到官方github下载对应的.whl文件：<a href="https://github.com/aleaxit/gmpy/releases/tag/gmpy2-2.1.0b6" target="_blank" rel="noopener">https://github.com/aleaxit/gmpy/releases/tag/gmpy2-2.1.0b6</a></p><p>这里注意要与本机安装python的版本一致，不然会出现下面的错误：（这里cp39是python3.9用的</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210816003959826.png" alt="image-20210816003959826"></p><p>我是python3.8，安装cp38就行了。</p><p>最后：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gmpy2-<span class="number">2.1</span><span class="number">.0b6</span>-cp38-cp38-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210816004124363.png" alt="image-20210816004124363"></p><h2 id="2021-8-17"><a href="#2021-8-17" class="headerlink" title="2021.8.17"></a>2021.8.17</h2><p>今天看一个wp的时候突然想着去看看Crypto的，正好看见一个rsa的题，突然对一个问题一下子疑惑了：rsa中求解私钥d的时候是找的公钥e和φ（n）的逆元，为什么不是找公钥e和n的逆元呢。</p><p>接着，我又想到了仿射密码中求逆元的时候就是直接找的密钥k和模数的逆元，然后自己简单推导了下，这个倒很简单，确实是密钥k和模数的逆元。</p><p>然后rsa中的呢，我也顺着推了一下。</p><p>这个其实也简单，就是利用了一些同余的性质。<a href="https://www.zhihu.com/question/67393951" target="_blank" rel="noopener">https://www.zhihu.com/question/67393951</a></p><h2 id="2021-8-18"><a href="#2021-8-18" class="headerlink" title="2021.8.18"></a>2021.8.18</h2><p>python中的小知识点记录~</p><p>Reverse和Crypto中经常会用下面的方法进行一个数与bytes类型互换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>long_to_bytes(<span class="number">100</span>)</span><br><span class="line"><span class="string">b'd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes_to_long(<span class="string">b'd'</span>)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>然后struct模块中提供了的方法也可以实现上面的功能且扩展性很高，如我们还可以指定大小端模式等。下面列一些很简单的列子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_8</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack( <span class="string">"!B"</span>, v )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_16</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack( <span class="string">"!H"</span>, v )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_32</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack( <span class="string">"!L"</span>, v )</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_8</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack( <span class="string">"!B"</span>, v )[ <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_16</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack( <span class="string">"!H"</span>, v )[ <span class="number">0</span> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_32</span><span class="params">(v)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack( <span class="string">"!L"</span>, v )[ <span class="number">0</span> ]</span><br></pre></td></tr></table></figure><p>另外是python的类中命名为<strong>__call__</strong>的方法。</p><blockquote><p><strong>__call__</strong></p><p>存在<strong>call</strong>方法的类对象被称为可调用对象，它的作用可以总结为以下两点：</p><ul><li>简化了对象下方法的调用 (当某方法调用频率很高)</li><li>模糊了对象和函数调用时的区别 (提高了代码的兼容性)</li></ul></blockquote><p>首先是简化了对象方法调用的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"***A***"</span>)</span><br><span class="line"> </span><br><span class="line">a = A()</span><br><span class="line">a.fun()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"***B***"</span>)</span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b()     <span class="comment">#这里就方法的调用进行了简化</span></span><br></pre></td></tr></table></figure><p>然后是模糊对象与方法调用上的区别的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funA</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"***A***"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"***B***"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(fun)</span>:</span></span><br><span class="line">    fun()</span><br><span class="line">    </span><br><span class="line">c(funA)</span><br><span class="line">c(B())</span><br></pre></td></tr></table></figure><h2 id="2021-8-26"><a href="#2021-8-26" class="headerlink" title="2021.8.26"></a>2021.8.26</h2><p>惊了，每从主机向虚拟机拖拽文件时产生的备份缓存居然有700多M，，还不会自动删除。</p><p>以及为什么执行本目录下的文件要加上<strong>./</strong></p><p><strong>可以发现windows中的cmd下我们就不用加，这其实是因为windows的环境变量有当前目录下的路径，而linux中的环境变量并没有当前目录下的路径。</strong></p><p>又是记录一下小知识。</p><p>还是再说说起因。</p><p>今天弄着备用的centos的python环境发现还不能通过python直接启动python3，想到去创建一个符号链接。用python执行python3。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>然后突然我又想到我每次调试elf文件时，都在新创建的目录下拷贝了一份linux_server，真的是繁琐且占存储的行为，那这个我每次在新的目录也创建一个linux_server的符号链接就好了，这样解决了占存储，但还是很繁琐呀，每次还要去输入命令符号链接一下。</p><p>hh，其实根本不用这么麻烦，我直接把linux_server放到<strong>/usr/bin/</strong>，这样每次就都可以直接执行linux_server了。</p><p>接着就是去删除以前复制了的很多linux_server：注意要加上<strong>xargs</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home/ -name linux_server* | xargs rm</span><br></pre></td></tr></table></figure><p>删除过程发现了.cache/vmware/drag_and_drop还有linux_server。搜了一下这其实是每次从主机到虚拟机拖拽文件时产生的副本文件，不会自动删除。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210826133028720.png" alt="image-20210826133028720"></p><p>查看了一下这个目录下的大小：居然有760多M之大。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -sh /home/xxx/.cache/vmware/drag_and_drop</span><br></pre></td></tr></table></figure><p>删除后，心情也感觉舒畅了很多。😂</p><h2 id="2021-8-27"><a href="#2021-8-27" class="headerlink" title="2021.8.27"></a>2021.8.27</h2><p>centos下安装gmpy2跟着错误把缺少的依赖都装好后，在导入时出现下面这个错误：也就是说这个libmpfr.so.6不存在。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20210826161415157.png" alt="image-20210826161415157"></p><p>找了半天这个，根本找不到。</p><p>最后发现可以把libmpfr.so.4通过软链接过去当libmpfr.so.6用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/lib64/libmpfr.so.4 /usr/lib64/libmpfr.so.6</span><br></pre></td></tr></table></figure><h2 id="2021-8-28"><a href="#2021-8-28" class="headerlink" title="2021.8.28"></a>2021.8.28</h2><p>今天写一个用于测试很简单的python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funa</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">q</span><span class="params">()</span>:</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funb</span><span class="params">()</span>:</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">funa()</span><br><span class="line">q().funb()</span><br></pre></td></tr></table></figure><p>出现了如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"1.py"</span>, line 13, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    q().funb()</span><br><span class="line">TypeError: funb() takes no arguments (1 given)</span><br></pre></td></tr></table></figure><p>看到上面的错误提示我funb这个函数是无参的，但是我给了它一个参数，所以导致了错误。</p><p>但是我写的<strong>q().funb()</strong>，这没有给参数的嗯。</p><p>其实这是：<strong>每个与类相关联的方法调用都自动传递实参self ， 它是一个指向实例本身的引用，让实例能够访问类中的属性和方法</strong>。</p><p>也就是调用funb这个函数的时候，隐式的自动的传递了self这个参数。</p><p>要解决这个问题，直接在定义funb函数的时候加上一个参数就好了。</p><p>很基础的一个问题，对于一些细节不清楚，这也是我没有系统学习过python导致的，慢慢积累，边用边学就好。</p><h2 id="2021-12-5"><a href="#2021-12-5" class="headerlink" title="2021.12.5"></a>2021.12.5</h2><p>今天做了一个简单的rsa题目，其中涉及了2个简单的rsa的知识点。</p><p>一，低加密指数攻击。</p><p>也就是选取的公钥e太小使加密结果小于n了，这样我直接对密文开三次方根就好。对于加密结果大于n的，有 <strong>enc = c+kn</strong> 我们爆破k，直到enc能开三次方根也就找到m了。</p><p>对于开三次方根使用gmpy2库的iroot方法。</p><p>如我对8开三次方根：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gmpy2.iroot(<span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">(mpz(<span class="number">2</span>), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>二，共模攻击。</p><h2 id="2022-1-14"><a href="#2022-1-14" class="headerlink" title="2022.1.14"></a>2022.1.14</h2><p>对于在网上下载的ida7.6的cfg目录下是有Chinese.clt文件的但是不能显示中文的（扩展的asci），解决办法：</p><p>在它的配置文件ida.cfg的ENCODING_CULTURES下加上一个 <strong>GB2312: Chinese</strong> 就好了。</p><p><img src="/2021/08/08/%E9%97%B2%E8%AE%B0/image-20220114220105970.png" alt="image-20220114220105970"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录某一时间的学习、心得及想法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="free" scheme="https://Bxb0.github.io/categories/free/"/>
    
    
  </entry>
  
  <entry>
    <title>DASCTF July X CBCTF 4th</title>
    <link href="https://bxb0.github.io/2021/08/01/DASCTF-July-X-CBCTF-4th/"/>
    <id>https://bxb0.github.io/2021/08/01/DASCTF-July-X-CBCTF-4th/</id>
    <published>2021-08-01T06:53:12.000Z</published>
    <updated>2021-08-08T03:38:06.512Z</updated>
    
    <content type="html"><![CDATA[<p>逆向题解~<a id="more"></a></p><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>下载下来一共四个文件，</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801165128724.png" alt="image-20210801165128724"></p><p>其中看到main.bat脚本是接受我们的输入后，以最小化方式启动part1.exe</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801165237488.png" alt="image-20210801165237488"></p><p>这里去简单了解了一下bat脚本，开始的<strong>@echo off</strong>表示关闭执行本指令及其它的指令的回显；<strong>set /p</strong>表示后面用用户的输入来赋值；start  /min表示以最小化窗口的方式启动一个程序，相应的也就有start /max以最大化窗口的方式启动；taskkill /im表示所要关闭的进程的以程序名给出，另外具体详细的用法，直接在命令行窗口使用taskkill /?就清楚了。</p><p>但是从bat脚本来看，他是怎么传递我们的输入的呢。</p><p>直接启动part1.exe来看，没有什么输出。然后ida中发现是go语言写的程序，但是用以往的恢复符号的脚本用不了，这和国赛初赛那个go语言程序一样，可以使用免费版的ida7.6，自带恢复符号表，效果很好。</p><p>从函数名及汇编代码可以看出，这个程序应该是启动一个服务：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801172227127.png" alt="image-20210801172227127"></p><p>再在010editor中看了part2.bin文件，从机器码很明显能看出，就是一个函数的开头：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801174256827.png" alt="image-20210801174256827"></p><p>最后在看part3.exe，一切就很清晰了，它加载了part.bin中shellcode然后执行。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801172534546.png" alt="image-20210801172534546"></p><p>直接动态跟踪进入shellcode，找到很多和网络编程相关的api，及发现它在本地的8080端口请求读文件（正是part1.exe启动的服务）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_3A0005</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">8</span>]; <span class="comment">// [esp+0h] [ebp-BCh] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v2)(<span class="keyword">char</span> *, <span class="keyword">int</span>, _DWORD, _DWORD, _DWORD); <span class="comment">// [esp+8h] [ebp-B4h]</span></span><br><span class="line">  <span class="keyword">void</span> (__stdcall *v3)(<span class="keyword">int</span>); <span class="comment">// [esp+Ch] [ebp-B0h]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> *); <span class="comment">// [esp+10h] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v5)(_DWORD, <span class="keyword">unsigned</span> __int8 *, <span class="keyword">int</span>, <span class="keyword">int</span>); <span class="comment">// [esp+14h] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">void</span> (__stdcall *v6)(<span class="keyword">int</span>, _DWORD, _DWORD, _DWORD, _DWORD); <span class="comment">// [esp+18h] [ebp-A4h]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v7)(<span class="keyword">int</span>, <span class="keyword">char</span> *, <span class="keyword">int</span>, _DWORD, _DWORD, <span class="keyword">int</span>, _DWORD, _DWORD); <span class="comment">// [esp+20h] [ebp-9Ch]</span></span><br><span class="line">  <span class="keyword">int</span> (__stdcall *v8)(<span class="keyword">int</span>, <span class="keyword">char</span> *, <span class="keyword">char</span> *, <span class="keyword">char</span> *, _DWORD, _DWORD, <span class="keyword">int</span>, _DWORD); <span class="comment">// [esp+24h] [ebp-98h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+28h] [ebp-94h]</span></span><br><span class="line">  <span class="keyword">int</span> (*v10)(<span class="keyword">void</span>); <span class="comment">// [esp+2Ch] [ebp-90h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [esp+30h] [ebp-8Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// [esp+34h] [ebp-88h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [esp+38h] [ebp-84h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [esp+3Ch] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v15[<span class="number">16</span>]; <span class="comment">// [esp+40h] [ebp-7Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v16[<span class="number">8</span>]; <span class="comment">// [esp+50h] [ebp-6Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// [esp+58h] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+5Ch] [ebp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v19[<span class="number">4</span>]; <span class="comment">// [esp+60h] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v20[<span class="number">40</span>]; <span class="comment">// [esp+64h] [ebp-58h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v21[<span class="number">16</span>]; <span class="comment">// [esp+8Ch] [ebp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v22[<span class="number">12</span>]; <span class="comment">// [esp+9Ch] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v23[<span class="number">12</span>]; <span class="comment">// [esp+A8h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v24; <span class="comment">// [esp+B4h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">char</span> v25[<span class="number">4</span>]; <span class="comment">// [esp+B8h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_3A0480((<span class="keyword">void</span> (__stdcall **)(<span class="keyword">char</span> *))v1);</span><br><span class="line">  <span class="built_in">strcpy</span>(v15, <span class="string">"Hello GuiShou"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v19, <span class="string">"Tip"</span>);</span><br><span class="line">  v11 = v5(<span class="number">0</span>, &amp;unk_400000, <span class="number">4096</span>, <span class="number">64</span>);</span><br><span class="line">  v10 = (<span class="keyword">int</span> (*)(<span class="keyword">void</span>))v5(<span class="number">0</span>, &amp;unk_400000, <span class="number">4096</span>, <span class="number">64</span>);</span><br><span class="line">  v9 = <span class="number">0x4000000</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v22, <span class="string">"127.0.0.1"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v16, <span class="string">"8080"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v25, <span class="string">"GET"</span>);</span><br><span class="line">  v21[<span class="number">0</span>] = <span class="number">47</span>;</span><br><span class="line">  v21[<span class="number">1</span>] = <span class="number">115</span>;</span><br><span class="line">  v21[<span class="number">2</span>] = <span class="number">104</span>;</span><br><span class="line">  v21[<span class="number">3</span>] = <span class="number">101</span>;</span><br><span class="line">  v21[<span class="number">4</span>] = <span class="number">108</span>;</span><br><span class="line">  v21[<span class="number">5</span>] = <span class="number">108</span>;</span><br><span class="line">  v21[<span class="number">6</span>] = <span class="number">47</span>;</span><br><span class="line">  v21[<span class="number">7</span>] = <span class="number">118</span>;</span><br><span class="line">  v21[<span class="number">8</span>] = <span class="number">111</span>;</span><br><span class="line">  v21[<span class="number">9</span>] = <span class="number">105</span>;</span><br><span class="line">  v21[<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">  v21[<span class="number">11</span>] = <span class="number">13</span>;</span><br><span class="line">  v21[<span class="number">12</span>] = <span class="number">10</span>;</span><br><span class="line">  v21[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v20, <span class="string">"Mozilla/5.0 (Windows NT 6.1; rv:11.0)"</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v23, <span class="string">"HTTP/1.0"</span>);</span><br><span class="line">  v14 = <span class="number">1</span>;</span><br><span class="line">  v18 = <span class="number">-1</span>;</span><br><span class="line">  v24 = <span class="number">0</span>;</span><br><span class="line">  v12 = v2(v20, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v13 = v7(v12, v22, <span class="number">8080</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  v17 = v8(v13, v25, v21, v23, <span class="number">0</span>, <span class="number">0</span>, v9, <span class="number">0</span>);</span><br><span class="line">  v6(v17, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( v14 &amp;&amp; v18 )</span><br><span class="line">  &#123;</span><br><span class="line">    v14 = v4(v17, v24 + v11, <span class="number">4096</span>, &amp;v18);</span><br><span class="line">    v24 += v18;</span><br><span class="line">  &#125;</span><br><span class="line">  v3(v17);</span><br><span class="line">  v3(v13);</span><br><span class="line">  v3(v12);</span><br><span class="line">  ((<span class="keyword">void</span> (__cdecl *)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> (*)(<span class="keyword">void</span>)))sub_3A059F)(v11, v24, v10);</span><br><span class="line">  <span class="keyword">return</span> v10();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问一下本地8080端口看看：确实。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801173140351.png" alt="image-20210801173140351"></p><p>剩下继续跟踪调试就好，请求读了一串字符串，然后用它解密出一个关键加密函数，从其中也知道程序是如何获取我们在bat脚本中输入的FLAG了：通过获取在启动当前进程下的FLAG变量获取。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210801173515697.png" alt="image-20210801173515697"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GetEnvironmentVariable是一个从调用该函数的进程的环境变量中返回指定的变量名值的函数，主要参数有lpName、lpBuffer等。</span><br><span class="line"> </span><br><span class="line">GetEnvironmentVariable函数从调用该函数的进程的环境变量中,返回指定的变量名的值,该值是一个以零结尾的字符串指针.</span><br><span class="line"><span class="function">DWORD <span class="title">GetEnvironmentVariable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">LPCTSTR lpName, <span class="comment">// address of environment variable name</span></span></span></span><br><span class="line"><span class="function"><span class="params">LPTSTR lpBuffer, <span class="comment">// address of buffer for variable value</span></span></span></span><br><span class="line"><span class="function"><span class="params">DWORD nSize <span class="comment">// size of buffer, in characters</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>;</span><br><span class="line">参数:</span><br><span class="line">lpName:要获取值的变量名字符串指针.</span><br><span class="line">lpBuffer:接收变量值的字符串指针</span><br><span class="line">nSize:接收变量值的内存大小.</span><br><span class="line">返回值:</span><br><span class="line">如果函数成功执行,则返回值是写入字符缓冲区的字符数量,但不包含<span class="string">'\0'</span>字符.</span><br><span class="line">如果没有找到所指的变量,则返回零.</span><br><span class="line">如果字符缓冲区的大小小于变量值的长度,返回值为缓冲区的大小.</span><br></pre></td></tr></table></figure><p>最后就是rc4流密码加密，得到密钥序列异或回去即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">0x64</span>, <span class="number">0x2E</span>, <span class="number">0x90</span>, <span class="number">0x34</span>, <span class="number">0x41</span>, <span class="number">0xD8</span>, <span class="number">0x24</span>, <span class="number">0xCB</span>, <span class="number">0x52</span>, <span class="number">0x2E</span>, <span class="number">0xFB</span>, <span class="number">0x39</span>, <span class="number">0x3E</span>, <span class="number">0x91</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x96</span>, <span class="number">0xF6</span>, <span class="number">0x3C</span>, <span class="number">0x09</span>, <span class="number">0x9C</span>, <span class="number">0x21</span>, <span class="number">0x92</span>, <span class="number">0x21</span>, <span class="number">0xB2</span>, <span class="number">0xCC</span>, <span class="number">0x9F</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x63</span>, <span class="number">0x4C</span>, <span class="number">0x8F</span>, <span class="number">0x72</span>, <span class="number">0x5D</span>, <span class="number">0xBF</span>, <span class="number">0x6C</span>, <span class="number">0x51</span>, <span class="number">0x76</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">0x02</span>, <span class="number">0x42</span>, <span class="number">0xF1</span>, <span class="number">0x53</span>, <span class="number">0x3A</span>, <span class="number">0xBB</span>, <span class="number">0x42</span>, <span class="number">0xAA</span>, <span class="number">0x66</span>, <span class="number">0x1E</span>, <span class="number">0x9A</span>, <span class="number">0x58</span>, <span class="number">0x0E</span>, <span class="number">0xA8</span>, <span class="number">0x35</span>, <span class="number">0x68</span>, <span class="number">0xA4</span>, <span class="number">0xCE</span>, <span class="number">0x09</span>, <span class="number">0x3C</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0xA5</span>, <span class="number">0x13</span>, <span class="number">0x8A</span>, <span class="number">0xFC</span>, <span class="number">0xAD</span>, <span class="number">0x30</span>, <span class="number">0x7B</span>, <span class="number">0x53</span>, <span class="number">0x75</span>, <span class="number">0xBD</span>, <span class="number">0x41</span>, <span class="number">0x6A</span>, <span class="number">0x8B</span>, <span class="number">0x0A</span>, <span class="number">0x67</span>, <span class="number">0x0B</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [s[i]^t[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">38</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line">[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">99</span>, <span class="number">102</span>, <span class="number">97</span>, <span class="number">52</span>, <span class="number">48</span>, <span class="number">97</span>, <span class="number">97</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">50</span>, <span class="number">102</span>, <span class="number">50</span>, <span class="number">56</span>, <span class="number">53</span>, <span class="number">53</span>, <span class="number">48</span>, <span class="number">97</span>, <span class="number">55</span>, <span class="number">50</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">50</span>, <span class="number">97</span>, <span class="number">51</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">55</span>, <span class="number">52</span>, <span class="number">102</span>, <span class="number">54</span>, <span class="number">125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'flag&#123;cfa40aa092f28550a72802a3092374f6&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>第一次做程序中调用lua语言代码的题，这个题本身不难，但在总结题目时，一些环境上面遇到很多问题，记录一下。</p><p>我发现这个题是调用了lua是从ida打开的提示信息看到的，这也是出题人编译题目是没有注意这一点，其次从题目中字符串区域上下文找多翻翻也是可以发现的，Luas表示lua版本是5.3</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805200714779.png" alt="image-20210805200714779"></p><p>还找到了base64码表，从引用找到一个对码表逆序和base64加密函数，在base64加密函数下断后发现程序不是断下来，猜测是输入字符串长度不对，试了几次长度32，36都不是。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805201317430.png" alt="image-20210805201317430"></p><p>然后既然我上面已经找到了程序加载的lua字节码，直接从这个入手，idapython提取出数据，找工具反编译。</p><p>开始找到luadec这个工具，编译环境问题真是花了主要的时间，，这里我去折腾了。<a href="https://github.com/viruscamp/luadec" target="_blank" rel="noopener">工具地址</a></p><p>首先编译这个lua源码，缺少各种依赖吧，印象最深得的缺少readline.h这个库（因为后面我要编译32位的lua找这个库的32位找半天），我是在ubuntu下，直接安装就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libreadline-dev</span><br></pre></td></tr></table></figure><p>然后到luadec目录下去编译luadec：<strong>make LUAVER=5.3</strong>，当时又是很多问题，但找到问题，搜索安装上缺少项就能轻松解决。</p><p>编译好了，开始反编译：<strong>./luadec ans.luac &gt; ans.lua</strong>，问题来了：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805203310921.png" alt="image-20210805203310921"></p><p>从提示信息看应该是位数问题，目标lua是32位的，而我的luadec是64位的。</p><p>linux环境是64位的，默认编译的就是64位的，那怎么编译32位的呢。这是编译C代码，用的gcc，记得gcc是有个-m32选项，强制编译32位的程序（前提是我们要安装好32位程序所要依赖的各种库文件）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential module-assistant</span><br><span class="line">sudo apt-get install gcc-multilib g++-multilib</span><br></pre></td></tr></table></figure><p>安装后，随便写了一个C文件，来编译测试了一下，gcc -m32 1.c -o 1，可行。</p><p>然后去找Makefile文件，增加编译选项。因为对Makefile不熟悉，这里开始又疑惑了，，为什么没有gcc命令，那程序是怎么编译的！</p><p>后面才发现，其实在是第一个Makefile中指定了到src文件下进行make，所以找到src文件下的Makefile，增加-m32</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805204517841.png" alt="image-20210805204517841"></p><p>然后编译，出现问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当搜索用于 /usr/lib/x86_64-linux-gnu/libreadline.a 时跳过不兼容的 -lreadline</span><br><span class="line">/usr/bin/ld: 找不到 -lreadline</span><br></pre></td></tr></table></figure><p>可以看到，编译时跑去找64位的readline库了，而因为不兼容所以跳过，就提示找不到。</p><p>问题是知道了，但找这个32位的库真是要命，搜索根本没有。。最后是在一篇其它问题里发现有这样一个名字：<strong>lib32readline6-dev</strong>，</p><p><a href="https://blog.csdn.net/zhbpd/article/details/41805737" target="_blank" rel="noopener">https://blog.csdn.net/zhbpd/article/details/41805737</a></p><p>安装发现果然是这个，高兴了一小会：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lib32readline6-dev</span><br></pre></td></tr></table></figure><p>再到luadec下去编译luadec，同样要修改Makefile，增加gcc的选项-m32（这里我第一次编译忘了修改，又出现位数不兼容，<strong>Undefined reference to ‘__divdi3’</strong>的问题，好在及时发现，真是粗心大意，，）</p><p>终于成功，再次反编译，问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cannot find blockend &gt; 170 , pc = 169, f-&gt;sizecode = 170</span><br><span class="line">cannot find blockend &gt; 43 , pc = 42, f-&gt;sizecode = 43</span><br><span class="line">cannot find blockend &gt; 25 , pc = 24, f-&gt;sizecode = 25</span><br><span class="line">cannot find blockend &gt; 17 , pc = 16, f-&gt;sizecode = 17</span><br><span class="line">cannot find blockend &gt; 32 , pc = 31, f-&gt;sizecode = 32</span><br><span class="line">cannot find blockend &gt; 9 , pc = 8, f-&gt;sizecode = 9</span><br><span class="line">cannot find blockend &gt; 9 , pc = 8, f-&gt;sizecode = 9</span><br><span class="line">cannot find blockend &gt; 9 , pc = 8, f-&gt;sizecode = 9</span><br><span class="line">cannot find blockend &gt; 33 , pc = 32, f-&gt;sizecode = 33</span><br><span class="line">cannot find blockend &gt; 7 , pc = 6, f-&gt;sizecode = 7</span><br><span class="line">cannot find blockend &gt; 7 , pc = 6, f-&gt;sizecode = 7</span><br><span class="line">cannot find blockend &gt; 7 , pc = 6, f-&gt;sizecode = 7</span><br><span class="line">-- Decompiled using luadec 2.2 rev: 895d923 <span class="keyword">for</span> Lua 5.3 from https://github.com/viruscamp/luadec</span><br><span class="line">-- Command line: ans2.luac </span><br><span class="line"></span><br><span class="line">段错误 (核心已转储)</span><br></pre></td></tr></table></figure><p>然后尝试其它选项，如打印出函数调用结构：<strong>./luadec -pn ans2.luac</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805210418021.png" alt="image-20210805210418021"></p><p>尝试只打印0序号函数，因为其它函数都是它的子结构：<strong>./luadec -f 0 ans2.luac &gt; ans2.lua</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805210816751.png" alt="image-20210805210816751"></p><p>还行，整体上大概都反编译出了，但是感觉比较难看，我又去找了<strong>unluac</strong>来看看效果，它就是一个jar，下载和使用起来很方便：</p><p><a href="https://sourceforge.net/projects/unluac/files/latest/download" target="_blank" rel="noopener">unluac下载链接</a></p><p>usage：如果解码中出现 <code>\ddd</code>的形式，说明源码中有中文，这时注意加上：<strong>–rawstring</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar unluac_2021_06_10.jar --rawstring ans.luac &gt; ans.lua</span><br></pre></td></tr></table></figure><p>然后得到的结果，确实要比luadec得到的好一些：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> L0_1, L1_1, L2_1, L3_1, L4_1, L5_1, L6_1, L7_1, L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1</span><br><span class="line">L0_1 = <span class="built_in">require</span></span><br><span class="line">L1_1 = <span class="string">"enclib"</span></span><br><span class="line">L0_1 = L0_1(L1_1)</span><br><span class="line">enclib = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L1_2, L2_2, L3_2, L4_2, L5_2, L6_2, L7_2, L8_2, L9_2, L10_2, L11_2, L12_2</span><br><span class="line">  L1_2 = <span class="built_in">string</span></span><br><span class="line">  L1_2 = L1_2.<span class="built_in">len</span></span><br><span class="line">  L2_2 = A0_2</span><br><span class="line">  L1_2 = L1_2(L2_2)</span><br><span class="line">  L2_2 = &#123;&#125;</span><br><span class="line">  L3_2 = &#123;&#125;</span><br><span class="line">  L4_2 = <span class="number">0</span></span><br><span class="line">  L5_2 = <span class="number">255</span></span><br><span class="line">  L6_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L7_2 = L4_2, L5_2, L6_2 <span class="keyword">do</span></span><br><span class="line">    L2_2[L7_2] = L7_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L4_2 = <span class="number">1</span></span><br><span class="line">  L5_2 = L1_2</span><br><span class="line">  L6_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L7_2 = L4_2, L5_2, L6_2 <span class="keyword">do</span></span><br><span class="line">    L8_2 = L7_2 - <span class="number">1</span></span><br><span class="line">    L9_2 = <span class="built_in">string</span></span><br><span class="line">    L9_2 = L9_2.<span class="built_in">byte</span></span><br><span class="line">    L10_2 = A0_2</span><br><span class="line">    L11_2 = L7_2</span><br><span class="line">    L12_2 = L7_2</span><br><span class="line">    L9_2 = L9_2(L10_2, L11_2, L12_2)</span><br><span class="line">    L3_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L4_2 = <span class="number">0</span></span><br><span class="line">  L5_2 = <span class="number">0</span></span><br><span class="line">  L6_2 = <span class="number">255</span></span><br><span class="line">  L7_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L8_2 = L5_2, L6_2, L7_2 <span class="keyword">do</span></span><br><span class="line">    L9_2 = L2_2[L8_2]</span><br><span class="line">    L9_2 = L4_2 + L9_2</span><br><span class="line">    L10_2 = L8_2 % L1_2</span><br><span class="line">    L10_2 = L3_2[L10_2]</span><br><span class="line">    L9_2 = L9_2 + L10_2</span><br><span class="line">    L4_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = L2_2[L4_2]</span><br><span class="line">    L10_2 = L2_2[L8_2]</span><br><span class="line">    L2_2[L4_2] = L10_2</span><br><span class="line">    L2_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">KSA = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2, L6_2, L7_2, L8_2, L9_2, L10_2</span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  L3_2 = <span class="number">0</span></span><br><span class="line">  L4_2 = &#123;&#125;</span><br><span class="line">  L5_2 = <span class="number">1</span></span><br><span class="line">  L6_2 = A1_2</span><br><span class="line">  L7_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L8_2 = L5_2, L6_2, L7_2 <span class="keyword">do</span></span><br><span class="line">    L9_2 = L2_2 + <span class="number">1</span></span><br><span class="line">    L2_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = A0_2[L2_2]</span><br><span class="line">    L9_2 = L3_2 + L9_2</span><br><span class="line">    L3_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = A0_2[L3_2]</span><br><span class="line">    L10_2 = A0_2[L2_2]</span><br><span class="line">    A0_2[L3_2] = L10_2</span><br><span class="line">    A0_2[L2_2] = L9_2</span><br><span class="line">    L9_2 = A0_2[L2_2]</span><br><span class="line">    L10_2 = A0_2[L3_2]</span><br><span class="line">    L9_2 = L9_2 + L10_2</span><br><span class="line">    L9_2 = L9_2 % <span class="number">256</span></span><br><span class="line">    L9_2 = A0_2[L9_2]</span><br><span class="line">    L4_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> L4_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PRGA = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2, L6_2, L7_2</span><br><span class="line">  L2_2 = <span class="built_in">string</span></span><br><span class="line">  L2_2 = L2_2.<span class="built_in">len</span></span><br><span class="line">  L3_2 = A1_2</span><br><span class="line">  L2_2 = L2_2(L3_2)</span><br><span class="line">  L3_2 = KSA</span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L3_2 = L3_2(L4_2)</span><br><span class="line">  L4_2 = PRGA</span><br><span class="line">  L5_2 = L3_2</span><br><span class="line">  L6_2 = L2_2</span><br><span class="line">  L4_2 = L4_2(L5_2, L6_2)</span><br><span class="line">  L5_2 = <span class="built_in">output</span></span><br><span class="line">  L6_2 = L4_2</span><br><span class="line">  L7_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L5_2(L6_2, L7_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">RC4 = L0_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L0_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2, L6_2, L7_2, L8_2, L9_2, L10_2, L11_2, L12_2</span><br><span class="line">  L2_2 = <span class="built_in">string</span></span><br><span class="line">  L2_2 = L2_2.<span class="built_in">len</span></span><br><span class="line">  L3_2 = A1_2</span><br><span class="line">  L2_2 = L2_2(L3_2)</span><br><span class="line">  L3_2 = <span class="literal">nil</span></span><br><span class="line">  L4_2 = &#123;&#125;</span><br><span class="line">  L5_2 = <span class="number">1</span></span><br><span class="line">  L6_2 = L2_2</span><br><span class="line">  L7_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> L8_2 = L5_2, L6_2, L7_2 <span class="keyword">do</span></span><br><span class="line">    L9_2 = <span class="built_in">string</span></span><br><span class="line">    L9_2 = L9_2.<span class="built_in">byte</span></span><br><span class="line">    L10_2 = A1_2</span><br><span class="line">    L11_2 = L8_2</span><br><span class="line">    L12_2 = L8_2</span><br><span class="line">    L9_2 = L9_2(L10_2, L11_2, L12_2)</span><br><span class="line">    L3_2 = L9_2</span><br><span class="line">    L9_2 = <span class="built_in">string</span></span><br><span class="line">    L9_2 = L9_2.<span class="built_in">char</span></span><br><span class="line">    L10_2 = bxor</span><br><span class="line">    L11_2 = A0_2[L8_2]</span><br><span class="line">    L12_2 = L3_2</span><br><span class="line">    L10_2, L11_2, L12_2 = L10_2(L11_2, L12_2)</span><br><span class="line">    L9_2 = L9_2(L10_2, L11_2, L12_2)</span><br><span class="line">    L4_2[L8_2] = L9_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L5_2 = <span class="built_in">table</span></span><br><span class="line">  L5_2 = L5_2.<span class="built_in">concat</span></span><br><span class="line">  L6_2 = L4_2</span><br><span class="line">  <span class="keyword">return</span> L5_2(L6_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">output</span> = L0_1</span><br><span class="line">L0_1 = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2</span><br><span class="line">  L2_2 = A0_2 + A1_2</span><br><span class="line">  <span class="keyword">if</span> L2_2 == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    L2_2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L2_2 <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">goto</span> lbl_8</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  ::lbl_8::</span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.cond_and = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2</span><br><span class="line">  L2_2 = A0_2 + A1_2</span><br><span class="line">  <span class="keyword">if</span> L2_2 == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    L2_2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L2_2 <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">goto</span> lbl_8</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  ::lbl_8::</span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.cond_xor = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2</span><br><span class="line">  L2_2 = A0_2 + A1_2</span><br><span class="line">  <span class="keyword">if</span> <span class="number">0</span> &lt; L2_2 <span class="keyword">then</span></span><br><span class="line">    L2_2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> L2_2 <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">goto</span> lbl_8</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L2_2 = <span class="number">0</span></span><br><span class="line">  ::lbl_8::</span><br><span class="line">  <span class="keyword">return</span> L2_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.cond_or = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2, A2_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L3_2, L4_2, L5_2, L6_2, L7_2</span><br><span class="line">  <span class="keyword">if</span> A1_2 &lt; A2_2 <span class="keyword">then</span></span><br><span class="line">    L3_2 = A2_2</span><br><span class="line">    A2_2 = A1_2</span><br><span class="line">    A1_2 = L3_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  L3_2 = <span class="number">0</span></span><br><span class="line">  L4_2 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> A1_2 ~= <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    L5_2 = A1_2 % <span class="number">2</span></span><br><span class="line">    r_a = L5_2</span><br><span class="line">    L5_2 = A2_2 % <span class="number">2</span></span><br><span class="line">    r_b = L5_2</span><br><span class="line">    L5_2 = L0_1[A0_2]</span><br><span class="line">    L6_2 = r_a</span><br><span class="line">    L7_2 = r_b</span><br><span class="line">    L5_2 = L5_2(L6_2, L7_2)</span><br><span class="line">    L5_2 = L4_2 * L5_2</span><br><span class="line">    L3_2 = L5_2 + L3_2</span><br><span class="line">    L4_2 = L4_2 * <span class="number">2</span></span><br><span class="line">    L5_2 = <span class="built_in">math</span></span><br><span class="line">    L5_2 = L5_2.<span class="built_in">modf</span></span><br><span class="line">    L6_2 = A1_2 / <span class="number">2</span></span><br><span class="line">    L5_2 = L5_2(L6_2)</span><br><span class="line">    A1_2 = L5_2</span><br><span class="line">    L5_2 = <span class="built_in">math</span></span><br><span class="line">    L5_2 = L5_2.<span class="built_in">modf</span></span><br><span class="line">    L6_2 = A2_2 / <span class="number">2</span></span><br><span class="line">    L5_2 = L5_2(L6_2)</span><br><span class="line">    A2_2 = L5_2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> L3_2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L0_1.base = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2</span><br><span class="line">  L2_2 = L0_1.base</span><br><span class="line">  L3_2 = <span class="string">"cond_xor"</span></span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L5_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L2_2(L3_2, L4_2, L5_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">bxor = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2</span><br><span class="line">  L2_2 = L0_1.base</span><br><span class="line">  L3_2 = <span class="string">"cond_and"</span></span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L5_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L2_2(L3_2, L4_2, L5_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">band = L1_1</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">L1_1</span><span class="params">(A0_2, A1_2)</span></span></span><br><span class="line">  <span class="keyword">local</span> L2_2, L3_2, L4_2, L5_2</span><br><span class="line">  L2_2 = L0_1.base</span><br><span class="line">  L3_2 = <span class="string">"cond_or"</span></span><br><span class="line">  L4_2 = A0_2</span><br><span class="line">  L5_2 = A1_2</span><br><span class="line">  <span class="keyword">return</span> L2_2(L3_2, L4_2, L5_2)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">bor = L1_1</span><br><span class="line">L1_1 = <span class="built_in">print</span></span><br><span class="line">L2_1 = <span class="string">"Welcome to the world of reverse\n"</span></span><br><span class="line">L1_1(L2_1)</span><br><span class="line">L1_1 = <span class="built_in">print</span></span><br><span class="line">L2_1 = <span class="string">"Now please give me the key : "</span></span><br><span class="line">L1_1(L2_1)</span><br><span class="line">L1_1 = <span class="string">"RC4KEY"</span></span><br><span class="line">L2_1 = <span class="built_in">io</span></span><br><span class="line">L2_1 = L2_1.<span class="built_in">read</span></span><br><span class="line">L3_1 = <span class="string">"*l"</span></span><br><span class="line">L2_1 = L2_1(L3_1)</span><br><span class="line">L3_1 = <span class="built_in">string</span></span><br><span class="line">L3_1 = L3_1.<span class="built_in">len</span></span><br><span class="line">L4_1 = L2_1</span><br><span class="line">L3_1 = L3_1(L4_1)</span><br><span class="line"><span class="keyword">if</span> L3_1 ~= <span class="number">38</span> <span class="keyword">then</span></span><br><span class="line">  L3_1 = <span class="built_in">print</span></span><br><span class="line">  L4_1 = <span class="string">"wrong length"</span></span><br><span class="line">  L3_1(L4_1)</span><br><span class="line">  L3_1 = <span class="built_in">os</span></span><br><span class="line">  L3_1 = L3_1.<span class="built_in">exit</span></span><br><span class="line">  L3_1()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L3_1 = enclib</span><br><span class="line">L3_1 = L3_1.prepare</span><br><span class="line">L3_1()</span><br><span class="line">L3_1 = enclib</span><br><span class="line">L3_1 = L3_1.encrypt</span><br><span class="line">L4_1 = L2_1</span><br><span class="line">L5_1 = <span class="built_in">string</span></span><br><span class="line">L5_1 = L5_1.<span class="built_in">len</span></span><br><span class="line">L6_1 = L2_1</span><br><span class="line">L5_1, L6_1, L7_1, L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1 = L5_1(L6_1)</span><br><span class="line">L3_1 = L3_1(L4_1, L5_1, L6_1, L7_1, L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1)</span><br><span class="line">res = L3_1</span><br><span class="line">L3_1 = RC4</span><br><span class="line">L4_1 = L1_1</span><br><span class="line">L5_1 = res</span><br><span class="line">L3_1 = L3_1(L4_1, L5_1)</span><br><span class="line">K = L3_1</span><br><span class="line">L3_1 = &#123;&#125;</span><br><span class="line">t = L3_1</span><br><span class="line">L3_1 = &#123;&#125;</span><br><span class="line">L4_1 = <span class="number">43</span></span><br><span class="line">L5_1 = <span class="number">50</span></span><br><span class="line">L6_1 = <span class="number">118</span></span><br><span class="line">L7_1 = <span class="number">51</span></span><br><span class="line">L8_1 = <span class="number">186</span></span><br><span class="line">L9_1 = <span class="number">167</span></span><br><span class="line">L10_1 = <span class="number">106</span></span><br><span class="line">L11_1 = <span class="number">55</span></span><br><span class="line">L12_1 = <span class="number">228</span></span><br><span class="line">L13_1 = <span class="number">145</span></span><br><span class="line">L14_1 = <span class="number">160</span></span><br><span class="line">L15_1 = <span class="number">171</span></span><br><span class="line">L16_1 = <span class="number">23</span></span><br><span class="line">L17_1 = <span class="number">227</span></span><br><span class="line">L18_1 = <span class="number">82</span></span><br><span class="line">L19_1 = <span class="number">56</span></span><br><span class="line">L20_1 = <span class="number">191</span></span><br><span class="line">L21_1 = <span class="number">166</span></span><br><span class="line">L22_1 = <span class="number">65</span></span><br><span class="line">L23_1 = <span class="number">254</span></span><br><span class="line">L24_1 = <span class="number">189</span></span><br><span class="line">L25_1 = <span class="number">167</span></span><br><span class="line">L26_1 = <span class="number">236</span></span><br><span class="line">L27_1 = <span class="number">92</span></span><br><span class="line">L28_1 = <span class="number">154</span></span><br><span class="line">L29_1 = <span class="number">70</span></span><br><span class="line">L30_1 = <span class="number">19</span></span><br><span class="line">L31_1 = <span class="number">169</span></span><br><span class="line">L32_1 = <span class="number">10</span></span><br><span class="line">L33_1 = <span class="number">70</span></span><br><span class="line">L34_1 = <span class="number">222</span></span><br><span class="line">L35_1 = <span class="number">237</span></span><br><span class="line">L36_1 = <span class="number">237</span></span><br><span class="line">L37_1 = <span class="number">19</span></span><br><span class="line">L38_1 = <span class="number">249</span></span><br><span class="line">L39_1 = <span class="number">70</span></span><br><span class="line">L40_1 = <span class="number">121</span></span><br><span class="line">L41_1 = <span class="number">127</span></span><br><span class="line">L42_1 = <span class="number">189</span></span><br><span class="line">L43_1 = <span class="number">104</span></span><br><span class="line">L44_1 = <span class="number">169</span></span><br><span class="line">L45_1 = <span class="number">107</span></span><br><span class="line">L46_1 = <span class="number">43</span></span><br><span class="line">L47_1 = <span class="number">1</span></span><br><span class="line">L48_1 = <span class="number">50</span></span><br><span class="line">L49_1 = <span class="number">165</span></span><br><span class="line">L50_1 = <span class="number">234</span></span><br><span class="line">L51_1 = <span class="number">90</span></span><br><span class="line">L52_1 = <span class="number">76</span></span><br><span class="line">L53_1 = <span class="number">190</span></span><br><span class="line">L3_1[<span class="number">1</span>] = L4_1</span><br><span class="line">L3_1[<span class="number">2</span>] = L5_1</span><br><span class="line">L3_1[<span class="number">3</span>] = L6_1</span><br><span class="line">L3_1[<span class="number">4</span>] = L7_1</span><br><span class="line">L3_1[<span class="number">5</span>] = L8_1</span><br><span class="line">L3_1[<span class="number">6</span>] = L9_1</span><br><span class="line">L3_1[<span class="number">7</span>] = L10_1</span><br><span class="line">L3_1[<span class="number">8</span>] = L11_1</span><br><span class="line">L3_1[<span class="number">9</span>] = L12_1</span><br><span class="line">L3_1[<span class="number">10</span>] = L13_1</span><br><span class="line">L3_1[<span class="number">11</span>] = L14_1</span><br><span class="line">L3_1[<span class="number">12</span>] = L15_1</span><br><span class="line">L3_1[<span class="number">13</span>] = L16_1</span><br><span class="line">L3_1[<span class="number">14</span>] = L17_1</span><br><span class="line">L3_1[<span class="number">15</span>] = L18_1</span><br><span class="line">L3_1[<span class="number">16</span>] = L19_1</span><br><span class="line">L3_1[<span class="number">17</span>] = L20_1</span><br><span class="line">L3_1[<span class="number">18</span>] = L21_1</span><br><span class="line">L3_1[<span class="number">19</span>] = L22_1</span><br><span class="line">L3_1[<span class="number">20</span>] = L23_1</span><br><span class="line">L3_1[<span class="number">21</span>] = L24_1</span><br><span class="line">L3_1[<span class="number">22</span>] = L25_1</span><br><span class="line">L3_1[<span class="number">23</span>] = L26_1</span><br><span class="line">L3_1[<span class="number">24</span>] = L27_1</span><br><span class="line">L3_1[<span class="number">25</span>] = L28_1</span><br><span class="line">L3_1[<span class="number">26</span>] = L29_1</span><br><span class="line">L3_1[<span class="number">27</span>] = L30_1</span><br><span class="line">L3_1[<span class="number">28</span>] = L31_1</span><br><span class="line">L3_1[<span class="number">29</span>] = L32_1</span><br><span class="line">L3_1[<span class="number">30</span>] = L33_1</span><br><span class="line">L3_1[<span class="number">31</span>] = L34_1</span><br><span class="line">L3_1[<span class="number">32</span>] = L35_1</span><br><span class="line">L3_1[<span class="number">33</span>] = L36_1</span><br><span class="line">L3_1[<span class="number">34</span>] = L37_1</span><br><span class="line">L3_1[<span class="number">35</span>] = L38_1</span><br><span class="line">L3_1[<span class="number">36</span>] = L39_1</span><br><span class="line">L3_1[<span class="number">37</span>] = L40_1</span><br><span class="line">L3_1[<span class="number">38</span>] = L41_1</span><br><span class="line">L3_1[<span class="number">39</span>] = L42_1</span><br><span class="line">L3_1[<span class="number">40</span>] = L43_1</span><br><span class="line">L3_1[<span class="number">41</span>] = L44_1</span><br><span class="line">L3_1[<span class="number">42</span>] = L45_1</span><br><span class="line">L3_1[<span class="number">43</span>] = L46_1</span><br><span class="line">L3_1[<span class="number">44</span>] = L47_1</span><br><span class="line">L3_1[<span class="number">45</span>] = L48_1</span><br><span class="line">L3_1[<span class="number">46</span>] = L49_1</span><br><span class="line">L3_1[<span class="number">47</span>] = L50_1</span><br><span class="line">L3_1[<span class="number">48</span>] = L51_1</span><br><span class="line">L3_1[<span class="number">49</span>] = L52_1</span><br><span class="line">L3_1[<span class="number">50</span>] = L53_1</span><br><span class="line">L4_1 = <span class="number">239</span></span><br><span class="line">L5_1 = <span class="number">227</span></span><br><span class="line">L3_1[<span class="number">51</span>] = L4_1</span><br><span class="line">L3_1[<span class="number">52</span>] = L5_1</span><br><span class="line">flag = L3_1</span><br><span class="line">L3_1 = <span class="number">1</span></span><br><span class="line">L4_1 = <span class="built_in">string</span></span><br><span class="line">L4_1 = L4_1.<span class="built_in">len</span></span><br><span class="line">L5_1 = K</span><br><span class="line">L4_1 = L4_1(L5_1)</span><br><span class="line">L5_1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> L6_1 = L3_1, L4_1, L5_1 <span class="keyword">do</span></span><br><span class="line">  L7_1 = <span class="built_in">table</span></span><br><span class="line">  L7_1 = L7_1.<span class="built_in">insert</span></span><br><span class="line">  L8_1 = t</span><br><span class="line">  L9_1 = <span class="built_in">string</span></span><br><span class="line">  L9_1 = L9_1.<span class="built_in">byte</span></span><br><span class="line">  L10_1 = <span class="built_in">string</span></span><br><span class="line">  L10_1 = L10_1.<span class="built_in">sub</span></span><br><span class="line">  L11_1 = K</span><br><span class="line">  L12_1 = L6_1</span><br><span class="line">  L13_1 = L6_1</span><br><span class="line">  L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1 = L10_1(L11_1, L12_1, L13_1)</span><br><span class="line">  L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1 = L9_1(L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1)</span><br><span class="line">  L7_1(L8_1, L9_1, L10_1, L11_1, L12_1, L13_1, L14_1, L15_1, L16_1, L17_1, L18_1, L19_1, L20_1, L21_1, L22_1, L23_1, L24_1, L25_1, L26_1, L27_1, L28_1, L29_1, L30_1, L31_1, L32_1, L33_1, L34_1, L35_1, L36_1, L37_1, L38_1, L39_1, L40_1, L41_1, L42_1, L43_1, L44_1, L45_1, L46_1, L47_1, L48_1, L49_1, L50_1, L51_1, L52_1, L53_1)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L3_1 = <span class="number">1</span></span><br><span class="line">L4_1 = <span class="built_in">string</span></span><br><span class="line">L4_1 = L4_1.<span class="built_in">len</span></span><br><span class="line">L5_1 = K</span><br><span class="line">L4_1 = L4_1(L5_1)</span><br><span class="line">L5_1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> L6_1 = L3_1, L4_1, L5_1 <span class="keyword">do</span></span><br><span class="line">  L7_1 = t</span><br><span class="line">  L7_1 = L7_1[L6_1]</span><br><span class="line">  L8_1 = flag</span><br><span class="line">  L8_1 = L8_1[L6_1]</span><br><span class="line">  <span class="keyword">if</span> L7_1 ~= L8_1 <span class="keyword">then</span></span><br><span class="line">    L7_1 = <span class="built_in">print</span></span><br><span class="line">    L8_1 = <span class="string">"wrong"</span></span><br><span class="line">    L7_1(L8_1)</span><br><span class="line">    L7_1 = <span class="built_in">os</span></span><br><span class="line">    L7_1 = L7_1.<span class="built_in">exit</span></span><br><span class="line">    L7_1()</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">L3_1 = <span class="built_in">print</span></span><br><span class="line">L4_1 = <span class="string">"correct!"</span></span><br><span class="line">L3_1(L4_1)</span><br></pre></td></tr></table></figure><p>代码其实可读性还是比较高的，就变量名不好看和调用一个方法时时分开写的。</p><p>开始判断输入长度，要为38位，再调用了enlib库中的2个函数，其实就是之前我ida中找到的关于base64那2个函数，最后进行一个rc4加密，密钥<strong>RC4KEY</strong>，这里怕rc4是魔改过的，我直接把代码改了一下，找一个在线运行lua脚本的脚本，运行输出52长度的异或序列。</p><p>再在notepad++中使用正则(L….=)替换密文赋值的变量为逗号，方便提取出密文。</p><p>最后异或回去，发现不是可打印字符，那显然是错了，因为是base64加密结果。</p><p>哪里错了呢，回到程序分析，因为没有符号表，这里记录使用<strong>bindiff</strong>恢复符号的方法。</p><p>首先下载bindiff，<a href="https://www.zynamics.com/software.html" target="_blank" rel="noopener">https://www.zynamics.com/software.html</a>    <strong>.msi文件是Windows Installer的数据包</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805214305565.png" alt="image-20210805214305565"></p><p>安装后，在<strong>\BinDiff\Plugins\IDA Pro</strong>路径下的dll文件复制到ida安装路径的<strong>plugins</strong>目录下即可。</p><p>打开ida，从输出窗口看是否成功加载：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805214538294.png" alt="image-20210805214538294"></p><p>然后下载一个lua源码包，编译出lua解释器。这个就是在上面编译luadec中，编译的第一步（64位和32位都有说），在lua-5.3目录下：<strong>make linux</strong>后，可以增加一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>这样后，我们的lua-5.3目录下会多一个include文件：<strong>里面的bin文件是lua解释器于luac编译器；include文件是我们在C代码中要调用lua代码所需要的头文件。</strong></p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805215350341.png" alt="image-20210805215350341"></p><p>根据我们的要分析的文件的位数来选择编译对应位数的lua文件，将选择的lua文件放入ida中分析，然后退出保存idb文件。</p><p>再把我们要分析的文件拖入ida，按快捷键：ctrl+6</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805215910881.png" alt="image-20210805215910881"></p><p>选择我们之前保存的idb文件，可以得到一些对比结果</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220004779.png" alt="image-20210805220004779"></p><p>然后再次快捷键：ctrl+6</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220050549.png" alt="image-20210805220050549"></p><p>两个最小要求一般选择0.5上下：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220508926.png" alt="image-20210805220508926"></p><p>回到ida函数窗口，可以发现已经识别出了很多函数：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220622915.png" alt="image-20210805220622915"></p><p>但是对于本题分析要用到的函数，却没有，我也编译了几个版本的lua来看，都没有发现恢复很好的，就直接分析了。</p><p>在字符串区域找到了lua脚本中出现的<strong>RC4KEY</strong>，且下面的Good!!是很可疑的。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805220827503.png" alt="image-20210805220827503"></p><p>从RC4KEY引用定位：用下断点调试辅助分析。</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805221211488.png" alt="image-20210805221211488"></p><p>可以发现上面的代码就是比较从lua脚本中获取的字符串是否等于RC4KEY，是的话就用<strong>Good!!</strong>来覆盖。</p><p>所以说我们的rc4加密的key最后是Good!!了。</p><p>本地用这个密钥跑一下异或序列，然后再换表base64解码即可。</p><p>到这里，题目完了。</p><p>最后说一下，上面我是在ubuntu上弄了lua的编译64位与32位环境，弄完我又跑去在centos弄了下，因为开始是在这里弄得，没有成功，现在回去填坑。</p><p>因为centos是RedHat系列，它的包管理工具是yum，所以和在ubuntu上有一定的区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一般来说著名的linux系统基本上分两大类：</span><br><span class="line"></span><br><span class="line">1.RedHat系列：Redhat、Centos、Fedora等</span><br><span class="line"></span><br><span class="line">2.Debian系列：Debian、Ubuntu等</span><br><span class="line"></span><br><span class="line">RedHat系列</span><br><span class="line"></span><br><span class="line">1、常见的安装包格式rpm包，安装rpm包的命令是  rpm -参数</span><br><span class="line"></span><br><span class="line">2、包管理工具yum</span><br><span class="line"></span><br><span class="line">3、支持tar包</span><br><span class="line"></span><br><span class="line">Debian系列</span><br><span class="line"></span><br><span class="line">1、常见的安装包格式deb包，安装deb包的命令是  dpkg -参数</span><br><span class="line"></span><br><span class="line">2、包管理工具apt-get</span><br><span class="line"></span><br><span class="line">3、支持tar包</span><br></pre></td></tr></table></figure><p>开始还是32位的程序要用的依赖：<a href="https://blog.csdn.net/kongshuai19900505/article/details/82775688" target="_blank" rel="noopener">https://blog.csdn.net/kongshuai19900505/article/details/82775688</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install libgcc*.i686*</span><br></pre></td></tr></table></figure><p>然后还是来到了ubuntu遇到的问题，readline库的安装，64位的还好，直接用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install readline-devel</span><br></pre></td></tr></table></figure><p>这样可以编译64位的了。</p><p>还是同样的问题，32位的readline的包名字是什么呢，因为这个是yum，所以不是lib32readline6-dev了。</p><p>找了半天，无果，最后是猜测是通过后缀来区别的：给它加上<strong>.i686</strong>试试，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install readline-devel.i686</span><br></pre></td></tr></table></figure><p>真的！！激动小一会。😂。</p><p>这其实也是看到64位已经安装的提示有了这样的猜测：</p><p><img src="/2021/08/01/DASCTF-July-X-CBCTF-4th/image-20210805222911664.png" alt="image-20210805222911664"></p><p>而为什么要加.686呢？</p><p><strong>i386对应的是32位系统、而i686是i386的一个子集,i686仅对应P6及以上级别的CPU，i386则广泛适用于80386以上的各种CPU；x86_64主要是64位系统。</strong></p><p>经过上面的折腾也熟悉了下apt-get自动清理无用包的命令：</p><p>ubuntu下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get automove <span class="comment">#但有一定风险</span></span><br><span class="line">sudo apt-get autoclean</span><br></pre></td></tr></table></figure><p>centos下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all <span class="comment">#清空yum缓存</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逆向题解~&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021巅峰极客</title>
    <link href="https://bxb0.github.io/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/"/>
    <id>https://bxb0.github.io/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/</id>
    <published>2021-08-01T01:37:20.000Z</published>
    <updated>2021-08-08T05:33:33.835Z</updated>
    
    <content type="html"><![CDATA[<p>逆向题解~<a id="more"></a></p><h3 id="baby-maze"><a href="#baby-maze" class="headerlink" title="baby_maze"></a>baby_maze</h3><p>常见的迷宫题，但考法却不常见，没有直接的地图，只是给出每走一步的程序的反馈，提示是否遇到障碍，是否到可以通行，是否到达终点。</p><p>程序就是通过每走一步，调用一个函数。</p><p>感觉上方法很多的，这里我是采用与程序交互写一个dfs来跑。</p><p>首先交互采用的pexpect模块，然后把程序中提示正确信息的字符串都改为：“1\r\n”，到达终点的字符串改为了：“2\r\n”，方便判断交互数据。</p><p>其次写这个dfs来与程序交互跑迷宫和常规的有地图自己跑要注意一点，<strong>在每次走一步后返回到上一层的时候要加一个步骤：往回走的步骤</strong>，因为这是在程序交互。</p><p>刚开始我写这个迷宫，以为程序可能就是几十步吧，所以也没有去做什么过滤，后面跑的时候发现步数远不止几十，，起码上百，说明这个地图是很大的，这样直接跑时间上肯定是不行的。。</p><p>接下来改进，想到我可以开始初始化一个大的迷宫，让程序在跑的时候根据回显是障碍物来在初始化的迷宫上记录这是一个障碍点（maze[x][y] = 1）。</p><p>最后程序在10分钟跑出了结果，勉强能接受，虽然还是很慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">next = [[<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">-1</span>, <span class="number">0</span>]]</span><br><span class="line">d = <span class="string">"ASDW"</span></span><br><span class="line">flag = [<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line">back = &#123;<span class="string">'W'</span>:<span class="string">'S'</span>, <span class="string">'S'</span>:<span class="string">'W'</span>, <span class="string">'A'</span>:<span class="string">'D'</span>, <span class="string">'D'</span>:<span class="string">'A'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_str</span><span class="params">(ans)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    s += i</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(step, x, y)</span>:</span></span><br><span class="line">print(do_str(flag))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="comment">#print(do_str(flag))</span></span><br><span class="line">flag[step] = d[i]</span><br><span class="line">flag[step+<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">nx = x+next[i][<span class="number">0</span>]</span><br><span class="line">ny = y+next[i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> maze[nx][ny] == <span class="number">1</span> <span class="keyword">or</span> book[nx][ny] == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">r.sendline(d[i])</span><br><span class="line">ans = r.readline()</span><br><span class="line"><span class="comment">#print(ans)</span></span><br><span class="line"><span class="keyword">if</span> ans == <span class="string">b'1\r\n'</span>:</span><br><span class="line">book[nx][ny] = <span class="number">1</span></span><br><span class="line">dfs(step+<span class="number">1</span>, nx, ny)</span><br><span class="line">book[nx][ny] = <span class="number">0</span></span><br><span class="line">r.sendline(back[d[i]])</span><br><span class="line">r.readline()</span><br><span class="line"><span class="keyword">elif</span> ans == <span class="string">b'2\r\n'</span>:</span><br><span class="line">print(<span class="string">"found: "</span>, do_str(flag))</span><br><span class="line">t1 = time()</span><br><span class="line">print(<span class="string">"time: "</span>, t1-t)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">maze[nx][ny] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">t = time()</span><br><span class="line">maze=[[<span class="number">0</span>]*<span class="number">1000</span>]*<span class="number">1000</span></span><br><span class="line">book=[[<span class="number">0</span>]*<span class="number">1000</span>]*<span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">book[i]=[<span class="number">0</span>]*<span class="number">1000</span></span><br><span class="line">r = pexpect.spawn(<span class="string">'./maze'</span>)</span><br><span class="line">r.readline()</span><br><span class="line">r.readline()</span><br><span class="line">ans = r.readline()</span><br><span class="line">print(ans)</span><br><span class="line">maze[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">maze[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="string">'S'</span></span><br><span class="line">r.sendline(<span class="string">'S'</span>)</span><br><span class="line">ans = r.readline()</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">found:  SSSSSSSSSDDDDDDWWWWAAWWAAWWDDDDDDDDDDDDDDDDDDDDSSDDSSAASSSSAAAAWWAAWWWWAASSSSSSAASSDDSSSSDDWWWWDDSSDDDDWWDDDDDDWWAAAAWWDDDDWWAAWWWWDDSSDDSSSSSSSSSSDDDDSSAAAASSSSSSAASSSSAAWWAASSSSDDDDDDDDDDSSDDSSAASSSSAASSSSSSSSDDWWWWWWDDWWWWDDWWWWDDSSSSSSSSAASSSSDDDDSSDDDDWWDDSSDDSSDDDDDDDDSSDDSSSSDDDDSSDDSSSSSSDDSSSSDDDDSSSSDDDDDDSSSSDDSSDSSASSSSAASSDDSSAASSDDDDDDSSDDDDWWDDSSSSSSDDDDWWAAWWWWDDDDSSSSDDDDDDSSAASSSSSSDDDDDDDDSSDDDDSSSSSSDDWWDDDDDDSSSSSSSSAASSDDSSSSSSAASSDDS</span><br><span class="line">time:  655.1350808143616</span><br></pre></td></tr></table></figure><h3 id="medical-app"><a href="#medical-app" class="headerlink" title="medical_app"></a>medical_app</h3><p>算是很常规的一个安卓题了，就native层逻辑很明显的加密。</p><p>做的时候发现这个不同架构的so去ida反编译的结果区别真的大，，没有经验，我开始选择了熟悉的x86架构的去看😅：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> __<span class="function">cdecl <span class="title">Java_come_crack_crackme2_MainActivity_chk</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">size_t</span> v4; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v13; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v16; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">int</span> v17; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v21; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v22; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v23; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v27; <span class="comment">// [esp+8h] [ebp-264h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v28; <span class="comment">// [esp+Ch] [ebp-260h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v29; <span class="comment">// [esp+10h] [ebp-25Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v30; <span class="comment">// [esp+10h] [ebp-25Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v31; <span class="comment">// [esp+14h] [ebp-258h]</span></span><br><span class="line">  <span class="keyword">int</span> v32; <span class="comment">// [esp+14h] [ebp-258h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v33; <span class="comment">// [esp+18h] [ebp-254h]</span></span><br><span class="line">  <span class="keyword">int</span> v34; <span class="comment">// [esp+18h] [ebp-254h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v35; <span class="comment">// [esp+1Ch] [ebp-250h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v36; <span class="comment">// [esp+20h] [ebp-24Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v37; <span class="comment">// [esp+24h] [ebp-248h]</span></span><br><span class="line">  <span class="keyword">char</span> *v38; <span class="comment">// [esp+2Ch] [ebp-240h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v39; <span class="comment">// [esp+30h] [ebp-23Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v40; <span class="comment">// [esp+34h] [ebp-238h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v41; <span class="comment">// [esp+38h] [ebp-234h]</span></span><br><span class="line">  <span class="keyword">int</span> v42; <span class="comment">// [esp+40h] [ebp-22Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v43; <span class="comment">// [esp+4Ch] [ebp-220h]</span></span><br><span class="line">  _OWORD v44[<span class="number">16</span>]; <span class="comment">// [esp+50h] [ebp-21Ch]</span></span><br><span class="line">  _OWORD v45[<span class="number">17</span>]; <span class="comment">// [esp+150h] [ebp-11Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)z(a1, a3);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(v3);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v4 == <span class="number">36</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v38 = (<span class="keyword">char</span> *)v3;</span><br><span class="line">    v44[<span class="number">15</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">14</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">13</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">12</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">11</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">10</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">9</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">7</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">6</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">5</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">4</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">3</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">1</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v44[<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">15</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">14</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">13</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">12</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">11</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">10</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">9</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">8</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">7</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">6</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">5</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">4</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">3</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">1</span>] = <span class="number">0L</span>L;</span><br><span class="line">    v45[<span class="number">0</span>] = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *((_BYTE *)v44 + v5) = v5;</span><br><span class="line">      *((_BYTE *)v45 + v5) = *((_BYTE *)&amp;d + (v5 &amp; <span class="number">0xF</span>));</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v5 != <span class="number">256</span> );</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v7 = <span class="number">-256</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v8 = *((<span class="keyword">unsigned</span> __int8 *)v45 + v7);</span><br><span class="line">      v9 = v8 + v6;</span><br><span class="line">      v10 = *((<span class="keyword">char</span> *)&amp;v45[<span class="number">16</span>] + v7);</span><br><span class="line">      v11 = v10 + v9 + <span class="number">255</span>;</span><br><span class="line">      v12 = v10 + v9;</span><br><span class="line">      <span class="keyword">if</span> ( v12 &gt;= <span class="number">0</span> )</span><br><span class="line">        v11 = v12;</span><br><span class="line">      v6 = v12 - (v11 &amp; <span class="number">0xFFFFFF00</span>);</span><br><span class="line">      *((_BYTE *)v45 + v7) = *((_BYTE *)v44 + v6);</span><br><span class="line">      *((_BYTE *)v44 + v6) = v8;</span><br><span class="line">      ++v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v7 );</span><br><span class="line">    v13 = <span class="number">0</span>;</span><br><span class="line">    v14 = <span class="number">-36</span>;</span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v16 = v13 + <span class="number">256</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">int</span>)(v13 + <span class="number">1</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">        v16 = v13 + <span class="number">1</span>;</span><br><span class="line">      v13 = v13 - (v16 &amp; <span class="number">0xFFFFFF00</span>) + <span class="number">1</span>;</span><br><span class="line">      v17 = *((<span class="keyword">unsigned</span> __int8 *)v44 + v13);</span><br><span class="line">      v18 = v15 + v17 + <span class="number">255</span>;</span><br><span class="line">      v19 = v17 + v15;</span><br><span class="line">      <span class="keyword">if</span> ( v19 &gt;= <span class="number">0</span> )</span><br><span class="line">        v18 = v19;</span><br><span class="line">      v15 = v19 - (v18 &amp; <span class="number">0xFFFFFF00</span>);</span><br><span class="line">      v20 = v14;</span><br><span class="line">      *((_BYTE *)v44 + v13) = *((_BYTE *)v44 + v15);</span><br><span class="line">      *((_BYTE *)v44 + v15) = v17;</span><br><span class="line">      v38[v14 + <span class="number">36</span>] ^= *((_BYTE *)v44 + (<span class="keyword">unsigned</span> __int8)(v17 + *((_BYTE *)v44 + v13)));</span><br><span class="line">      ++v14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v20 != <span class="number">-1</span> );</span><br><span class="line">    v21 = *((_DWORD *)v38 + <span class="number">8</span>);</span><br><span class="line">    v37 = *(_DWORD *)v38;</span><br><span class="line">    v22 = *((_DWORD *)v38 + <span class="number">1</span>);</span><br><span class="line">    v27 = *((_DWORD *)v38 + <span class="number">3</span>);</span><br><span class="line">    v28 = *((_DWORD *)v38 + <span class="number">4</span>);</span><br><span class="line">    v31 = *((_DWORD *)v38 + <span class="number">5</span>);</span><br><span class="line">    v33 = *((_DWORD *)v38 + <span class="number">6</span>);</span><br><span class="line">    v39 = *((_DWORD *)v38 + <span class="number">2</span>);</span><br><span class="line">    v29 = *((_DWORD *)v38 + <span class="number">7</span>);</span><br><span class="line">    v43 = <span class="number">-11</span>;</span><br><span class="line">    v23 = <span class="number">-1621657930</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v40 = (v23 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">      v42 = *((_DWORD *)&amp;d + v40);</span><br><span class="line">      v37 += (((v21 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v22)) + ((v22 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v21))) ^ ((v23 ^ v22) + (v42 ^ v21));</span><br><span class="line">      v41 = v31;</span><br><span class="line">      v32 = *((_DWORD *)&amp;d + (v40 ^ <span class="number">1</span>));</span><br><span class="line">      v22 += (((v37 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v39)) + ((v39 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v37))) ^ ((v23 ^ v39) + (v37 ^ v32));</span><br><span class="line">      v36 = v33;</span><br><span class="line">      v34 = *((_DWORD *)&amp;d + (v40 ^ <span class="number">2</span>));</span><br><span class="line">      v24 = v39 + ((((v22 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v27)) + ((v27 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v22))) ^ ((v23 ^ v27) + (v22 ^ v34)));</span><br><span class="line">      v35 = v29;</span><br><span class="line">      v30 = *((_DWORD *)&amp;d + (v40 ^ <span class="number">3</span>));</span><br><span class="line">      v39 = v24;</span><br><span class="line">      v27 += (((v24 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v28)) + ((v28 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v24))) ^ ((v23 ^ v28) + (v24 ^ v30));</span><br><span class="line">      v25 = v28 + ((((v27 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v41)) + ((v41 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v27))) ^ ((v23 ^ v41) + (v27 ^ v42)));</span><br><span class="line">      v28 = v25;</span><br><span class="line">      v31 = v41 + ((((v25 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v36)) + ((v36 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v25))) ^ ((v23 ^ v36) + (v25 ^ v32)));</span><br><span class="line">      v33 = v36 + ((((v31 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v35)) + ((v35 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v31))) ^ ((v23 ^ v35) + (v31 ^ v34)));</span><br><span class="line">      v29 = v35 + ((((v33 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v21)) + ((v21 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v33))) ^ ((v23 ^ v21) + (v33 ^ v30)));</span><br><span class="line">      v21 += (((v29 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">4</span> * v37)) + ((v37 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v29))) ^ ((v23 ^ v37) + (v29 ^ v42));</span><br><span class="line">      v23 -= <span class="number">1621657930</span>;</span><br><span class="line">      ++v43;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v43 );</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">1</span>) = v22;</span><br><span class="line">    *(_DWORD *)v38 = v37;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">2</span>) = v24;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">3</span>) = v27;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">4</span>) = v25;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">5</span>) = v31;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">7</span>) = v29;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">6</span>) = v33;</span><br><span class="line">    *((_DWORD *)v38 + <span class="number">8</span>) = v21;</span><br><span class="line">    LOBYTE(v5) = <span class="built_in">memcmp</span>(v38, &amp;unk_3440, <span class="number">0x24</span>u) == <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前看release模式编译的800多行c++代码比起来，其实还好。很明显开始一个rc4加密，接着一个tea，仔细看下，可以知道是xxtea。</p><p>然后有几个函数，看得出来是加密函数，但没有引用关系。但这样看，不好看出这个xxtea是否经过魔改。</p><p>所以我决定去看下armV7的so，然后调试一波，感觉发现了新天地，，这清晰的加密流程。。从这才知道不同版本的so反编译结果如此之大，其实这个armV7的so应该才是作者自己写的，以后看so的时候应该首先armV7的so。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> __<span class="function">fastcall <span class="title">Java_come_crack_crackme2_MainActivity_chk</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v5[<span class="number">260</span>]; <span class="comment">// [sp+0h] [bp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3 = (<span class="keyword">char</span> *)z(a1, a3);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v3) != <span class="number">36</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(v5, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">  z2(v5, (<span class="keyword">unsigned</span> __int8 *)d, <span class="number">0x10</span>u);</span><br><span class="line">  z3(v5, (<span class="keyword">unsigned</span> __int8 *)v3, <span class="number">0x24</span>u);</span><br><span class="line">  z4((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)v3, <span class="number">9u</span>, d);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">memcmp</span>(v3, &amp;ss, <span class="number">0x24</span>u) == <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>上面z2，z3就是rc4的初始化和加密，看z4：相当清晰的xxtea，确定只是改了delat。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __<span class="function">fastcall <span class="title">z4</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, <span class="keyword">unsigned</span> <span class="keyword">int</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// r9</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// r4</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// lr</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// r10</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// r1</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// r3</span></span><br><span class="line"></span><br><span class="line">  v3 = a2 - <span class="number">1</span>;</span><br><span class="line">  v6 = a1[a2 - <span class="number">1</span>];</span><br><span class="line">  v7 = sub_1258(<span class="number">52</span>) + <span class="number">6</span>;</span><br><span class="line">  result = <span class="number">-1621657930</span>;</span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v7 &gt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v9 -= <span class="number">1621657930</span>;</span><br><span class="line">    --v7;</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line">    v11 = (v9 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v3 != v10 )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = ((((<span class="number">4</span> * a1[v10 + <span class="number">1</span>]) ^ (v6 &gt;&gt; <span class="number">5</span>)) + ((a1[v10 + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v6))) ^ ((a3[v10 &amp; <span class="number">3</span> ^ v11] ^ v6)</span><br><span class="line">                                                                                  + (a1[v10 + <span class="number">1</span>] ^ v9)))</span><br><span class="line">         + a1[v10];</span><br><span class="line">      a1[v10++] = v6;</span><br><span class="line">    &#125;</span><br><span class="line">    result = (((<span class="number">4</span> * *a1) ^ (v6 &gt;&gt; <span class="number">5</span>)) + ((*a1 &gt;&gt; <span class="number">3</span>) ^ (<span class="number">16</span> * v6))) ^ ((*a1 ^ v9) + (a3[v3 &amp; <span class="number">3</span> ^ v11] ^ v6));</span><br><span class="line">    v6 = result + a1[v3];</span><br><span class="line">    a1[v3] = v6;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找密文，用之前逆xxtea写的脚本解一下，然后找rc4异或序列异或一下即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len = <span class="number">9</span>; <span class="comment">//长度是输入字符串长度/4，因为加密是32位为一个单位</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = <span class="number">0x60A8894A</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[] = &#123;<span class="number">0x1</span>, <span class="number">0x10</span>, <span class="number">0x100</span>, <span class="number">0x1000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">0x68E5973E</span>, <span class="number">0xC20C7367</span>, <span class="number">0x98AFD41B</span>, <span class="number">0xFE4B9DE2</span>, <span class="number">0x01A5B60B</span>,</span><br><span class="line"><span class="number">0x3D36D646</span>, <span class="number">0xDBCC7BAF</span>, <span class="number">0xA0414F00</span>, <span class="number">0x762CE71A</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> delat)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">52</span>/n+<span class="number">6</span>; i++)</span><br><span class="line">sum -= delat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_xxtea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> sum = get_sum(len, delat);</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> sum1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(sum &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        enc[len<span class="number">-1</span>] -= ((key[((len<span class="number">-1</span>)^sum1)&amp;<span class="number">3</span>]^enc[len<span class="number">-2</span>])+(enc[<span class="number">0</span>]^sum)) ^ (((<span class="number">4</span>*enc[<span class="number">0</span>])^(enc[len<span class="number">-2</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[len<span class="number">-2</span>])^(enc[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = len<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            enc[i] -= ((key[(i^sum1)&amp;<span class="number">3</span>]^enc[i<span class="number">-1</span>])+(enc[i+<span class="number">1</span>]^sum)) ^ (((<span class="number">4</span>*enc[i+<span class="number">1</span>])^(enc[i<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[i<span class="number">-1</span>])^(enc[i+<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line">            i--; </span><br><span class="line">        &#125;<span class="keyword">while</span>(i != <span class="number">0</span>);</span><br><span class="line">        enc[<span class="number">0</span>] -= ((key[(<span class="number">0</span>^sum1)&amp;<span class="number">3</span>]^enc[len<span class="number">-1</span>])+(enc[<span class="number">1</span>]^sum)) ^ (((<span class="number">4</span>*enc[<span class="number">1</span>])^(enc[len<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[len<span class="number">-1</span>])^(enc[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">        sum += delat;</span><br><span class="line">    &#125;<span class="keyword">while</span>(sum != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    de_xxtea();</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>*len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d, "</span>, ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)&amp;enc)[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//86, 4, 176, 212, 156, 99, 77, 48, 150, 206, 192, 5, 147, 190, 59, 130, 82, 75, 22, 178, 138, 51, 183, 77, 109, 123, 153, 80, 194, 177, 12, 18, 225, 132, 10, 147</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">0x00</span>, <span class="number">0x59</span>, <span class="number">0xE3</span>, <span class="number">0x80</span>, <span class="number">0xD3</span>, <span class="number">0x67</span>, <span class="number">0x42</span>, <span class="number">0x33</span>, <span class="number">0x96</span>, <span class="number">0xC4</span>, <span class="number">0xC6</span>, <span class="number">0x0D</span>, <span class="number">0x94</span>, <span class="number">0xBD</span>, <span class="number">0x6E</span>, <span class="number">0xD2</span>, <span class="number">0x5D</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0xB3</span>, <span class="number">0x8E</span>, <span class="number">0x32</span>, <span class="number">0xE0</span>, <span class="number">0x46</span>, <span class="number">0x38</span>, <span class="number">0x77</span>, <span class="number">0x9B</span>, <span class="number">0x54</span>, <span class="number">0xCE</span>, <span class="number">0xB0</span>, <span class="number">0x5F</span>, <span class="number">0x19</span>, <span class="number">0xE2</span>, <span class="number">0x81</span>, <span class="number">0x5E</span>, <span class="number">0xD8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">"012345678901234567890123456789123456"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line"><span class="string">'012345678901234567890123456789123456'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [ord(t[i])^s[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans</span><br><span class="line">[<span class="number">48</span>, <span class="number">104</span>, <span class="number">209</span>, <span class="number">179</span>, <span class="number">231</span>, <span class="number">82</span>, <span class="number">116</span>, <span class="number">4</span>, <span class="number">174</span>, <span class="number">253</span>, <span class="number">246</span>, <span class="number">60</span>, <span class="number">166</span>, <span class="number">142</span>, <span class="number">90</span>, <span class="number">231</span>, <span class="number">107</span>, <span class="number">47</span>, <span class="number">112</span>, <span class="number">138</span>, <span class="number">190</span>, <span class="number">3</span>, <span class="number">210</span>, <span class="number">117</span>, <span class="number">12</span>, <span class="number">66</span>, <span class="number">173</span>, <span class="number">99</span>, <span class="number">246</span>, <span class="number">137</span>, <span class="number">110</span>, <span class="number">43</span>, <span class="number">209</span>, <span class="number">181</span>, <span class="number">107</span>, <span class="number">238</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = [<span class="number">86</span>, <span class="number">4</span>, <span class="number">176</span>, <span class="number">212</span>, <span class="number">156</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">48</span>, <span class="number">150</span>, <span class="number">206</span>, <span class="number">192</span>, <span class="number">5</span>, <span class="number">147</span>, <span class="number">190</span>, <span class="number">59</span>, <span class="number">130</span>, <span class="number">82</span>, <span class="number">75</span>, <span class="number">22</span>, <span class="number">178</span>, <span class="number">138</span>, <span class="number">51</span>, <span class="number">183</span>, <span class="number">77</span>, <span class="number">109</span>, <span class="number">123</span>, <span class="number">153</span>, <span class="number">80</span>, <span class="number">194</span>, <span class="number">177</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">225</span>, <span class="number">132</span>, <span class="number">10</span>, <span class="number">147</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = [ans[i]^e[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line">[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>, <span class="number">49</span>, <span class="number">57</span>, <span class="number">52</span>, <span class="number">56</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">57</span>, <span class="number">53</span>, <span class="number">48</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">57</span>, <span class="number">100</span>, <span class="number">102</span>, <span class="number">56</span>, <span class="number">52</span>, <span class="number">48</span>, <span class="number">101</span>, <span class="number">56</span>, <span class="number">97</span>, <span class="number">57</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">56</span>, <span class="number">98</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">97</span>, <span class="number">125</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(flag)</span><br><span class="line"><span class="string">b'flag&#123;194836950ae9df840e8a94348b901a&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="so-get-source"><a href="#so-get-source" class="headerlink" title="so_get_source"></a>so_get_source</h3><p>进入网站，上传一个一句化木马拿到shell，然后把网站打包下来。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801094123439.png" alt="image-20210801094123439"></p><p>发现flag.php与index.php都是被加密后的，而这里有一个可疑的php_screw_plus.so文件，这和逆向就更贴近了。</p><p>搜索一下php_screw_plus.so，发现这个就是对我们的php文件实现加解密功能的文件。</p><p>到ida中去找到<strong>pm9screw_ext_fopen</strong>函数：打开待加密或者解密的文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">FILE *__<span class="function">fastcall <span class="title">pm9screw_ext_fopen</span><span class="params">(FILE *stream)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> __m128i *v1; <span class="comment">// rax</span></span><br><span class="line">  __m128i v2; <span class="comment">// xmm0</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  _OWORD *v6; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// er12</span></span><br><span class="line">  __int64 v8; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v10; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// cl</span></span><br><span class="line">  FILE *v12; <span class="comment">// rax</span></span><br><span class="line">  FILE *v13; <span class="comment">// rbp</span></span><br><span class="line">  __m128i v15; <span class="comment">// [rsp+0h] [rbp-138h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [rsp+1Ch] [rbp-11Ch] BYREF</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_buf</span>;</span> <span class="comment">// [rsp+20h] [rbp-118h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">16</span>]; <span class="comment">// [rsp+B0h] [rbp-88h] BYREF</span></span><br><span class="line">  __m128i v19; <span class="comment">// [rsp+C0h] [rbp-78h]</span></span><br><span class="line">  __m128i v20; <span class="comment">// [rsp+D0h] [rbp-68h] BYREF</span></span><br><span class="line">  __m128i v21; <span class="comment">// [rsp+E0h] [rbp-58h]</span></span><br><span class="line">  __int128 v22; <span class="comment">// [rsp+F0h] [rbp-48h]</span></span><br><span class="line">  __int128 v23; <span class="comment">// [rsp+100h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v24; <span class="comment">// [rsp+118h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v24 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v20 = <span class="number">0L</span>L;</span><br><span class="line">  v21 = <span class="number">0L</span>L;</span><br><span class="line">  v22 = <span class="number">0L</span>L;</span><br><span class="line">  v23 = <span class="number">0L</span>L;</span><br><span class="line">  v15 = <span class="number">0L</span>L;</span><br><span class="line">  v1 = (<span class="keyword">const</span> __m128i *)md5(<span class="string">"GH65Hws2jedf3fl3MeK"</span>);</span><br><span class="line">  v20 = _mm_loadu_si128(v1);</span><br><span class="line">  v19 = v20;</span><br><span class="line">  v2 = _mm_load_si128(&amp;v15);</span><br><span class="line">  v21 = _mm_loadu_si128(v1 + <span class="number">1</span>);</span><br><span class="line">  *(__m128i *)nptr = v2;</span><br><span class="line">  v3 = fileno(stream);</span><br><span class="line">  __fxstat(<span class="number">1</span>, v3, &amp;stat_buf);</span><br><span class="line">  v16 = stat_buf.st_size;</span><br><span class="line">  v4 = <span class="built_in">malloc</span>(<span class="number">0x200000</span>uLL);</span><br><span class="line">  v5 = v16;</span><br><span class="line">  *v4 = <span class="number">0L</span>L;</span><br><span class="line">  v6 = v4;</span><br><span class="line">  __fread_chk(v4, <span class="number">0x200000</span>LL, v5, <span class="number">1L</span>L, stream);</span><br><span class="line">  v7 = teg_yek(stream);</span><br><span class="line">  fclose(stream);</span><br><span class="line">  <span class="keyword">if</span> ( *(_OWORD *)&amp;v19 == *v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v16;</span><br><span class="line">    <span class="keyword">if</span> ( v16 &gt; <span class="number">16</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = <span class="number">16L</span>L;</span><br><span class="line">      v10 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v16 - <span class="number">17</span>) + <span class="number">17L</span>L;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v11 = *((_BYTE *)v6 + v9);</span><br><span class="line">          <span class="keyword">if</span> ( v9 &gt; <span class="number">0x1F</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          *((_BYTE *)&amp;stat_buf.__unused[<span class="number">1</span>] + v9++) = v11;</span><br><span class="line">          <span class="keyword">if</span> ( v10 == v9 )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">        &#125;</span><br><span class="line">        *((_BYTE *)v6 + v9++ - <span class="number">32</span>) = v11;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v10 != v9 );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_7:</span><br><span class="line">    screw_aes(<span class="number">0L</span>L, v6, v8, &amp;v20, &amp;v16, v7, v15.m128i_i64[<span class="number">0</span>], v15.m128i_i64[<span class="number">1</span>]);</span><br><span class="line">    v16 = strtol(nptr, <span class="number">0L</span>L, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = tmpfile();</span><br><span class="line">  v13 = v12;</span><br><span class="line">  <span class="keyword">if</span> ( v16 &lt;= <span class="number">0</span> )</span><br><span class="line">    fwrite(<span class="string">"ACCESS DENIED"</span>, <span class="number">0xD</span>uLL, <span class="number">1u</span>LL, v12);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fwrite(v6, v16, <span class="number">1u</span>LL, v12);</span><br><span class="line">  <span class="built_in">free</span>(v6);</span><br><span class="line">  rewind(v13);</span><br><span class="line">  <span class="keyword">return</span> v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都有函数名的，所以分析起来难度不大，主要就是一个aes_256_cbc加密，我们只需要找密钥，iv在这里就是不需要的，因为iv的错误只会影响前16字节的解密，我们猜测程序的flag放在16字节后，因为iv我没找到，感觉不好找。</p><p>首先是一个对<strong>GH65Hws2jedf3fl3MeK</strong>进行md5加密，追踪变量，发现它的结果是作为了后面aes_256_cbc的密钥。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801101838900.png" alt="image-20210801101838900"></p><p>但这里有一个问题，md5加密结果是16字节，而这里密钥是256位的，要32字节嗯。。</p><p>然后看看md5函数及外面取结果的函数：</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801102132852-16283937318661.png" alt="image-20210801102132852"></p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801102147464.png" alt="image-20210801102147464"></p><p>所以说，程序是直接使用的加密结果的hex形式作为32位密钥。</p><p>接下来使用openssl来解密试试，-d：解密  -K：指定密钥，-iv：指定iv，-in：指定要加密或解密的文件，且注意key和iv要以hex形式给出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl aes-256-cbc -d -K 3834326434326239383837366635383166306466626566623063643262356333 -iv 1 -<span class="keyword">in</span> flag.php &gt; ans.txt</span><br></pre></td></tr></table></figure><p>解密，得到一个乱码文件。</p><p>再次回到程序中分析加密函数：发现在加密之后有一个异或，解密之前同样对应一个异或。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801102919133.png" alt="image-20210801102919133"></p><p>而这个v9，我向上找该变量的赋值及回溯，在读文件这里找到。。但这也是不知道的。</p><p><img src="/2021/08/01/2021%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/image-20210801103055301.png" alt="image-20210801103055301"></p><p>好在上面异或的v9变量只是一个字节，所以考虑爆破，找到flag/</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"flag1.php"</span>, <span class="string">"rb"</span>)</span><br><span class="line">text = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>):</span><br><span class="line">f1 = open(<span class="string">'flag.php'</span>, <span class="string">"wb"</span>)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> text:</span><br><span class="line">f1.write(bytes([j^i]))</span><br><span class="line">os.system(<span class="string">'openssl aes-256-cbc -d -K 3834326434326239383837366635383166306466626566623063643262356333 -iv 1 -in flag.php &gt; ans.txt'</span>)</span><br><span class="line">a = open(<span class="string">'ans.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line">ans = a.read()</span><br><span class="line"><span class="keyword">if</span> <span class="string">b'flag'</span> <span class="keyword">in</span> ans:</span><br><span class="line">print(<span class="string">"*"</span>*<span class="number">100</span>)</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>解密结果：（这里我去除了解密结果中的开始的16字节乱码字符，因为它会导致的我博客使用的gulp出错。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">****************flag&#123;<span class="number">47</span>a3f7b1<span class="number">-499</span>c<span class="number">-4e45</span>-ed3e<span class="number">-404602</span>cfef96&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">echo "no my code&lt;/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逆向题解~&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>应用密码学</title>
    <link href="https://bxb0.github.io/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>https://bxb0.github.io/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/</id>
    <published>2021-04-17T06:23:32.000Z</published>
    <updated>2021-04-18T02:08:13.431Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下应用密码学课程的代码作业及实验。<a id="more"></a></p><h3 id="Vigenere-Cipher"><a href="#Vigenere-Cipher" class="headerlink" title="Vigenere Cipher"></a>Vigenere Cipher</h3><p>C语言简单实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> plain[] = <span class="string">"blockchaintechnology"</span>, plain_order[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> key[] = <span class="string">"cuitbo"</span>, key_order[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> enc[<span class="number">100</span>], enc_order[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">plain_order[i] = plain[i]<span class="number">-97</span>;</span><br><span class="line">key_order[i] = key[i%<span class="number">6</span>]<span class="number">-97</span>;</span><br><span class="line">enc_order[i] = (plain_order[i]+key_order[i])%<span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain: %s\n"</span>, plain);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enc: %s\n"</span>, key);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"plain_order: "</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, plain_order[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enc_order: "</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, enc_order[i]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enc: "</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(plain)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, enc_order[i]+<span class="number">97</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AES-变换操作的实现"><a href="#AES-变换操作的实现" class="headerlink" title="AES 变换操作的实现"></a>AES 变换操作的实现</h3><p>用C语言简单实现一下加密的几个过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOut_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SubBytes_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*RoundKey_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiftRows_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix_columns_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*output_76)[<span class="number">4</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">gfmultby_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> a, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> Sbox_76[<span class="number">256</span>] = &#123;</span><br><span class="line"><span class="comment">// 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f</span></span><br><span class="line"><span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>, <span class="comment">// 0</span></span><br><span class="line"><span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>, <span class="comment">// 1</span></span><br><span class="line"><span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>, <span class="comment">// 2</span></span><br><span class="line"><span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>, <span class="comment">// 3</span></span><br><span class="line"><span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>, <span class="comment">// 4</span></span><br><span class="line"><span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>, <span class="comment">// 5</span></span><br><span class="line"><span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>, <span class="comment">// 6</span></span><br><span class="line"><span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>, <span class="comment">// 7</span></span><br><span class="line"><span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>, <span class="comment">// 8</span></span><br><span class="line"><span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>, <span class="comment">// 9</span></span><br><span class="line"><span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>, <span class="comment">// a</span></span><br><span class="line"><span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>, <span class="comment">// b</span></span><br><span class="line"><span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>, <span class="comment">// c</span></span><br><span class="line"><span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>, <span class="comment">// d</span></span><br><span class="line"><span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>, <span class="comment">// e</span></span><br><span class="line"><span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>&#125;;<span class="comment">// f</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mixValue_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>,</span><br><span class="line">   <span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>, <span class="number">01</span>,</span><br><span class="line">   <span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span>, <span class="number">03</span>,</span><br><span class="line">   <span class="number">03</span>, <span class="number">01</span>, <span class="number">01</span>, <span class="number">02</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> state_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> output_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> RoundKey_76[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"明文："</span>);</span><br><span class="line">getData_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"密钥："</span>);</span><br><span class="line">getData_76(RoundKey_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"输入明文状态矩阵："</span>);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"输入128比特初始密钥矩阵："</span>);</span><br><span class="line">printOut_76(RoundKey_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"轮密钥运算输出："</span>);</span><br><span class="line">AddRoundKey_76(state_76, RoundKey_76);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"字节替代输出："</span>);</span><br><span class="line">SubBytes_76(state_76);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"行移位输出："</span>);</span><br><span class="line">ShiftRows_76(state_76);</span><br><span class="line">printOut_76(state_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"列混合输出："</span>);</span><br><span class="line">mix_columns_76(state_76, output_76);</span><br><span class="line">printOut_76(output_76);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getData_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> input_76[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">16</span>; i_76++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%p"</span>, input_76+i_76);</span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">data_76[j_76][i_76] = input_76[<span class="number">4</span>*i_76+j_76];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOut_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*data_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X "</span>, data_76[i_76][j_76]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SubBytes_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">state_76[i_76][j_76] = Sbox_76[state_76[i_76][j_76]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRoundKey_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*RoundKey_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span> ;i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">state_76[i_76][j_76] ^=  RoundKey_76[i_76][j_76];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiftRows_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76, cnt_76, tmp_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">1</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line">cnt_76 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt_76++ &lt; i_76)</span><br><span class="line">&#123;</span><br><span class="line">tmp_76 = state_76[i_76][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">1</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line">state_76[i_76][j_76<span class="number">-1</span>] = state_76[i_76][j_76];</span><br><span class="line">&#125;</span><br><span class="line">state_76[i_76][j_76<span class="number">-1</span>] = tmp_76;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">gfmultby_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> a_76, <span class="keyword">unsigned</span> <span class="keyword">char</span> b_76)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp_76 = a_76 &gt; <span class="number">0x80</span> ? (<span class="keyword">unsigned</span> <span class="keyword">char</span>)((a_76&lt;&lt;<span class="number">1</span>)^<span class="number">0x1b</span>):(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a_76 &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(b_76 == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> a_76;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(b_76 == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> tmp_76;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> tmp_76^a_76;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mix_columns_76</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> (*state_76)[<span class="number">4</span>], <span class="keyword">unsigned</span> <span class="keyword">char</span> (*output_76)[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_76, j_76, k_76;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i_76 = <span class="number">0</span>; i_76 &lt; <span class="number">4</span>; i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j_76 = <span class="number">0</span>; j_76 &lt; <span class="number">4</span>; j_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k_76 = <span class="number">0</span>; k_76 &lt; <span class="number">4</span>; k_76++)</span><br><span class="line">&#123;</span><br><span class="line">output_76[i_76][j_76] ^= gfmultby_76(state_76[k_76][j_76], mixValue_76[i_76][k_76]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RSA-模幂运算的实现"><a href="#RSA-模幂运算的实现" class="headerlink" title="RSA 模幂运算的实现"></a>RSA 模幂运算的实现</h3><p>按照平方乘算法和模重复平方法，分别计算<strong>a^n mod n</strong></p><p><strong>1.平方乘算法。</strong></p><p>计算整体思想：先平方再乘。</p><ul><li>先将指数转化为二进制形式。</li><li>从指数的二进制高位到低位依次计算。</li><li>初始化设置，<strong>b1</strong> == 1 ,扫描第一个bit时不需要做其他操作。</li><li>随后若<strong>bi</strong> == 1，则平方上一次的结果后再乘x（底数）；若<strong>bi</strong> == 0，只需要对上一次的结果平方一次即可。</li></ul><p><strong>理解：一次平方操作会让指数向左移一位，并在最右边添加0，而与x（底数）相乘的操作即在指数的最右边位置上填上 1，这样完成后也是得到指数的二进制位了。</strong></p><p>这里贴一下网上看到一张图：</p><p><img src="/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210417144224324.png" alt="image-20210417144224324"></p><p>C语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LRFun_76</span><span class="params">(<span class="keyword">int</span> a_76, <span class="keyword">int</span> m_76, <span class="keyword">int</span> n_76)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans_76 = <span class="number">1</span>, s_76[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, cnt_76 = <span class="number">0</span>, i_76 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m_76)</span><br><span class="line">&#123;</span><br><span class="line">s_76[cnt_76++] = m_76&amp;<span class="number">1</span>;</span><br><span class="line">m_76 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(--cnt_76 &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans_76 = (ans_76*ans_76*(<span class="keyword">int</span>)<span class="built_in">pow</span>(a_76, s_76[cnt_76]))%n_76;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d, b = %d, ans_76 = ans_76*ans_76*a_76^%d(mod %d) = %d\n"</span>, i_76++, s_76[cnt_76], s_76[cnt_76], n_76, ans_76);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果为：%d\n"</span>, ans_76);</span><br><span class="line"><span class="keyword">return</span> ans_76;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.模重复平方法。</strong></p><p>计算整体思想：将指数分为多个2次方相加的形式，然后重复平方。</p><p>也是先将指数转化位二进制的形式，然后从低位开始，依次计算，下面的n1是每个二进制位，表示是0或者1。</p><p><img src="/2021/04/17/%E5%BA%94%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6/image-20210417163737881.png" alt="image-20210417163737881"></p><p><strong>其中的重复重复平方是每轮都要进行的，只是根据指数的二进制位的0来决定是否将其乘到结果中去。</strong></p><p>C语言实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">powerMod_76</span><span class="params">(<span class="keyword">int</span> a_76, <span class="keyword">int</span> m_76, <span class="keyword">int</span> n_76)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans_76 = <span class="number">1</span>, s_76[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, i_76 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; m_76; m_76 &gt;&gt;= <span class="number">1</span>, i_76++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp_76 = m_76&amp;<span class="number">1</span>;</span><br><span class="line">ans_76 = (ans_76*(<span class="keyword">int</span>)<span class="built_in">pow</span>(a_76, tmp_76))%n_76;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d: b = %d, ans_76 = ans_76*a_76^%d(mod %d) = %d\n"</span>, i_76, tmp_76, tmp_76, n_76, ans_76);</span><br><span class="line"></span><br><span class="line">a_76 = (a_76*a_76)%n_76;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d: a_76 = a_76*a_76(mod %d) = %d\n"</span>, i_76, n_76, a_76);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"结果为：%d\n"</span>, ans_76);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans_76;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，main函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a_76, m_76, n_76;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入数字（a, m, n）:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a_76, &amp;m_76, &amp;n_76);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"用平方乘算法的计算过程为："</span>);</span><br><span class="line">LRFun_76(a_76, m_76, n_76);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>), <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"用模重复平方法的计算过程为："</span>);</span><br><span class="line">powerMod_76(a_76, m_76, n_76);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下应用密码学课程的代码作业及实验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Course" scheme="https://Bxb0.github.io/categories/Course/"/>
    
    
  </entry>
  
  <entry>
    <title>2021MRCTF</title>
    <link href="https://bxb0.github.io/2021/04/12/2021MRCTF/"/>
    <id>https://bxb0.github.io/2021/04/12/2021MRCTF/</id>
    <published>2021-04-12T12:59:14.000Z</published>
    <updated>2021-05-26T00:41:41.824Z</updated>
    
    <content type="html"><![CDATA[<p>个人解题赛，做完了逆向题，总排名第5。<a id="more"></a></p><p><img src="https://i.loli.net/2021/04/12/51u7kH9FpMJdqsv.png" alt="image-20210412210153457"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Real-CHECKIN"><a href="#Real-CHECKIN" class="headerlink" title="Real_CHECKIN"></a>Real_CHECKIN</h3><p>换表base64加密，找到表：abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/</p><p>密文：tvjdvez7D0vSyZbnzv90mf9nuKnurL8YBZiXiseHFq==</p><p>简单写一下换表脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"</span></span><br><span class="line">table = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">enc = <span class="string">"tvjdvez7D0vSyZbnzv90mf9nuKnurL8YBZiXiseHFq=="</span></span><br><span class="line">ans = enc.translate(str.maketrans(table, s))</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(ans))</span><br><span class="line"></span><br><span class="line"><span class="comment">#MRCTF&#123;wElc0Me_t0_MRCTF_2o21!!!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Dynamic-Debug"><a href="#Dynamic-Debug" class="headerlink" title="Dynamic Debug"></a>Dynamic Debug</h3><p>来到main函数，首先对输入的字符的长度进行了一个判断：</p><p><img src="https://i.loli.net/2021/04/12/NRJXFg6s3hcDoEz.png" alt="image-20210411224811890"></p><p>到关键函数sub_402500（），不能直接反编译，那就简单的分析一下汇编，开始是花指令之类的东西，后面也就是简单比较输入是否为：MRCTF{IS_THIS_REAL?ASK_YOURSELF}，很明显这是假的。</p><p><img src="https://i.loli.net/2021/04/12/MYQAVZPiWKBgCzX.png" alt="image-20210411225042628"></p><p>调试一波找到对代码修改的地方：其实不关心细节，直接动调跟进我们输入字符后的函数，直接就是解密后的代码，修复一下即可。这里我做题时ida和犯病了一样，动调得到那个解密后的代码怎么都不对，，后面单步步入找原因，再次到达解密后的代码又对了，现在想模拟一下当时出错的情况，看原因，又一直不错（。。</p><p><img src="https://i.loli.net/2021/04/12/u2mL6S4ovfjPykR.png" alt="image-20210411225843676"></p><p>这里手动patch不太方便，还要dump出异或流。就直接动调得到，一个清晰明了的tea结构加密：</p><p><img src="https://i.loli.net/2021/04/12/AJnycbCNZvKH8kF.png" alt="image-20210411230306051"></p><p>解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] = &#123;<span class="number">153</span>, <span class="number">161</span>, <span class="number">133</span>,  <span class="number">85</span>, <span class="number">104</span>,  <span class="number">93</span>, <span class="number">130</span>, <span class="number">126</span>,  <span class="number">57</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">77</span>, <span class="number">148</span>,  <span class="number">67</span>, <span class="number">105</span>, <span class="number">114</span>, <span class="number">113</span>,   <span class="number">6</span>,  <span class="number">67</span>,  <span class="number">81</span>, <span class="number">106</span>, </span><br><span class="line">    <span class="number">0</span>, <span class="number">173</span>,  <span class="number">20</span>,  <span class="number">75</span>,  <span class="number">63</span>,  <span class="number">13</span>, <span class="number">210</span>, <span class="number">100</span>,  <span class="number">21</span>, <span class="number">219</span>, </span><br><span class="line">   <span class="number">55</span>, <span class="number">159</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v5 = <span class="number">0x6B696C69</span>,</span><br><span class="line">     v4 = <span class="number">0x79645F65</span>,</span><br><span class="line">     v3 = <span class="number">0x696D616E</span>,</span><br><span class="line">     v2 = <span class="number">0x67626463</span>;</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">get_delat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>, delat = <span class="number">0x9E3779B9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">ans += delat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ENC+<span class="number">8</span>*i);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = get_delat();</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">31</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">enc[<span class="number">1</span>] -= (enc[<span class="number">0</span>] + delat) ^ (enc[<span class="number">0</span>]*<span class="number">16</span>+v3) ^ ((enc[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>)+v2);</span><br><span class="line">enc[<span class="number">0</span>] -= (enc[<span class="number">1</span>] + delat) ^ (enc[<span class="number">1</span>]*<span class="number">16</span>+v5) ^ ((enc[<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)+v4);</span><br><span class="line">delat -= <span class="number">0x9E3779B9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">tea_decode();</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ENC[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//MRCTF&#123;Dyn4m1c_d3buG_1s_a_ki11eR&#125;</span></span><br></pre></td></tr></table></figure><h3 id="MR-Register"><a href="#MR-Register" class="headerlink" title="MR_Register"></a>MR_Register</h3><p>考点：Debug Blocker技术。</p><p>程序的关键在子进程。分析方法很多，但绝大多数，只要找到这个技术关键点，静态分析和动调父进程看子进程反馈就好了，如果数据复杂了，可以附加调试看内存加以辅助。</p><p>首先根据函数的特征结构找到main函数，</p><p><img src="https://i.loli.net/2021/04/12/RXUsE7vLtpea9gl.png" alt="image-20210411235747150"></p><p>来看main函数，刚刚开始看的时候疑惑了一会儿，为什么这个在调试状态下才执行程序的关键逻辑，经过后面的创建进程函数发现：其实这里的if else语句就区别了父进程与子进程执行不同的语句，因为创建出的子进程是调试模式运行的。这里关注一下创建进程的<strong>dwCreationFlags</strong>参数，分析程序是将其转换一下枚举的含义好看一些。</p><p><img src="https://i.loli.net/2021/04/12/2i1PyKHlcACXqog.png" alt="image-20210412111156696"></p><blockquote><p>dwCreationFlags标识了影响新进程创建方式的标志：</p><p><strong>DEBUG_PROCESS：如果这个标志被设置，调用进程将被当作一个调试程序，并且新进程会被当作被调试的进程。系统把被调试程序发生的所有调试事件通知给调试器。</strong></p><p><strong>DEBUG_ONLY_THIS_PROCESS：如果这个标志被设置，调用进程将被当作一个调试程序，并且新进程会被当作被调试的进程。系统把被调试程序发生的所有调试事件通知给调试器。</strong></p><p><strong>上面2个不同点在于DEBUG_PROCESS会调试被调试进程以及它的所有子进程，而DEBUG_ONLY_THIS_PROCESS只调试被调试进程，不调试它的子进程。</strong></p></blockquote><p>继续就是分析后面父进程处理子进程异常的部分sub_40188D()：</p><p><img src="https://i.loli.net/2021/04/12/NsBlrSXueFjwH2C.png" alt="image-20210412111950176"></p><p>关键是看DebugEvent.dwDebugEventCode == 1的活动：接受处理来自子进程的异常，进而修改子进程代码。</p><p><img src="https://i.loli.net/2021/04/12/szbXIDkcymFJGUo.png" alt="image-20210412112837615"></p><p>所以现在关键就是要去寻找子进程要执行函数中出现触发异常地方，进而对着父进程处理模块分析。这里我直接调试了下父进程，记录它处理子进程异常的位置和处理方式，随后自己用idapython去patch一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一次交互：通过除<span class="number">0</span>异常触发</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">374</span>; i &gt;= <span class="number">0</span>; --i )</span><br><span class="line">    Buffer[i] ^= Buffer[i + <span class="number">1</span>] ^ i;             <span class="comment">// 对表进行了一个简单异或运算。</span></span><br><span class="line">  Buffer[<span class="number">375</span>] = <span class="number">120</span>;</span><br><span class="line">rip += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">第二次交互：通过int3交互，解密代码。</span><br><span class="line">地址：<span class="number">0x0000401E1C</span></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x57D</span>; ++i )</span><br><span class="line">    *((_BYTE *)v5 + i) ^= i;</span><br><span class="line">  </span><br><span class="line">rip += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">第三次，在patch后的代码第一次遇到int3,触发异常交互：</span><br><span class="line">rip += <span class="number">2</span></span><br></pre></td></tr></table></figure><p>patch文件，并nop无用的代码：</p><p><img src="https://i.loli.net/2021/04/14/2xEwBcXAsW4thbu.png" alt="mwGU5aZ38l4PAWc"></p><p>随后分析程序的关键流程，也就是子进程执行的，先创建一个文件，将输入进行加密后的数据写入该文件中，最后取出文件中的数据与指定编码数据对比。</p><p>而关键加密函数就是之前patch后的：就是用我们的输入可见字符，因为最高为0，所以只用了7位，分成3 3 1三部分作为index，置换表的过程。这里的email其实并没有作为比较，看到最后用了有一个异或操作，而在最后的比对过程中也有一个同样的操作，就还原了，所以密文就是不经过异或加密后的结果。<br><img src="https://i.loli.net/2021/04/12/wfFu2ZJQS6IL4N1.png" alt="image-20210412114342071"></p><p>最后先爆破，再进行一个bytes.fromhex()，最后一个减法。比赛时赶时间写的，比较水，用python处理起来方便一些。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">72</span>, <span class="number">109</span>, <span class="number">71</span>, <span class="number">86</span>, <span class="number">71</span>, <span class="number">106</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">107</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">105</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">118</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">120</span>, <span class="number">53</span>, <span class="number">121</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">71</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">71</span>, <span class="number">88</span>, <span class="number">53</span>, <span class="number">122</span>, <span class="number">71</span>, <span class="number">87</span>, <span class="number">72</span>, <span class="number">108</span>, <span class="number">53</span>, <span class="number">119</span>, <span class="number">69</span>, <span class="number">120</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> table[<span class="number">9</span>][<span class="number">9</span>] = &#123;<span class="string">"ABCDEFGH"</span>, <span class="string">"12345678"</span>, <span class="string">"0IJKLMNO"</span>, <span class="string">"+OPQRStu"</span>, </span><br><span class="line"><span class="string">"\\vwxyzTU"</span>, <span class="string">"abcdefgh"</span>, <span class="string">"VWXYZijk"</span>, <span class="string">"lmnopqrs"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, v25, v24, v23, ans1, ans2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">12</span>; i &lt; <span class="keyword">sizeof</span>(enc)<span class="number">-1</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = j;</span><br><span class="line">v25 = (ch &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    v24 = (ch &gt;&gt; <span class="number">3</span>) &amp; <span class="number">7</span>;</span><br><span class="line">    v23 =  ch &amp; <span class="number">7</span>;</span><br><span class="line">    ans1 = table[v25][v24];</span><br><span class="line">    ans2 = table[v24][v23];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ans1 == enc[i] &amp;&amp; ans2 == enc[i+<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">putchar</span>(j);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%d %d", ans1, ans2);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc[<span class="number">100</span>] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x4d</span>, <span class="number">0x52</span>, <span class="number">0xe2</span>, <span class="number">0x188</span>, <span class="number">0x2b0</span>, <span class="number">0x4b3</span>, <span class="number">0x7a6</span>, <span class="number">0xc8d</span>, <span class="number">0x14a1</span>, <span class="number">0x218d</span>, <span class="number">0x36a7</span>, <span class="number">0x5864</span>, <span class="number">0x8f80</span>, <span class="number">0xe843</span>, <span class="number">0x17827</span>, <span class="number">0x2609d</span>, <span class="number">0x3d926</span>, <span class="number">0x63a38</span>, <span class="number">0xa13c5</span>, <span class="number">0x104e5c</span>, <span class="number">0x1a6252</span>, <span class="number">0x2ab122</span>, <span class="number">0x4513b3</span>, <span class="number">0x6fc534</span>, <span class="number">0xb4d955</span>, <span class="number">0x1249eb9</span>, <span class="number">0x1d9786d</span>, <span class="number">0x2fe179d</span>, <span class="number">0x4d7906b</span>, <span class="number">0x7d5a841</span>, <span class="number">0xcad38cd</span>, <span class="number">0x1482e18b</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> init = enc[<span class="number">0</span>]+enc[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">flag[<span class="number">0</span>] = enc[<span class="number">0</span>], flag[<span class="number">1</span>] = enc[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = enc[i]-enc[i<span class="number">-1</span>]-enc[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MRCTF&#123;C4n_y0u_d3bug_1t?_n0_wa9!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="EzGame"><a href="#EzGame" class="headerlink" title="EzGame"></a>EzGame</h3><p>游戏真好玩。</p><p>之前嘶吼CTF做过一个魔塔的游戏，也是有几个通关条件但更苛刻，但是那个并不是unity3d写的，直接逆向程序看游戏的逻辑找每个关键点还是能分析。这个游戏本身用unity3d写难度就大了很多，还对一个dll进行Themida / Winlicense v3.0.0.0 - 3.0.4.0加壳。</p><p>搞了些时间，没有把程序正常调试起来，开始打用CE的主意。。</p><p>常规的通过星星数的增加，不断再次扫描缩小范围找到存放其值的内存所在的位置。</p><p><img src="https://i.loli.net/2021/04/12/O6b8jr5AfghM9q3.png" alt="image-20210412125603706"></p><p>因为最后获得flag的还有一个条件就是死亡次数不能太多，那就还有一个记录死亡次数的变量，同样的方法找到内存位置。但其它三个条件是否达成标志的内存位置呢。</p><p>这时候我观察我记录下的星星数和死亡次数的内存地址：可以发现这2个内存地址隔的很近，这就让我想到其余判断条件的内存地址也是在这块区域，就在附近。</p><p><img src="https://i.loli.net/2021/04/12/FjxvnrsNSMdKLcD.png" alt="image-20210412130845062"></p><p>开始试探寻找另外三个条件的内存位置。</p><p>因为Eat Cookie是可实现的，所以浏览相关内存区域后我去Eat Cookie，然后看内存变化。</p><p>发现下图中的内存位置变了，然后我以为这个标志是四字节数据，其后面跟着的是6是死亡次数，那再后面的或许就是其余2个条件的标志内存区域吧。</p><p><img src="https://i.loli.net/2021/04/12/f7tDeKoRiP6YsQd.png" alt="image-20210412131401847"></p><p>开始把后面所有的数据作为4字节数据，然后都改为1，回到游戏，发现其余2个条件并没有变为True。。。</p><p>但还有一个条件GoHome也是可以打游戏到达的，到达后再次观察内存变化，发现了端倪，其实3个条件的标志变量是一个字节的数据，也就是存Eat Cookie标志内存地址跟着的2个字节。</p><p>现在把所有条件通过修改内存达成，GetFlag：</p><p><img src="https://i.loli.net/2021/04/12/CrNxG7igVQHTWja.png" alt="image-20210412132340392"></p><p>其实猜也是，不会这样就把flag得到了，，之前嘶吼的魔塔游戏就有很多判断，步数啊，血量，走的路径等各种参数去计算出flag。这个题应该也是这样的。。</p><p>在增加星星数时我之前观察到了后面有8个字节的数据在不断发生变化，而要得到flag就要星星数正确，而星星数又影响那8字节数据，自然想到那8字节数据影响着最后flag。。</p><p>这时候我有2个想法：</p><ul><li><p>一是找方法计算出星星数为105时的8字节数据；</p></li><li><p>二是找到记录所能跳高度的内存位置或记录当前位置的参数，修改后达到外挂一样，将星星数一个一个吃掉。</p></li></ul><p>第二个想法尝试了一下，不断变化位置，并没有在附近的内存中发现变化，倒是发现了记录当前已经跳动步数的内存位置，然后就没有后续了（。。</p><p>然后尝试找出计算8字节数据的方法，，先dump出几组数据观察了一下：发现奇数组和偶数组对应2个不同lfsr结构，关键在于最后一个字节移位（也是一个lfsr结构）后填入新一组的第一个位置。但是不知道每次循环填充到最高的位0或1是怎么计算的决定的。。<br><img src="https://i.loli.net/2021/04/12/DqVs6Xo5rTMIWlA.png" alt="image-20210412135221959"></p><p>其实这里都知道内存的地址了，要是把程序调试起来，通过ce的是什么访问这个地址，得到操作目标数据的指令地址后在调试器中去对应找到关键代码就很简单了，然而这个游戏我没能调试起来。</p><p>但还有一个办法：dump出当时的内存，拖进ida中分析，一样和调试一样。。</p><p>有了这个思路，先是直接定位到最后GetFlag时要进行比较的代码，发现有取出那8字节数据作为key去去进行rc4解密，以为有直接比较key是否正确的地方，但并没有发现。然后又老老实实定位到计算生成key的地方：</p><p><img src="https://i.loli.net/2021/04/12/RC47oJFqrIK2vaN.png" alt="image-20210412184108621"></p><p>上面的算法中有一个未知量，v0，就是要运行的次数，，我是把1-64都打印了出来，在v0 == 8时，得到正确的结果。</p><p>最后就是打印出星星数为105时的目标值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> init[] = &#123;<span class="number">0x4E</span>, <span class="number">0x51</span>, <span class="number">0x14</span>, <span class="number">0xA1</span>, <span class="number">0xFA</span>, <span class="number">0xEE</span>, <span class="number">0xDB</span>, <span class="number">0xEA</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__int64 v2, v3, v4;</span><br><span class="line"><span class="keyword">char</span> v5;</span><br><span class="line"><span class="keyword">unsigned</span> __int64 v6;</span><br><span class="line">__int64 result;</span><br><span class="line"><span class="keyword">int</span> v0 = <span class="number">8</span>, i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v5 = v3++ &amp; <span class="number">0x3f</span>;</span><br><span class="line">v6 = v4 &amp; (*((__int64 *)init));</span><br><span class="line">v4 = (v4 &lt;&lt; <span class="number">1</span>) | (v4 &gt;&gt; <span class="number">63</span>);</span><br><span class="line">v2 ^= v6 &gt;&gt; v5; </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(v3 &lt; <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">result = v2 | <span class="number">2</span>* (*((__int64 *)init));</span><br><span class="line">(*((__int64 *)init)) = result;</span><br><span class="line"></span><br><span class="line">--v0;</span><br><span class="line">&#125;<span class="keyword">while</span>(v0);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &lt;= <span class="number">105</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">fun();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x "</span>, init[j]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dd b7 d5 3b 45 51 84 ea</span></span><br></pre></td></tr></table></figure><p>修改游戏内存，得到flag。</p><p><img src="https://i.loli.net/2021/04/12/p2RIdzDjMWwXZqG.png" alt="image-20210412184539407"></p><h3 id="MR-CheckIN"><a href="#MR-CheckIN" class="headerlink" title="MR_CheckIN"></a>MR_CheckIN</h3><p>安卓题，jeb反编译后，在MainActivity的onCreate方法找到调用了一个监听文本框输入的类。也就是当我们输入password长度为39时才将SIGNIN按钮启动。。</p><p><img src="https://i.loli.net/2021/04/12/RKEgf5mp1rlGXyQ.png" alt="image-20210412185333718"></p><p>后面就是处理从文本框输入的内容，username要为MRCTF，然后检查了password的格式MRCTF{}，接着passwd的6-13进行md5加密后与编码的数据比较，这个在线解密一下就好了：<strong>Andr01d</strong>，剩下的数据传入check2函数进行运算检查。</p><p><img src="https://i.loli.net/2021/04/12/rtjRiSdXNP5Klcg.png" alt="image-20210412185731359"></p><p>check2函数就是生成一个密钥序列然后与输入异或后与编码数据比较：<br><img src="https://i.loli.net/2021/04/12/r5QGPNgA2azXcWR.png" alt="image-20210412190659182"></p><p>我开始直接把上面生成密钥序列的next方法复制到java中运行，但得到密钥序列一直不对。。</p><p>然后用了最笨的方法，，单步调试一步一步得到密钥序列，其实把最后那个判断条件改一下，得到这个序列就方便了。。</p><p>密钥序列：<strong>[49, 49, 49, 50, 53, 52, 55, 48, 54, 48, 53, 48, 48, 52, 48, 48, 48, 53, 50, 48, 49, 48, 48, 48, 48]</strong></p><p>最后异或一下：</p><p><img src="https://i.loli.net/2021/04/12/sGjmcnix6TPkBAq.png" alt="image-20210412191628542"></p><h3 id="古神的低语"><a href="#古神的低语" class="headerlink" title="古神的低语"></a>古神的低语</h3><p>魔改过的平坦化混淆，，用脚本没去掉，然后就是硬看了。。</p><p><img src="https://i.loli.net/2021/04/14/mJj6gvVdWCaYAhw.png" alt="image-20210413181523944"></p><p>开始对输入的一些操作，判断长度和对username进行bytes.fromhex()的操作。</p><p><img src="https://i.loli.net/2021/04/12/EW7mQ3A2kHTtMJc.png" alt="image-20210412193243190"></p><p>之后就是那个很大的函数了，记为mixFuction，也是整个题的关键，，什么操作都调用了它。</p><p>首先第一次调试的时候，在内存中找到了二张表，搜索到这是祖冲之序列密码，有密钥与iv。再仔细分析第一次调用那个mixFuction函数，发现传入username的hex.decode的形式和ezivforefolwenc，猜测这是将username作为key，ezivforefolwenc作为iv，进行祖冲序列密码的初始化。</p><p>然后第二次调用mixFunction，传入参数8和一个指针，单步步过这个函数发现生成32字节数据，从传入的参数为8，和这个序列密码的生成密钥流的性质：32位4字节密钥为一个生成单元。我又自己用这个相同的密钥和iv模拟了生成的密钥，然后对比，，果然一样。。</p><p><img src="https://i.loli.net/2021/04/12/yiX6IH4obUWvgTM.png" alt="image-20210412194741393"></p><p>接着调用的一个mixFunction进行了赋值操作，直接单步步过后看变化。</p><p>继续又调用的两次mixFunction传入一个key和输入的passwd，分2次加密，每次加密16字节，分组密码的特征了。单步步入调试mixFunction很卡，，直接对passwd下内存访问断点，发现开始用传入的key和passwd进行一个异或操作，继续F9，又断下来，，一个字节替换操作，而从盒子看，明显aes的s盒，哈哈被发现了，那之前就是初始轮了。</p><p>后面是用之前生成的密钥流加密：</p><p><img src="https://i.loli.net/2021/04/12/65g7iN1jonLYG2D.png" alt="image-20210412200958875"></p><p>其中又调用了mixFunction函数对密钥流进行一个序列操作，调试到关键位置，得到加密算法。</p><p><img src="https://i.loli.net/2021/04/12/oG3p7UKMH2av6BN.png" alt="image-20210412202528482"></p><p>最后还有一个mixFunction：循环移位操作。</p><p><img src="https://i.loli.net/2021/04/12/b72eDcHfSz43XPd.png" alt="image-20210412203433118"></p><p>最后整体上，整个加密就类似tea结构，解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[<span class="number">4</span>][<span class="number">256</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">208</span>, <span class="number">161</span>, <span class="number">129</span>, <span class="number">188</span>, <span class="number">124</span>, <span class="number">155</span>,   <span class="number">2</span>, <span class="number">228</span>,  <span class="number">47</span>,  <span class="number">51</span>, </span><br><span class="line">   <span class="number">54</span>, <span class="number">232</span>, <span class="number">187</span>,  <span class="number">18</span>, <span class="number">146</span>, <span class="number">244</span>,  <span class="number">18</span>, <span class="number">178</span>, <span class="number">177</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">243</span>, <span class="number">219</span>, <span class="number">248</span>, <span class="number">195</span>, <span class="number">252</span>, <span class="number">223</span>, <span class="number">212</span>,  <span class="number">80</span>, <span class="number">220</span>, <span class="number">140</span>, </span><br><span class="line">   <span class="number">91</span>, <span class="number">233</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> enc_stream[] = &#123;<span class="number">3691317505</span>, <span class="number">783378847</span>, <span class="number">3109790973</span>, <span class="number">2450366240</span>,</span><br><span class="line"> <span class="number">1882631107</span>, <span class="number">1581884682</span>, <span class="number">2916488768</span>, <span class="number">1817239551</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">mul_2</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cnt += ((a&gt;&gt;i)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d", cnt);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt%<span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ((a*<span class="number">2</span>) | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen_key</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j, v43, v44;</span><br><span class="line"></span><br><span class="line">v44 = enc_stream[<span class="number">2</span>*index], v43 = enc_stream[<span class="number">2</span>*index+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v44 = mul_2(v43);</span><br><span class="line">v43 = mul_2(v44);</span><br><span class="line"></span><br><span class="line">key[index][i][<span class="number">0</span>] = v44 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">key[index][i][<span class="number">1</span>] = v43 &lt;&lt; <span class="number">18</span>;</span><br><span class="line">key[index][i][<span class="number">2</span>] = v43 &gt;&gt; <span class="number">7</span>;</span><br><span class="line">key[index][i][<span class="number">3</span>] = v44 &lt;&lt; <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">ror</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a, <span class="keyword">unsigned</span> <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = (a &gt;&gt; i) | (a &lt;&lt; (<span class="number">0x20</span>-i));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">gen_key(i);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ENC+<span class="number">8</span>*i);</span><br><span class="line">tmp = enc[<span class="number">1</span>];</span><br><span class="line">enc[<span class="number">1</span>] = enc[<span class="number">0</span>];</span><br><span class="line">enc[<span class="number">0</span>] ^= tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">255</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">enc[<span class="number">1</span>] += ror(enc[<span class="number">0</span>], j&amp;<span class="number">0x1f</span>) ^ key[i][j][<span class="number">1</span>] | key[i][j][<span class="number">0</span>];</span><br><span class="line">enc[<span class="number">0</span>] += ror(enc[<span class="number">1</span>], j&amp;<span class="number">0x1f</span>) ^ key[i][j][<span class="number">3</span>] | key[i][j][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%x ", ror(0x00C68E92E3, 2));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, "</span>, ENC[i]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aes解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cry = AES.new(<span class="string">b"ezkeyforenc"</span>+bytes(<span class="number">5</span>), AES.MODE_ECB)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag = cry.decrypt(bytes([<span class="number">138</span>, <span class="number">103</span>, <span class="number">149</span>, <span class="number">61</span>, <span class="number">251</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">155</span>, <span class="number">4</span>, <span class="number">129</span>, <span class="number">228</span>, <span class="number">119</span>, <span class="number">7</span>, <span class="number">137</span>, <span class="number">132</span>, <span class="number">118</span>, <span class="number">214</span>, <span class="number">137</span>, <span class="number">47</span>, <span class="number">233</span>, <span class="number">229</span>, <span class="number">148</span>, <span class="number">23</span>, <span class="number">181</span>, <span class="number">45</span>, <span class="number">203</span>, <span class="number">80</span>, <span class="number">45</span>, <span class="number">251</span>, <span class="number">101</span>, <span class="number">6</span>, <span class="number">224</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flag</span><br><span class="line"><span class="string">b'really_ez_flatten_obfu_can_u_fix'</span></span><br></pre></td></tr></table></figure><p>最后解密还原得到的一个音频文件，这不杂项。。</p><p>找到这个：</p><p><img src="https://i.loli.net/2021/04/12/JcSsjlAgELORaku.png" alt="image-20210412203830511"></p><p>然后，，，倒放音频听到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人解题赛，做完了逆向题，总排名第5。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021数字中国创新大赛虎符网络安全</title>
    <link href="https://bxb0.github.io/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>https://bxb0.github.io/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
    <published>2021-04-03T11:41:38.000Z</published>
    <updated>2021-04-19T14:35:55.774Z</updated>
    
    <content type="html"><![CDATA[<p>第二届虎符CTF，分享一下逆向题解。<a id="more"></a></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/15CH8WMsHoaRmMeIflV3Llg" target="_blank" rel="noopener">https://pan.baidu.com/s/15CH8WMsHoaRmMeIflV3Llg</a><br>提取码：z531<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><h3 id="redemption-code"><a href="#redemption-code" class="headerlink" title="redemption_code"></a>redemption_code</h3><p>32位mips架构动态链接的程序。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403195047229.png" alt="image-20210403195047229"></p><p>因为动态链接运行要指定库路径，这里就直接静态分析，这个题也足够了。</p><p>首先看到对输入字符串处理的第一个函数pre：判断长度后，一个字符串赋值操作，一起传入check。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403200825059.png" alt="image-20210403200825059"></p><p>然后server_check_redemption_code函数：创建14个表，然后我们的输入的字符串作为index在其中以此递增的做标记。最后用上面赋值的字符串作为index依次查表，直到到最后到达最后一个表才成功。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403201314116.png" alt="image-20210403201314116"></p><p>上面如果不好理解的话，可以把要得到的表打印出来看一下就清楚了。</p><p>所以说，要使第一个函数不返回-1，只要我们的输入为赋值字符串的前14个就好了。<strong>Ninja Must Die</strong></p><p>紧接着，又是一个字符串赋值操作加一个check()函数，与前面不同的是这个check()函数的返回值要为7，计算可以知道也就是check()函数最后要寻找21长度的字符串。而赋值的字符串也变了，如何让我们的输入字符串满足2个check()函数呢。</p><p>观察一下第二个字符串的前21位：<strong>I Love Ninja Must Die</strong>，它的后14位正好和第一个check()函数要满足的一样，而它的前7位可以跳过的，也正好满足了返回值要为7。</p><p>所以最后的flag就是：<strong>flag{Ninja Must Die}</strong></p><h3 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h3><p>程序应该是realse模式编译的，代码都杂合到一起了。做题时注意识别关键代码。</p><p>来到main函数，首先就看到了输入和长度判断，明显的stl模板的string结构。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403204000350.png" alt="image-20210403204000350"></p><p>动调看一下这个结构：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403205021175.png" alt="image-20210403205021175"></p><p>后面一直到下一次输入的的地方，动态分析下可以快速知道是将我们的输入前7位和后10位分为了2个string来存储。注意看内存。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403205837005.png" alt="image-20210403205837005"></p><p>接下来关键是第二个输入后进行浮点数运算的地方，输入数据经过浮点运算对比正确后继续进行后面的分支。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403210353368.png" alt="image-20210403210353368"></p><p>我开始直接跳过了这个判断，先看看后面做了什么。</p><p>分析得到下面是用输入的前7位和第二次的输入变换的得到的数据进行异或，</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403211320207.png" alt="image-20210403211320207"></p><p>继续看下面，可以看到输入的rc4结构，且把我们的前7位做了key：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403212129295.png" alt="image-20210403212129295"></p><p>到这里就清楚程序的整体流程了。</p><p>输入位17位，前7位为key，后10位为明文。第二次输入经过浮点运输后，经过判断，正确的话将其经过有规律变换后与第一次输入的前7位进行异或运算，然后与编码的enc对比，正确的话继续后面的rc4加密。</p><p>所以现在就是求出第二次输入一个int数据。</p><p>开始想的用angr来跑局部，但不熟练😢，换用复制ida中的代码到vs中运行，爆破出这个int数据。</p><p>注意一下<strong>__m128</strong>这个变量：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403232640041.png" alt="image-20210403232640041"></p><p>爆破代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emmintrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__m128 __<span class="function">fastcall <span class="title">sub_7FF64A4E1360</span><span class="params">(<span class="keyword">double</span> a1, <span class="keyword">double</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> v2; <span class="comment">// xmm7_8</span></span><br><span class="line">    __m128 v3; <span class="comment">// xmm6</span></span><br><span class="line"></span><br><span class="line">    v2 = a1;</span><br><span class="line">    a1 = <span class="built_in">pow</span>(a1, a2 - <span class="number">1.0</span>);</span><br><span class="line">    *((<span class="keyword">double</span>*)&amp;v3 + <span class="number">1</span>) = *(&amp;a1 + <span class="number">1</span>);</span><br><span class="line">    *(<span class="keyword">double</span>*)&amp;v3 = a1 / <span class="built_in">exp</span>(v2);</span><br><span class="line">    <span class="keyword">return</span> (__m128)v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> v96 = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">double</span> v16 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> v17 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> v18 = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> v19;</span><br><span class="line">    <span class="keyword">int</span> v20;</span><br><span class="line">    <span class="keyword">double</span> v21, v22;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffffffff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> v16 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v17 = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> v18 = <span class="number">0.0</span>;</span><br><span class="line">        v96 = i;</span><br><span class="line">        v19 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)v96 / <span class="number">12379</span>) + <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v17 = v17 + *(<span class="keyword">double</span>*)sub_7FF64A4E1360(v18, v19).m128_u64 * <span class="number">0.001</span>;</span><br><span class="line">            v18 = v18 + <span class="number">0.001</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (v18 &lt;= <span class="number">100.0</span>);</span><br><span class="line">        v20 = (<span class="keyword">int</span>)(v17 + v17 + <span class="number">3.0</span>);</span><br><span class="line">        v21 = <span class="number">0.0</span>;</span><br><span class="line">        v22 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)v96 % <span class="number">12379</span>) + <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v16 = v16 + *(<span class="keyword">double</span>*)sub_7FF64A4E1360(v21, v22).m128_u64 * <span class="number">0.001</span>;</span><br><span class="line">            v21 = v21 + <span class="number">0.001</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (v21 &lt;= <span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">        <span class="keyword">if</span> (v20 == <span class="number">0x13B03</span> &amp;&amp; (<span class="keyword">int</span>)(v16 + v16 + <span class="number">3.0</span>) == <span class="number">0x5A2</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然不是很快，但还是跑出来了：<strong>99038</strong></p><p>接下来动态得到要与第一次输入前7位进行异或的数据。开始是99038，后面都是乘2后的字符串。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403213606134.png" alt="image-20210403213606134"></p><p>进行异或解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [<span class="number">57</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">56</span>, <span class="number">49</span>, <span class="number">57</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = [<span class="number">8</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">2</span>, <span class="number">64</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ans = [s[i]^t[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(ans)</span><br><span class="line"><span class="string">b'1ti5K3y'</span></span><br></pre></td></tr></table></figure><p>这就得到了key。</p><p>然后就是进行rc4解密，这个直接动调修改输入数据为密文数据进行一次加密变得到明文了。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403214259089.png" alt="image-20210403214259089"></p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403214337600.png" alt="image-20210403214337600"></p><p>最后输入得到flag：<strong>flag{1ti5K3yRC4_crypt099038}</strong></p><p><strong>再看题</strong></p><p>因为当时做题时，没有注意细节或者方法什么的，哪里爆破的很慢，现在是我后面对这个题再次学习写下的。</p><p>首先是对__m128数据类型的重新认识，它是一个联合，这里它的成员：</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214224132.png" alt="image-20210419214224132"></p><p>所以题目中的.m128_u64就是取低8字节。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214254776.png" alt="image-20210419214254776"></p><p>exp()是求e的次方的值。<strong>pow(a1, a2-1)/exp(a1)</strong></p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214354418.png" alt="image-20210419214354418"></p><p>另外这里是除12379，第一次是用商，第二次用余数，所以这里爆破的步长应该是每次加12379，确定了商，再确定余数就很快了。。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419214519931.png" alt="image-20210419214519931"></p><p>正确的爆破脚本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, ans;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xffffffff</span>; i += <span class="number">12379</span>)</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">c = i/<span class="number">12379</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">a = a + (<span class="built_in">pow</span>(b, c)/<span class="built_in">exp</span>(b))*<span class="number">0.001</span>;</span><br><span class="line">b += <span class="number">0.001</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(b &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ans = (<span class="keyword">int</span>)(a+a+<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">80643</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"found: %d\n\n"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">12379</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">c = i;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">a = a + (<span class="built_in">pow</span>(b, c)/<span class="built_in">exp</span>(b))*<span class="number">0.001</span>;</span><br><span class="line">b += <span class="number">0.001</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(b &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ans = (<span class="keyword">int</span>)(a+a+<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">0x5A2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"found: %d\n"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次还有一种用使用idapython来爆破，实质就是调用ida调试器中的函数来控制程序的流程和寄存器值等，为了让自己用的函数有一个统一规范，我统一使用ida_dbg模块的函数（idapython封装过的其实也不错）：运行脚本直接得到结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_dbg <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">rsp = get_reg_val(<span class="string">"rsp"</span>)</span><br><span class="line">set_reg_val(<span class="string">"rip"</span>, <span class="number">0x140001768</span>)</span><br><span class="line">patch_qword(rsp+<span class="number">0x40</span>, i)</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">run_to(<span class="number">0x140001658</span>)</span><br><span class="line">wait_for_next_event(WFNE_SUSP, <span class="number">-1</span>)</span><br><span class="line">init()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; i: %d"</span>%i)</span><br><span class="line">run_to(<span class="number">0x14000184E</span>)</span><br><span class="line">wait_for_next_event(WFNE_SUSP, <span class="number">-1</span>)</span><br><span class="line">ebx = get_reg_val(<span class="string">"ebx"</span>)</span><br><span class="line">eax = get_reg_val(<span class="string">"eax"</span>)</span><br><span class="line"><span class="keyword">if</span> ebx != <span class="number">80643</span>:</span><br><span class="line">i += <span class="number">12379</span></span><br><span class="line">init()</span><br><span class="line"><span class="keyword">elif</span> eax != <span class="number">1442</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">init()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"&gt;&gt;&gt; find: %d"</span>%i)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">exit_process()</span><br></pre></td></tr></table></figure><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210419222558380.png" alt="image-20210419222558380"></p><p>感觉idapython里面的函数真的繁杂。。同一个功能各个模块都有。但自己要有个规范。</p><p>记一个idapython文档，需要什么都有，直接查就完事了：<a href="https://www.hex-rays.com/wp-content/static/products/ida/support/idapython_docs/" target="_blank" rel="noopener">idapython_docs</a></p><h3 id="Golang-encrypter"><a href="#Golang-encrypter" class="headerlink" title="Golang encrypter"></a>Golang encrypter</h3><p>64位，go语言写的程序，经过符号表还原后，虽然代码还是难看，但有了大多数函数名称还是好很多的。</p><p>对输入的进行的第一个检查函数：main_check()，首先判断输入字符串长度，然后引入一个正则表达式对flag的格式进行了过滤，最后提取出每部分的字符串进行连接，最后再进行一个hex()操作。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403215520889.png" alt="image-20210403215520889"></p><p>后面开始用密钥初始化一个密钥对象，从密钥长度开始还是以为aes加密，测试后发现并不是，，</p><p>关键是这里的加密还是8个一组，分2次加密，且密钥长度又是16，这就排除aes和des加密了。</p><p>然后是从myCipher字符串让我想到这应该是作者自己写的一个加密，进而进入加密函数分析：<br>首先从动调分析知道下面这个函数就是交换数据字节顺序，<strong>_byteswap_ulong（）</strong>，这里开始调用了2次，结束调用了2次还原。分为2组，正好取了8个字节。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403220950328.png" alt="image-20210403220950328"></p><p>接着就是关键加密模板了，说实话，难看，其实就是魔改的tea加密，分析数据时细心点。。</p><p><img src="/2021/04/03/2021%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/image-20210403221308523.png" alt="image-20210403221308523"></p><p>把上面的加密化简一下，得到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enc[<span class="number">0</span>] += (enc[<span class="number">1</span>] + ((enc[<span class="number">1</span>]&gt;&gt;<span class="number">5</span>)^(<span class="number">16</span>*enc[<span class="number">1</span>]))) ^ (key[v23]+v22);</span><br><span class="line">enc[<span class="number">1</span>] += (enc[<span class="number">0</span>] + ((enc[<span class="number">0</span>]&gt;&gt;<span class="number">5</span>) ^ (<span class="number">16</span>*enc[<span class="number">0</span>]))) ^ (key[v25]+v22+<span class="number">0x12345678</span>);</span><br></pre></td></tr></table></figure><p>最后就是解密：注意细心吧。。这里因为加号运算符优先级大于异或，我又忘了在他们一起时给异或加一个括号，一直解密出错，真就硬看了二个小时。。。1个括号，2个小时。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> opcode[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> KEY[] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">10</span>, </span><br><span class="line"><span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] = &#123;<span class="number">14</span>, <span class="number">195</span>, <span class="number">17</span>, <span class="number">240</span>, <span class="number">69</span>, <span class="number">199</span>, <span class="number">154</span>, <span class="number">243</span>, <span class="number">237</span>, <span class="number">245</span>,</span><br><span class="line">   <span class="number">217</span>, <span class="number">16</span>, <span class="number">84</span>, <span class="number">39</span>, <span class="number">2</span>, <span class="number">203</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tea_decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *key = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)KEY;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ENC+<span class="number">8</span>*i);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">31</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">enc[<span class="number">1</span>] -= (enc[<span class="number">0</span>] + ((enc[<span class="number">0</span>]&gt;&gt;<span class="number">5</span>) ^ (<span class="number">16</span>*enc[<span class="number">0</span>]))) ^ (key[opcode[<span class="number">3</span>*j+<span class="number">2</span>]]+opcode[<span class="number">3</span>*j]+<span class="number">0x12345678</span>);</span><br><span class="line">enc[<span class="number">0</span>] -= (enc[<span class="number">1</span>] + ((enc[<span class="number">1</span>]&gt;&gt;<span class="number">5</span>) ^ (<span class="number">16</span>*enc[<span class="number">1</span>]))) ^ (key[opcode[<span class="number">3</span>*j+<span class="number">1</span>]]+opcode[<span class="number">3</span>*j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> enc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = enc[i];</span><br><span class="line">        enc[i] = enc[<span class="number">3</span>-i];</span><br><span class="line">        enc[<span class="number">3</span>-i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v17 = <span class="number">0</span>, v18 = <span class="number">0</span>, v22, v23, v25;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(v17 &lt; <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">v22 = v18;</span><br><span class="line">v23 = v18&amp;<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">v18 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v22+<span class="number">0x12345678</span>);</span><br><span class="line">v25 = ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v18 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">opcode[v17*<span class="number">3</span>] = v22;</span><br><span class="line">opcode[v17*<span class="number">3</span>+<span class="number">1</span>] = v23;</span><br><span class="line">opcode[v17*<span class="number">3</span>+<span class="number">2</span>] = v25;</span><br><span class="line">v17++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">    &#123;</span><br><span class="line">        swap(ENC+i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>); </span><br><span class="line">tea_decode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">    &#123;</span><br><span class="line">        swap(ENC+i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">8</span> || i == <span class="number">10</span>)</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%x"</span>, ENC[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;3bbcf9ea-2918-4fee-8a2e-201b47dfcb4e&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二届虎符CTF，分享一下逆向题解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>vnctf2021</title>
    <link href="https://bxb0.github.io/2021/03/18/vnctf2021/"/>
    <id>https://bxb0.github.io/2021/03/18/vnctf2021/</id>
    <published>2021-03-18T05:30:37.000Z</published>
    <updated>2021-08-08T09:56:23.606Z</updated>
    
    <content type="html"><![CDATA[<p>就对其中感觉有意思的2个逆向题做一下记录，也是复现，当时没做出来。<a id="more"></a></p><p>其中第一个是当时算法写不来，太弱了。另外一是app使用hook更改了密钥，但是我对程序重打包后，这个hook失效了，导致一直解密出错又找不到原因。</p><h2 id="FilpGame"><a href="#FilpGame" class="headerlink" title="FilpGame"></a>FilpGame</h2><p>整个程序就一个main函数。</p><p>输入长度要小于214，对输入的每2个先进行一个int(x, 16)操作，然后进行程序的关键操作，也就是奇数位才操作：</p><p><img src="/2021/03/18/vnctf2021/image-20210421134509045.png" alt="image-20210421134509045"></p><p>在进行的关键操作开始前就要求我们输入的每2个位进行hex.decode()操作后的值是递增序列，从后面可以知道，这里实际就是规定了我们输入坐标是顺序，递增。</p><p><img src="/2021/03/18/vnctf2021/image-20210421134750425.png" alt="image-20210421134750425"></p><p>后面就是关键处理输入的地方了，程序的关键，就是位操作。</p><p><img src="/2021/03/18/vnctf2021/image-20210421190532649.png" alt="image-20210421190532649"></p><p>先熟悉一个知识点：</p><ul><li><strong>x ^ 0 = x</strong></li><li><strong>x ^ 1 = !x</strong></li></ul><p>然后其实上面的就是操作一个16*16的矩阵，只不过用了16个word型数据的每一个bit位进行存储（真是个好想法），对输入坐标和它上下左右进行bit反转，0变1，1变0。</p><p>最后程序的比较就是整个16*16的矩阵全为1，这其实是一个点灯游戏/翻转游戏，典型的算法题了，但时间要求上宽松了不少。。</p><p>太弱了，写不来，比赛时也卡在了这里，赛后发现大家有的竟然直接是找了网上现成的脚本，搜索的重要性。。</p><p>看了wp，采用爆破第一行的所有可能（2^16），接着推出第二行的情况，依次进行下去，如果最后一行都是1则满足条件。</p><p>这种想法确实可行，而且实现起来也不难，其实就是把所有可能翻的情况穷举，然后找最小解。</p><p>而这种做法如果不用搜索来做的话，<strong>有一个问题，如何穷举第一行的所有情况呢，一个好办法：因为【0-2^16-1】每个数的二进制位都不一样，且只有16位，那么每次向右移位【0-15】，如果为1就反转，这样就实现了。</strong></p><p><img src="/2021/03/18/vnctf2021/image-20210421200351125.png" alt="image-20210421200351125"></p><p>最后整体代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span> = <span class="number">500</span>, cnt, flag;</span><br><span class="line"><span class="keyword">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">16</span>][<span class="number">16</span>], b[<span class="number">16</span>][<span class="number">16</span>], fi;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">1000</span>], tmp[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_hex</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt;= <span class="number">10</span> ? a<span class="number">-10</span>+<span class="number">65</span>:a+<span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">cnt++;</span><br><span class="line">tmp[fi++] = to_hex(y), tmp[fi++] = to_hex(x);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x1 = x+dx[i];</span><br><span class="line"><span class="keyword">int</span> y1 = y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(x1 &gt;= <span class="number">0</span> &amp;&amp; x1 &lt; <span class="number">16</span> &amp;&amp; y1 &gt;=<span class="number">0</span> &amp;&amp; y1 &lt; <span class="number">16</span>)</span><br><span class="line">b[x1][y1] ^= <span class="number">1</span>;  </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">16</span>); i++)</span><br><span class="line">&#123;</span><br><span class="line">cnt = <span class="number">0</span>, flag = <span class="number">0</span>, fi = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span>(tmp));</span><br><span class="line"><span class="built_in">memcpy</span>(b, a, <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i &gt;&gt; j)&amp;<span class="number">1</span>)</span><br><span class="line">filp(<span class="number">0</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j][k] == <span class="number">0</span>)</span><br><span class="line">filp(j+<span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[<span class="number">15</span>][j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt &lt; <span class="built_in">min</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(ans, tmp, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">min</span> = cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">min</span> == <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> enc[] = &#123;<span class="number">48885</span>, <span class="number">35772</span>, <span class="number">41193</span>, <span class="number">29456</span>, <span class="number">55568</span>, <span class="number">41901</span>,</span><br><span class="line"> <span class="number">52406</span>, <span class="number">19934</span>, <span class="number">13388</span>, <span class="number">15318</span>, <span class="number">26385</span>, <span class="number">34447</span>, <span class="number">7290</span>, <span class="number">33829</span>, <span class="number">27405</span>, <span class="number">6988</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">a[i][j] = (enc[i] &gt;&gt; (<span class="number">15</span>-j)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fun() &gt; <span class="number">0</span>)</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"not found!"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//2050608090A0B0C0D02131417191A1B1527282B2D2E2F213234363B3D36494C4D4E415456575C5D5E50626566686C6F6071787B7C72838587898C8D81949596999B9C9F95A8AAAEA0B1B3B4B7B1C2C3C4C6C9CBCEC0D4D7D9DBDCDED0E1E3E4E5E6E8E9ECEEEFE3F7F8FBF</span></span><br></pre></td></tr></table></figure><p>得到结果，最后md5一下。</p><p>又去搜集资料，可以看这个题作为参考<a href="https://blog.csdn.net/mjj1024/article/details/80208428" target="_blank" rel="noopener">filp game</a>。然后想了很久递归的写法，思想其实还是一样，从第一行开始，一行一行的确定都是1，若达不到就回溯，直到最后一行，然后检查是否全为1。</p><p>上面说的只是加了每一行操作完后的判断，但仍然是全搜，16*16的规模还是太大了，不可行。</p><p>开始改进，使用爆破一样的思想，从第二行开始，当前一行的同列位置为0时才继续下去，否则就回溯。</p><p><img src="/2021/03/18/vnctf2021/image-20210424094440844.png" alt="image-20210424094440844"></p><p>跑了一下改进后的，跑出一组解还是很快的，但要穷举后找到目标解，仍然要很久，，主要是这样搜索多了回溯的过程，<strong>对每一行要走的位置（当前一行的同列位置为0）进行了一个所有情况搜索。</strong></p><p>这样，也没有继续在这个搜索算法上继续去改进了，继续改进不就和爆破一样了。。所以说这类问题，规模大以后，采用穷举第一行的所有情况，然后根据第一行情况依次爆破出后面的行是很好的办法了。</p><p>贴一下搜索算法（跑过规模小一些的，是可以的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">5</span>]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;, min1 = <span class="number">999</span>, t;</span><br><span class="line"><span class="keyword">char</span> Map[<span class="number">16</span>][<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">to_hex</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt;= <span class="number">10</span> ? a+<span class="number">55</span>:a+<span class="number">48</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> dx = x + c[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">int</span> dy = y + c[<span class="number">1</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(dx &lt; <span class="number">0</span> || dy &lt; <span class="number">0</span> || dx &gt;= <span class="number">16</span> || dy &gt;= <span class="number">16</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">        Map[dx][dy] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(Map[<span class="number">15</span>][i] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s &gt; <span class="number">107</span>)<span class="comment">//剪枝 </span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(y == <span class="number">16</span>)<span class="comment">//剪枝 </span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">    <span class="keyword">if</span>(Map[x<span class="number">-1</span>][k] != <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">1</span>)<span class="comment">//剪枝 </span></span><br><span class="line"><span class="keyword">if</span>(Map[x<span class="number">-1</span>][y] == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">goto</span> next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">turn</span>(x, y);<span class="comment">//翻转 </span></span><br><span class="line"></span><br><span class="line">ans[<span class="number">2</span>*s] = to_hex(y), ans[<span class="number">2</span>*s+<span class="number">1</span>] = to_hex(x), ans[<span class="number">2</span>*s+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(ans);</span><br><span class="line"><span class="comment">//printf("%d\n", s);</span></span><br><span class="line"></span><br><span class="line">dfs(x, y+<span class="number">1</span>, s+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">turn</span>(x, y);<span class="comment">//回溯 </span></span><br><span class="line">next:</span><br><span class="line">ans[<span class="number">2</span>*s] = <span class="number">0</span>, ans[<span class="number">2</span>*s+<span class="number">1</span>] = <span class="number">0</span>, ans[<span class="number">2</span>*s+<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    dfs(x, y+<span class="number">1</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Map[i][j]);</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(min1 &lt;= <span class="number">16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//printf("%d\n", min1);</span></span><br><span class="line">        <span class="comment">//puts(ans);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本功还是不能丢。</p><h2 id="Crackme1"><a href="#Crackme1" class="headerlink" title="Crackme1"></a>Crackme1</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就对其中感觉有意思的2个逆向题做一下记录，也是复现，当时没做出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>web学习之刷题</title>
    <link href="https://bxb0.github.io/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/"/>
    <id>https://bxb0.github.io/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/</id>
    <published>2021-03-12T15:15:18.000Z</published>
    <updated>2022-01-20T08:50:18.762Z</updated>
    
    <content type="html"><![CDATA[<p>从一些web题来了解一下web相关知识。</p><a id="more"></a><h2 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h2><h3 id="WarmUp"><a href="#WarmUp" class="headerlink" title="WarmUp"></a>WarmUp</h3><p>从注释中看到source.php，尝试访问，获取源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在源代码中又看到了hint.php，自然的又去访问看看。提示flag在ffffllllaaaagggg文件中，可怎么到达呢。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415134759029.png" alt="image-20210415134759029"></p><p>然后就是细分析源代码：</p><p>先查一下代码中出现但不熟悉的函数：</p><blockquote><p><strong>in_array(search, array, type)</strong></p><ul><li>搜索array中是否存在search字符串。如果 <em>search</em> 参数是字符串，且 <em>type</em> 参数设置为 true，则搜索区分大小写。</li></ul><p><strong>mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] ) : string</strong></p><ul><li>函数返回字符串的一部分，之前我们学过 substr() 函数，它只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</li></ul><p><strong>mb_strpos (haystack , needle )</strong></p><ul><li>haystack：要被检查的字符串；needle：要搜索的字符串。查找字符串needle在字符串haystack中首次出现的位置。</li></ul></blockquote><p>之后分析源代码，先检查了输入的file参数，如果不为空，是字符串，且通过了checkFile函数检查，则将我们输入的file参数进行文件包含。从hint.php知道了flag文件名字，这里又有include，其实就可以往文件包含漏洞考虑了，将我们的flag文件包含到网页中。</p><p>从checkFile函数中分析知道，要返回True的话，我们请求的参数字符串里必须带有白名单的中的字符串[‘source.php’, ‘hint.php’]中一个，第一次是直接比较，第二次取<strong>?</strong>之前的字符串进行比较，第三次将其进行一次urldecode后再取<strong>?</strong>之前的字符串进行比较。要利用这个漏洞来包含flag文件的话，显然不是走一个判断了。</p><p>初接触web，不懂的很多，然后就是去看wp学习了。</p><p>首先看到大家的做法有2种：</p><p>1.直接走第二个判断，开始输入一个白名单中的字符串，然后拼接一个要相对路径到达flag文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php?/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>2.走第三个判断，同第一个输入，但对hint.php后的问号二次urlencode，因为浏览器获取到我们输入的参数后会自动进行一次urldecode。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=hint.php%<span class="number">253</span>f/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>这两种写法的区别就在于是否对问号进行urlencode。但这是为什么呢，这其实是windows与linux环境不同导致的。</p><p>这个题来自于ChaMd5安全团队2018发现的<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF%2FjxV%2F9%2FcEb5pShRgewJe%2FttJn2gIlIyGF%2FbsgGmzcbsV%2BLmMK#rd" target="_blank" rel="noopener">phpmyadmin4.8.1后台getshell</a>的LFI，当时发现这个漏洞的环境是windows，而这个题目的环境是linux。</p><p>在windows中，?是一个保留字符，文件名不能包含问号，如果我们的路径包含了?，这将被视为一个无效的路径，所以要利用urlencode对问号进行二次编码，避免在最后的包含路径中出现?号，而又在第三次比较时经过解码后进行比较的是问号。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415172253830.png" alt="image-20210415172253830"></p><p>而在linux中，一个文件名中是可以有问号的。</p><p>这个题用include包含时，也是把第一个/之前的内容看做个文件目录了。即<strong>hint.php?</strong>看成一个目录。</p><p>所以本题要是在windows环境下的话，就必须通过第三个判断，进行二次urlencode才能打通。</p><p>最后，这个include，可以这样无线包含下去吗。。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415172913575.png" alt="image-20210415172913575"></p><h3 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h3><p>从题目名字可以看出考点是sql注入。</p><p>首先测试看一下sql注入类型和引号闭合类型：<br>输入用户名：1’，密码：222，从报错看出单引号闭合。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413221249767.png" alt="image-20210413221249767"></p><p>闭合引号，构造永真尝试登陆：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413221429789.png" alt="image-20210413221429789"></p><p>登录成功，直接看到flag。</p><h3 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h3><p>首先，还是按照之前做过的一个sql注入学到的，测试一下是否有注入与引号闭合类型。</p><p>可以知道是单引号闭合：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210409230543339.png" alt="image-20210409230543339"></p><p>测试一下数据库与前端显示的通道：发现对相关查询指令的大小写都进行了过滤。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210409230808679.png" alt="image-20210409230808679"></p><p>为了多收集信息，接下来再尝试使用order by 来获得列数，在以第一列与第二列排序时正常输出，但第三列报错，说明有2列。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413183501418.png" alt="image-20210413183501418"></p><p>​    </p><p>然后继续尝试报错注入收集信息，有<strong>updatexml</strong>与<strong>extractvalue</strong>，由上面知道，这里过滤了update，所以使用extractvalue：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413191438306.png" alt="image-20210413191438306"></p><p>这时候即时得到了上面的信息，但又怎么利用呢。。</p><p>堆叠注入，一次执行多条由 ; 分隔的指令。</p><p>查询当前正在使用过的数据库的表：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413191836676.png" alt="image-20210413191836676"></p><p>2个表，继续查询一下他们的字段，看到flag字段：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413192003223.png" alt="image-20210413192003223"></p><p>问题又来了，不能使用select语句，那这里如何查询字段的值呢。。</p><p><strong>第一个方法：使用<a href="https://blog.csdn.net/JesseYoung/article/details/40785137?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">mysql查询语句-handler</a></strong></p><p>首先打开一个句柄：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">handler</span> handler_table <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure><p>查看表数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">handler</span> handler_table <span class="keyword">read</span> <span class="keyword">first</span>;</span><br><span class="line"><span class="keyword">handler</span> handler_table <span class="keyword">read</span> <span class="keyword">next</span>;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210413193146361.png" alt="image-20210413193146361"></p><p><strong>第二种方法：因为没有禁用rename与alert，所以可以修改表结构。</strong></p><p>因为有一个默认表words，我们输入的inject参数也是传入其中进行查询，所以我们将存放flag的表改为words，并修改flag字段为id字段或者加入id字段，最后通过万能密码查询默认的表就得到flag了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">rename</span> <span class="keyword">to</span> words1;<span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`1919810931114514`</span> <span class="keyword">rename</span> <span class="keyword">to</span> words; <span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">change</span> flag <span class="keyword">id</span> <span class="built_in">varchar</span>(<span class="number">50</span>);%23</span><br></pre></td></tr></table></figure><p><strong>最后这个题，出现这个漏洞的原因是使用了multi_query()执行一条或多条sql语句。</strong></p><h3 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h3><p>从注释中的提示可以看到，通过get方式获取参数cat，并比较了cat参数值是不是字符串dog：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415130344338.png" alt="image-20210415130344338"></p><p>好突然，直接传入对应的参数，得到flag。。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415130430173.png" alt="image-20210415130430173"></p><h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h3><p>看wp后复现的（。。</p><p>就一个输入框，还是先尝试了一下之前的方法，输入1’是否报错，报错类型，或者看输入1与1+1的结果是否相等，但这里都无果。但是发现回显只有3种，1.什么也没有；2.Nonono.; 3.Array (    [0] =&gt; 1 )。</p><p>且可以发现，当输入为0，没有显示，纯字符串也没有显示，字符串开头加数字也是没有显示，这其实就可以总结为输入0，没有回显，因为php种，纯字符串或者字符串开头加数字都是会转化为0。</p><p>然后当输入数字时，就会有Array (    [0] =&gt; 1 )这样的回显，且都是1，是dump_var显示的。。</p><p>从以上可以猜测查询语句中有 || 号，这输出结果只有0或1。</p><p>一，官方题解：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1;<span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span></span><br><span class="line">构造成<span class="keyword">select</span> <span class="number">1</span>;<span class="keyword">set</span> sql_mode=PIPES_AS_CONCAT;<span class="keyword">select</span> <span class="number">1</span> || flag <span class="keyword">FROM</span> Flag，其中PIPES_AS_CONCAT能将 || 视为字符串连接符而非或运算符。这种模式下使用字母连接会报错，使用数字连接才会查询出数据，因为这个 || 相当于是将 <span class="keyword">select</span> <span class="number">1</span> 和 <span class="keyword">select</span> flag <span class="keyword">from</span> flag 的结果拼接在一起。</span><br></pre></td></tr></table></figure><p>二，非预期解：</p><p>因为没有过滤*，所以可以通过：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*,1</span><br></pre></td></tr></table></figure><p>即查询表中所有字段后再查询一个0或1。</p><p>贴一下用预期解查询的结果：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210415202556117.png" alt="image-20210415202556117"></p><h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h3><p>从提示初始页面，想到index.php。</p><p>访问index.php发现又跳到1.php页面了，但可以看到index.php，从响应头中看到flag，只是状态码为302。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210312231932538.png" alt="image-20210312231932538"></p><p>对于状态码302，可以简单理解为该资源原本存在，但被临时改变了位置。一般被替换了位置后，我们再访问的时候就会自动重定向到一个设置好的网页，且改被设置好的网页在响应头的Location又给出，如上图。</p><h3 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h3><p>考了一个robots.txt的协议，首先读了一下题目提供的关于这个的英文文档，总结一下是：在遵循这个协议的搜索引擎访问一个网站时，首先要做的就是访问该网站下的robots.txt文件，若没有的话则表示可以访问该网站下的所有内容，若发现的话，就读取这个文件，并遵守这个文件中的协议指令只访问被允许访问的内容。</p><p>举一个例子：</p><blockquote><p>禁止所有搜索引擎访问本网站的所有内容：<br><strong>User-agent: *</strong></p><p><strong>Disallow: /</strong></p></blockquote><p>所以说这个文件限制了不被允许访问的文件路径，这其实也就间接泄露了这个网站的文件目录结构。</p><p>访问robots.txt得到：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313101940154.png" alt="image-20210313101940154"></p><p>访问fl0g.php得到flag。</p><h3 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h3><p>我不知道这个版本的php有这个漏洞，也没有意识去github搜相关版本看是否有相关漏洞。</p><p>这里直接看了wp，知道有一个远程命令执行漏洞，网上利用方式也是很多，目前也不会自己写利用，</p><p>直接使用现成的打了一下。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313104841755.png" alt="image-20210313104841755"></p><h3 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h3><p>首先记一下2个包含的区别：</p><ul><li>require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。</li><li>include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。</li></ul><p>文件包含漏洞。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313152324318.png" alt="image-20210313152324318"></p><p>使用了strstr函数匹配<strong>“php://”</strong>字符串进行过滤。</p><blockquote><p>php://input</p><p>将要传递的输入的内容直接以post方式提交即可</p></blockquote><p>要做的就是绕过上面的字符串过滤，可以使用strstr（）函数匹配大小写的特性。</p><p>简单使用<strong>Php://input</strong>即可，然后发现我火狐里用的这个HackBar在Post data里输入数据时不带键值形式，就会无效，相当于没有输入。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808171708669.png" alt="image-20210808171708669"></p><p>所以使用burpsuit抓包修改，添加post data，首先使用ls命令获取当前目录下的文件。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808172429835.png" alt="image-20210808172429835"></p><p>然后<strong>cat flag</strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313152604534.png" alt="image-20210313152604534"></p><p>接下来是看wp学习。</p><p>这个题还可以使用data://伪协议。</p><p>使用方法：<strong>data://text/plain;base64,base64编码后的数据</strong>（也就是我们要执行的命令）</p><p>或者：<strong>data://text/plain,传递的数据</strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313153729207.png" alt="image-20210313153729207"></p><p>另外还有可以传入一句话木马。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//111.200.241.244:53435/?page=data://text/plain,%3C?php%20@eval($_POST[root]);%20?%3E</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313155834858.png" alt="image-20210313155834858"></p><h2 id="第五届XMan选拔"><a href="#第五届XMan选拔" class="headerlink" title="第五届XMan选拔"></a>第五届XMan选拔</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>输入2个变量即可。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808173824918.png" alt="image-20210808173824918"></p><h3 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h3><p>从这个题简单的去了解了一下php中反序列化。</p><p>题目使用highlight_file(__FILE__); 显示出了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMAN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> $para;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="string">"Hel"</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;para = <span class="string">"xctfer"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;check = <span class="keyword">new</span> Filter;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;para) &amp;&amp; <span class="keyword">$this</span>-&gt;check-&gt;vaild(<span class="keyword">$this</span>-&gt;class)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span>  <span class="keyword">$this</span>-&gt;class (<span class="keyword">$this</span>-&gt;para);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'what?Really?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hel</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">"Hello bro, I guess you are a lazy "</span>.<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">vaild</span><span class="params">($code)</span></span>&#123;</span><br><span class="line">        $pattern = <span class="string">'/[!|@|#|$|%|^|&amp;|*|=|\'|"|:|;|?]/i'</span>;</span><br><span class="line">        <span class="keyword">if</span> (preg_match($pattern, $code))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'xctf'</span>]))&#123;</span><br><span class="line">    unserialize($_GET[<span class="string">'xctf'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="keyword">new</span> XMAN;</span><br><span class="line"></span><br><span class="line">&#125; Hello bro, I guess you are a lazy xctfer</span><br></pre></td></tr></table></figure><p>在此前的了解中，对反序列化只知道2个函数unserialize和serialize，及unserialize函数进行反序列前，若代码中有__wakeup魔法函数，则会先执行__wakeup函数；相似的，serialize会先执行__sleep函数，进行对象的清理。当然，也知道序列化的过程是将代码中的对象或数组等变成二进制字节流的形式（其中对象不会序列化方法），方便存储起来与网络中的传输。而对于反序列化的作用只知道是还原，但还原了做什么呢，还原了怎么使用的呢，也正是这个不清楚，我开始看这个题好多疑问😂，如，为什么我随便传入一个序列化字符串去反序列化后报错呢，且调试发现根本就不执行那个魔法函数，就好像传入什么，都没有反馈。</p><p>而后，我去随便找了一篇讲php反序列化的文章看了看，一切就明朗了。</p><p><strong>反序列化的核心是对我们之前通过序列化保存的对象进行重建，而对象的方法是不会进行序列化的，所以我们在反序列化之前，代码中要有反序列化对象的类已经定义。（反序列化时不会调用该类的构造函数！！！）</strong></p><p>所以反序列化，我的理解是在程序中恢复序列化之前的对象，而参数值我们是可以自己构造的。这也有出现了漏洞点（用户的输入。</p><p>另外在<strong>PHP5&lt;5.6.25，PHP7&lt;7.0.10</strong>，有一个CVE-2016-7124：</p><p><strong>当进行反序列化的字符串中标记的属性个数大于该对象的实际属性个数时，魔法函数__wakeup就不会执行了。这个一些题目要绕过__wakeup函数执行的方法。</strong></p><p>而再来看这个题，我们发现唯一能利用的只有一个__wakeup函数，它的主要作用就是对一个类传入参数进行实例化。其中并没有可以执行命令或者读文件的地方，但这个类名和传递的参数是可以我们自己决定的。</p><p>这里是去问了web的朋友，我们可以自己决定类名和参数去实例化一个类，那这个题其实就是考我们去找php中能读文件的原生类来利用，其中去执行构造函数。</p><p>利用SLP类中的类读文件：</p><table><thead><tr><th align="center">类</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">FilesystemIterator</td><td align="center">找目录</td></tr><tr><td align="center">SplFileObject</td><td align="center">读文件</td></tr></tbody></table><p>首先使用FilesystemIterator来查看目录情况：</p><p>复制题目中的XMAN类自己修改为指定的类和参数后new一个对象，打印出来。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMAN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class=<span class="string">'FilesystemIterator'</span>;</span><br><span class="line">    <span class="keyword">public</span> $para=<span class="string">"/var/www/html"</span>;</span><br><span class="line">    <span class="keyword">public</span> $check;</span><br><span class="line">    &#125;</span><br><span class="line">$ans  = <span class="keyword">new</span> XMAN();</span><br><span class="line"><span class="keyword">echo</span> serialize($ans);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到：<strong>O:4:”XMAN”:3:{s:5:”class”;s:18:”FilesystemIterator”;s:4:”para”;s:13:”/var/www/html”;s:5:”check”;N;}</strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808184159850.png" alt="image-20210808184159850"></p><p>同上，在<strong>/var/www/html/xxxXXXmMManNNn</strong>下继续找：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808184259568.png" alt="image-20210808184259568"></p><p>最后使用<strong>SplFileObject</strong>类来读f1a4文件：</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210808184410606.png" alt="image-20210808184410606"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从一些web题来了解一下web相关知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://Bxb0.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Andriod之CTF学习</title>
    <link href="https://bxb0.github.io/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>https://bxb0.github.io/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-05T07:09:15.000Z</published>
    <updated>2022-01-20T08:51:20.552Z</updated>
    
    <content type="html"><![CDATA[<p>从一些Android题目来学习相关知识。</p><a id="more"></a><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h3><p>来到关键事件，取出输入后传入a方法，在a方法又把输入传入了实例化的一个a类对象中的a方法。全是a。。最后调用native层的ncheck函数。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205171126725.png" alt="image-20210205171126725"></p><p>a类中的a方法一个换表的base64，native层ncheck函数进行简单加密后与密文对比。</p><p>native层有JNIEnv方法，ida不会自动识别，将指定变量改一下类型就行了。<strong>JNIEnv*</strong></p><p>用一下ida-python。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">base = [<span class="string">'i'</span>, <span class="string">'5'</span>, <span class="string">'j'</span>, <span class="string">'L'</span>, <span class="string">'W'</span>, <span class="string">'7'</span>, <span class="string">'S'</span>, <span class="string">'0'</span>, <span class="string">'G'</span>, <span class="string">'X'</span>, <span class="string">'6'</span>, <span class="string">'u'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'c'</span>, <span class="string">'v'</span>, <span class="string">'3'</span>, <span class="string">'n'</span>, <span class="string">'y'</span>, <span class="string">'4'</span>, <span class="string">'q'</span>, <span class="string">'8'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'2'</span>, <span class="string">'Q'</span>, <span class="string">'+'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'k'</span>, <span class="string">'Y'</span>, <span class="string">'g'</span>, <span class="string">'K'</span>, <span class="string">'O'</span>, <span class="string">'I'</span>, <span class="string">'T'</span>, <span class="string">'/'</span>, <span class="string">'t'</span>, <span class="string">'A'</span>, <span class="string">'x'</span>, <span class="string">'U'</span>, <span class="string">'r'</span>, <span class="string">'F'</span>, <span class="string">'l'</span>, <span class="string">'V'</span>, <span class="string">'P'</span>, <span class="string">'z'</span>, <span class="string">'h'</span>, <span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'w'</span>, <span class="string">'9'</span>, <span class="string">'B'</span>, <span class="string">'H'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'p'</span>, <span class="string">'E'</span>, <span class="string">'a'</span>, <span class="string">'J'</span>, <span class="string">'R'</span>, <span class="string">'Z'</span>, <span class="string">'N'</span>]</span><br><span class="line">base1 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">s = <span class="string">'MbT3sQgX039i3g==AQOoMQFPskB1Bsc7'</span></span><br><span class="line">s = list(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//<span class="number">2</span>):</span><br><span class="line">    s[<span class="number">2</span>*i], s[<span class="number">2</span>*i+<span class="number">1</span>] = s[<span class="number">2</span>*i+<span class="number">1</span>], s[<span class="number">2</span>*i]</span><br><span class="line">s = s[<span class="number">16</span>:<span class="number">32</span>]+s[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">        ans += [base.index(i)]</span><br><span class="line">flag = [base1[i] <span class="keyword">for</span> i <span class="keyword">in</span> ans]</span><br><span class="line">flag = base64.b64decode(<span class="string">''</span>.join(flag)+<span class="string">'=='</span>)</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#flag&#123;just_ANot#er_@p3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h3><p>这个题涉及的知识挺多，对初学安卓挺不错的。</p><p>从010editor发现了ANDROID BACKUP，安卓备份文件。开始出现新的知识了，找了一篇文章讲这个的学习了一下，讲的真好。<a href="https://blog.csdn.net/qq_31387043/article/details/51452782" target="_blank" rel="noopener">Android中allowBackup</a>，知道了这个可以用android-backup-extractor(abe)工具来解析ab文件。</p><p>对于ab文件，前24字节类似文件头的东西，若文件是加密的话，可以在前24字节中看见AES-256标志，否则出现none字符。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205222314992.png" alt="image-20210205222314992"></p><p>使用<code>java -jar abe.jar unpack 1.ab 1.tar</code>解析文件，这样得到一个tar压缩包。解压后发现有一个apk文件和一些数据库文件。</p><p>上学期学习了java和mysql这2门课程，真是好。hha。。</p><p>看了看反编译apk中的代码，发现创建表操作和其中包含的flag文件：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205222830438.png" alt="image-20210205222830438"></p><p>再加上外面的数据库文件，可以猜测我们的flag就那些数据库中。</p><p>查询相关资料，知道了这个要用DB Browser for SQLite中的SQLCiper的打开，下载后准备打开数据库文件发现要密码。这也和猜想的一样，题目就是要让我们找这个密码。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205223604786.png" alt="image-20210205223604786"></p><p>对于key，通过传入Stranger和123456经过a包中的a，b类中的方法加密。a类中的方法就是字符串截取操作，b类中的方法一个MD5一个SHA-1。程序是可以调试的，所以直接调试得到key。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205223928065.png" alt="image-20210205223928065"></p><p>打开数据库得到一串base64字符串，解密得到flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205224023165.png" alt="image-20210205224023165"></p><h3 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h3><p>找到主活动，就一个变表的base64编码，python简单写一下就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">base = [<span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>,</span><br><span class="line">        <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>,</span><br><span class="line">        <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'e'</span>,</span><br><span class="line">        <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>]</span><br><span class="line">enc = <span class="string">'5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs='</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">        ans += [base.index(i)]</span><br><span class="line">ans = <span class="string">''</span>.join([<span class="string">'&#123;:0&gt;6&#125;'</span>.format(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> ans])</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans)//<span class="number">8</span>):</span><br><span class="line">    flag += chr(int(ans[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)], <span class="number">2</span>))</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#05397c42f9b6da593a3644162d36eb01</span></span><br></pre></td></tr></table></figure><h3 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h3><p>简单考了java中对动态链接库的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = list(<span class="string">'f72c5a36569418a20907b55be5bf95ad'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//<span class="number">2</span>):</span><br><span class="line">    s[<span class="number">2</span>*i], s[<span class="number">2</span>*i+<span class="number">1</span>] = s[<span class="number">2</span>*i+<span class="number">1</span>], s[<span class="number">2</span>*i]</span><br><span class="line">flag = s[len(s)//<span class="number">2</span>:len(s)] + s[<span class="number">0</span>:len(s)//<span class="number">2</span>]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br><span class="line"><span class="comment">#90705bb55efb59da7fc2a5636549812a</span></span><br></pre></td></tr></table></figure><h3 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h3><p>就是读繁琐的java代码，理解程序加密流程。</p><p>考点：java代码的阅读能力；简单的置换加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'wigwrkaugala'</span></span><br><span class="line">base = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">a = [<span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>,</span><br><span class="line">     <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>,</span><br><span class="line">     <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    ans += [a[base.index(i)]]</span><br><span class="line">print(ans)</span><br><span class="line">b = [<span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>,</span><br><span class="line">         <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>,</span><br><span class="line">         <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">25</span>]</span><br><span class="line">base = list(base)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    flag += base[b[i]]</span><br><span class="line">    b = b[<span class="number">1</span>:len(b)] + [b[<span class="number">0</span>]]</span><br><span class="line">    base = base[<span class="number">1</span>:len(base)] + [base[<span class="number">0</span>]]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br><span class="line"><span class="comment">#venividivkcr</span></span><br></pre></td></tr></table></figure><h3 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h3><p>输入字符和和so层函数获得的字符串经过md5加密后进行比较。</p><p>从这个题练习了下调试so。注意：安卓模拟器不能调试arm架构的so文件，还是最好用真机来调试native层。</p><p>首先是直接模拟程序跑flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">46</span>,  <span class="number">54</span>,  <span class="number">66</span>,  <span class="number">76</span>,  <span class="number">95</span>, <span class="number">191</span>, <span class="number">224</span>,  <span class="number">58</span>, <span class="number">168</span>, <span class="number">195</span>, </span><br><span class="line">   <span class="number">32</span>,  <span class="number">99</span>, <span class="number">137</span>, <span class="number">183</span>, <span class="number">192</span>,  <span class="number">28</span>,  <span class="number">29</span>,  <span class="number">68</span>, <span class="number">194</span>,  <span class="number">40</span>, </span><br><span class="line">  <span class="number">127</span>, <span class="number">237</span>,   <span class="number">2</span>,  <span class="number">14</span>,  <span class="number">93</span>, <span class="number">102</span>, <span class="number">143</span>, <span class="number">152</span>, <span class="number">181</span>, <span class="number">183</span>, </span><br><span class="line">  <span class="number">208</span>,  <span class="number">22</span>,  <span class="number">77</span>, <span class="number">131</span>, <span class="number">248</span>, <span class="number">251</span>,   <span class="number">1</span>,  <span class="number">67</span>,  <span class="number">71</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"Hello Ph0en1x"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v6 = <span class="built_in">strlen</span>(b);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> ( i = <span class="keyword">sizeof</span>(a) - <span class="number">2</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v3 = a[i] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *v7 = &amp;a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> v4 = i % v6;</span><br><span class="line">a[i] = (b[v4] ^ (v3 - *v7)) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>] = (a[<span class="number">0</span>] ^ <span class="number">0x48</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(a[i]+<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;Ar3_y0u_go1nG_70_scarborough_Fair&#125;</span></span><br></pre></td></tr></table></figure><p>然后就是调试了。简单记一下流程：</p><p>准备工作：</p><p>1.解包程序，<strong>apktool.bat d a.apk</strong>。在AndroidManifest.xml中的<strong>application</strong>后面加上android:debuggable=”true”。</p><p>2.重新打包程序，<strong>apktool.bat b a</strong>，这时候在a文件夹中的dist下的就是目标重新打包后的程序。</p><p>3.对重打包后的apk进行签名。</p><ul><li>生成签名文件：keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</li><li>进行签名：jarsigner -verbose -keystore abc.keystore -signedjar b.apk a.apk abc.keystore</li></ul><p>接下来把程序装入模拟器，运行，进行调试，操作和常规的调试elf文件差不多了。</p><p>以调试模式启动程序：<strong>adb shell am start -D -n 包名/.活动名</strong></p><p>端口转发：<strong>adb forward tcp:23946 tcp:23946</strong></p><p>因为我用的模拟器，这里用了x86架构的so文件才调试上，虽然有点不能理解，为什么模拟器里程序都能运行，说明对so文件是运行了的啊，那调试怎么就不行呢（<strong>在之后突然想到的想法补充：可能是题目有对应结构的so文件，只是没提供给我们</strong>），且android_server在模拟器里也可以运行的。。其实这里的提示可以看见它调用的是<strong>1/lib/x86/下的so</strong>。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210206212259169.png" alt="image-20210206212259169"></p><p>嗯，，初学一个东西开始总是有很多疑惑的，等接触多了来慢慢理解。</p><p>ida中成功附加上程序后，在Modules模块找到我们要调试的so文件，再继续找到我们要调试的函数。</p><p>得到结果：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210206210632330.png" alt="image-20210206210632330"></p><h3 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h3><p>出现新知识点：so文件中的函数为动态注册。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207182454660.png" alt="image-20210207182454660"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207182859376.png" alt="image-20210207182859376"></p><p>然后就是一个加上文件读写操作的异或加密。</p><p>2个涉及的函数功能：通常连用来计算出一个文件中数据的字节数。</p><ul><li>C 库函数 <strong>int fseek(FILE *stream, long int offset, int whence)</strong> 设置流 <strong>stream</strong> 的文件位置为给定的偏移 <strong>offset</strong>，参数 offset 意味着从给定的 <strong>whence</strong> 位置查找的字节数。</li><li>C 库函数 <strong>long int ftell(FILE *stream)</strong> 返回给定流 stream 的当前文件位置。</li></ul><p>接下来解题部分：直接输入密文值，在文件中找到异或后的值即是flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207184727271.png" alt="image-20210207184727271"></p><h3 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h3><p>题目得到flag的难度不大，但涉及的知识还需要多学习。</p><p>jadx中发现没有dex文件，从AndroidMainfest.xml看到：NativeActivity，安卓进行ndk开发使用的，所以应该是转战so文件中了。<img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/ncjKwbuX1qBF6ke.png" alt="image-20210208171101099"></p><p>找到android_main函数，首先是进行解密了2个字符串，打印出来就是app包路径相关的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208171841729.png" alt="image-20210208171841729"></p><p>然后从打印的log，可以帮助识别程序的功能和流程。就是在10s内摇动手机100次，然后会使用这之间的表示次数的数据来解密一些数据代码：就是把enc分为10组，然后前8组分别和9, 19, 29…异或解密，后2组和89异或解密。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172040397.png" alt="image-20210208172040397"></p><p>然后解压缩数据，写入文件。从上面打印出的路径信息，可以猜测这个就是生成一个dex文件。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172227628.png" alt="image-20210208172227628"></p><p>仿照程序逻辑使用idapython解密数据后写入文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">addr = <span class="number">0x07004</span></span><br><span class="line">length = <span class="number">0x3CA10</span></span><br><span class="line">n = length//<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">    a = get_byte(addr+i)</span><br><span class="line">    b = i//n</span><br><span class="line">    b = <span class="number">8</span> <span class="keyword">if</span> b &gt; <span class="number">8</span> <span class="keyword">else</span> b </span><br><span class="line">    c = b*<span class="number">10</span>+<span class="number">9</span></span><br><span class="line">    data += [a^c]</span><br><span class="line">data = bytes(data)</span><br><span class="line">f = open(<span class="string">'ans.Z'</span>, <span class="string">'wb'</span>)</span><br><span class="line">f.write(data)</span><br><span class="line">f.close()</span><br><span class="line">print(<span class="string">"-------success-----------"</span>)</span><br></pre></td></tr></table></figure><p>然后就是花了点时间的的uncompress操作，试了试linux下的发现不行。然后搜索文件头：<strong>78 9c</strong>，发现可以使用<a href="http://aluigi.org/mytoolz/offzip.zip" target="_blank" rel="noopener">Aluigi’s offzip</a> ：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172543745.png" alt="image-20210208172543745"></p><p>提取出文件其中的数据，得到一个dex文件：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175926442.png" alt="image-20210208175926442"></p><p>分析dex文件。发现有很多id，在res\values\public.xml中找到对应id的name，然后再到strings中找到对应name的字符串。对其注释了一下：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172846985.png" alt="image-20210208172846985"></p><p>看了一圈后，可以知道我们输入的经过一种加密算法后与密文比较，而<strong>I have a male fish and a female fish.</strong>是key，看到只是取了它的32位，然后是key判断。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208173320567.png" alt="image-20210208173320567"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208173332255.png" alt="image-20210208173332255"></p><p>开始从字符串fish以为是blowfish加密，但简单看了下流程，完全对不上。</p><blockquote><p><strong>blowfish是加密64bit为数据，密钥也是64bit位。把密文分为每8个字节一组，然后一组分成2个部分，进行轮函数加密。</strong></p></blockquote><p>但这里是每16个字节一组，且加密流程也不一样：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175231246.png" alt="image-20210208175231246"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175306552.png" alt="image-20210208175306552"></p><p>最后，翻了一下这个加密中的数据用来搜索下找找相关的加密算法。</p><p>从最顶部的数据，google结果：<a href="https://xz.aliyun.com/t/5807" target="_blank" rel="noopener">TwoFish</a></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175435115.png" alt="image-20210208175435115"></p><p>然后使用python解密一下：因为33位，不是16的倍数，用0补齐成了48位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twofish <span class="keyword">import</span> Twofish</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">-120</span>, <span class="number">77</span>, <span class="number">-14</span>, <span class="number">-38</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">-42</span>, <span class="number">44</span>, <span class="number">0xE0</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">0x1F</span>, <span class="number">24</span>, <span class="number">-91</span>, <span class="number">0x90</span>, <span class="number">-83</span>, <span class="number">0x40</span>, <span class="number">-83</span>, <span class="number">0x80</span>, <span class="number">84</span>, <span class="number">5</span>, <span class="number">-94</span>, <span class="number">-98</span>, <span class="number">-30</span>, <span class="number">18</span>, <span class="number">70</span>, <span class="number">-26</span>, <span class="number">71</span>, <span class="number">5</span>, <span class="number">-99</span>, <span class="number">-62</span>, <span class="number">-58</span>, <span class="number">0x75</span>, <span class="number">29</span>, <span class="number">-44</span>, <span class="number">6</span>, <span class="number">0x70</span>, <span class="number">-4</span>, <span class="number">81</span>, <span class="number">84</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">-51</span>, <span class="number">0x5F</span>, <span class="number">-34</span>, <span class="number">12</span>, <span class="number">0x2F</span>, <span class="number">77</span>]</span><br><span class="line">enc = [i&amp;<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> enc]</span><br><span class="line">enc = bytes(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="string">'I have a male fish and a female '</span>.encode() <span class="comment">#bytes类型</span></span><br><span class="line"></span><br><span class="line">T = Twofish(key)</span><br><span class="line">flag = <span class="string">b''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)//<span class="number">16</span>):</span><br><span class="line">    flag += T.decrypt(enc[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)])</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#qwb&#123;TH3y_Io&lt;e_EACh_OTh3r_FOrEUER&#125;</span></span><br></pre></td></tr></table></figure><p>最后是做完题看了别人wp学习，发现：</p><ul><li>那个uncompress操作其实可以直接使用python的zlib模块，<strong>zlib.decompress(data)</strong> 就可以了。</li><li>可以把dex合成新的apk文件运行，接下来操作一下。</li></ul><p>dex合成新的apk文件：</p><p>1.把之前的app解包。</p><p>2.把<strong>AndroidManifest.xml</strong>中的android:hasCode=”false”属性去掉，默认为True。原因：之前的app是用c++开发的，app中并不包含java代码，所以把这个属性设置为False。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208185306706.png" alt="image-20210208185306706"></p><p>3.把<strong>AndroidManifest.xml</strong>中activity的android:name改为当前包和MainActivity。</p><p>4.把之前得到的dex文件改名为classes.dex放到解包目录下。</p><p>5.重新打包，并签名。</p><p>成功：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208190250967.png" alt="image-20210208190250967"></p><h3 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h3><p>找到触摸响应的地方，可以看到<strong>sorted flag</strong>相关字符串，然后上面的getsna方法是得到汉字字符的unicode编码进行一个从小到大的选择排序，最后比较。</p><p>这里从排序结果后的汉字编码结果可以推出未经过排序后的值。</p><p>最后按照从字符串的提示，把汉字结果再转回unicode编码再套上flag{}即是。</p><h3 id="基础android"><a href="#基础android" class="headerlink" title="基础android"></a>基础android</h3><p>看了下程序逻辑，解出第一个密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">107</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>)]</span><br></pre></td></tr></table></figure><p>然后进入MainActivity2把第二次的输入作为参数发送了一个广播：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151141668.png" alt="image-20210220151141668"></p><p>继续跟到接受广播的地方，看到又开始了一个新的活动。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151639862.png" alt="image-20210220151639862"></p><p>但看了后面的NextContent也没有验证图片显示码的地方，但是读了下代码，功能就是取出app中的资源文件中的timg_2.zip作为图片替换原来的图片。直接在jeb的Assets找到该文件，打开即是。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151914447.png" alt="image-20210220151914447"></p><p>其实，既然是NextContent活动直接更新了有flag的图片，直接adb启动指定的活动，也可以得到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.example.test.ctf02/.NextContent</span><br></pre></td></tr></table></figure><p>最后学习知道了<strong>那个图片显示码其实触发广播需要的密码</strong>，在清单文件有。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220152303564.png" alt="image-20210220152303564"></p><p>且<strong>android:exported=”true”</strong>属性代表可以进行外部调用，那我们还可以用adb构造一个广播来达到目的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.is.very.fun</span><br></pre></td></tr></table></figure><h3 id="APK逆向"><a href="#APK逆向" class="headerlink" title="APK逆向"></a>APK逆向</h3><p>把Tenshine进行md5().hexdigest()加密后取出偶数位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = md5(<span class="string">b'Tenshine'</span>).hexdigest()</span><br><span class="line">flag = [s[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br></pre></td></tr></table></figure><p>题目很简单，但是从搭环境开始通过这个题学了一下frida hook java层。</p><p>简单记录一下流程：</p><blockquote><ol><li>安卓端执行下载好的对应frida服务。</li><li>进行2次端口转发：<strong><code>adb forward tcp:27043 tcp:27043</code>和<code>adb forward tcp:27042 tcp:27042</code></strong></li><li>安卓端运行app</li><li>执行写好的hook脚本。</li></ol></blockquote><p>贴下hook代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">'''</span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use('com.example.crackme.MainActivity');</span></span><br><span class="line"><span class="string">        MainActivity.toHexString.implementation = function(a, b)&#123;</span></span><br><span class="line"><span class="string">            var ans = this.toHexString(a, b);</span></span><br><span class="line"><span class="string">            send(ans);</span></span><br><span class="line"><span class="string">            return ans;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">'type'</span>] == <span class="string">'send'</span>:</span><br><span class="line">        print(message[<span class="string">'payload'</span>][::<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">'com.example.crackme'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><h3 id="人民的名义-抓捕赵德汉1-200"><a href="#人民的名义-抓捕赵德汉1-200" class="headerlink" title="人民的名义-抓捕赵德汉1-200"></a>人民的名义-抓捕赵德汉1-200</h3><p>一个jar包，用jd-gui看一下java代码。一个md5加密，在线解一下即可。</p><p>这里了解一下什么时候jar包：<strong>jar包是eclipse下的压缩包，由多个class文件压缩而成的。</strong></p><h3 id="boomshakalaka-3"><a href="#boomshakalaka-3" class="headerlink" title="boomshakalaka-3"></a>boomshakalaka-3</h3><p>飞机大战游戏。</p><p>jeb反编译后找到入口类：多次调用了a类中的d方法。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224192959108.png" alt="image-20210224192959108"></p><p>看看a类d方法功能：其中getSharedPreferences()是关键，返回一个SharedPreference对象，它会在/data/data/com.example.plane/下生成一个xml文件，以键值对的形式存储向其中输入的数据。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224193105424.png" alt="image-20210224193105424"></p><p>adb看一下：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224195210759.png" alt="image-20210224195210759"></p><p>但程序提示的打到最高分，java层没有任何与分数相关的地方，进入so中找到分数的地方：分析下且从DATA可以知道，这里就是根据我们打的分数不断向xml文件中添加写入不同的字符串。<img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224195529004.png" alt="image-20210224195529004"></p><p>而要写入字符串字符串的开始和结尾是确定了的，只是中间的字符串会因为分数不同而不通过，这个自己打游戏然后查看数据或者直接ida中分析都可以知道。</p><p>注意的地方：要指定的分数才会写入指定字符串，所以如果打游戏测试的话要算着打😂。</p><p>测试一波后，写入顺序就是给出的，把开始结尾确定好后向中间填充好base64解码得到flag。</p><p><strong>MGN0ZntDMGNvUzJkX0FuRHJvMWRfRzBtRV9Zb1VfS24wdz99</strong></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224202624546.png" alt="image-20210224202624546"></p><h3 id="android1"><a href="#android1" class="headerlink" title="android1"></a>android1</h3><p>app进行了梆梆加固，开始准备环境安装dump dex，准备完开始安装app发现报错。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210225225117463.png" alt="image-20210225225117463"></p><p>后面才发现了是因为app没有签名，签上名后还要注意：</p><p>安装时带上-t选项。原因：</p><p>Android Studio 3.0会在debug apk的<code>manifest</code>文件<code>application</code>标签里自动添加 <code>android:testOnly=&quot;true&quot;</code>属性。</p><p>成功安装程序，打开提示资源文件，进而从values的string.xml中找到flag。</p><p><strong>flag{1FF9B2CCB90A2D943DBAA072DF0A279C}</strong></p><h3 id="Android2-0"><a href="#Android2-0" class="headerlink" title="Android2.0"></a>Android2.0</h3><p>简单考了一下so层。</p><p><strong>flag{sosorryla}</strong></p><h3 id="Illusion"><a href="#Illusion" class="headerlink" title="Illusion"></a>Illusion</h3><p>关键就在so层的一个加密函数，开始直接在Exports找到名称为CheckFlag的函数，为了熟悉一下so层的调试，在这个函数下了断点但每次都不断不下来。。</p><p>然后开始找原因，后面发现这个假的函数，真正是动态加载的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303203021780.png" alt="image-20210303203021780"></p><p>进入正确的函数开始分析，函数的伪代码明显是有点问题的，看arm汇编就好了。</p><p>其中关键就是<strong>sub_CCB09028</strong>这个函数：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303203358493.png" alt="image-20210303203358493"></p><p>分析了一下没看出所以然，但这个是一位一位加密的，所以可以直接穷举的。</p><p>写ida-python，但这个穷举最后一位有2个字符都可，空格和‘}’，还好是最后一位，那肯定是字符}了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">"Ku@'G_V9v(yGS"</span></span><br><span class="line">s = <span class="string">'(Ljava/lang/String;Ljava/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    v3 = <span class="number">1</span></span><br><span class="line">    v4 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> a1 &gt;= a2:  </span><br><span class="line">        <span class="keyword">while</span> a2 &lt; a1:</span><br><span class="line">            a2 *= <span class="number">16</span></span><br><span class="line">            v3 *= <span class="number">16</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2:</span><br><span class="line">                a1 -= a2</span><br><span class="line">                v4 |= v3</span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">1</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">1</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">2</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">2</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">3</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">3</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> a1 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            v3 &gt;&gt;= <span class="number">4</span></span><br><span class="line">            <span class="keyword">if</span> v3 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            a2 &gt;&gt;= <span class="number">4</span>      </span><br><span class="line">    <span class="keyword">return</span> v4</span><br><span class="line">    </span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">        r1 = j+ord(s[i])<span class="number">-64</span></span><br><span class="line">        r2 = <span class="number">0x5d</span></span><br><span class="line">        <span class="keyword">if</span> r1 - fun(r1, r2)*<span class="number">0x5d</span> + <span class="number">0x20</span> == ord(enc[i]):</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(flag.encode())</span><br><span class="line"><span class="comment">#CISCN&#123;GJ5728&#125;</span></span><br></pre></td></tr></table></figure><p>写完仔细分析了下那个函数，其实该函数和后面对函数返回值的处理就是<strong>求模（mod）</strong>的操作，但没有使用/与mod，可以学习一下。这从最后的操作看其实很明显。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303204003498.png" alt="image-20210303204003498"></p><h3 id="APK逆向-2"><a href="#APK逆向-2" class="headerlink" title="APK逆向-2"></a>APK逆向-2</h3><p>首先安装app失败。。</p><p>反编译后首先看了一下<strong>AndroidManifest.xml</strong>，发现空的。。然后看了app的主要逻辑和类，很乱和杂吧，也不清楚要做什么。。</p><p>然后我为了看其中的一个资源文件对app进行了直接解压，这个倒是没看出什么。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304192508917.png" alt="image-20210304192508917"></p><p>但在其中看到<strong>AndroidManifest.xml</strong>并不是空的，然后尝试使用apktool对apk解包，解包失败。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304192711623.png" alt="image-20210304192711623"></p><p>由此可以知道，应该是对<strong>AndroidManifest.xml</strong>文件做了手脚。</p><p>然后就是要知道安卓<strong>AndroidManifest.xml</strong>文件格式了，这是修改过的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304193133042.png" alt="image-20210304193133042"></p><p>再看一个正常的：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304193230661.png" alt="image-20210304193230661"></p><p>通过修复后，重新压缩成压缩包，在xml文件中看到flag相关：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/H1aGYAcMoEPShpW.png" alt="image-20210304193456601"></p><h3 id="ill-intentions"><a href="#ill-intentions" class="headerlink" title="ill-intentions"></a>ill-intentions</h3><p>在MainActivity中注册了一个广播接收器：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305193418021.png" alt="image-20210305193418021"></p><p>根据在设置在屏幕上的文本来看Send_to_Activity，就是根据接受到的不同广播消息执行不同的函数。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305193507242.png" alt="image-20210305193507242"></p><p>然后看了一下三个不同的函数，其执行逻辑其实是一样的，把3个指定字符串经过sha224与base64及替换加密后再经过so层函数的操作，最后把结果以广播形式发出，但这里并不是发送给Send_to_Activity。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305213542600.png" alt="image-20210305213542600"></p><p>so层的加密操作一个异或，能想到运算结果就是我们要的flag。</p><p>由于只有三种结果，用ida-python模拟了程序的运算逻辑，在IsThisTheRealOne活动得到flag。这里开始一直出错得不到结果，后面调试发现是getClass().getName()得到的类名我没有把整个包加上。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha224</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = [<span class="string">'e'</span>, <span class="string">'W'</span>, <span class="string">'h'</span>, <span class="string">'a'</span>, <span class="string">'t'</span>, <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = sha224(s.encode()).hexdigest().encode()</span><br><span class="line">    s = base64.b64encode(s).decode().replace(<span class="string">'='</span>, <span class="string">'?'</span>)</span><br><span class="line">    s = list(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        temp = ord(s[i])</span><br><span class="line">        <span class="keyword">if</span>  temp &gt; <span class="number">47</span> <span class="keyword">and</span> temp &lt; <span class="number">58</span>:</span><br><span class="line">            s[i] = a[temp<span class="number">-48</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(s)</span><br><span class="line">    </span><br><span class="line">s1 = <span class="string">b'TRytfrgooq|F&#123;i-JovFBungFk'</span>+<span class="string">b'\\VlphgQbwvj~HuDgaeTzuSt.@Lex^~'</span></span><br><span class="line">s1 = list(s1) + [<span class="number">119</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">123</span>, <span class="number">79</span>, <span class="number">117</span>, </span><br><span class="line">  <span class="number">116</span>, <span class="number">98</span>, <span class="number">104</span>, <span class="number">127</span>, <span class="number">114</span>, <span class="number">67</span>] + list(<span class="string">b'tfqm&#125;'</span>)</span><br><span class="line">s2 = <span class="string">'SendAnIntentApplication'</span></span><br><span class="line">s3 = <span class="string">'com.example.application.IsThisTheRealOne$1'</span></span><br><span class="line">s3 = s3[<span class="number">0</span>:len(s3)<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">s2 = en(s2).encode()</span><br><span class="line">s3 = en(s3).encode()</span><br><span class="line">print(<span class="string">'---------------------------------------------------'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">76</span>):</span><br><span class="line">    print(chr(s1[i]^s2[i]^s3[i]), end = <span class="string">''</span>)</span><br><span class="line"><span class="comment">#Congratulation!YouFoundTheRightActivityHereYouGo-CTF&#123;IDontHaveABadjokeSorry&#125;</span></span><br></pre></td></tr></table></figure><p>另外，由于app中是多个活动，开始我是想直接用adb命令来启动每个活动，通过调试看输出是什么，但都启动失败，什么权限禁止。通过计算得到flag后，通过搜集发现是要对活动没有指定属性<strong>android:exported=”true”</strong>，</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305222644097.png" alt="image-20210305222644097"></p><blockquote><p><strong>android.intent.action.MAIN：决定应用的入口Activity，也就是我们启动应用时首先显示哪一个Activity。</strong><br><strong>android.intent.category.LAUNCHER：表示activity应该被列入系统的启动器(launcher)(允许用户启动它)。Launcher是安卓系统中的桌面启动器，是桌面UI的统称。</strong></p></blockquote><p>指定后通过adb命令启动成功，可直接通过调试查看生成的字符串，我尝试修改smali来插入打印Log的语句，然后同伙查看日志同样得到flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305223009728.png" alt="image-20210305223009728"></p><p>最后查看日志：<br><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305223046697.png" alt="image-20210305223046697"></p><h2 id="d3ctf"><a href="#d3ctf" class="headerlink" title="d3ctf"></a>d3ctf</h2><h3 id="No-Name"><a href="#No-Name" class="headerlink" title="No Name"></a>No Name</h3><p>找到入口活动，将输入传入FlagChecker类的checkFlag函数，然后又是实现接口中的check函数，最后调用，感觉有点套娃，，实质就是调用native层的check函数。。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310201450601.png" alt="image-20210310201450601"></p><p>但是注意清单文件中application中的android:name属性：这里指定了<strong>app启动时关联的一个application，这个类的作用就是做一些初始化，放一些全局变量和程序上下文相关的东西</strong>，默认是android.app.Application。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310203122424.png" alt="image-20210310203122424"></p><p>来到app启动时指定的这个类：NoNameApp。比较简单的代码，就是得到资源文件data.enc然后获取一个aeskey对其进行aes解密，且这里指定的解密得到的文件和存放路径。然后进行dex加载并把FlagChecker中mFlagChecker的实例进行了替换，也就是把上面我们分析出的native层那个check函数进行了替换。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310203554497.png" alt="image-20210310203554497"></p><p>所以可以知道app真正检查的逻辑在解密出的jar文件中，现在的目的就是得到这个jar，首先想到的就是直接在程序运行后在指定的路径下去找。</p><p>虽然app在加载完解密后对解密出的文件进行了删除，但是可以将app的smali修改，删除<strong>file.delete()；</strong>后对其重新打包然后签名。</p><p>这里签名完后安装遇到了问题，一个是之前知道的app有<strong>android:testOnly=”true”</strong>，解决办法：1.安装时加上-t选项。2.在清单文件中删除该属性。</p><p>第二个问题：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310204857678.png" alt="image-20210310204857678"></p><p>搜索到这篇文章 <a href="https://testerhome.com/topics/18463" target="_blank" rel="noopener">https://testerhome.com/topics/18463</a></p><blockquote><p>如果 AndroidManifest.xml 中未设置 extractNativeLibs=true，使用 apktool 反编译时有可能导致 extractNativeLibs 被设置为 false。</p></blockquote><p>至于extractNativeLibs属性，开启的话就是把apk中的so解压缩提取到本地存取一份，关闭的话不在本地存储一份，在运行时直接调用app中的so。</p><p>如果关闭的话，且我们apk是未对齐或so文件是压缩状态的话将阻止我们安装apk，也就是上面的报的错。</p><p><strong>然后导致我们默认开启extractNativeLibs的属性关闭的原因：使用apktool对app进行反编译和回编译。</strong></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310205935229.png" alt="image-20210310205935229"></p><p>最后把这个属性改为true，回编译签名后，运行app，在data/data/包名/下得到解密出的jar文件，简单的异或。。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310210138830.png" alt="image-20210310210138830"></p><p>最后说一下，在AK中反编译apk遇到<strong>com.googlecode.d2j.DexException: not support version</strong>的问题。</p><p>这个是dex2jar版本与dex版本不兼容主动抛出的异常，从报错找到dex-reader-2.1-20190905-lanchon.jar文件中的DexFileReader函数，看源码。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310210853842.png" alt="image-20210310210853842"></p><p>解决办法，更换最新的dex2jar版本就好了。<a href="https://www.jianshu.com/p/55bf5f688e9a" target="_blank" rel="noopener">https://www.jianshu.com/p/55bf5f688e9a</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从一些Android题目来学习相关知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Andriod" scheme="https://Bxb0.github.io/categories/Andriod/"/>
    
    
  </entry>
  
  <entry>
    <title>HGAME 2021</title>
    <link href="https://bxb0.github.io/2021/02/04/HGAME%202021/"/>
    <id>https://bxb0.github.io/2021/02/04/HGAME%202021/</id>
    <published>2021-02-04T10:04:15.000Z</published>
    <updated>2021-08-25T10:54:04.597Z</updated>
    
    <content type="html"><![CDATA[<p>一个月hgame结束，做完了逆向题，在此记录一下。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="apacha"><a href="#apacha" class="headerlink" title="apacha"></a>apacha</h3><p>考了一个xxtea加密算法：key是{1, 2, 3, 4}</p><p><img src="https://i.loli.net/2021/02/27/imfSALBWP2nDy7o.png" alt="image-20210204180727273"></p><p>跟着算法逻辑逆一下就行了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> LEN = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = <span class="number">0x9E3779B9</span> * (<span class="number">52</span> / LEN) - <span class="number">0x4AB325AA</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> KEY[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">35</span>, <span class="number">179</span>,  <span class="number">78</span>, <span class="number">231</span>,  <span class="number">54</span>,  <span class="number">40</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">226</span>, <span class="number">111</span>, </span><br><span class="line">  <span class="number">202</span>,  <span class="number">89</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">124</span>, <span class="number">150</span>, <span class="number">116</span>,  <span class="number">38</span>, <span class="number">128</span>, <span class="number">231</span>, </span><br><span class="line">  <span class="number">230</span>,  <span class="number">84</span>,  <span class="number">45</span>,  <span class="number">61</span>,  <span class="number">86</span>,   <span class="number">3</span>, <span class="number">157</span>, <span class="number">138</span>, <span class="number">156</span>, <span class="number">195</span>, </span><br><span class="line">  <span class="number">220</span>, <span class="number">153</span>, <span class="number">237</span>, <span class="number">216</span>,  <span class="number">38</span>, <span class="number">112</span>, <span class="number">173</span>, <span class="number">253</span>,  <span class="number">51</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">10</span>,  <span class="number">85</span>, <span class="number">150</span>, <span class="number">244</span>, <span class="number">158</span>, <span class="number">111</span>, <span class="number">156</span>,  <span class="number">92</span>,  <span class="number">76</span>, <span class="number">208</span>, </span><br><span class="line">  <span class="number">229</span>,  <span class="number">27</span>,  <span class="number">23</span>, <span class="number">174</span>,  <span class="number">35</span>, <span class="number">103</span>, <span class="number">194</span>, <span class="number">165</span>, <span class="number">112</span>,  <span class="number">82</span>, </span><br><span class="line">   <span class="number">10</span>,  <span class="number">19</span>,  <span class="number">66</span>, <span class="number">172</span>, <span class="number">178</span>, <span class="number">103</span>, <span class="number">190</span>, <span class="number">132</span>, <span class="number">121</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">92</span>, <span class="number">112</span>, <span class="number">152</span>,  <span class="number">61</span>,  <span class="number">81</span>,  <span class="number">92</span>,  <span class="number">45</span>, <span class="number">218</span>,  <span class="number">54</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">69</span>, <span class="number">150</span>,  <span class="number">23</span>,  <span class="number">34</span>, <span class="number">157</span>,  <span class="number">82</span>, <span class="number">227</span>,  <span class="number">92</span>, <span class="number">251</span>, <span class="number">225</span>, </span><br><span class="line">  <span class="number">137</span>, <span class="number">209</span>, <span class="number">137</span>, <span class="number">212</span>,  <span class="number">91</span>, <span class="number">232</span>,  <span class="number">31</span>, <span class="number">209</span>, <span class="number">200</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">150</span>, <span class="number">193</span>, <span class="number">181</span>,  <span class="number">84</span>, <span class="number">144</span>, <span class="number">180</span>, <span class="number">124</span>, <span class="number">182</span>, <span class="number">202</span>, <span class="number">228</span>, </span><br><span class="line">   <span class="number">23</span>,  <span class="number">33</span>, <span class="number">148</span>, <span class="number">249</span>, <span class="number">227</span>, <span class="number">157</span>, <span class="number">170</span>, <span class="number">161</span>,  <span class="number">90</span>,  <span class="number">47</span>, </span><br><span class="line">  <span class="number">253</span>,   <span class="number">1</span>, <span class="number">232</span>, <span class="number">167</span>, <span class="number">171</span>, <span class="number">110</span>,  <span class="number">13</span>, <span class="number">195</span>, <span class="number">156</span>, <span class="number">220</span>, </span><br><span class="line">  <span class="number">173</span>,  <span class="number">27</span>,  <span class="number">74</span>, <span class="number">176</span>,  <span class="number">83</span>,  <span class="number">52</span>, <span class="number">249</span>,   <span class="number">6</span>, <span class="number">164</span>, <span class="number">146</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_xxtea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ENC;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *key = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)KEY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> delat1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(delat &gt;&gt; <span class="number">2</span>);</span><br><span class="line">enc[LEN<span class="number">-1</span>] -= ((key[((LEN<span class="number">-1</span>)^delat1)&amp;<span class="number">3</span>]^enc[LEN<span class="number">-2</span>])+(enc[<span class="number">0</span>]^delat)) ^ (((<span class="number">4</span>*enc[<span class="number">0</span>])^(enc[LEN<span class="number">-2</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[LEN<span class="number">-2</span>])^(enc[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = LEN<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">enc[i] -= ((key[(i^delat1)&amp;<span class="number">3</span>]^enc[i<span class="number">-1</span>])+(enc[i+<span class="number">1</span>]^delat)) ^ (((<span class="number">4</span>*enc[i+<span class="number">1</span>])^(enc[i<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[i<span class="number">-1</span>])^(enc[i+<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line">i--; </span><br><span class="line">&#125;<span class="keyword">while</span>(i != <span class="number">0</span>);</span><br><span class="line">enc[<span class="number">0</span>] -= ((key[(<span class="number">0</span>^delat1)&amp;<span class="number">3</span>]^enc[LEN<span class="number">-1</span>])+(enc[<span class="number">1</span>]^delat)) ^ (((<span class="number">4</span>*enc[<span class="number">1</span>])^(enc[LEN<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[LEN<span class="number">-1</span>])^(enc[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">delat += <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(delat != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">de_xxtea();</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ENC[i*<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hgame&#123;l00ks_1ike_y0u_f0Und_th3_t34&#125;</span></span><br></pre></td></tr></table></figure><h3 id="helloRe"><a href="#helloRe" class="headerlink" title="helloRe"></a>helloRe</h3><p>就是一个异或解密，但是可以从这里学习一下STL模板中的string的结构。</p><p>能猜测出v14就是我们输入字符串的长度，但是怎么来的呢？其实使用了string结构。</p><p><img src="https://i.loli.net/2021/02/27/IbUASK8JgpGLFr6.png" alt="image-20210204182522063"></p><p>string结构：一共占24个字节（这也是一个可以让我们用来识别的特征）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> _Buf[<span class="number">16</span>];           <span class="comment">// 当字符串长度小于等于0xF时，数据存储在_Buf数组中</span></span><br><span class="line">                             <span class="comment">// 大于0xF时将分配一个变量，_Buf存储的是该变量地址。</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _Mysize;    <span class="comment">// 字符串长度</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _Myres;     <span class="comment">// 可存储的最大长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来测试一个输入看看：</p><p><img src="https://i.loli.net/2021/02/27/zMNw8FvRtLHaGPT.png" alt="image-20210204182822594"></p><p>最后题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x07FF756E13480</span></span><br><span class="line">cnt = <span class="number">0xff</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">    flag += chr(get_byte(addr)^cnt)</span><br><span class="line">    cnt -= <span class="number">1</span></span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#hgame&#123;hello_re_player&#125;</span></span><br></pre></td></tr></table></figure><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>给了通过dis模块得到的python反汇编代码，我把对应的python代码注释了下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (input)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="string">'give me your flag:\n'</span>)</span><br><span class="line">              <span class="number">4</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">0</span> (raw_flag) <span class="comment">#raw_flag = input('give me your flag:\n')</span></span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>           <span class="number">8</span> LOAD_GLOBAL              <span class="number">1</span> (list)</span><br><span class="line">             <span class="number">10</span> LOAD_FAST                <span class="number">0</span> (raw_flag)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">2</span> (<span class="number">6</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">3</span> (<span class="number">-1</span>)</span><br><span class="line">             <span class="number">16</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">             <span class="number">18</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">20</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">22</span> STORE_FAST               <span class="number">1</span> (cipher)<span class="comment">#cipher = list(raw_flag[6:-1])</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>          <span class="number">24</span> LOAD_GLOBAL              <span class="number">2</span> (len)</span><br><span class="line">             <span class="number">26</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">28</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">30</span> STORE_FAST               <span class="number">2</span> (length)<span class="comment">#length = len(cipher)</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">32</span> LOAD_GLOBAL              <span class="number">3</span> (range)</span><br><span class="line">             <span class="number">34</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">             <span class="number">36</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">38</span> BINARY_FLOOR_DIVIDE</span><br><span class="line">             <span class="number">40</span> CALL_FUNCTION            <span class="number">1</span><span class="comment">#range(length/2)</span></span><br><span class="line">             <span class="number">42</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">44</span> FOR_ITER                <span class="number">54</span> (to <span class="number">100</span>)</span><br><span class="line">             <span class="number">46</span> STORE_FAST               <span class="number">3</span> (i)<span class="comment">#for i in range(length/2):</span></span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">48</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">52</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">54</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">56</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">58</span> BINARY_ADD</span><br><span class="line">             <span class="number">60</span> BINARY_SUBSCR<span class="comment">#cipher[2*i+1]</span></span><br><span class="line">             <span class="number">62</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">64</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">66</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">68</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">70</span> BINARY_SUBSCR<span class="comment">#cipher[2*i]</span></span><br><span class="line">             <span class="number">72</span> ROT_TWO<span class="comment">#swap 改变指针的指向来实现</span></span><br><span class="line">             <span class="number">74</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">76</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">78</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">80</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">82</span> STORE_SUBSCR</span><br><span class="line">             <span class="number">84</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">86</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">88</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">90</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">92</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">94</span> BINARY_ADD</span><br><span class="line">             <span class="number">96</span> STORE_SUBSCR<span class="comment">#cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]</span></span><br><span class="line">             <span class="number">98</span> JUMP_ABSOLUTE           <span class="number">44</span></span><br><span class="line"><span class="comment">#for i in range(length/2):</span></span><br><span class="line"><span class="comment">#cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]</span></span><br><span class="line"></span><br><span class="line"> <span class="number">12</span>     &gt;&gt;  <span class="number">100</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">            <span class="number">102</span> STORE_FAST               <span class="number">4</span> (res)<span class="comment">#res = []</span></span><br><span class="line"></span><br><span class="line"> <span class="number">13</span>         <span class="number">104</span> LOAD_GLOBAL              <span class="number">3</span> (range)</span><br><span class="line">            <span class="number">106</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">            <span class="number">108</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">110</span> GET_ITER</span><br><span class="line">        &gt;&gt;  <span class="number">112</span> FOR_ITER                <span class="number">26</span> (to <span class="number">140</span>)</span><br><span class="line">            <span class="number">114</span> STORE_FAST               <span class="number">3</span> (i)<span class="keyword">for</span> i <span class="keyword">in</span> range(length)</span><br><span class="line"></span><br><span class="line"> <span class="number">14</span>         <span class="number">116</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">118</span> LOAD_METHOD              <span class="number">4</span> (append)</span><br><span class="line">            <span class="number">120</span> LOAD_GLOBAL              <span class="number">5</span> (ord)</span><br><span class="line">            <span class="number">122</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">            <span class="number">124</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">            <span class="number">126</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">128</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">130</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">            <span class="number">132</span> BINARY_XOR</span><br><span class="line">            <span class="number">134</span> CALL_METHOD              <span class="number">1</span><span class="comment">#res.append(ord(cipher[i])^i)</span></span><br><span class="line">            <span class="number">136</span> POP_TOP</span><br><span class="line">            <span class="number">138</span> JUMP_ABSOLUTE          <span class="number">112</span></span><br><span class="line"></span><br><span class="line"> <span class="number">15</span>     &gt;&gt;  <span class="number">140</span> LOAD_GLOBAL              <span class="number">6</span> (bytes)</span><br><span class="line">            <span class="number">142</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">144</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">146</span> LOAD_METHOD              <span class="number">7</span> (hex)</span><br><span class="line">            <span class="number">148</span> CALL_METHOD              <span class="number">0</span></span><br><span class="line">            <span class="number">150</span> STORE_FAST               <span class="number">4</span> (res)<span class="comment">#res = bytes(res).hex()</span></span><br><span class="line"></span><br><span class="line"> <span class="number">16</span>         <span class="number">152</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="keyword">print</span>)</span><br><span class="line">            <span class="number">154</span> LOAD_CONST               <span class="number">6</span> (<span class="string">'your flag: '</span>)</span><br><span class="line">            <span class="number">156</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">158</span> BINARY_ADD</span><br><span class="line">            <span class="number">160</span> CALL_FUNCTION            <span class="number">1</span><span class="comment">#print('your flag: ' + res)</span></span><br><span class="line">            <span class="number">162</span> POP_TOP</span><br><span class="line">            <span class="number">164</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">166</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment"># your flag: 30466633346f59213b4139794520572b45514d61583151576638643a</span></span><br></pre></td></tr></table></figure><p>最后简单逆一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'30466633346f59213b4139794520572b45514d61583151576638643a'</span></span><br><span class="line">enc = bytes.fromhex(enc)</span><br><span class="line">flag = [b^i <span class="keyword">for</span> b, i <span class="keyword">in</span> enumerate(enc)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)//<span class="number">2</span>):</span><br><span class="line">    flag[<span class="number">2</span>*i], flag[<span class="number">2</span>*i+<span class="number">1</span>] = flag[<span class="number">2</span>*i+<span class="number">1</span>], flag[<span class="number">2</span>*i]</span><br><span class="line">print(<span class="string">''</span>.join(map(chr, flag)))</span><br><span class="line"><span class="comment">#G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~</span></span><br></pre></td></tr></table></figure><h3 id="ezApk"><a href="#ezApk" class="headerlink" title="ezApk"></a>ezApk</h3><p>简单的安卓，只有java代码，找到按钮活动。</p><p><img src="https://i.loli.net/2021/02/27/56TDYkbSyOjLNpK.png" alt="image-20210215155612517"></p><p>就是取出文本内容，然后把输入和密文传入s方法，验证是否正确。</p><p>到s方法：一个cbc模式的aes加密，填充方式为PKCS7Padding。</p><p><img src="https://i.loli.net/2021/02/27/hcqCNUm63VFPaZR.png" alt="image-20210215155952276"></p><p>所以解密密文就应该是flag了，使用java用同样的方式调用一下解密方法。这里注意一点就是：java中自带的是PKCS5Padding填充，直接使用PKCS7Padding会报错，但搜索到这2个使用起来是一样的，就直接改成PKCS5Padding就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ctf;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cry</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hash(String a, String b) <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException&#123;</span><br><span class="line">MessageDigest v2 = MessageDigest.getInstance(a);</span><br><span class="line"><span class="keyword">byte</span>[] v3 = b.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] ans = v2.digest(v3);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aes_test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException</span>&#123;</span><br><span class="line"></span><br><span class="line">String key = <span class="string">"A_HIDDEN_KEY"</span>;</span><br><span class="line">String input = <span class="string">"EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY"</span>;</span><br><span class="line">Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"><span class="keyword">byte</span>[] enc = decoder.decode(input);</span><br><span class="line">SecretKeySpec v1 = <span class="keyword">new</span> SecretKeySpec(cry.hash(<span class="string">"SHA-256"</span>, key), <span class="string">"AES"</span>);</span><br><span class="line">IvParameterSpec v2 = <span class="keyword">new</span> IvParameterSpec(cry.hash(<span class="string">"MD5"</span>, key));</span><br><span class="line">Cipher v5 = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">v5.init(<span class="number">2</span>, v1, v2);</span><br><span class="line">System.out.println(<span class="string">"key: "</span> + byte_hex.bytes2hex(v1.getEncoded()));</span><br><span class="line">System.out.println(<span class="string">"iv: "</span> + byte_hex.bytes2hex(v2.getIV()));</span><br><span class="line"><span class="keyword">byte</span>[] plain = v5.doFinal(enc);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(plain));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">key: fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6</span></span><br><span class="line"><span class="comment">iv: 99c6bd34c31b78b4c4b964a7745e6300</span></span><br><span class="line"><span class="comment">hgame&#123;jUst_A_3z4pp_write_in_k07l1n&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>其实也不用这么麻烦的，关键是想练习一下java。</p><p>自己算一下hash得到的key和iv用python或者在线网站解密一下，方便的多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AesEncry</span><span class="params">(object)</span>:</span></span><br><span class="line">    key = <span class="string">'fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6'</span></span><br><span class="line">    key = bytes.fromhex(key)                            </span><br><span class="line">    </span><br><span class="line">    iv = <span class="string">'99c6bd34c31b78b4c4b964a7745e6300'</span></span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mode = AES.MODE_ECB</span><br><span class="line">        padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">        cryptos = AES.new(self.key, mode)</span><br><span class="line">        cipher_text = cryptos.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        cryptos = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">        decrpytBytes = base64.b64decode(data)</span><br><span class="line">        plaint = cryptos.decrypt(decrpytBytes)</span><br><span class="line">        <span class="keyword">return</span> plaint</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY'</span></span><br><span class="line">flag = AesEncry().decrypt(enc)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="helloRe2"><a href="#helloRe2" class="headerlink" title="helloRe2"></a>helloRe2</h3><p>首先输入pass1的逻辑，转化一个128位的大数与指定大数比较，然后以挂起创建自身进程的子进程，调用CreateFileMappingA()函数把文件映像到内存，再使用MapViewOfFile()函数把文件视映像到进程地址空间上（用于把当前进程的内存空间的数据与子进程共享），然后在非调试状态下对要共享的数据简单的异或加密一下，最后恢复启动刚刚创建的子进程，自身进程睡眠挂起：</p><p><img src="https://i.loli.net/2021/02/27/kRrY7a6meKp59Pz.png" alt="image-20210215190636690"></p><p>子进程启动后，调用OpenFileMappingA()与MapViewOfFile()查看父进程共享的内存数据，若存在则调用输入pass2的逻辑，然后一个cbc模式的aes加密。</p><p><img src="https://i.loli.net/2021/02/27/Gna2KV58FQRH7oc.png" alt="image-20210215191030835"></p><p>使用python解密一下得到pass2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">b'2b0c5e6a3a20b189'</span></span><br><span class="line">key = [key[i]^i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">key = bytes(key)</span><br><span class="line"><span class="comment">#key = bytes.fromhex(key)                            </span></span><br><span class="line"></span><br><span class="line">iv = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">iv = bytes(iv)</span><br><span class="line"><span class="comment">#iv = bytes.fromhex(iv)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">    cryptos = AES.new(self.key, mode)</span><br><span class="line">    cipher_text = cryptos.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    cryptos = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    decrpytBytes = base64.b64decode(data)</span><br><span class="line">    plaint = cryptos.decrypt(decrpytBytes)</span><br><span class="line">    <span class="keyword">return</span> plaint</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'t/7+2Qd2eWU/Tl9i1QL2fg=='</span></span><br><span class="line">flag = decrypt(enc)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7a4ad6c5671fb313</span></span><br></pre></td></tr></table></figure><p>最后：<strong>hgame{2b0c5e6a3a20b189_7a4ad6c5671fb313}</strong></p><h3 id="fake-debugger-beta"><a href="#fake-debugger-beta" class="headerlink" title="fake_debugger beta"></a>fake_debugger beta</h3><p>nc连上后，空格加回车进行单步调试。</p><p>容易发现，是对输入一位一位的异或加密后与指定值比较，不对则退出。</p><p><img src="https://i.loli.net/2021/02/27/SMEapnGisTgZIWl.png" alt="image-20210216180859920"></p><p>开始的格式是知道的，所以后面一位一位慢慢的跟一下就好了。</p><p><strong>hgame{You_Kn0w_debuGg3r}</strong></p><h3 id="gun"><a href="#gun" class="headerlink" title="gun"></a>gun</h3><p>jadx反编译后没有发现MainActivity，但从几个特征可以知道app进行梆梆加固免费版进行加固。</p><p><img src="https://i.loli.net/2021/02/27/3xWMP72bsnJ89qe.png" alt="image-20210227105625088"></p><p>我们的目的主要是得到解密后的关键dex分析MainActivity，所以可以直接考虑用frida-dumpdex来dump出内存中的dex。项目地址：<a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>搭建frida环境时注意一点：安装的frida的版本要和服务端安装的frida-server版本要一致。</p><p>dump出dex后从到小的拖进jeb中反编译，0xbf03a000.dex是我们要找的。</p><p>可以看到，创建了多个线程进行操作。</p><p><img src="https://i.loli.net/2021/02/27/r6JaDQfPuLT7qCH.png" alt="image-20210227111613020"></p><p>看一下功能：</p><p><img src="https://i.loli.net/2021/02/27/johwg4l5qzErmNb.png" alt="image-20210227111754345"></p><p>继续看fd.i方法：</p><p><img src="https://i.loli.net/2021/02/27/ZiAxb93RSNz7Foa.png" alt="image-20210227112014590"></p><p>到这里基本上就可以知道，是开启多个线程进行发送数据，然后每个线程有不同的睡眠时间，这就有了先后顺序。</p><p>我是直接把所有数据按时间建立关系后，打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">0xfffffff</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a[<span class="number">19530</span>] = <span class="string">'q'</span>, a[<span class="number">0x75F4</span>] = <span class="string">'e'</span>, a[<span class="number">0xA161</span>] = <span class="string">'d'</span>, a[<span class="number">7337</span>] = <span class="string">'f'</span>;</span><br><span class="line">a[<span class="number">0x5B0D</span>] = <span class="string">'e'</span>, a[<span class="number">0xC266</span>] = <span class="string">'x'</span>, a[<span class="number">0x887F</span>] = <span class="string">'q'</span>, a[<span class="number">50475</span>] = <span class="string">'u'</span>;</span><br><span class="line">a[<span class="number">0xC05D</span>] = <span class="string">'a'</span>, a[<span class="number">0x909B</span>] = <span class="string">'u'</span>, a[<span class="number">8488</span>] = <span class="string">'a'</span>, a[<span class="number">0xC1CF</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">78545</span>] = <span class="string">'0'</span>, a[<span class="number">0x4B4C</span>] = <span class="string">'t'</span>, a[<span class="number">0xC807</span>] = <span class="string">'q'</span>, a[<span class="number">0x8C9B</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">0xB2B3</span>] = <span class="string">'k'</span>, a[<span class="number">2390</span>] = <span class="string">'z'</span>, a[<span class="number">0x568B</span>] = <span class="string">' '</span>, a[<span class="number">70963</span>] = <span class="string">'y'</span>;</span><br><span class="line">a[<span class="number">0xAF2B</span>] = <span class="string">' '</span>, a[<span class="number">0x397B</span>] = <span class="string">'d'</span>, a[<span class="number">10110</span>] = <span class="string">' '</span>, a[<span class="number">0xFE0D</span>] = <span class="string">'t'</span>;</span><br><span class="line">a[<span class="number">0x33DE</span>] = <span class="string">'q'</span>, a[<span class="number">0xE105</span>] = <span class="string">' '</span>, a[<span class="number">40315</span>] = <span class="string">'b'</span>, a[<span class="number">79438</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">0x54C2</span>] = <span class="string">'e'</span>, a[<span class="number">0xD115</span>] = <span class="string">'y'</span>, a[<span class="number">0x84B9</span>] = <span class="string">'x'</span>, a[<span class="number">0xE4B4</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">28084</span>] = <span class="string">'f'</span>, a[<span class="number">83607</span>] = <span class="string">'&#125;'</span>, a[<span class="number">0x312F</span>] = <span class="string">'e'</span>, a[<span class="number">0x142F0</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">50828</span>] = <span class="string">'z'</span>, a[<span class="number">79540</span>] = <span class="string">'_'</span>, a[<span class="number">60636</span>] = <span class="string">'m'</span>, a[<span class="number">20891</span>] = <span class="string">'b'</span>;</span><br><span class="line">a[<span class="number">0x41D8</span>] = <span class="string">'a'</span>, a[<span class="number">0x18FC</span>] = <span class="string">'m'</span>, a[<span class="number">0xE91A</span>] = <span class="string">'r'</span>, a[<span class="number">0x13F0F</span>] = <span class="string">'I'</span>;</span><br><span class="line">a[<span class="number">0x70B8</span>] = <span class="string">'t'</span>, a[<span class="number">4741</span>] = <span class="string">'m'</span>, a[<span class="number">30778</span>] = <span class="string">' '</span>, a[<span class="number">0xEFA</span>] = <span class="string">'g'</span>;</span><br><span class="line">a[<span class="number">11980</span>] = <span class="string">'q'</span>, a[<span class="number">5130</span>] = <span class="string">'p'</span>, a[<span class="number">0x7F0</span>] = <span class="string">'a'</span>, a[<span class="number">0x13FA7</span>] = <span class="string">'0'</span>;</span><br><span class="line">a[<span class="number">0x4127</span>] = <span class="string">' '</span>, a[<span class="number">0x10D66</span>] = <span class="string">'Q'</span>, a[<span class="number">0x54A</span>] = <span class="string">'O'</span>, a[<span class="number">0xDBA0</span>] = <span class="string">'s'</span>;</span><br><span class="line">a[<span class="number">0x10EE1</span>] = <span class="string">'h'</span>, a[<span class="number">70302</span>] = <span class="string">'x'</span>, a[<span class="number">0x11C08</span>] = <span class="string">'n'</span>, a[<span class="number">0x4831</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">0xE33C</span>] = <span class="string">'t'</span>, a[<span class="number">0xFAF4</span>] = <span class="string">' '</span>, a[<span class="number">80538</span>] = <span class="string">'i'</span>, a[<span class="number">0xF4E1</span>] = <span class="string">'u'</span>;</span><br><span class="line">a[<span class="number">22890</span>] = <span class="string">'u'</span>, a[<span class="number">0x803B</span>] = <span class="string">'m'</span>, a[<span class="number">0x655B</span>] = <span class="string">'d'</span>, a[<span class="number">0xDC3A</span>] = <span class="string">'z'</span>;</span><br><span class="line">a[<span class="number">0x3599</span>] = <span class="string">'o'</span>, a[<span class="number">44072</span>] = <span class="string">'k'</span>, a[<span class="number">0xB205</span>] = <span class="string">'N'</span>, a[<span class="number">0xBB43</span>] = <span class="string">'F'</span>;</span><br><span class="line">a[<span class="number">80939</span>] = <span class="string">'7'</span>, a[<span class="number">0x3F07</span>] = <span class="string">'f'</span>, a[<span class="number">52068</span>] = <span class="string">'o'</span>, a[<span class="number">0xCAA2</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">72519</span>] = <span class="string">'_'</span>, a[<span class="number">0x11F52</span>] = <span class="string">'k'</span>, a[<span class="number">0x3CA5</span>] = <span class="string">'q'</span>, a[<span class="number">75894</span>] = <span class="string">'F'</span>;</span><br><span class="line">a[<span class="number">0xF723</span>] = <span class="string">'e'</span>, a[<span class="number">0x7221</span>] = <span class="string">'u'</span>, a[<span class="number">0x2FCD</span>] = <span class="string">' '</span>, a[<span class="number">3501</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">0x9168</span>] = <span class="string">'e'</span>, a[<span class="number">0x8DC6</span>] = <span class="string">' '</span>, a[<span class="number">0x100CF</span>] = <span class="string">'s'</span>, a[<span class="number">0xCD51</span>] = <span class="string">'m'</span>;</span><br><span class="line">a[<span class="number">0x10B56</span>] = <span class="string">'d'</span>, a[<span class="number">0x6ABD</span>] = <span class="string">' '</span>, a[<span class="number">0x103F7</span>] = <span class="string">'y'</span>, a[<span class="number">60485</span>] = <span class="string">'x'</span>;</span><br><span class="line">a[<span class="number">0x9589</span>] = <span class="string">'u'</span>, a[<span class="number">0x1105E</span>] = <span class="string">'3'</span>, a[<span class="number">54002</span>] = <span class="string">'b'</span>, a[<span class="number">0x12C3F</span>] = <span class="string">'1'</span>;</span><br><span class="line">a[<span class="number">0x6750</span>] = <span class="string">','</span>, a[<span class="number">0xBFCB</span>] = <span class="string">' '</span>, a[<span class="number">70562</span>] = <span class="string">'_'</span>, a[<span class="number">0xE66F</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">47203</span>] = <span class="string">'q'</span>, a[<span class="number">0x4994</span>] = <span class="string">'f'</span>, a[<span class="number">0xF098</span>] = <span class="string">'s'</span>, a[<span class="number">0xC131</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">0x16FB</span>] = <span class="string">'g'</span>, a[<span class="number">74919</span>] = <span class="string">'z'</span>, a[<span class="number">0xA96B</span>] = <span class="string">' '</span>, a[<span class="number">0x4558</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">0x222F</span>] = <span class="string">'z'</span>, a[<span class="number">0xAAD0</span>] = <span class="string">'n'</span>, a[<span class="number">0x9841</span>] = <span class="string">'z'</span>, a[<span class="number">71894</span>] = <span class="string">'3'</span>;</span><br><span class="line">a[<span class="number">0x8AF0</span>] = <span class="string">'s'</span>, a[<span class="number">0x2BFF</span>] = <span class="string">'t'</span>, a[<span class="number">0x525F</span>] = <span class="string">'b'</span>, a[<span class="number">0x9995</span>] = <span class="string">'e'</span>;</span><br><span class="line">a[<span class="number">68035</span>] = <span class="string">'&#123;'</span>, a[<span class="number">0xA375</span>] = <span class="string">'q'</span>, a[<span class="number">10949</span>] = <span class="string">'f'</span>, a[<span class="number">0x63DD</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">0xA621</span>] = <span class="string">'p'</span>, a[<span class="number">78398</span>] = <span class="string">'_'</span>, a[<span class="number">0x10780</span>] = <span class="string">'q'</span>, a[<span class="number">0x609E</span>] = <span class="string">'t'</span>;</span><br><span class="line">a[<span class="number">9603</span>] = <span class="string">'!'</span>, a[<span class="number">0x7E5F</span>] = <span class="string">'t'</span>, a[<span class="number">0x83C0</span>] = <span class="string">'x'</span>, a[<span class="number">0x8A6D</span>] = <span class="string">'z'</span>;</span><br><span class="line">a[<span class="number">0x1309A</span>] = <span class="string">'3'</span>, a[<span class="number">0xB8F4</span>] = <span class="string">'O'</span>, a[<span class="number">54430</span>] = <span class="string">'m'</span>, a[<span class="number">0x143CF</span>] = <span class="string">'w'</span>;</span><br><span class="line">a[<span class="number">40499</span>] = <span class="string">'u'</span>, a[<span class="number">0xD882</span>] = <span class="string">'u'</span>, a[<span class="number">0xB5DB</span>] = <span class="string">'f'</span>, a[<span class="number">0x931B</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">0x1FB0</span>] = <span class="string">'u'</span>, a[<span class="number">0xF2F2</span>] = <span class="string">' '</span>, a[<span class="number">0x5031</span>] = <span class="string">'m'</span>, a[<span class="number">0x12720</span>] = <span class="string">'4'</span>;</span><br><span class="line">a[<span class="number">0x6649</span>] = <span class="string">'q'</span>, a[<span class="number">0xBCA1</span>] = <span class="string">'R'</span>, a[<span class="number">24004</span>] = <span class="string">' '</span>, a[<span class="number">0x10180</span>] = <span class="string">'m'</span>;</span><br><span class="line">a[<span class="number">77170</span>] = <span class="string">'h'</span>, a[<span class="number">0x7B3C</span>] = <span class="string">'o'</span>, a[<span class="number">3019</span>] = <span class="string">'s'</span>, a[<span class="number">20120</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">74113</span>] = <span class="string">'_'</span>, a[<span class="number">0xDD23</span>] = <span class="string">','</span>, a[<span class="number">58044</span>] = <span class="string">'f'</span>, a[<span class="number">79659</span>] = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xfffffff</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line"><span class="built_in">putchar</span>(a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<strong>Oazsdgmpgmfuaz! ftq eqodqf ar ftq mbbe ue tqdq, ftue otmxxqzsq ue uzebudqp nk NkfqOFR arrxuzq omybmusz, ftq rxms ue tsmyq{dQh3x_y3_nk_z4F1h3_0d_zi7I0dw}</strong>，可以看到最后和flag的格式是一样的了，字符数都是一样的，整个字符串的特征猜测凯撒加密。</p><p>从位移12得到结果：</p><p><img src="https://i.loli.net/2021/02/27/ruso9GQJk7PqxYE.png" alt="image-20210227112643799"></p><h3 id="FAKE"><a href="#FAKE" class="headerlink" title="FAKE"></a>FAKE</h3><p>开始没注意，以为就是考下z3的使用，且题目中有提示：<strong>Try angr or z3.</strong>，上来就把36个方程组去写z3，没有发现解。。也可能是我的约束条件写错了。。</p><p>之后注意到题目名字fake，进而看了看程序，发现一个获取TracerPid的反调试和紧接着的smc：</p><p><img src="https://i.loli.net/2021/02/27/UxcMZYkvEy4TsDh.png" alt="image-20210217162653310"></p><p>自己查看一下非调试运行时的状态：<br><img src="https://i.loli.net/2021/02/27/rS7LQ2zW3DjHcZx.png" alt="image-20210217162839393"></p><p>使用idapython或调试到smc后的代码，其实就是2个矩阵的乘法：</p><p><img src="https://i.loli.net/2021/02/27/VhjmxeSoF9OPayk.png" alt="image-20210217163037584"></p><p>先z3解一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">flag = [BitVec(<span class="string">'flag[%d]'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"></span><br><span class="line">a = [<span class="number">104</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">123</span>, <span class="number">64</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">45</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">95</span>, <span class="number">83</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">b = [<span class="number">55030</span>, <span class="number">61095</span>, <span class="number">60151</span>, <span class="number">57247</span>, <span class="number">56780</span>, <span class="number">55726</span>, <span class="number">46642</span>, <span class="number">52931</span>, <span class="number">53580</span>, <span class="number">50437</span>, <span class="number">50062</span>, <span class="number">44186</span>, <span class="number">44909</span>, <span class="number">46490</span>, <span class="number">46024</span>, <span class="number">44347</span>, <span class="number">43850</span>, <span class="number">44368</span>, <span class="number">54990</span>, <span class="number">61884</span>, <span class="number">61202</span>, <span class="number">58139</span>, <span class="number">57730</span>, <span class="number">54964</span>, <span class="number">48849</span>, <span class="number">51026</span>, <span class="number">49629</span>, <span class="number">48219</span>, <span class="number">47904</span>, <span class="number">50823</span>, <span class="number">46596</span>, <span class="number">50517</span>, <span class="number">48421</span>, <span class="number">46143</span>, <span class="number">46102</span>, <span class="number">46744</span>]</span><br><span class="line">ans = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">ans[<span class="number">6</span>*i+j] += a[<span class="number">6</span>*k+j] * flag[<span class="number">6</span>*i+k]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">s.add(b[<span class="number">6</span>*i+j] == ans[<span class="number">6</span>*i+j])</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">flag = [s.model()[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line">print(bytes(flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"unsat"</span>)</span><br><span class="line"><span class="comment">#hgame&#123;E@sy_Se1f-Modifying_C0oodee33&#125;</span></span><br></pre></td></tr></table></figure><p>再使用sage求解看，实质就是先求得一个逆矩阵然后与enc组成的矩阵做乘法。</p><p><img src="https://i.loli.net/2021/02/27/hPdyLxSuDFpTRZE.png" alt="image-20210217163948621"></p><h3 id="helloRe3"><a href="#helloRe3" class="headerlink" title="helloRe3"></a>helloRe3</h3><p>一血。</p><p>开始每管题目的提示信息，直接静态分析了下，看见创建了一个线程，后面开始注册窗口各种操作，然后越看越复杂，定位到这个函数，有iv，key和加密解密操作，从常量识别出是tea类的加密算法？但这个也无从下手，程序中好像没调用这里。。。</p><p><img src="https://i.loli.net/2021/02/27/gdX7jNlDYhB2fJv.png" alt="image-20210217164757847"></p><p>嗯，，回到题目开始看提示信息：开发者留下了调试信息，试试DbgView。就试试吧。</p><p>可以发现，每次输入都会输出相应的响应：</p><p><img src="https://i.loli.net/2021/02/27/6AUTcPakH9fLeiq.png" alt="image-20210217165042094"></p><p>这里我直接去定位input length，因为之前静态分析时看见过。</p><p><img src="https://i.loli.net/2021/02/27/vicGJT4f5utmgY9.png" alt="image-20210217165253173"></p><p>其实上面这个整个函数就是关键了，简单看下汇编，结合DbgView。</p><p>输入长度为20，每一位先和0xff进行异或运算，最后来个rc4加密再和密文比较。<strong>注意：输入的是每个字符的order值，从DbgView可以查看。</strong></p><p>我直接附加调试得到内存信息，然后idapython得到order值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x7FF7E35B5820</span></span><br><span class="line">addr1 = <span class="number">0x07FF7E35A3720</span></span><br><span class="line">flag = []</span><br><span class="line">s = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>]</span><br><span class="line">s = [i^<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    flag += [(s[i]^get_byte(addr) ^ get_byte(addr1)) ^<span class="number">0xff</span>]</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">    addr1 += <span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>最后用C语言写一个置表得到输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">59</span>, <span class="number">58</span>, <span class="number">54</span>, <span class="number">72</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">26</span>, <span class="number">31</span>,</span><br><span class="line"> <span class="number">61</span>, <span class="number">24</span>, <span class="number">61</span>, <span class="number">74</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">23</span>,</span><br><span class="line">  <span class="number">68</span>, <span class="number">24</span>, <span class="number">41</span>, <span class="number">48</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> s1[] = <span class="string">"1234567890-+"</span>;</span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"QWERTYUIOP&#123;&#125;|"</span>;</span><br><span class="line"><span class="keyword">char</span> s3[] = <span class="string">"ASDFGHJKL;'"</span>;</span><br><span class="line"><span class="keyword">char</span> s4[] = <span class="string">"ZXCVBNM,./"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">21</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">b[i] = s1[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">37</span>; i &lt;= <span class="number">49</span>; i++)</span><br><span class="line">b[i] = s2[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">54</span>; i &lt;= <span class="number">64</span>; i++)</span><br><span class="line">b[i] = s3[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">66</span>; i &lt;= <span class="number">75</span>; i++)</span><br><span class="line">b[i] = s4[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">flag[i] = b[a[i]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//HGAME&#123;6-K4K.4R+3C4T&#125;</span></span><br></pre></td></tr></table></figure><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p>二血。</p><p>一个简单的vm，调试跟踪得到先是找到输入的最后一位，开始从后向前进行指定值的异或运算，紧接着一轮从后向前的减法运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">207</span>, <span class="number">191</span>, <span class="number">128</span>,  <span class="number">59</span>, <span class="number">246</span>, <span class="number">175</span>, <span class="number">126</span>,   <span class="number">2</span>,  <span class="number">36</span>, <span class="number">237</span>, </span><br><span class="line">  <span class="number">112</span>,  <span class="number">58</span>, <span class="number">244</span>, <span class="number">235</span>, <span class="number">122</span>,  <span class="number">74</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">103</span>, </span><br><span class="line">   <span class="number">23</span>, <span class="number">240</span>, <span class="number">198</span>, <span class="number">118</span>,  <span class="number">54</span>, <span class="number">232</span>, <span class="number">173</span>, <span class="number">130</span>,  <span class="number">46</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">183</span>,  <span class="number">79</span>, <span class="number">230</span>,   <span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xfe</span>, b = <span class="number">0x7a</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">33</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] += b;</span><br><span class="line">b -= <span class="number">0x60</span>;</span><br><span class="line">enc[i] ^= a;</span><br><span class="line">a += <span class="number">0x23</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">34</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-5-Second-Challenge"><a href="#A-5-Second-Challenge" class="headerlink" title="A 5 Second Challenge"></a>A 5 Second Challenge</h3><p>一个扫雷游戏，第一步操作后，如果后面时间超过5s的话游戏结束。这个修改下系统时间就解除了。</p><p>找到关键数据文件夹：</p><p><img src="https://i.loli.net/2021/02/27/oezlBwiY5mTZuOA.png" alt="image-20210227114208257"></p><p>反编译AFiveSecondChallenge.dll：看到获取当前系统的时间，检查是否超时的函数，题目描述的一样，对dll做了手脚，也是<strong>CheckBomAt</strong>这个函数，最后有很多数据，从数量可以猜测对应我们题目中的45*45的格子。</p><p><img src="https://i.loli.net/2021/02/27/CyHbQdXat52eZkR.png" alt="image-20210227114516330"></p><p>现在目的就是找<strong>CheckBomAt</strong>函数，开始想的是可能有办法修复这个dll，搜索一番没有结果。</p><p>转到刚刚那个文件夹的，发现2个关键cpp文件：AFiveSecondChallenge.cpp，Assembly-CSharp.cpp。</p><p>在AFiveSecondChallenge.cpp中发现反编译不出来的函数：从名字可以很好识别其功能，开始做一个超时检查，如果没超时取出matrix中的数据做一个运算后判断。</p><p><img src="https://i.loli.net/2021/02/27/NdvUQpMXrFontj9.png" alt="image-20210227120034686"></p><p>然后从Assembly-CSharp.cpp中看到了整个游戏逻辑。注释相当于把源码都给了吧，真好。</p><p>捕捉鼠标点击后，开始进行各种判断。</p><p><img src="https://i.loli.net/2021/02/27/4rOwLYtVzcUlDmf.png" alt="image-20210227120525813"></p><p>计算周围的雷数，就是判断8个方向，也可以看出返回值为0代表不是雷：</p><p><img src="https://i.loli.net/2021/02/27/e9vF4mky3D5oiHp.png" alt="image-20210227122637114"></p><p>点击后，根据是雷或者不是雷填充对应的色块：</p><p><img src="https://i.loli.net/2021/02/27/kB8jiNXfsgQzJ4H.png" alt="image-20210227122902913"></p><p>如果点击块周围没有雷，则递归的向四个方向扩展开来：</p><p><img src="https://i.loli.net/2021/02/27/gD1dcpLSm9QAvo2.png" alt="image-20210227123011364"></p><p>分析到这里想找最后胜利的判断条件以此看flag怎么来的，好像没有，。。</p><p>到这里知道了关键就是判断一个块是否是雷的函数<strong>CheckBomAt</strong>，按照题目的算法打印出雷的位置，1表示雷。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = &#123;游戏中的数据&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">double</span> a_, b_, c_, d_;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, bomb[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a_ = a[j][i/<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">b_ = a[j][i/<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">c_ = a[j][i/<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">d_ = (<span class="keyword">double</span>)(i%<span class="number">3</span> - <span class="number">1.0</span>);</span><br><span class="line">ans = (a_*d_*d_ + b_*d_) + c_;</span><br><span class="line">bomb[j][i] = ans &gt; <span class="number">0.0</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, bomb[i][j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个数据玩了一下游戏，但是有的地方和算出的雷的位置不一致，大多数还是一样的。。然后一直找是不是哪里算错了，算法也比对了好几次。。就把题放一边了。</p><p>后面看见题目给出提示，二维码，看了看我之前打印的数据。。。</p><p><img src="https://i.loli.net/2021/02/27/iQqyeAYgFaJVoMc.png" alt="image-20210227020942288"></p><p>使用python的PIL模块用这个数据打印出二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">45</span></span><br><span class="line">y = <span class="number">45</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">'RGB'</span>, (x, y))</span><br><span class="line">data = <span class="stringspan></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, y):</span><br><span class="line">        line = data[i*x+j]</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">'1'</span>:</span><br><span class="line">            im.putpixel((i, j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im.putpixel((i, j), (<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>))</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>扫一下得到flag：<strong>hgame{YOU<del>hEn-duO_yOU-X|</del>DOU-sHi<del>un1Ty</del>k4i-fA_de_O}</strong></p><h3 id="nllvm"><a href="#nllvm" class="headerlink" title="nllvm"></a>nllvm</h3><p>一血。</p><p>通过这个题学习熟悉下AES加密算法还是不错的。</p><p>首先看一下main函数：先设置控制台显示文本的属性，接着可以看到很多异或运算，这些数据在要使用后同样做了相同的异或运算，所以简单隐藏了下程序中的数据。</p><p><img src="https://i.loli.net/2021/02/27/p7NOiGZoXHwMrKW.png" alt="image-20210223230432003"></p><p>找到加密的地方，开始静态看了一下整个加密流程，只是注意到很多异或运算也不复杂，在一个置位的地方发现加密后的一个aes的s-box。</p><p>确定aes加密后，又进而发现是带有iv的。</p><p><img src="https://i.loli.net/2021/02/27/cpix3L91BESXuGe.png" alt="image-20210223231923153"></p><p>再梳理了一下这里的加密流程：</p><p><img src="https://i.loli.net/2021/02/27/WRM9vQi1HZD8O7e.png" alt="image-20210223233754450"></p><p>可以从重复轮进行了13次可以知道key是256位的，但块长度是128位的。。之前一直以为密钥长度和块长度是一样的。又加上这里移位和混合的方向和我之前了解的正好相反，就感觉是魔改过的aes加密，开始用C自己写逆过程，关键就是行混合不好写，还好有搜索，hh。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> rsbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line">  <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">  <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line">  <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line">  <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line">  <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span> &#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = &#123;<span class="number">0x43</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x70</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x49</span>, <span class="number">0x4c</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x45</span>, <span class="number">0x66</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x41</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x38</span>, <span class="number">0x4b</span>, <span class="number">0x65</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0xbf</span>, <span class="number">0x8f</span>, <span class="number">0x84</span>, <span class="number">0x8d</span>, <span class="number">0xcb</span>, <span class="number">0xe0</span>, <span class="number">0xc2</span>, <span class="number">0xcc</span>, <span class="number">0x82</span>, <span class="number">0xac</span>, <span class="number">0x97</span>, <span class="number">0x9e</span>, <span class="number">0xc7</span>, <span class="number">0xca</span>, <span class="number">0xf8</span>, <span class="number">0xec</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0xfc</span>, <span class="number">0xa4</span>, <span class="number">0x13</span>, <span class="number">0x38</span>, <span class="number">0xb7</span>, <span class="number">0xc1</span>, <span class="number">0x6a</span>, <span class="number">0x19</span>, <span class="number">0x96</span>, <span class="number">0xe0</span>, <span class="number">0x4b</span>, <span class="number">0x38</span>, <span class="number">0xb7</span>, <span class="number">0x0e</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>, <span class="number">0x6c</span>, <span class="number">0xc5</span>, <span class="number">0x68</span>, <span class="number">0xef</span>, <span class="number">0xa0</span>, <span class="number">0x47</span>, <span class="number">0xc4</span>, <span class="number">0x78</span>, <span class="number">0x3e</span>, <span class="number">0x80</span>, <span class="number">0x0e</span>, <span class="number">0x80</span>, <span class="number">0xd2</span>, <span class="number">0x59</span>, <span class="number">0x8c</span>, <span class="number">0xcd</span>, <span class="number">0x49</span>, <span class="number">0xfd</span>, <span class="number">0x9f</span>, <span class="number">0xf5</span>, <span class="number">0xfe</span>, <span class="number">0x3c</span>, <span class="number">0xf5</span>, <span class="number">0xec</span>, <span class="number">0x68</span>, <span class="number">0xdc</span>, <span class="number">0xbe</span>, <span class="number">0xd4</span>, <span class="number">0xdf</span>, <span class="number">0xa4</span>, <span class="number">0xc0</span>, <span class="number">0xb3</span>, <span class="number">0xea</span>, <span class="number">0x61</span>, <span class="number">0xa8</span>, <span class="number">0x5c</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x6c</span>, <span class="number">0x24</span>, <span class="number">0x74</span>, <span class="number">0xa6</span>, <span class="number">0x62</span>, <span class="number">0xa4</span>, <span class="number">0xa6</span>, <span class="number">0x7d</span>, <span class="number">0x26</span>, <span class="number">0x84</span>, <span class="number">0x6d</span>, <span class="number">0x80</span>, <span class="number">0xb9</span>, <span class="number">0x71</span>, <span class="number">0x93</span>, <span class="number">0xbc</span>, <span class="number">0x4c</span>, <span class="number">0x9d</span>, <span class="number">0xfb</span>, <span class="number">0x60</span>, <span class="number">0xf2</span>, <span class="number">0x49</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0xfb</span>, <span class="number">0x85</span>, <span class="number">0x3a</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, <span class="number">0xd9</span>, <span class="number">0x70</span>, <span class="number">0x62</span>, <span class="number">0x3f</span>, <span class="number">0xfd</span>, <span class="number">0x04</span>, <span class="number">0xc4</span>, <span class="number">0x5d</span>, <span class="number">0x59</span>, <span class="number">0xa2</span>, <span class="number">0x61</span>, <span class="number">0x6a</span>, <span class="number">0x4f</span>, <span class="number">0x57</span>, <span class="number">0xe1</span>, <span class="number">0xd3</span>, <span class="number">0x3e</span>, <span class="number">0xc4</span>, <span class="number">0x5d</span>, <span class="number">0x9f</span>, <span class="number">0xa3</span>, <span class="number">0x3f</span>, <span class="number">0x3d</span>, <span class="number">0x6d</span>, <span class="number">0xea</span>, <span class="number">0x1b</span>, <span class="number">0x09</span>, <span class="number">0x7c</span>, <span class="number">0x2a</span>, <span class="number">0x1d</span>, <span class="number">0x4d</span>, <span class="number">0x2f</span>, <span class="number">0xf3</span>, <span class="number">0x6d</span>, <span class="number">0x2f</span>, <span class="number">0x10</span>, <span class="number">0x0e</span>, <span class="number">0x69</span>, <span class="number">0xeb</span>, <span class="number">0x4d</span>, <span class="number">0x57</span>, <span class="number">0xcb</span>, <span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x14</span>, <span class="number">0x48</span>, <span class="number">0x69</span>, <span class="number">0x5a</span>, <span class="number">0x2a</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0xb3</span>, <span class="number">0x09</span>, <span class="number">0xa8</span>, <span class="number">0x63</span>, <span class="number">0xa8</span>, <span class="number">0xeb</span>, <span class="number">0x87</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xa8</span>, <span class="number">0x1b</span>, <span class="number">0x71</span>, <span class="number">0x89</span>, <span class="number">0xb8</span>, <span class="number">0x15</span>, <span class="number">0x18</span>, <span class="number">0x62</span>, <span class="number">0xf5</span>, <span class="number">0x42</span>, <span class="number">0xd3</span>, <span class="number">0x22</span>, <span class="number">0x6f</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x4b</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0xa2</span>, <span class="number">0x7f</span>, <span class="number">0xf0</span>, <span class="number">0x9b</span>, <span class="number">0x11</span>, <span class="number">0x76</span>, <span class="number">0x58</span>, <span class="number">0xf8</span>, <span class="number">0xb9</span>, <span class="number">0xc1</span>, <span class="number">0xc6</span>, <span class="number">0xbe</span>, <span class="number">0x24</span>, <span class="number">0x67</span>, <span class="number">0x6e</span>, <span class="number">0xa5</span>, <span class="number">0x55</span>, <span class="number">0xee</span>, <span class="number">0xd6</span>, <span class="number">0xb0</span>, <span class="number">0x4d</span>, <span class="number">0x8c</span>, <span class="number">0x23</span>, <span class="number">0xf2</span>, <span class="number">0x9e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">xtime</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x&lt;&lt;<span class="number">1</span>) ^ (((x&gt;&gt;<span class="number">7</span>) &amp; <span class="number">1</span>) * <span class="number">0x1b</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x, <span class="keyword">unsigned</span> <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (((y &amp; <span class="number">1</span>) * x) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">1</span> &amp; <span class="number">1</span>) * xtime(x)) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">2</span> &amp; <span class="number">1</span>) * xtime(xtime(x))) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">3</span> &amp; <span class="number">1</span>) * xtime(xtime(xtime(x)))) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">4</span> &amp; <span class="number">1</span>) * xtime(xtime(xtime(xtime(x)))))); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvMixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> a, b, c, d;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">  &#123; </span><br><span class="line">    a = state[<span class="number">4</span>*i];</span><br><span class="line">    b = state[<span class="number">4</span>*i+<span class="number">1</span>];</span><br><span class="line">    c = state[<span class="number">4</span>*i+<span class="number">2</span>];</span><br><span class="line">    d = state[<span class="number">4</span>*i+<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    state[<span class="number">4</span>*i] = Multiply(a, <span class="number">0x0e</span>) ^ Multiply(b, <span class="number">0x0b</span>) ^ Multiply(c, <span class="number">0x0d</span>) ^ Multiply(d, <span class="number">0x09</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">1</span>] = Multiply(a, <span class="number">0x09</span>) ^ Multiply(b, <span class="number">0x0e</span>) ^ Multiply(c, <span class="number">0x0b</span>) ^ Multiply(d, <span class="number">0x0d</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">2</span>] = Multiply(a, <span class="number">0x0d</span>) ^ Multiply(b, <span class="number">0x09</span>) ^ Multiply(c, <span class="number">0x0e</span>) ^ Multiply(d, <span class="number">0x0b</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">3</span>] = Multiply(a, <span class="number">0x0b</span>) ^ Multiply(b, <span class="number">0x0d</span>) ^ Multiply(c, <span class="number">0x09</span>) ^ Multiply(d, <span class="number">0x0e</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_xor</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">char</span> *enc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">enc[i] ^= key[k*<span class="number">16</span> + i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvShift</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = a1[<span class="number">4</span>*<span class="number">3</span>+j];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">a1[<span class="number">4</span>*i+j] = a1[<span class="number">4</span>*(i<span class="number">-1</span>)+j];</span><br><span class="line">a1[j] = tmp;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvSub</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">p[i] = rsbox[p[i]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = &#123;<span class="number">0x91</span>, <span class="number">0xb3</span>, <span class="number">0xc1</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x5d</span>, <span class="number">0xd5</span>, <span class="number">0xce</span>, <span class="number">0x3a</span>, <span class="number">0x1d</span>, <span class="number">0x30</span>, <span class="number">0xe4</span>, <span class="number">0x70</span>, <span class="number">0x6c</span>, <span class="number">0x6b</span>, <span class="number">0xd7</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0xa3</span>, <span class="number">0xa5</span>, <span class="number">0xdf</span>, <span class="number">0x1b</span>, <span class="number">0xfd</span>, <span class="number">0x1c</span>, <span class="number">0x02</span>, <span class="number">0x89</span>, <span class="number">0x14</span>, <span class="number">0x20</span>, <span class="number">0x7a</span>, <span class="number">0xfd</span>, <span class="number">0x24</span>, <span class="number">0x52</span>, <span class="number">0xf8</span>, <span class="number">0xa9</span>, <span class="number">0xf9</span>, <span class="number">0xf1</span>, <span class="number">0x6b</span>, <span class="number">0x1c</span>, <span class="number">0x0f</span>, <span class="number">0x5d</span>, <span class="number">0x50</span>, <span class="number">0x5b</span>, <span class="number">0xec</span>, <span class="number">0x42</span>, <span class="number">0xd1</span>, <span class="number">0x8c</span>, <span class="number">0xb8</span>, <span class="number">0x12</span>, <span class="number">0xcf</span>, <span class="number">0x2c</span>, <span class="number">0xa9</span>, <span class="number">0x69</span>, <span class="number">0x31</span>, <span class="number">0x46</span>, <span class="number">0xfd</span>, <span class="number">0x9b</span>, <span class="number">0xea</span>, <span class="number">0xde</span>, <span class="number">0xc8</span>, <span class="number">0xbf</span>, <span class="number">0x94</span>, <span class="number">0x69</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *p = a+<span class="number">48</span>, *p1;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> iv[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">fun_xor(<span class="number">0xe</span>, p);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">13</span>; ; j--)</span><br><span class="line">&#123;</span><br><span class="line">InvShift(p);</span><br><span class="line">InvSub(p);</span><br><span class="line">fun_xor(j, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">InvMixColumns(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">3</span>)</span><br><span class="line">p1 = p<span class="number">-16</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p1 = iv;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">p[k] ^= p1[k];</span><br><span class="line">&#125;</span><br><span class="line">p = p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//hgame&#123;cOsm0s_is_still_fight1ng_and_NEVER_GIVE_UP_O0o0o0oO00o00o&#125;</span></span><br></pre></td></tr></table></figure><p>其实写好逆过程后，开始一直解不来，后面一个一个排查再发现是密文找错了，<strong>再次被从ida的伪代码来看变量的值坑到</strong>。。。</p><p><strong>另外这个aes加密并没有魔改的，后面我又用python的aes模块解了一下，同样解出。。那现在问题就是移位和混合的方向的问题（这里先留一下），后面再好好学习一下。至于块长度和密钥长度是没关系的。</strong></p><p>最后就总结一下aes加密的大概：</p><blockquote><ol><li><strong>重复轮：128位密钥一般重复执行9次，192位密钥一般重复执行11次，256位密钥一般重复执行13次。</strong></li><li><strong>重复轮每轮重复的操作包括：字节替换、行移位、列混乱、轮密钥加。</strong></li><li><strong>在aes中块长度与都是128位，与密钥长度无关。</strong></li><li><strong>每执行一块的加密操作，开始是一个初始轮（与初始密钥异或），然后重复轮，最后一个最终轮（除开列混混合操作）。</strong></li></ol></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h3><p>从每一步骤后的字符组成可以容易辨认出来。</p><p>base64，base32，base16</p><h3 id="不起眼压缩包的养成的方法"><a href="#不起眼压缩包的养成的方法" class="headerlink" title="不起眼压缩包的养成的方法"></a>不起眼压缩包的养成的方法</h3><p>从图片最后看到一个压缩包和提示密码是图片id。</p><p><a href="https://saucenao.com/" target="_blank" rel="noopener">https://saucenao.com/</a> 上这个网站查该图片的id。</p><p>解压后得到plain.zip和NO PASSWORD.txt，而plain.zip又要密码，看了一下里面的文件，发现也有一个NO PASSWORD.txt文件，它们crc32值。</p><p>这由此想到应该是明文攻击了，而明文攻击有一个条件，2个文件的压缩方式要相同，这在NO PASSWORD.txt中有提示。</p><p><img src="https://i.loli.net/2021/02/27/GRqjEDtQSy2rYsb.png" alt="image-20210204222714426"></p><p>明文攻击得到密码：</p><p><img src="https://i.loli.net/2021/02/27/oYBRAm6M51IbNpl.png" alt="image-20210204222741818"></p><p>最后打开flag文件，是实体编码 entity code，用html写处一个标题让浏览器解析它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&amp;#x68;&amp;#x67;&amp;#x61;&amp;#x6D;&amp;#x65;&amp;#x7B;&amp;#x32;&amp;#x49;&amp;#x50;&amp;#x5F;&amp;#x69;&amp;#x73;&amp;#x5F;&amp;#x55;&amp;#x73;&amp;#x65;&amp;#x66;&amp;#x75;&amp;#x31;&amp;#x5F;&amp;#x61;&amp;#x6E;&amp;#x64;&amp;#x5F;&amp;#x4D;&amp;#x65;&amp;#x39;&amp;#x75;&amp;#x6D;&amp;#x69;&amp;#x5F;&amp;#x69;&amp;#x35;&amp;#x5F;&amp;#x57;&amp;#x30;&amp;#x72;&amp;#x31;&amp;#x64;&amp;#x7D;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/27/PXbVClN4UeKqJwj.png" alt="image-20210204223003807"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个月hgame结束，做完了逆向题，在此记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021一月DASCTF暨HWS硬件冬令营选拔赛</title>
    <link href="https://bxb0.github.io/2021/02/01/2021%E4%B8%80%E6%9C%88DASCTF%E6%9A%A8HWS%E7%A1%AC%E4%BB%B6%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B/"/>
    <id>https://bxb0.github.io/2021/02/01/2021%E4%B8%80%E6%9C%88DASCTF%E6%9A%A8HWS%E7%A1%AC%E4%BB%B6%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B/</id>
    <published>2021-02-01T13:16:51.000Z</published>
    <updated>2022-01-20T08:52:31.303Z</updated>
    
    <content type="html"><![CDATA[<p>二进制专场，总的来说题目难度不是很大，考点是好的，能学到东西。<a id="more"></a></p><p><img src="https://i.loli.net/2021/02/03/QS2rJ9EkmviR5Xy.png" alt="image-20210201212702456"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="decryption"><a href="#decryption" class="headerlink" title="decryption"></a>decryption</h3><p>拿了二血。逆向方向的签到题，直接穷举。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">18</span>,  <span class="number">69</span>,  <span class="number">16</span>,  <span class="number">71</span>,  <span class="number">25</span>,  <span class="number">73</span>,  <span class="number">73</span>,  <span class="number">73</span>,  <span class="number">26</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">28</span>,  <span class="number">30</span>,  <span class="number">82</span>, <span class="number">102</span>,  <span class="number">29</span>,  <span class="number">82</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">103</span>, </span><br><span class="line">  <span class="number">101</span>, <span class="number">111</span>,  <span class="number">95</span>,  <span class="number">89</span>,  <span class="number">88</span>,  <span class="number">94</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">110</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">163</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v3;</span><br><span class="line"><span class="keyword">int</span> v5 = j;</span><br><span class="line"><span class="keyword">int</span> v4 = i;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v3 = <span class="number">2</span> * (v4 &amp; v5);</span><br><span class="line">v5 ^= v4;</span><br><span class="line">v4 = v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v3 );</span><br><span class="line"><span class="keyword">if</span>((v5 ^ <span class="number">0x23</span>) == enc[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="obfu"><a href="#obfu" class="headerlink" title="obfu"></a>obfu</h3><p>这个题，被从伪代码来辨识变量的值坑到了，还是要从汇编代码来看靠谱。</p><p>首先题目有一个混淆，但很简单，patch掉方便点，但不patch也不影响。</p><p><img src="https://i.loli.net/2021/02/03/WlwNj2E3zCGAt6u.png" alt="image-20210201220900210"></p><p>跟了挺久的加密过程，异或比较多，然后准备逆向的时候发现，AES的特征啊。开始以为是常规的aes的解密，但其实不然，加上题目几次异或对不熟悉aes加密来说迷惑性挺大的。</p><p>这样在这些加密函数徘徊了很久，不清楚这个aes到底要做什么。</p><p>最后看了看如果我们输入正确后要执行的函数，联想输入，加上这里函数少，识别起来相对容易些，发现就是使用我们输入当作key把密文进行AES解密。不确定的话还可以自己用数据执行这里的函数来测试一下。</p><p>由于这里的函数已经确定功能了，看看它们有没有在前面引用过，果然有的。这样就对我们分析前面起到了很大的帮助了。</p><p><img src="https://i.loli.net/2021/02/03/za8Ascqm9CWSEow.png" alt="image-20210201223206546"></p><p>这样后，再继续回到前面分析，总结一下流程：</p><p><img src="https://i.loli.net/2021/02/03/E1IKJlr5nMNxhU6.png" alt="image-20210201222517573"></p><p>解密过程：</p><p>把密文先异或一下，然后进行aes加密，其实是是多了个iv的CBC模式的AES加密，但这里只有一组。所以我直接ECB模式加密自己再异或一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AesEncry</span><span class="params">(object)</span>:</span></span><br><span class="line">    key = <span class="string">'8ce51f9350f44511a854e1b5f0a3fbca'</span></span><br><span class="line">    key = bytes.fromhex(key)                     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mode = AES.MODE_ECB</span><br><span class="line">        padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">        cryptos = AES.new(self.key, mode)</span><br><span class="line">        cipher_text = cryptos.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        cryptos = AES.new(self.key, AES.MODE_ECB)</span><br><span class="line">        decrpytBytes = base64.b64decode(data)</span><br><span class="line">        meg = cryptos.decrypt(decrpytBytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> meg.encode()</span><br><span class="line"></span><br><span class="line">plaint = <span class="string">'4ff5e148c1d81254533e3a4bd47cfe72'</span></span><br><span class="line">plaint = bytes.fromhex(plaint)</span><br><span class="line">a = AesEncry().encrypt(plaint)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>各种异或操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">198</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">102</span>, <span class="number">134</span>, <span class="number">166</span>, <span class="number">198</span>, <span class="number">231</span>, <span class="number">7</span>, </span><br><span class="line">  <span class="number">38</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">102</span>, <span class="number">134</span>, <span class="number">166</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op2[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">42</span>, <span class="number">253</span>, <span class="number">103</span>, <span class="number">31</span>, <span class="number">159</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">212</span>, <span class="number">252</span>, <span class="number">56</span>, </span><br><span class="line">  <span class="number">118</span>, <span class="number">164</span>, <span class="number">182</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">141</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mem[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">33</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">87</span>, <span class="number">165</span>, <span class="number">167</span>, <span class="number">67</span>, <span class="number">137</span>, </span><br><span class="line">  <span class="number">74</span>, <span class="number">14</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">31</span>, <span class="number">195</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> xor1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">110</span>, <span class="number">214</span>, <span class="number">206</span>, <span class="number">97</span>, <span class="number">187</span>, <span class="number">143</span>, <span class="number">183</span>, <span class="number">243</span>, <span class="number">16</span>, <span class="number">183</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">69</span>, <span class="number">158</span>, <span class="number">252</span>, <span class="number">225</span>, <span class="number">177</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">140</span>, <span class="number">229</span>, <span class="number">31</span>, <span class="number">147</span>, <span class="number">80</span>, <span class="number">244</span>, <span class="number">69</span>, <span class="number">17</span>, <span class="number">168</span>, <span class="number">84</span>, </span><br><span class="line">  <span class="number">225</span>, <span class="number">181</span>, <span class="number">240</span>, <span class="number">163</span>, <span class="number">251</span>, <span class="number">202</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> xor2[] = &#123;<span class="number">236</span>, <span class="number">251</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">249</span>, <span class="number">231</span>,</span><br><span class="line"> <span class="number">139</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">63</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">240</span>, <span class="number">163</span>, <span class="number">68</span>, <span class="number">43</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ans[] = &#123;<span class="number">192</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">127</span>, <span class="number">219</span>,</span><br><span class="line"> <span class="number">63</span>, <span class="number">77</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">254</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">227</span>, <span class="number">85</span>, <span class="number">38</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mem[i] ^= xor1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">op1[i] ^= op2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] ^= xor2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#02x"</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位还原：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">16</span>] = &#123;<span class="number">0x2c</span>, <span class="number">0xa7</span>, <span class="number">0x73</span>, <span class="number">0xe</span>, <span class="number">0x86</span>, <span class="number">0x3c</span>, <span class="number">0xb4</span>, <span class="number">0x5f</span>,</span><br><span class="line"> <span class="number">0x8f</span>, <span class="number">0x87</span>, <span class="number">0xae</span>, <span class="number">0x91</span>, <span class="number">0xf7</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0xd</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">15</span>] = (a[<span class="number">15</span>] &lt;&lt; <span class="number">3</span>) | ((a[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>)&amp;<span class="number">7</span>); </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = (a[i] &lt;&lt; <span class="number">3</span>) | ((a[i+<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)&amp;<span class="number">7</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p>程序取出inp文件中的数据，然后进行加密后以hex形式存放入enc文件。</p><p>关键就是其中的一个反调试：</p><p><img src="https://i.loli.net/2021/02/03/QJ1RZLqFW6Axti7.png" alt="image-20210202194810695"></p><p>首先<strong>SetUnhandledExceptionFilter</strong>函数的作用：设置顶层未处理异常过滤器（top-level unhandled exception filter），捕获进程的各个线程中一切未被处理的结构化异常。简单来说就是修改系统最后的异常处理器。</p><p>然后触发<strong>SetUnhandledExceptionFilter</strong>的条件：</p><ul><li>程序中有异常，但没有相应的操作操作去处理该异常。</li><li>程序不处于调试状态。</li></ul><p><img src="https://i.loli.net/2021/02/03/qx619Tjh8yLIrHW.png" alt="image-20210202195228226"></p><p>满足条件后程序将执行设置的异常处理函数来处理该异常。</p><blockquote><p>而一般程序中要么把设置的异常处理函数用来检测程序是否处于调试状态；要么隐藏程序的关键代码，让我们执行不到。</p></blockquote><p>对于触发<strong>SetUnhandledExceptionFilter</strong>的条件，一般程序在调用<strong>SetUnhandledExceptionFilter</strong>后会有故意触发异常的代码，本题就是靠后面的执行无效指令进行触发。而程序是否处于调试状态其实是若出现的异常传递给了程序，程序先调用UnhandledExceptionFilter，而UnhandledExceptionFilter里面又调用了<strong>ZwQueryInformationProcess</strong>进行反调试检测，设置改函数的第二个参数为7，看执行完该函数后第三个参数指向的缓冲区是否为0，若不为0则程序处于调试状态，其实就是看有没有调试端口。</p><p>程序载入OD，设置忽略异常，ctrl+g，输入函数名字来到<strong>ZwQueryInformationProcess</strong>函数，然后下断。</p><p><img src="https://i.loli.net/2021/02/03/W1ubcV5jJ9lResL.png" alt="image-20210202202155455"></p><p>从栈窗口看到第2个参数为7，那就是要找的了，回溯到调用处，在函数执行完后将相应的缓存区的值改为0即可（若程序多次出现这种触发异常的跳转，那我们简单在执行完这个函数后hook一下程序方便些，本题的话直接把后面的je改为jmp就好了）。继续执行，就到了我们想执行的函数了。</p><p><img src="https://i.loli.net/2021/02/03/hT5x1sSw6Nlq7YJ.png" alt="image-20210202205950723"></p><p>而我做本题的时候并没有去过这个反调试，使用的附加调试，然后简单调试了下那个设置为异常处理的函数，发现后面还要触发异常就开始静态分析。</p><p>首先找到引用最后存放加密数据数组的地方：很明显它上下其实是代码的。</p><p><img src="https://i.loli.net/2021/02/03/9Lk3baYopKPJzem.png" alt="image-20210202203529519"></p><p>手动转化一下上面的数据为代码，加上之前调试了下设置异常处理函数，然后很容易发现，代码中有很多用来触发异常的数据（0x0c7, 0xff，且后面跟着2个或3这操作数）。</p><p>又在分析循环代码是发现循环计数器每次没有变，那岂不无限循环，从这里又进而发现，程序每次触发异常跳到设置的异常处理函数的目的：获取当前的eip，修改寄存器的值，修改eip。</p><p>各种opcode的功能：</p><p><img src="https://i.loli.net/2021/02/03/iTCalzSyQhYwrvV.png" alt="image-20210202204604400"></p><p><img src="https://i.loli.net/2021/02/03/fsUpTmPy41KqxXt.png" alt="image-20210202204621359"></p><p>剩下的把相应的触发异常的代码替换为实际的操作，因为加密不复杂，直接看汇编代码分析下就好了。</p><p>首先一个通过指定的index进行一个置换操作，然后典型的移位或加密，最后一个异或。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ind[<span class="number">50</span>], ans[<span class="number">50</span>], tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123;<span class="number">147</span>, <span class="number">139</span>, <span class="number">143</span>, <span class="number">67</span>, <span class="number">18</span>, <span class="number">104</span>, <span class="number">247</span>,</span><br><span class="line"> <span class="number">144</span>, <span class="number">122</span>, <span class="number">75</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">180</span>, <span class="number">33</span>, <span class="number">32</span>, <span class="number">115</span>, <span class="number">141</span>, <span class="number">104</span>,</span><br><span class="line"> <span class="number">203</span>, <span class="number">25</span>, <span class="number">252</span>, <span class="number">248</span>, <span class="number">178</span>, <span class="number">107</span>, <span class="number">196</span>, <span class="number">171</span>, <span class="number">200</span>, <span class="number">155</span>, <span class="number">141</span>, <span class="number">34</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> key[] = <span class="string">"Bier"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp += <span class="number">0x11</span>;</span><br><span class="line">tmp &amp;= <span class="number">0x1f</span>;</span><br><span class="line">ind[i] = tmp;</span><br><span class="line"><span class="comment">//printf("%02x ", tmp);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] ^= key[i&amp;<span class="number">0x3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] ^= enc[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans[<span class="number">0</span>] = (enc[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) | (enc[<span class="number">31</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] = (enc[i] &gt;&gt; <span class="number">3</span>) | (enc[i<span class="number">-1</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%02x ", ans[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[ind[i+<span class="number">1</span>]] = ans[ind[i]];</span><br><span class="line">flag[ind[i]] = ans[ind[i+<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.</span></span><br></pre></td></tr></table></figure><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>拿了二血。</p><p>程序其实利用调用号hook了系统调用r3到r0的转接层，所以从下图中的v11函数指针其实是去执行出题人自己设置的函数。</p><p><img src="https://i.loli.net/2021/02/03/ofAZ4YKhuGjDcR8.png" alt="image-20210202211546712"></p><p>简单跟进行一下v11指向的函数：开始对字符解密得到模块和函数名，就是为了得到函数<strong>NtSetInformationThread</strong>来进行反调试。</p><p><img src="https://i.loli.net/2021/02/03/nph5lyftBDePWmZ.png" alt="image-20210202212312718"></p><p>对于这个反调试之前总结过：</p><p><img src="https://i.loli.net/2021/02/03/MxtYpIG8fNWUDyh.png" alt="image-20210202212558373"></p><p>这里要过它直接patch掉就好了。</p><p>然后就是一些加载dll和函数代码解密相关的操作，做题时节省时间没管，现在还是看看：</p><p><img src="https://i.loli.net/2021/02/03/KdMh8I6VLunaZJC.png" alt="image-20210202213212377"></p><p>使用资源查看工具，找到程序资源中改dll，明显看到是需要进行解密的，也就是后面的操作。</p><p><img src="https://i.loli.net/2021/02/03/t7HSrVNwjb9qZBJ.png" alt="image-20210202213458322"></p><p>继续跟进，看到解密操作只是一个异或：<br><img src="https://i.loli.net/2021/02/03/ysgJIf6lP5uRk1i.png" alt="image-20210202213645891"></p><p>至于后面的操作就是得到相关的函数地址等。</p><p>最后跟到最后的加密函数：字符串就提示了sm4密码，且长度是16，那这个就是key了。sm4密码从常量0xA3B1BAC6也可以识别出来。</p><p><img src="https://i.loli.net/2021/02/03/UFJ7TvwXNgWRxt4.png" alt="image-20210202214023629"></p><p>这里把32的input分2次加密的，每次16位。使用密文解密一下即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = bytes([<span class="number">234</span>,  <span class="number">99</span>,  <span class="number">88</span>, <span class="number">183</span>, <span class="number">140</span>, <span class="number">226</span>, <span class="number">161</span>, <span class="number">233</span>, <span class="number">197</span>,  <span class="number">41</span>, </span><br><span class="line">  <span class="number">143</span>,  <span class="number">83</span>, <span class="number">232</span>,   <span class="number">8</span>,  <span class="number">50</span>,  <span class="number">89</span>, <span class="number">175</span>,  <span class="number">27</span>, <span class="number">103</span>, <span class="number">174</span>, </span><br><span class="line">  <span class="number">217</span>, <span class="number">218</span>, <span class="number">207</span>, <span class="number">196</span>, <span class="number">114</span>, <span class="number">255</span>, <span class="number">177</span>, <span class="number">236</span>, <span class="number">118</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">243</span>, <span class="number">6</span>])</span><br><span class="line">key = <span class="string">b'Ez_5M4_C1pH@r!!!'</span></span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">c1 = bytes_to_long(c[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">c2 = bytes_to_long(c[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line">flag1 = decrypt(c1, key)</span><br><span class="line">flag2 = decrypt(c2, key)</span><br><span class="line">flag = long_to_bytes(flag1)+long_to_bytes(flag2)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#42b061b4cb41cfa89ca78047bde1856e</span></span><br></pre></td></tr></table></figure><h3 id="child-protect"><a href="#child-protect" class="headerlink" title="child_protect"></a>child_protect</h3><p>拿了二血。。</p><p>从题目名字就想到考点可能是程序自我创建反调试，升级一点就是Debug Blocker技术。尝试下了断点，发现不会断下。然后使用</p><p>procexp查看程序：果然，正如题目名字。</p><p><img src="https://i.loli.net/2021/02/03/NFq5Iep92wZAPGv.png" alt="image-20210202222147793"></p><blockquote><p><strong>Debug Blocker技术特点：</strong></p><ul><li><strong>调试器与被调试器关系中，调试进程与被调试进程首先是一种父子关系。</strong></li><li><strong>子进程进程已经被调试，不能在被其他调试器调试</strong></li><li><strong>强制终止调试进程以切断调试器-被调试器关系时，被调试进程也会同时终止。</strong></li><li><strong>父进程操作被子进程的代码</strong></li><li><strong>父进程处理被子进程中发生的异常</strong></li></ul></blockquote><p>来到creatprocess函数的地方看看：首先创建一个互斥体，目的是为了区别当前运行的是子进程还是父进程，进而执行不同的分支。接下来创建了一个进程。<br><img src="https://i.loli.net/2021/02/03/dtHyc9rBTIlAVXu.png" alt="image-20210202222344171"></p><p><img src="https://i.loli.net/2021/02/03/AUKzcsI8Wl6R1Sx.png" alt="image-20210202223940336"></p><p>然后就是子进程与父进程交互的过程：<br><img src="https://i.loli.net/2021/02/03/Gykoqiu7s1fL3Zg.png" alt="image-20210202224313171"></p><p>具体交互过程：可以看到就2个，那我们不用把程序调试起来，直接手动或idapython修改子进程就行了。</p><p><img src="https://i.loli.net/2021/02/03/sFOHkW1pPUYeGQJ.png" alt="image-20210202224637602"></p><p>第一个就当作花指令处理nop掉多余代码，对于第二个：其实就是把函数中的0x8e32cdaa修改为0x73FF8CA6。</p><p><img src="https://i.loli.net/2021/02/03/zM9IE7ajLCnZOJW.png" alt="image-20210202225101786"></p><p>把修复好的代码反编译：</p><p><img src="https://i.loli.net/2021/02/03/mzFKL9OIEYrMt7y.png" alt="image-20210202225507005"></p><p>对于生成的key，因为计算有点繁琐，这里可以直接在程序运行时修改eip到sub_4110B9函数这里，然后当程序执行到后面时直接查看key。</p><p>最后的tea加密，只是多了一个变换字节序的操作，写解密时注意一下：</p><p><img src="https://i.loli.net/2021/02/03/JDPd89soM2nTCh5.png" alt="image-20210202225850439"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123;<span class="number">0xed</span>, <span class="number">0xe9</span>, <span class="number">0x8b</span>, <span class="number">0x3b</span>, <span class="number">0xd2</span>, <span class="number">0x85</span>, <span class="number">0xe7</span>, <span class="number">0xeb</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0xb1</span>, <span class="number">0xdc</span>, <span class="number">0x5d</span>, <span class="number">0x9</span>, <span class="number">0x45</span>, <span class="number">0xae</span>, <span class="number">0xb9</span>, <span class="number">0x15</span>, <span class="number">0x4d</span>, <span class="number">0x8d</span>, <span class="number">0xff</span>, <span class="number">0x50</span>,</span><br><span class="line"> <span class="number">0xde</span>, <span class="number">0xe0</span>, <span class="number">0xbc</span>, <span class="number">0x8b</span>, <span class="number">0x9b</span>, <span class="number">0xbc</span>, <span class="number">0xfe</span>, <span class="number">0xe1</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[] = &#123;<span class="number">0x82ABA3FE</span>, <span class="number">0x0AC1DDCA8</span>, <span class="number">0x87EC6B60</span>, <span class="number">0x0A2394568</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> enc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = enc[i];</span><br><span class="line">enc[i] = enc[<span class="number">3</span>-i];</span><br><span class="line">enc[<span class="number">3</span>-i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v11 = <span class="number">0x73FF8CA6</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">&#123;</span><br><span class="line">swap(enc+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> delat = <span class="number">0xc6ef3720</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>) -= ((*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">3</span>))^(delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))))^((*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">2</span>));</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))) -= ((*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)+<span class="number">1</span>)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">1</span>))^(delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))^((*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">0</span>));</span><br><span class="line">delat += <span class="number">0x61c88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) <span class="comment">//0xc6ef3720</span></span><br><span class="line">&#123;</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc + <span class="number">4</span> * i) ^= v11;</span><br><span class="line">v11 -= <span class="number">0x50FFE544</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">&#123;</span><br><span class="line">swap(enc+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核安全"><a href="#内核安全" class="headerlink" title="内核安全"></a>内核安全</h2><h3 id="easy-kernel"><a href="#easy-kernel" class="headerlink" title="easy_kernel"></a>easy_kernel</h3><p>题目给了一个r3层的程序和一个驱动程序。</p><p>首先r3层程序的情况：红色部分的调用是重点。。</p><p><img src="https://i.loli.net/2021/02/03/diJGIjlXLyp41fr.png" alt="image-20210202231743748"></p><p>然后看看对于驱动文件情况：我们主要关注的就是偏移量为<strong>IRP_MJ_DEVICE_CONTROL</strong>的部分。<br><img src="https://i.loli.net/2021/02/03/QjNn86sM4qOavhE.png" alt="image-20210202232137464"></p><p>进入sub_401270，查看r0层对r3层发出请求的处理：看到0x222000正是r3层程序的值，开始一直以为这里key，正好8个字节，，因为识别了后面的算法为des。</p><p><img src="https://i.loli.net/2021/02/03/Zkvi2DSbAysKo3Y.png" alt="image-20210202232225017"></p><p>后面的des加密很好识别出来，然后开始使用密文和上面以为的key解密，不对，猜测也是。。因为r3层红色地方的调用我没搞清楚的。。</p><p>感觉还是调试起来才能做了，在本地这个驱动服务也没启动起来，然后找了个xp，成功调试起来。首先从des加密结果发现key其实是假flag的前8位且后面还有一个加密操作。才发现这个其实和从r3传过来的参数是对应的，-1这个标志很明显了。。。</p><p><img src="https://i.loli.net/2021/02/03/oDNEmCe5pUcMjr2.png" alt="image-20210202233155105"></p><p>接下来就是看最后的红色代码调用，但只能单步步过，一单步步入就蓝屏😪。。也没心情去找原因。。</p><p>但我猜想这个最后加密肯定是不难的，，开始没注意以为是类似单表加密的，那我可以把0-255的每个加密值找到，再替换一下，试了多组数据后，发现了端倪。。并不是类似单表加密，看了一会了，，发现就是从一位开始一次异或后一位。。hha…</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> des, ECB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">tmp = a[i]</span><br><span class="line">a[i] = a[<span class="number">3</span>-i]</span><br><span class="line">a[<span class="number">3</span>-i] = tmp</span><br><span class="line"><span class="keyword">return</span> a[:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">178</span>, <span class="number">196</span>, <span class="number">134</span>, <span class="number">213</span>,  <span class="number">84</span>, <span class="number">108</span>,  <span class="number">56</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">105</span>, </span><br><span class="line">  <span class="number">212</span>, <span class="number">233</span>,  <span class="number">68</span>,  <span class="number">71</span>,  <span class="number">54</span>,  <span class="number">33</span>, <span class="number">153</span>, <span class="number">145</span>, <span class="number">251</span>,  <span class="number">19</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">216</span>, <span class="number">107</span>, <span class="number">228</span>, <span class="number">128</span>,  <span class="number">18</span>, <span class="number">226</span>,  <span class="number">67</span>,  <span class="number">42</span>,  <span class="number">75</span>, </span><br><span class="line">   <span class="number">73</span>, <span class="number">142</span>]</span><br><span class="line">   </span><br><span class="line"><span class="string">'''  </span></span><br><span class="line"><span class="string">ans = []</span></span><br><span class="line"><span class="string">for i in range(0, 32, 4):</span></span><br><span class="line"><span class="string">ans += swap(enc[i:])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">enc[i] ^= enc[i+<span class="number">1</span>]</span><br><span class="line">enc = bytes(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b'&#125;aglf_T_'</span></span><br><span class="line"></span><br><span class="line">des_obj = des(key, ECB, pad = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">code = des_obj.decrypt(enc)</span><br><span class="line">print(code)</span><br><span class="line"><span class="comment">#flag&#123;WelcOme_to_kerne1_world!&#125;</span></span><br></pre></td></tr></table></figure><p>题虽然是做了，但上面红色部分的调用到底是什么呢。</p><p>经过一番搜索，首先从<strong>call fword ptr</strong>知道了这是个长调用，fword代表6个字节。而要想弄清处这个就要了解windows保护模式中的长调用和调用门，段描述符及段选择子的知识了。</p><p>这里就只简单涉及与本题相关的：</p><blockquote><ul><li><strong>长调用开始是push调用者的CS和返回地址。因为最后返回也是多了操作，所以使用的retf</strong>。</li><li><strong>GDTR 寄存器存放的是GDT（全局描述符表）表的位置和大小，低两字节是gdt表的大小，高四字节是gdt表的地址。</strong></li><li><strong>sgdt指令读取GDTR寄存器的值。</strong></li><li><strong>段选择子是一个16位的描述符，指向了定义该段的段描述符，而我们的长调用也就是使用的段选择子来决定。其中3至15位是一个索引，在GDT表中查找出段描述符；第1，2位为RPL，代表了请求特权的级别，如0，3；第三位为TI，如果为0，查GDT表。如果为1，查LDT表，windows中只用GDT，所以这位都是0。</strong></li><li><strong>调用门描述符，共8字节。高16-31位记录偏移地址的高地址，低0-15位记录偏移地址的低地址。低16-31位即是段选择子。</strong></li></ul></blockquote><p>再来看看调用门，指令格式<strong>CALL CS:EIP</strong>，注：EIP是没有使用的，也就是我们的长调用只看段寄存器CS的值，通过它找到对应的段描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">段寄存器的结构：</span><br><span class="line">WORD Selectot  <span class="comment">//段选择子</span></span><br><span class="line">WORD Attribute  <span class="comment">//属性，段描述符高四字节的第8位开始 到第23位结束</span></span><br><span class="line">DWORD Base   <span class="comment">//基地址</span></span><br><span class="line">DWORD Limit <span class="comment">//界限</span></span><br></pre></td></tr></table></figure><p>直接看题目中的：</p><p><img src="https://i.loli.net/2021/02/03/dmlE6NWgAMcjuOT.png" alt="image-20210203222138750"></p><p> 所以说要发现调用的地方，真正关心的地方是48h。<strong>执行的代码地址 = （门描述符中段选择子所指向的代码段的Base）+（门描述符高四字节的16-31位）+（门描述符低四字节的0-15位）。</strong></p><p>那题目在哪里找这个段描述符表？就是之前看过的DeviceIoControl的地方，那8个字节的数据。</p><p><img src="https://i.loli.net/2021/02/03/LTtVxlOFIEq8MHk.png" alt="image-20210203224418059"></p><p>再把调用代码中的段选择子分解一下（48h），得到3-16位的index：1001b = 9。这正好和r0层看到的一样。</p><p>最后就是从这8字节数据得到长调用函数地址了：</p><p><img src="https://i.loli.net/2021/02/03/aVrpT5UY1i7usmy.png" alt="image-20210203225024841"></p><p>回到r3层验证一下：</p><p><img src="https://i.loli.net/2021/02/03/CTPLONiF39QSxrV.png" alt="image-20210203225120306"></p><h2 id="固件安全"><a href="#固件安全" class="headerlink" title="固件安全"></a>固件安全</h2><h3 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a><strong>NodeMCU</strong></h3><p>50分的值，直接ctrl+f找到flag。。</p><h3 id="STM"><a href="#STM" class="headerlink" title="STM"></a>STM</h3><p>知道了stm文件，而STM32其实是使用了ARM核的MCU。</p><p>这个我们可以用ida分析的，但要设置一下，不然ida也只是把它当成data文件看待。</p><p>首先设置架构：</p><p><img src="https://i.loli.net/2021/02/03/8tCAfWjSNszmL6Y.png" alt="image-20210203000903224"></p><p>编辑选项：</p><p><img src="https://i.loli.net/2021/02/03/9AFywDxIStoTVCM.png" alt="image-20210203004015462"></p><p>然后确定，把加载地址改为：0x08000000。进入后把开始的数据都转化为4字节型数据：</p><p><img src="https://i.loli.net/2021/02/03/gnX8JZ9KfrIiqBw.png" alt="image-20210203002010284"></p><p>双击第二个跳转到指定位置，然后在指定位置上面一些地方把数据转化为代码。可以发现ida左边出现了好几个函数。简单找一下即可看见关键函数，使用idapython按照它的算法逻辑打印出计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">addr = <span class="number">0x08000344</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; <span class="number">0x0800036E</span>:</span><br><span class="line">    flag += chr((get_byte(addr)^<span class="number">0x1e</span>)+<span class="number">3</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#flag&#123;1749ac10-5389-11eb-90c1-001c427bd493&#125;</span></span><br></pre></td></tr></table></figure><h3 id="easy-bios"><a href="#easy-bios" class="headerlink" title="easy_bios"></a>easy_bios</h3><p>首先将bios文件使用模拟器运行起来，从这得到了关键的字符串信息。</p><p><img src="https://i.loli.net/2021/02/03/fc7N3CXovWQD8ed.png" alt="image-20210203004245893"></p><p>尝试使用binwalk提取bios中的文件看看，提取出一个名为840A8的文件。</p><p>用010editor查看，发现了熟悉4D5A和紧跟着的5045，PE文件啊。。</p><p><img src="https://i.loli.net/2021/02/03/aIQTxqshEpv9oOm.png" alt="image-20210203005019542"></p><p>突然想到刚刚得到的关键字符信息，尝试搜索看看，找到了Getflag，其它字符换用unicode形式。突然明朗起来：</p><p><img src="https://i.loli.net/2021/02/03/XCFTuydJxGANan9.png" alt="image-20210203005236702"></p><p>但要注意的是这个文件中很多个PE文件，提取出出现Getflag字符串的PE文件，进行反编译：</p><p>从字符串定位到关键函数：再从Your Input定位到v12是我们的输入。<br><img src="https://i.loli.net/2021/02/03/aJQd1xwo76COHX2.png" alt="image-20210203124346558"></p><p>然后对于rc4加密，我们只关心最后的异或值，程序又运行不起来的，那把整个函数复制到到C编译器中简单修改一下再直接用来异或解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">70</span>, <span class="number">119</span>, <span class="number">116</span>, <span class="number">176</span>, <span class="number">39</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">91</span>, <span class="number">233</span>, <span class="number">216</span>, </span><br><span class="line">  <span class="number">70</span>, <span class="number">156</span>, <span class="number">114</span>, <span class="number">231</span>, <span class="number">47</span>, <span class="number">94</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"OVMF_And_Easy_Bios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v13[<span class="number">514</span>] = &#123;<span class="number">0</span>&#125;, v2, v3, v4, v5, v6, v8;</span><br><span class="line"><span class="keyword">int</span> v7, v9, v10, v11, v12, result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">256</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v13[i] = i;</span><br><span class="line">    v13[i + <span class="number">256</span>] = s[i % <span class="number">18</span>];</span><br><span class="line">  &#125;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v4 = v13[v2];</span><br><span class="line">v3 = (v13[v2 + <span class="number">256</span>] + v4 + v3) % <span class="number">256</span>;</span><br><span class="line">v5 = v13[v3];</span><br><span class="line">v13[v3] = v4;</span><br><span class="line">v13[v2++] = v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v2 != <span class="number">256</span> );</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v8 = (v8 + <span class="number">1</span>);</span><br><span class="line">    v9 = v13[v8];</span><br><span class="line">    v10 = (v9 + v7) % <span class="number">256</span>;</span><br><span class="line">    v11 = v13[v10];</span><br><span class="line">    v13[v10] = v9;</span><br><span class="line">    v7 = (v9 + v7) % <span class="number">256</span>;</span><br><span class="line">    v13[v8] = v11;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v13[(v11 + v13[v10]) % <span class="number">256</span>];</span><br><span class="line">    enc[v6++] ^= result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 != <span class="number">16</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//88baec0b5154f859b5851097bb567f5c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二进制专场，总的来说题目难度不是很大，考点是好的，能学到东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>DJBCTF</title>
    <link href="https://bxb0.github.io/2021/01/26/DJBCTF/"/>
    <id>https://bxb0.github.io/2021/01/26/DJBCTF/</id>
    <published>2021-01-26T03:07:43.000Z</published>
    <updated>2021-04-18T01:19:57.077Z</updated>
    
    <content type="html"><![CDATA[<p>整体感觉Re有点偏杂，有收获，主要是拿了个杯子，hha。。</p><a id="more"></a><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="A-Maze-In"><a href="#A-Maze-In" class="headerlink" title="A-Maze-In"></a>A-Maze-In</h3><p>迷宫题，但是有点特别，就是每个步骤对应的地图不一样。。</p><p><img src="/2021/01/26/DJBCTF/image-20210126111337271-1611648503131.png" alt="image-20210126111337271"></p><p>提取出4个地图后，开始手走了一下，要命。。想到写一个dfs来搜索，这个应该是可行的，但我没有注意好走过的路径标记导致一直陷入了循环，找不解。。</p><p>后面从逆向的角度看，这个虽然正着走麻烦，但是从终点走到起点是每一步都确定的，走那一步看它反方向是不是为1即可。</p><p>因为每一步确定还是比较好走的：<strong>LLDRRDLLLDRDLDDDRRULURRULURRDDDLDR</strong></p><p>赛后对我之前写的dfs，发现主要是每次往回走导致一直陷入一个死胡同，就是走了L然后走R，那每次走之前加了个判断试试。。果然，秒出。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> byte_404018[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v5, <span class="keyword">int</span> v4, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">33</span> ) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v4 == <span class="number">4</span>  &amp;&amp; v5 == <span class="number">7</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"yes: %s\n"</span>, flag);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'L'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">3</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">  &#123; </span><br><span class="line">flag[i] = <span class="string">'R'</span>;</span><br><span class="line">    dfs(i+<span class="number">1</span>, v5, v4+<span class="number">1</span>, <span class="string">'R'</span>);</span><br><span class="line">  &#125; </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'R'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">2</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'L'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>, v5, v4<span class="number">-1</span>, <span class="string">'L'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (ch != <span class="string">'U'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">1</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'D'</span>;</span><br><span class="line"></span><br><span class="line">dfs(i+<span class="number">1</span>, v5+<span class="number">1</span>, v4, <span class="string">'D'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'D'</span> &amp;&amp;  (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; byte_404018[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'U'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>, v5<span class="number">-1</span>, v4, <span class="string">'U'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matara-Okina"><a href="#Matara-Okina" class="headerlink" title="Matara Okina"></a>Matara Okina</h3><p>本来没怎么做过安卓，从这个题学了不少，比赛期间大多数时间都去学安卓了，虽然对解决本题用不上，但由此感觉安卓还是挺好玩的。</p><p>开始拿到题目对下面就有点疑惑：</p><p><img src="/2021/01/26/DJBCTF/image-20210125114031206-1611648521523.png" alt="image-20210125114031206"></p><p>知道是取出secret参数的值经过异或运算后和一个ans字符串比较一下。那就先求出来看看：<strong>Android_scheme_is_FUN</strong></p><p>开始以为这就是flag，结果不是，仔细看到是把这个字符串传入一个native层的check的函数的，通过一些运算显示出来。。其次看到scheme，加上之前的uri，突然明白了。。再到Mainifest看看，果然：</p><p><img src="/2021/01/26/DJBCTF/image-20210125114541846-1611648525744.png" alt="image-20210125114541846"></p><p>就类似我们点击一个链接打开app一样，自己写一个网页链接让手机点一下就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sh0w://p4th/70/1nput?secret=Android_scheme_is_FUN"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UnrealFlag"><a href="#UnrealFlag" class="headerlink" title="UnrealFlag"></a>UnrealFlag</h3><p>对于这个题，其实就是一个解密一个游戏中加密的数据，挺实战的，比赛时没做，也是信息搜索能力没到位，知道要解密pak文件但是google，baidu了半天都没找到一个合适的文章。这个文章赛后看到的，很清晰且全：<a href="https://blog.jamie.holdings/2019/03/23/reverse-engineering-aes-keys-from-unreal-engine-4-projects/" target="_blank" rel="noopener">Reverse Engineering AES Keys From Unreal Engine 4 Projects</a></p><p>前期准备就是下载要解密文件对应游戏使用的虚幻引擎版本，这里4.26。</p><p>然后找到要解密文件使用的key，最后使用下载引擎中提供的Urealpak.exe解密即可。</p><p>开始找key:</p><p>找到安装引擎目录的：<strong>D:\Epic Games\UE_4.26\Engine\Source\Runtime\PakFile\Private\IPlatformFilePak.cpp</strong>文件，查看代码，虽然这个引擎版本可能会有一定的区别，但都是DecryptData下手：第三个参数即是。</p><p><img src="/2021/01/26/DJBCTF/image-20210126140813667-1611648530624.png" alt="image-20210126140813667">)当为了在调试的时候好定位到上面这个函数，我们一般的方法是找到调用它的地方，直到有错误字符串信息出现（方便我们定位）。找引用的时候可能出现很多函数调用它的情况，但一般以LoadIndex()函数为最上层的函数，至于原因，上面文章有提到：</p><p><img src="/2021/01/26/DJBCTF/image-20210126140646329-1611648534391.png" alt="image-20210126140646329"></p><p>一直向上回溯找到了第一次出现字符串的地方，x64搜索看看，有的。</p><p><img src="/2021/01/26/DJBCTF/image-20210126142130832-1611648537839.png" alt="image-20210126142130832"></p><p>然后在x64中看的时候，源代码与其反汇编的结果并不是一一对应的，有可能一个函数是内联函数和反汇编结果是对一个函数进行了展开。这里就是：</p><p>首先看定位到字符串那一部分的源代码：</p><p><img src="/2021/01/26/DJBCTF/image-20210126151157572-1611648541083.png" alt="image-20210126151157572"></p><p>然后x64中的情况：</p><p><img src="/2021/01/26/DJBCTF/image-20210126151408840-1611648544164.png" alt="image-20210126151408840"></p><p>所以这里直接跟进我下断点的函数，然后从源代码可知，最后可从第三个参数获取key的函数在最后一个，但我们在x64中看到的是编译后的结果，一般编译器都会在初始和末尾添加一些检查函数的，这里大概猜一下，先在倒数第二个函数处下断然后看r8寄存器的值，如果不行继续换别的就是，反正范围就这么几个函数。</p><p>成功得到key，从hex转化为base64就好了。</p><p><img src="/2021/01/26/DJBCTF/image-20210126152347350-1611648547783.png" alt="image-20210126152347350"></p><p>最后：UnrealPak.exe accepts a “crypto.json” parameter. You will want to create this file somewhere and add the following，即创建一个和下面类似的文件，把找到的key写入指定位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$types"</span>: &#123;</span><br><span class="line">    <span class="attr">"UnrealBuildTool.EncryptionAndSigning+CryptoSettings, UnrealBuildTool, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"UnrealBuildTool.EncryptionAndSigning+EncryptionKey, UnrealBuildTool, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null"</span>: <span class="string">"2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"$type"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"EncryptionKey"</span>: &#123;</span><br><span class="line">    <span class="attr">"$type"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"Name"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Guid"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Key"</span>: <span class="string">"uZFnisGm9AFdQ2hGBMRKm38+LAShgkbEMJOn8bv/arc="</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"SigningKey"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"bEnablePakSigning"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bEnablePakIndexEncryption"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bEnablePakIniEncryption"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bEnablePakUAssetEncryption"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bEnablePakFullAssetEncryption"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bDataCryptoRequired"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"SecondaryEncryptionKeys"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来用指定格式的command解密：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"D:<span class="symbol">\E</span>pic Games"<span class="symbol">\U</span>E_4.26<span class="symbol">\E</span>ngine<span class="symbol">\B</span>inaries<span class="symbol">\W</span>in64<span class="symbol">\U</span>nrealpak.exe FindFlag-WindowsNoEditor.pak -Extract C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>1480<span class="symbol">\D</span>esktop<span class="symbol">\s</span>ss<span class="symbol">\ </span>-cryptokeys=C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>1480<span class="symbol">\D</span>esktop<span class="symbol">\s</span>ss<span class="symbol">\c</span>rypto.json</span><br></pre></td></tr></table></figure><p>一般解密游戏中的数据就是各种模型，flag也应该也是一个类似的模型文件，使用umodel打文件<strong>flag.uasset</strong>，再转化成png保存就好了。</p><p><img src="/2021/01/26/DJBCTF/image-20210126160135944-1611648556272.png" alt="image-20210126160135944"></p><h3 id="anniu"><a href="#anniu" class="headerlink" title="anniu"></a>anniu</h3><p>开始就知道要让灰色按钮可用，找了enablewindow函数，但是不行，然后这个是易语言写的程序和以往做的有点不一样。。找按钮事件又没找到？。。奇怪。</p><p>最后直接OD从开始跟踪程序创建窗口的过程。其实就是很多个子窗口叠加的。从创建flag按钮的creatwindowsex找到了端倪，我才知道可以创建窗口的时候让控件不可用。。</p><p>其中的WS_DISABLED从VS查到了是0x08000000，所以我把整个值改为0x44012F00即可。</p><p><img src="/2021/01/26/DJBCTF/image-20210125115444155-1611648561584.png" alt="image-20210125115444155"></p><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>就一个数独游戏，开始判断是不是每列每行的数都各不相同，然后判断每4*4的单元是不是每个数各不相同，典型的数独特征。</p><p>直接找个在线求解一下即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[] = &#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">9</span>, </span><br><span class="line"><span class="number">14</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]<span class="number">-1</span> &gt;= <span class="number">10</span>)</span><br><span class="line"><span class="built_in">putchar</span>(flag[i]<span class="number">-1</span>+<span class="number">87</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">putchar</span>(flag[i]<span class="number">-1</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><p>应该类似主程序装载一个文件，然后关键函数都在那个.so文件，所以动态跟踪就好了，很简单，找到输入的地方后下个断点，一会就来到的一个比较函数，虽然去了符号，但还是能猜到就是类似strcmp()函数，输入和目标字符比较。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整体感觉Re有点偏杂，有收获，主要是拿了个杯子，hha。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>starctf2021</title>
    <link href="https://bxb0.github.io/2021/01/17/starctf2021/"/>
    <id>https://bxb0.github.io/2021/01/17/starctf2021/</id>
    <published>2021-01-17T03:58:05.000Z</published>
    <updated>2022-01-20T08:53:48.821Z</updated>
    
    <content type="html"><![CDATA[<p>学到了使用sage在一个有限域内求一个矩阵的逆矩阵，也就是hill加密。</p><p>其次是对写dfs更熟悉了，且对python3读写文件“wb”与“w”模式理解的更加深入。</p><p>最后就是多线程爆破体验极好😂。</p><a id="more"></a><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>开始关键点都没找到，运行了一下程序从报错信息经过搜索知道了这是个rust写程序，且这个错误信息是编写的时候可以定义的，从这也顺藤摸瓜的知道了报错是因为没有flag文件。</p><p>程序首先读取flag文件取数据，经过加密后写入output文件。</p><p><img src="/2021/01/17/starctf2021/image-20210127134521754-1611759746138.png" alt="image-20210127134521754"></p><p>然后简单分析一下，逻辑什么的很清楚，按照一定的顺序对每一位进行异或加密，但是那个异或的值是随机的，通过前面的数据来初始化的数据流。是一种流密码，但这里想了很久但是不知道怎么逆，后面想到按照题目加密的顺序一位一位的穷举肯定可以，，但是工程量就有点大了。。</p><p>最后才想到了python脚本，花了点时间，也改了很多，还有就是这个存在多对一的情况，所以要搜索。。</p><p>其次开始怎么也跑不出来，后面调试才发现，程序每次读取的字符都加了回车（’\0xa’），这就导致长度增加，而加密是用到了长度的。。然后就是为什么呢？</p><p>最后大量尝试搜索才发现，因为我开始是往flag文件手动输入的，然后脚本里也是先读取flag文件，这就导致开始就多了和一个’\0xa’，而后在写入也是同样有‘\0xa’。其次python2的‘rb’与‘r’模式读取都是str类型，而python3的‘rb’是byte, ‘r’才是str类型。且python若是‘wb’写入那写入数据必须是byte类型，而python2就都可以。</p><p>这里执行程序，有3种办法：</p><ul><li>os.system(‘./a’) 这里建议使用这个。</li><li>使用Popen() <a href="https://blog.csdn.net/super_he_pi/article/details/99713374" target="_blank" rel="noopener">python 中subprocess.Popen(）详解</a></li><li>pexpect 如果有交互的话，推荐使用。</li></ul><p>10s就得到了结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">startTime = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output_flag"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">enc = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">index = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">42</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">31</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">40</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">36</span>, <span class="number">43</span>]</span><br><span class="line">base = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_=-~!.@#%^&amp;*()"</span></span><br><span class="line">result = [<span class="string">'1'</span>]*<span class="number">46</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">45</span>:</span><br><span class="line">print(<span class="string">'find one:'</span> + <span class="string">''</span>.join(result))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> base:</span><br><span class="line">result[index[i]] = ch</span><br><span class="line">flag = <span class="string">''</span>.join(result)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(flag.encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#r = pexpect.spawn('./a')</span></span><br><span class="line"><span class="comment">#r.wait()</span></span><br><span class="line">os.system(<span class="string">'./a'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'output'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">ans = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">if</span> ans[index[i]] == enc[index[i]]:</span><br><span class="line">    print(flag)</span><br><span class="line">    dfs(i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line">endTime = datetime.datetime.now()</span><br><span class="line">print(<span class="string">"运行的时间是：%ss"</span> % (endTime - startTime).seconds)</span><br></pre></td></tr></table></figure><h3 id="ChineseGame"><a href="#ChineseGame" class="headerlink" title="ChineseGame"></a>ChineseGame</h3><p>读懂游戏怎么玩的后，手动弄了几个数据然后总结规律。</p><p>一个长度为10的链表，最后把所有的数据域都变成大于100。</p><p><img src="/2021/01/17/starctf2021/image-20210127135918158-1611759760723.png" alt="image-20210127135918158"></p><p>就是不断累加套上去就是了。</p><p>赛后看大家很多都是发现了只要那个数据域是0就像向上，1的话就向下，直接paython脚本，真是好。。。</p><h3 id="wherekey"><a href="#wherekey" class="headerlink" title="wherekey"></a>wherekey</h3><p>就是这个题因为z3没有解，以为我哪里弄错了郁闷半天，最后也没有把题目做出来。</p><p>由矩阵的乘法可知，这里算法实际就是用一个固定的5*5矩阵去乘flag组成的5*5矩阵，但是每次都mod了257，所以在一个有限域内。</p><p>然后其实可以爆破的，我看爆破的人也挺多的，hhha。。</p><p>这里我算了一下，如果常规写5个for循环爆破时间不会少的。。</p><p>但是用pwntools的多线程爆破，最多2个多小时就搞定了，也还是可以的。hhh。<a href="https://happi0.gitee.io/happi0/2020/12/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84python/#toc-heading-3" target="_blank" rel="noopener">Crypto常用工具</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> pwnlib</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">base = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_=-~!.@#%^&amp;*()"</span></span><br><span class="line">enc = [<span class="number">56</span>, <span class="number">109</span>,  <span class="number">75</span>,  <span class="number">75</span>, <span class="number">185</span>, <span class="number">138</span>, <span class="number">249</span>, <span class="number">138</span>, <span class="number">187</span>,  <span class="number">92</span>, </span><br><span class="line">  <span class="number">138</span>, <span class="number">154</span>, <span class="number">186</span>, <span class="number">107</span>, <span class="number">210</span>, <span class="number">198</span>, <span class="number">187</span>,   <span class="number">5</span>, <span class="number">144</span>,  <span class="number">86</span>, </span><br><span class="line">  <span class="number">147</span>, <span class="number">230</span>,  <span class="number">18</span>, <span class="number">189</span>,  <span class="number">79</span>]</span><br><span class="line">b = <span class="string">"flag&#123;are_you_sure_friend&#125;"</span></span><br><span class="line">b = list(map(ord, b))</span><br><span class="line">enc = enc[<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(a)</span>:</span></span><br><span class="line">a = list(map(ord, a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="comment">#a = list(map(ord, a)) 很无脑的错误，不能放在这里的原因:因为如果已经转换了一次了，那就已经是int型，下一次转换就出错了。</span></span><br><span class="line"><span class="keyword">if</span> ((a[<span class="number">0</span>]*b[i] + a[<span class="number">1</span>]*b[<span class="number">5</span>+i] + a[<span class="number">2</span>]*b[<span class="number">10</span>+i] + a[<span class="number">3</span>]*b[<span class="number">15</span>+i] + a[<span class="number">4</span>]*b[<span class="number">20</span>+i])%<span class="number">257</span>) != enc[i]:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ans = mbruteforce(check, base, <span class="number">5</span>, method=<span class="string">'fixed'</span>)</span><br></pre></td></tr></table></figure><p>最后贴一下官方放的使用sage求解，也就是带余的矩阵乘法和逆矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = Matrix(GF(<span class="number">257</span>),[[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>], [<span class="number">97</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">121</span>], [<span class="number">111</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">117</span>], [<span class="number">114</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">114</span>], [<span class="number">105</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">125</span>]])</span><br><span class="line"></span><br><span class="line">encode =  Matrix(GF(<span class="number">257</span>),[[<span class="number">56</span>, <span class="number">109</span>, <span class="number">75</span>,<span class="number">75</span>,<span class="number">185</span>], [<span class="number">138</span> ,<span class="number">249</span>, <span class="number">138</span>, <span class="number">187</span>,  <span class="number">92</span>],[<span class="number">138</span>, <span class="number">154</span> ,<span class="number">186</span>, <span class="number">107</span>, <span class="number">210</span>],[<span class="number">198</span>, <span class="number">187</span>,   <span class="number">5</span>, <span class="number">144</span>,  <span class="number">86</span>],[<span class="number">147</span>, <span class="number">230</span>,  <span class="number">18</span>, <span class="number">189</span>,  <span class="number">79</span>]])</span><br><span class="line"></span><br><span class="line">flag = encode*A.inverse()</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>这个找个在线网站解一下就好：<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">sage在线求解</a></p><p><img src="/2021/01/17/starctf2021/image-20210127153009965-1611759765185.png" alt="image-20210127153009965"></p><h3 id="Favourite-Architecture-flag0"><a href="#Favourite-Architecture-flag0" class="headerlink" title="Favourite Architecture flag0"></a>Favourite Architecture flag0</h3><p>有ghidra9.2就很简单了，查查riscv相关的指令，实在不好理解的方式调试也行。</p><p>前半段流加密，只要最后得到最后的异或值就好了。后半段一个tea加密。</p><p>这里贴下tea吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key[] = &#123;<span class="number">0xbb</span>, <span class="number">0xa0</span>, <span class="number">0x68</span>, <span class="number">0x13</span>, <span class="number">0x1e</span>, <span class="number">0xce</span>, <span class="number">0x0a</span>, <span class="number">0x19</span></span><br><span class="line">, <span class="number">0x57</span>, <span class="number">0xa3</span>, <span class="number">0xd8</span>, <span class="number">0x35</span>, <span class="number">0x61</span>, <span class="number">0x2c</span>, <span class="number">0xbf</span>, <span class="number">0x26</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">0xf9</span>, <span class="number">0x87</span>, <span class="number">0x50</span>, <span class="number">0xc4</span>, <span class="number">0xb2</span>, <span class="number">0xf2</span>, <span class="number">0x03</span>, <span class="number">0x07</span></span><br><span class="line">, <span class="number">0x3c</span>, <span class="number">0xf4</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x59</span>, <span class="number">0xbb</span>, <span class="number">0xb4</span>, <span class="number">0xed</span></span><br><span class="line">, <span class="number">0x2a</span>, <span class="number">0xb0</span>, <span class="number">0xf0</span>, <span class="number">0x0f</span>, <span class="number">0xf2</span>, <span class="number">0x20</span>, <span class="number">0x85</span>, <span class="number">0x00</span></span><br><span class="line">, <span class="number">0xdd</span>, <span class="number">0x23</span>, <span class="number">0xcd</span>, <span class="number">0xfd</span>, <span class="number">0x75</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0x35</span></span><br><span class="line">, <span class="number">0xd3</span>, <span class="number">0xb6</span>, <span class="number">0xd7</span>, <span class="number">0xf1</span>, <span class="number">0xe1</span>, <span class="number">0x1b</span>, <span class="number">0xf2</span>, <span class="number">0x74</span></span><br><span class="line">, <span class="number">0x12</span>, <span class="number">0xbf</span>, <span class="number">0x2d</span>, <span class="number">0xcb</span>, <span class="number">0xf6</span>, <span class="number">0x53</span>, <span class="number">0xb4</span>, <span class="number">0xa4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(*((unsigned int *)(enc+8*i)) &gt;&gt; 5)+*((unsigned int *)key+3)^delat+*((unsigned int *)(enc+8*i))*(*((unsigned int *)(enc+8*i)))^0x10+*((unsigned int *)key+2)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> delat = <span class="number">3816266640</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>) -= (*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">3</span>)^delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))^(*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">2</span>);</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))) -= (*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)+<span class="number">1</span>)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">1</span>)^delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>)^(*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">0</span>);</span><br><span class="line">delat += <span class="number">0x61c88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学到了使用sage在一个有限域内求一个矩阵的逆矩阵，也就是hill加密。&lt;/p&gt;
&lt;p&gt;其次是对写dfs更熟悉了，且对python3读写文件“wb”与“w”模式理解的更加深入。&lt;/p&gt;
&lt;p&gt;最后就是多线程爆破体验极好😂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>第六届上海市大学生网络安全大赛</title>
    <link href="https://bxb0.github.io/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://bxb0.github.io/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2020-11-15T14:40:50.000Z</published>
    <updated>2021-04-18T01:27:05.360Z</updated>
    
    <content type="html"><![CDATA[<p>2个虚拟机类型的题目。很高兴进了线下，队伍最后第2名/。<a id="more"></a></p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/909254_NE362J9P4YSEMAR.png" alt="909254_NE362J9P4YSEMAR"></p><h3 id="真正的Babyre"><a href="#真正的Babyre" class="headerlink" title="真正的Babyre"></a>真正的Babyre</h3><p>ida开始直接搜索字符串，找到关键函数，简单修复一下栈指针，直接F5。</p><p>开始总感觉自己看到的是假的流程，把程序翻了个遍，没发现其它的流程，但是发现了几个反调试，但是调试发现程序都没有使用。。。其中二个：</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201115110658656-1605414968987.png" alt="image-20201115110658656"></p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114231613090-1605451277739.png" alt="image-20201114231613090"></p><p>然后确定这就是一个虚拟机逆向。静态分析一下后直接让程序跑起来。</p><p>这里我做的时候和复现的时候，ida识别的竟然不一样，复现分析的更简洁。记得做的时候，每次赋值操作码与数据的时候是使用一个四字节数据来保存的，其中L0BYTE，Byte1，Byte2，HIByte都是不同的含义：</p><p>做的时候的一些笔记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试flag。</span></span><br><span class="line">flag&#123;<span class="number">0123456789012345678901234567890</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后比较的数据。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">31</span>,  <span class="number">24</span>,  <span class="number">15</span>, <span class="number">250</span>, <span class="number">184</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">137</span>,  <span class="number">24</span>, <span class="number">104</span>, </span><br><span class="line">  <span class="number">124</span>,  <span class="number">25</span>,  <span class="number">20</span>,  <span class="number">45</span>, <span class="number">125</span>,  <span class="number">88</span>,   <span class="number">0</span>,  <span class="number">30</span>,  <span class="number">84</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">60</span>,  <span class="number">54</span>,  <span class="number">62</span>,  <span class="number">86</span>,  <span class="number">19</span>,   <span class="number">4</span>,  <span class="number">59</span>,  <span class="number">46</span>,  <span class="number">75</span>, </span><br><span class="line">  <span class="number">121</span>,  <span class="number">67</span>, <span class="number">122</span>,  <span class="number">34</span>,  <span class="number">69</span>, <span class="number">110</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">38</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">192</span>, <span class="number">142</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOBYTE：%<span class="number">64</span> index</span><br><span class="line">BYTE2: 开始与LOBYTE值相同，做运算完的赋值index</span><br><span class="line">BYTE1: xor input[]  opcode: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>：BYTE1 &amp;= LOBYTE;</span><br></pre></td></tr></table></figure><p>然后程序中使用了的一个反调试（时钟检测）：简单patch了即可。</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201115001246130-1605451277740.png" alt="image-20201115001246130"></p><p>乍一看程序流程有点复杂，感觉输入的数据会应该下一步操作码，这个其实就是一个加密操作。</p><p>总结一下程序的加密操作（对所有字符串的加密都是这个操作）：首先从操作码中取出一个数据<strong>op_data</strong> ，然后temp  = input[i]^op_data，再让op_data &amp;= input[i]，input[i] = temp，一直这个循环直到op_data == 0，最后取出input[i+1]进行input[i] ^= input[i+1]。一直这样对所有的input加密2遍，就是使用op_data不同。</p><p>使用ida_python导出我们要用的op_data。</p><p>按照程序的算法，逆二次即可：第一次解密过程我进行了注释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">31</span>,  <span class="number">24</span>,  <span class="number">15</span>, <span class="number">250</span>, <span class="number">184</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">137</span>,  <span class="number">24</span>, <span class="number">104</span>, </span><br><span class="line">  <span class="number">124</span>,  <span class="number">25</span>,  <span class="number">20</span>,  <span class="number">45</span>, <span class="number">125</span>,  <span class="number">88</span>,   <span class="number">0</span>,  <span class="number">30</span>,  <span class="number">84</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">60</span>,  <span class="number">54</span>,  <span class="number">62</span>,  <span class="number">86</span>,  <span class="number">19</span>,   <span class="number">4</span>,  <span class="number">59</span>,  <span class="number">46</span>,  <span class="number">75</span>, </span><br><span class="line">  <span class="number">121</span>,  <span class="number">67</span>, <span class="number">122</span>,  <span class="number">34</span>,  <span class="number">69</span>, <span class="number">110</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">38</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">192</span>, <span class="number">142</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a1[] = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">10</span>,</span><br><span class="line"> <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">9</span>,</span><br><span class="line">  <span class="number">14</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[] = &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">12</span>,</span><br><span class="line">   <span class="number">13</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>,</span><br><span class="line"> <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">10</span>&#125;;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c[] = &#123;<span class="number">3</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">95</span>, <span class="number">11</span>, <span class="number">116</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">113</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">85</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">94</span>, <span class="number">2</span>, <span class="number">72</span>, <span class="number">105</span>, <span class="number">91</span>, <span class="number">86</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">84</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">94</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">88</span>, <span class="number">123</span>, <span class="number">65</span>, <span class="number">135</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*int i = 0, j = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ida_chars[41] = 135;</span></span><br><span class="line"><span class="comment">for(j = 40; j &gt;= 0; j--)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ida_chars[j] ^= ida_chars[j+1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 255; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">unsigned char temp = i, temp1 = i;</span></span><br><span class="line"><span class="comment">unsigned char a = b[j];</span></span><br><span class="line"><span class="comment">while(1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">temp1 ^= a;</span></span><br><span class="line"><span class="comment">a &amp;= temp;</span></span><br><span class="line"><span class="comment">a *= 2;</span></span><br><span class="line"><span class="comment">temp = temp1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(a == 0)</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(temp == ida_chars[j])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ida_chars[j] = i;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 42; i++)</span></span><br><span class="line"><span class="comment">printf("%d, ", ida_chars[i]);*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c[<span class="number">41</span>] = <span class="number">125</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">40</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">c[j] ^= c[j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp = i, temp1 = i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a = a1[j];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp1 ^= a;</span><br><span class="line">a &amp;= temp;</span><br><span class="line">a *= <span class="number">2</span>;</span><br><span class="line">temp = temp1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp == c[j])</span><br><span class="line">&#123;</span><br><span class="line">c[j] = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;e1750505-7a05-4de9-a333-72ec8cd26a78&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ctfvm"><a href="#ctfvm" class="headerlink" title="ctfvm"></a>ctfvm</h3><p>从题目名字可知道是虚拟机逆向。在linux中运行一下，看见字符串信息。</p><p>ida中搜索一圈并没有发现任何相关字符串，那就是程序运行时解密出相关字符串。从入口点找到main函数，可以看到464行的代码，分支极其多。。<img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114224414324-1605451277740.png" alt="image-20201114224414324"></p><p>静态分析是不可能了，直接动调。</p><p>开始慢慢的调试看哪里解密字符串的，但实在是冗长，直接在while循环下断，然后F9一直跑，直到程序等待我们输入。</p><p>随便输入后，开始慢慢跟进熟悉一些函数的功能，发现开始就是在以此取我们输入的字符存入一个大数组中</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114225040904-1605451277740.png" alt="image-20201114225040904"></p><p>继续跟踪，分析到我们输入的字符长度要是38，虽然读取了最后的回车符，但是没有使用的。</p><p>其中程序中这个内存区域类似就是vm使用的寄存器。</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114230655880-1605451277741.png" alt="image-20201114230655880"></p><p>接下来判断我们输入最后一位是不是 ‘}‘ 字符，再把除了flag{ }中的内容复制到与程序最后做比较的字符串的下面，</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114230109551-1605451277741.png" alt="image-20201114230109551"></p><p>接着判断我们开始的5位是不是 flag{。</p><p>最后就是以此取出我们flag{}中每一位，<code>(0xFB*input[i])&amp;0xff</code>，然后以此与上面的比较字符串比较。解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = &#123;<span class="number">237</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">6</span>, <span class="number">237</span>, <span class="number">11</span>, <span class="number">247</span>, <span class="number">247</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">237</span>, <span class="number">27</span>, <span class="number">12</span>, <span class="number">252</span>, <span class="number">232</span>, <span class="number">12</span>, <span class="number">242</span>, <span class="number">22</span>, <span class="number">247</span>, <span class="number">2</span>, <span class="number">242</span>, <span class="number">17</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">247</span>, <span class="number">252</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((i*<span class="number">0xFB</span>)&amp;<span class="number">0xff</span>) == a[j])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;72c149827155b27ad48d6b5f6c99fd54&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2个虚拟机类型的题目。很高兴进了线下，队伍最后第2名/。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>第九届全国电信和互联网行业网络安全管理技能竞赛</title>
    <link href="https://bxb0.github.io/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/"/>
    <id>https://bxb0.github.io/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/</id>
    <published>2020-11-07T08:34:10.000Z</published>
    <updated>2021-12-16T17:01:25.432Z</updated>
    
    <content type="html"><![CDATA[<p>在最后10分钟拿到这个题的二血，hhh。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h3><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/image-20201106230503034.png" alt="image-20201106230503034"></p><p>从文件名字及程序中的字符串：<strong>runtime~</strong>可以知道这是一个go语言写的程序，然后使用IDAGolangHelper脚本还原程序的符号表。这下从函数名称可以极大的减少工作量。</p><p>找到main函数，简单分析一下可以知道这是一个虚拟机类型的题目：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/image-20201106210626460-1604738087809.png" alt="image-20201106210626460"></p><p>提取出opcode表：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/2.png" alt="image-20201106210922720"></p><p>知道了操作码的功能，从7的数据个数可以知道我们要输入的字符长度是24，<strong>5 ~</strong>其实就是一个取下个数据值。然后对于code = 4,，1*1的操作虽然值没改变但其实在改变取数据index。而对于操作码5 1 4算是多余的类似花指令吧。如果对这个十分熟悉之后可以直接根据opcode和密文逆向flag的，但我还是调试单步调试来做的：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/3.png" alt="image-20201106212942973"></p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/4.png" alt="image-20201106212508124"></p><p>整理了前面几个字符的笔记：后面还有对数据乘法加法的操作，直接调试着走就是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input[<span class="number">0</span>],input[<span class="number">1</span>] = -input[<span class="number">1</span>], input[<span class="number">2</span>] = -input[<span class="number">2</span>], input[<span class="number">3</span>]*input[<span class="number">4</span>]*input[<span class="number">5</span>],</span><br><span class="line">f,l,a,g,&#123;I</span><br><span class="line">从开始的几个字符操作调试得出结果flag&#123;,又从input[<span class="number">3</span>]*input[<span class="number">4</span>]*input[<span class="number">5</span>] == E1CA5h, 算出input[<span class="number">5</span>] = <span class="string">'I'</span></span><br></pre></td></tr></table></figure><p>这里有一个小技巧：调试时每次输入一个递增的数据，这样还在调试的dump窗口看我们的数据有没有变化。</p><p>最后调试完一遍得到flag：<strong>flag{I_am_the_last_one}</strong></p><p>赛后我也直接根据操作码走了一遍程序的流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">1635</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line"> <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2222</span>, <span class="number">8</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment">//7:input, 2:-, 3:+, 4:*</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在最后10分钟拿到这个题的二血，hhh。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://Bxb0.github.io/categories/CTF/"/>
    
    
  </entry>
  
</feed>
